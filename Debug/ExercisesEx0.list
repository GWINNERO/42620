
ExercisesEx0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f14  08003f14  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003f14  08003f14  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f14  08003f14  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f14  08003f14  00013f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000090  08003fac  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08003fac  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f006  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002874  00000000  00000000  0002f0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00031940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  00032160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004da7  00000000  00000000  00032850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5a8  00000000  00000000  000375f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a8c6  00000000  00000000  00041b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009c465  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002970  00000000  00000000  0009c4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a64 	.word	0x08003a64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08003a64 	.word	0x08003a64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000280:	b480      	push	{r7}
 8000282:	b08b      	sub	sp, #44	; 0x2c
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
 800028c:	2300      	movs	r3, #0
 800028e:	61fb      	str	r3, [r7, #28]
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002a8:	4b91      	ldr	r3, [pc, #580]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f003 030c 	and.w	r3, r3, #12
 80002b0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	2b08      	cmp	r3, #8
 80002b6:	d011      	beq.n	80002dc <RCC_GetClocksFreq+0x5c>
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	2b08      	cmp	r3, #8
 80002bc:	d837      	bhi.n	800032e <RCC_GetClocksFreq+0xae>
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d003      	beq.n	80002cc <RCC_GetClocksFreq+0x4c>
 80002c4:	6a3b      	ldr	r3, [r7, #32]
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d004      	beq.n	80002d4 <RCC_GetClocksFreq+0x54>
 80002ca:	e030      	b.n	800032e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a89      	ldr	r2, [pc, #548]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d0:	601a      	str	r2, [r3, #0]
      break;
 80002d2:	e030      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a87      	ldr	r2, [pc, #540]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d8:	601a      	str	r2, [r3, #0]
      break;
 80002da:	e02c      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002dc:	4b84      	ldr	r3, [pc, #528]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002e4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002e6:	4b82      	ldr	r3, [pc, #520]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ee:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	0c9b      	lsrs	r3, r3, #18
 80002f4:	3302      	adds	r3, #2
 80002f6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d105      	bne.n	800030a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	4a7d      	ldr	r2, [pc, #500]	; (80004f8 <RCC_GetClocksFreq+0x278>)
 8000302:	fb02 f303 	mul.w	r3, r2, r3
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
 8000308:	e00d      	b.n	8000326 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800030a:	4b79      	ldr	r3, [pc, #484]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 800030c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3301      	adds	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000316:	4a77      	ldr	r2, [pc, #476]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	fbb2 f2f3 	udiv	r2, r2, r3
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800032a:	601a      	str	r2, [r3, #0]
      break;
 800032c:	e003      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a70      	ldr	r2, [pc, #448]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000332:	601a      	str	r2, [r3, #0]
      break;
 8000334:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000336:	4b6e      	ldr	r3, [pc, #440]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800033e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	091b      	lsrs	r3, r3, #4
 8000344:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000346:	4a6d      	ldr	r2, [pc, #436]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000348:	6a3b      	ldr	r3, [r7, #32]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	40da      	lsrs	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800035e:	4b64      	ldr	r3, [pc, #400]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000366:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000368:	6a3b      	ldr	r3, [r7, #32]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800036e:	4a63      	ldr	r2, [pc, #396]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b2db      	uxtb	r3, r3
 8000378:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	40da      	lsrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000386:	4b5a      	ldr	r3, [pc, #360]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800038e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000390:	6a3b      	ldr	r3, [r7, #32]
 8000392:	0adb      	lsrs	r3, r3, #11
 8000394:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000396:	4a59      	ldr	r2, [pc, #356]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000398:	6a3b      	ldr	r3, [r7, #32]
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685a      	ldr	r2, [r3, #4]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80003ae:	4b50      	ldr	r3, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003b6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003b8:	6a3b      	ldr	r3, [r7, #32]
 80003ba:	091b      	lsrs	r3, r3, #4
 80003bc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003be:	4a50      	ldr	r2, [pc, #320]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003c0:	6a3b      	ldr	r3, [r7, #32]
 80003c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d006      	beq.n	80003e2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	e003      	b.n	80003ea <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003ea:	4b41      	ldr	r3, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003f2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003f4:	6a3b      	ldr	r3, [r7, #32]
 80003f6:	0a5b      	lsrs	r3, r3, #9
 80003f8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003fa:	4a41      	ldr	r2, [pc, #260]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003fc:	6a3b      	ldr	r3, [r7, #32]
 80003fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000402:	b29b      	uxth	r3, r3
 8000404:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	f003 0310 	and.w	r3, r3, #16
 800040c:	2b00      	cmp	r3, #0
 800040e:	d006      	beq.n	800041e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	fbb2 f2f3 	udiv	r2, r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	e003      	b.n	8000426 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000426:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	f003 0310 	and.w	r3, r3, #16
 800042e:	2b10      	cmp	r3, #16
 8000430:	d003      	beq.n	800043a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a2f      	ldr	r2, [pc, #188]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000436:	619a      	str	r2, [r3, #24]
 8000438:	e003      	b.n	8000442 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000442:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f003 0320 	and.w	r3, r3, #32
 800044a:	2b20      	cmp	r3, #32
 800044c:	d003      	beq.n	8000456 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a28      	ldr	r2, [pc, #160]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000452:	61da      	str	r2, [r3, #28]
 8000454:	e003      	b.n	800045e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800046a:	d10d      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000472:	429a      	cmp	r2, r3
 8000474:	d108      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d104      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	005a      	lsls	r2, r3, #1
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	621a      	str	r2, [r3, #32]
 8000486:	e003      	b.n	8000490 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800049c:	d10d      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d108      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d104      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	005a      	lsls	r2, r3, #1
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
 80004b8:	e003      	b.n	80004c2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d104      	bne.n	80004d8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68da      	ldr	r2, [r3, #12]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	629a      	str	r2, [r3, #40]	; 0x28
 80004d6:	e029      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	f003 0303 	and.w	r3, r3, #3
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10f      	bne.n	8000504 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28
 80004ec:	e01e      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	007a1200 	.word	0x007a1200
 80004f8:	003d0900 	.word	0x003d0900
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000504:	4b66      	ldr	r3, [pc, #408]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	2b02      	cmp	r3, #2
 800050e:	d104      	bne.n	800051a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
 8000518:	e008      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800051a:	4b61      	ldr	r3, [pc, #388]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0303 	and.w	r3, r3, #3
 8000522:	2b03      	cmp	r3, #3
 8000524:	d102      	bne.n	800052c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a5e      	ldr	r2, [pc, #376]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800052c:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000534:	2b00      	cmp	r3, #0
 8000536:	d104      	bne.n	8000542 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000540:	e021      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000542:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800054a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800054e:	d104      	bne.n	800055a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
 8000558:	e015      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800055a:	4b51      	ldr	r3, [pc, #324]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000566:	d104      	bne.n	8000572 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000570:	e009      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800057a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800057e:	d102      	bne.n	8000586 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a48      	ldr	r2, [pc, #288]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000586:	4b46      	ldr	r3, [pc, #280]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d104      	bne.n	800059c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
 800059a:	e021      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800059c:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80005a8:	d104      	bne.n	80005b4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	631a      	str	r2, [r3, #48]	; 0x30
 80005b2:	e015      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005c0:	d104      	bne.n	80005cc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ca:	e009      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005cc:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005d8:	d102      	bne.n	80005e0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a31      	ldr	r2, [pc, #196]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 80005de:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	635a      	str	r2, [r3, #52]	; 0x34
 80005f4:	e021      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000602:	d104      	bne.n	800060e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
 800060c:	e015      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800061a:	d104      	bne.n	8000626 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
 8000624:	e009      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800062e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000632:	d102      	bne.n	800063a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d104      	bne.n	8000650 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800064e:	e021      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800065c:	d104      	bne.n	8000668 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000666:	e015      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000674:	d104      	bne.n	8000680 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800067c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800067e:	e009      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800068c:	d102      	bne.n	8000694 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000694:	bf00      	nop
 8000696:	372c      	adds	r7, #44	; 0x2c
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40021000 	.word	0x40021000
 80006a4:	007a1200 	.word	0x007a1200

080006a8 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	330c      	adds	r3, #12
 80006c0:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	78fa      	ldrb	r2, [r7, #3]
 80006c6:	701a      	strb	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	891b      	ldrh	r3, [r3, #8]
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	4013      	ands	r3, r2
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80006f4:	2301      	movs	r3, #1
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800071e:	b29a      	uxth	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	4613      	mov	r3, r2
 800073c:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	b29b      	uxth	r3, r3
 8000756:	0a1b      	lsrs	r3, r3, #8
 8000758:	b29b      	uxth	r3, r3
 800075a:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000762:	2201      	movs	r2, #1
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d103      	bne.n	800077a <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3304      	adds	r3, #4
 8000776:	61fb      	str	r3, [r7, #28]
 8000778:	e005      	b.n	8000786 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d102      	bne.n	8000786 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	3308      	adds	r3, #8
 8000784:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d006      	beq.n	800079a <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	6819      	ldr	r1, [r3, #0]
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	430a      	orrs	r2, r1
 8000796:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000798:	e006      	b.n	80007a8 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	6819      	ldr	r1, [r3, #0]
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	43da      	mvns	r2, r3
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	400a      	ands	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
}
 80007a8:	bf00      	nop
 80007aa:	3724      	adds	r7, #36	; 0x24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	69da      	ldr	r2, [r3, #28]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	4013      	ands	r3, r2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80007ce:	2301      	movs	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
 80007d2:	e001      	b.n	80007d8 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b087      	sub	sp, #28
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b29b      	uxth	r3, r3
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	b29b      	uxth	r3, r3
 8000808:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000810:	2201      	movs	r2, #1
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d105      	bne.n	800082c <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	4013      	ands	r3, r2
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	e00d      	b.n	8000848 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	2b02      	cmp	r3, #2
 8000830:	d105      	bne.n	800083e <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	4013      	ands	r3, r2
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e004      	b.n	8000848 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	4013      	ands	r3, r2
 8000846:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	0c1b      	lsrs	r3, r3, #16
 800084c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800084e:	2201      	movs	r2, #1
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	4013      	ands	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d005      	beq.n	8000874 <USART_GetITStatus+0x8e>
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800086e:	2301      	movs	r3, #1
 8000870:	74fb      	strb	r3, [r7, #19]
 8000872:	e001      	b.n	8000878 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000878:	7cfb      	ldrb	r3, [r7, #19]
}
 800087a:	4618      	mov	r0, r3
 800087c:	371c      	adds	r7, #28
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	2201      	movs	r2, #1
 800089a:	fa02 f103 	lsl.w	r1, r2, r3
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <NVIC_EnableIRQ+0x30>)
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	095b      	lsrs	r3, r3, #5
 80008a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100

080008bc <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4619      	mov	r1, r3
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <uart_put_char+0x30>)
 80008ce:	f7ff ff1d 	bl	800070c <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80008d2:	bf00      	nop
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <uart_put_char+0x30>)
 80008d8:	f7ff ff6c 	bl	80007b4 <USART_GetFlagStatus>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f8      	beq.n	80008d4 <uart_put_char+0x18>
}
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40004400 	.word	0x40004400

080008f0 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	e012      	b.n	800092a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b0a      	cmp	r3, #10
 800090e:	d102      	bne.n	8000916 <_write_r+0x26>
            uart_put_char('\r');
 8000910:	200d      	movs	r0, #13
 8000912:	f7ff ffd3 	bl	80008bc <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffcc 	bl	80008bc <uart_put_char>
    for (n = 0; n < len; n++) {
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3301      	adds	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	429a      	cmp	r2, r3
 8000930:	dbe8      	blt.n	8000904 <_write_r+0x14>
    }

    return len;
 8000932:	683b      	ldr	r3, [r7, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000940:	4915      	ldr	r1, [pc, #84]	; (8000998 <USART2_IRQHandler+0x5c>)
 8000942:	4816      	ldr	r0, [pc, #88]	; (800099c <USART2_IRQHandler+0x60>)
 8000944:	f7ff ff4f 	bl	80007e6 <USART_GetITStatus>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d021      	beq.n	8000992 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <USART2_IRQHandler+0x60>)
 8000950:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000952:	b299      	uxth	r1, r3
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <USART2_IRQHandler+0x64>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	b2d0      	uxtb	r0, r2
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <USART2_IRQHandler+0x64>)
 8000960:	7010      	strb	r0, [r2, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	b2c9      	uxtb	r1, r1
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <USART2_IRQHandler+0x68>)
 8000968:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <USART2_IRQHandler+0x6c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2bff      	cmp	r3, #255	; 0xff
 8000972:	d107      	bne.n	8000984 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <USART2_IRQHandler+0x70>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <USART2_IRQHandler+0x70>)
 8000980:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000982:	e006      	b.n	8000992 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <USART2_IRQHandler+0x6c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	3301      	adds	r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <USART2_IRQHandler+0x6c>)
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	00050105 	.word	0x00050105
 800099c:	40004400 	.word	0x40004400
 80009a0:	200001ac 	.word	0x200001ac
 80009a4:	200000ac 	.word	0x200000ac
 80009a8:	200001ae 	.word	0x200001ae
 80009ac:	200001ad 	.word	0x200001ad

080009b0 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b094      	sub	sp, #80	; 0x50
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80009b8:	4b86      	ldr	r3, [pc, #536]	; (8000bd4 <uart_init+0x224>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 fe33 	bl	800262c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80009c6:	4b83      	ldr	r3, [pc, #524]	; (8000bd4 <uart_init+0x224>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fe2c 	bl	800262c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80009d4:	4b80      	ldr	r3, [pc, #512]	; (8000bd8 <uart_init+0x228>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	4a7f      	ldr	r2, [pc, #508]	; (8000bd8 <uart_init+0x228>)
 80009da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009de:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80009e0:	4b7d      	ldr	r3, [pc, #500]	; (8000bd8 <uart_init+0x228>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	4a7c      	ldr	r2, [pc, #496]	; (8000bd8 <uart_init+0x228>)
 80009e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ea:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80009ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f0:	6a1b      	ldr	r3, [r3, #32]
 80009f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009fa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 80009fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a0a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000a0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a10:	6a1b      	ldr	r3, [r3, #32]
 8000a12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000a1a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000a1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a20:	6a1b      	ldr	r3, [r3, #32]
 8000a22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a26:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a2a:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000a2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a3a:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a46:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a4a:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000a4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a50:	889b      	ldrh	r3, [r3, #4]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a58:	f023 030c 	bic.w	r3, r3, #12
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000a60:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a68:	8892      	ldrh	r2, [r2, #4]
 8000a6a:	b292      	uxth	r2, r2
 8000a6c:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000a6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a7c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a88:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a8c:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a9c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aa8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000aac:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000aae:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <uart_init+0x22c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a4a      	ldr	r2, [pc, #296]	; (8000bdc <uart_init+0x22c>)
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000aba:	4b48      	ldr	r3, [pc, #288]	; (8000bdc <uart_init+0x22c>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	4a47      	ldr	r2, [pc, #284]	; (8000bdc <uart_init+0x22c>)
 8000ac0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ac4:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000ac6:	4b45      	ldr	r3, [pc, #276]	; (8000bdc <uart_init+0x22c>)
 8000ac8:	4a44      	ldr	r2, [pc, #272]	; (8000bdc <uart_init+0x22c>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000ace:	4b43      	ldr	r3, [pc, #268]	; (8000bdc <uart_init+0x22c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a42      	ldr	r2, [pc, #264]	; (8000bdc <uart_init+0x22c>)
 8000ad4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000ad8:	f023 030c 	bic.w	r3, r3, #12
 8000adc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000ade:	4b3f      	ldr	r3, [pc, #252]	; (8000bdc <uart_init+0x22c>)
 8000ae0:	4a3e      	ldr	r2, [pc, #248]	; (8000bdc <uart_init+0x22c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <uart_init+0x22c>)
 8000ae8:	4a3c      	ldr	r2, [pc, #240]	; (8000bdc <uart_init+0x22c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000aee:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <uart_init+0x22c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a3a      	ldr	r2, [pc, #232]	; (8000bdc <uart_init+0x22c>)
 8000af4:	f043 030c 	orr.w	r3, r3, #12
 8000af8:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000afa:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <uart_init+0x22c>)
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	4a37      	ldr	r2, [pc, #220]	; (8000bdc <uart_init+0x22c>)
 8000b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b04:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000b06:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <uart_init+0x22c>)
 8000b08:	4a34      	ldr	r2, [pc, #208]	; (8000bdc <uart_init+0x22c>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b12:	2300      	movs	r3, #0
 8000b14:	647b      	str	r3, [r7, #68]	; 0x44
 8000b16:	2300      	movs	r3, #0
 8000b18:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fbae 	bl	8000280 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b26:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <uart_init+0x22c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d010      	beq.n	8000b56 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b36:	005a      	lsls	r2, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	fb01 f202 	mul.w	r2, r1, r2
 8000b50:	1a9b      	subs	r3, r3, r2
 8000b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b54:	e00d      	b.n	8000b72 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	fb01 f202 	mul.w	r2, r1, r2
 8000b6e:	1a9b      	subs	r3, r3, r2
 8000b70:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	085b      	lsrs	r3, r3, #1
 8000b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d302      	bcc.n	8000b82 <uart_init+0x1d2>
        divider++;
 8000b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b7e:	3301      	adds	r3, #1
 8000b80:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <uart_init+0x22c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d00b      	beq.n	8000ba6 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b90:	085b      	lsrs	r3, r3, #1
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b9a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <uart_init+0x22c>)
 8000ba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000baa:	b292      	uxth	r2, r2
 8000bac:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <uart_init+0x22c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <uart_init+0x22c>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4908      	ldr	r1, [pc, #32]	; (8000be0 <uart_init+0x230>)
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <uart_init+0x22c>)
 8000bc0:	f7ff fdb6 	bl	8000730 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000bc4:	2026      	movs	r0, #38	; 0x26
 8000bc6:	f7ff fe5f 	bl	8000888 <NVIC_EnableIRQ>
}
 8000bca:	bf00      	nop
 8000bcc:	3750      	adds	r7, #80	; 0x50
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000002c 	.word	0x2000002c
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40004400 	.word	0x40004400
 8000be0:	00050105 	.word	0x00050105

08000be4 <lcd_transmit_byte>:

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <lcd_transmit_byte+0x5c>)
 8000bf0:	8a9b      	ldrh	r3, [r3, #20]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <lcd_transmit_byte+0x5c>)
 8000bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8000bfe:	bf00      	nop
 8000c00:	2102      	movs	r1, #2
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <lcd_transmit_byte+0x60>)
 8000c04:	f7ff fd66 	bl	80006d4 <SPI_I2S_GetFlagStatus>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d1f8      	bne.n	8000c00 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4619      	mov	r1, r3
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <lcd_transmit_byte+0x60>)
 8000c14:	f7ff fd48 	bl	80006a8 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8000c18:	bf00      	nop
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <lcd_transmit_byte+0x60>)
 8000c1e:	f7ff fd59 	bl	80006d4 <SPI_I2S_GetFlagStatus>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d1f8      	bne.n	8000c1a <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <lcd_transmit_byte+0x5c>)
 8000c2a:	8a9b      	ldrh	r3, [r3, #20]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <lcd_transmit_byte+0x5c>)
 8000c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	8293      	strh	r3, [r2, #20]
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	48000400 	.word	0x48000400
 8000c44:	40003800 	.word	0x40003800

08000c48 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    int i = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000c54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c58:	8a9b      	ldrh	r3, [r3, #20]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f7ff ffbb 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000c6e:	2010      	movs	r0, #16
 8000c70:	f7ff ffb8 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 8000c74:	20b0      	movs	r0, #176	; 0xb0
 8000c76:	f7ff ffb5 	bl	8000be4 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000c7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c7e:	8a9b      	ldrh	r3, [r3, #20]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e009      	b.n	8000ca8 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ffa1 	bl	8000be4 <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b7f      	cmp	r3, #127	; 0x7f
 8000cac:	ddf2      	ble.n	8000c94 <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000cae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cb2:	8a9b      	ldrh	r3, [r3, #20]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff ff8e 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000cc8:	2010      	movs	r0, #16
 8000cca:	f7ff ff8b 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 8000cce:	20b1      	movs	r0, #177	; 0xb1
 8000cd0:	f7ff ff88 	bl	8000be4 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000cd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cd8:	8a9b      	ldrh	r3, [r3, #20]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	e009      	b.n	8000d02 <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff74 	bl	8000be4 <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2bff      	cmp	r3, #255	; 0xff
 8000d06:	ddf2      	ble.n	8000cee <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000d08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d0c:	8a9b      	ldrh	r3, [r3, #20]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff ff61 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000d22:	2010      	movs	r0, #16
 8000d24:	f7ff ff5e 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8000d28:	20b2      	movs	r0, #178	; 0xb2
 8000d2a:	f7ff ff5b 	bl	8000be4 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000d2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d32:	8a9b      	ldrh	r3, [r3, #20]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 8000d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e009      	b.n	8000d5e <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff46 	bl	8000be4 <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000d64:	dbf1      	blt.n	8000d4a <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d6a:	8a9b      	ldrh	r3, [r3, #20]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff ff32 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000d80:	2010      	movs	r0, #16
 8000d82:	f7ff ff2f 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 8000d86:	20b3      	movs	r0, #179	; 0xb3
 8000d88:	f7ff ff2c 	bl	8000be4 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000d8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d90:	8a9b      	ldrh	r3, [r3, #20]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 8000da0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	e009      	b.n	8000dbc <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff17 	bl	8000be4 <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dc2:	dbf1      	blt.n	8000da8 <lcd_push_buffer+0x160>
    }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <lcd_reset>:

void lcd_reset()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 8000dd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dda:	8a9b      	ldrh	r3, [r3, #20]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000de2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <lcd_reset+0xd8>)
 8000dec:	8a9b      	ldrh	r3, [r3, #20]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <lcd_reset+0xd8>)
 8000df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <lcd_reset+0xd8>)
 8000dfc:	8a9b      	ldrh	r3, [r3, #20]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4a29      	ldr	r2, [pc, #164]	; (8000ea8 <lcd_reset+0xd8>)
 8000e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	e003      	b.n	8000e18 <lcd_reset+0x48>
 8000e10:	bf00      	nop
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3301      	adds	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f241 2247 	movw	r2, #4679	; 0x1247
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d9f6      	bls.n	8000e10 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <lcd_reset+0xd8>)
 8000e24:	8a9b      	ldrh	r3, [r3, #20]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <lcd_reset+0xd8>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	e003      	b.n	8000e40 <lcd_reset+0x70>
 8000e38:	bf00      	nop
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	4a1a      	ldr	r2, [pc, #104]	; (8000eac <lcd_reset+0xdc>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d9f7      	bls.n	8000e38 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000e48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e4c:	8a9b      	ldrh	r3, [r3, #20]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 8000e5c:	20ae      	movs	r0, #174	; 0xae
 8000e5e:	f7ff fec1 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 8000e62:	20a2      	movs	r0, #162	; 0xa2
 8000e64:	f7ff febe 	bl	8000be4 <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 8000e68:	20a0      	movs	r0, #160	; 0xa0
 8000e6a:	f7ff febb 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 8000e6e:	20c8      	movs	r0, #200	; 0xc8
 8000e70:	f7ff feb8 	bl	8000be4 <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 8000e74:	2022      	movs	r0, #34	; 0x22
 8000e76:	f7ff feb5 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 8000e7a:	202f      	movs	r0, #47	; 0x2f
 8000e7c:	f7ff feb2 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 8000e80:	2040      	movs	r0, #64	; 0x40
 8000e82:	f7ff feaf 	bl	8000be4 <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 8000e86:	20af      	movs	r0, #175	; 0xaf
 8000e88:	f7ff feac 	bl	8000be4 <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 8000e8c:	2081      	movs	r0, #129	; 0x81
 8000e8e:	f7ff fea9 	bl	8000be4 <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 8000e92:	2017      	movs	r0, #23
 8000e94:	f7ff fea6 	bl	8000be4 <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 8000e98:	20a6      	movs	r0, #166	; 0xa6
 8000e9a:	f7ff fea3 	bl	8000be4 <lcd_transmit_byte>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	0005f36f 	.word	0x0005f36f

08000eb0 <lcd_init>:

void lcd_init() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8000eb4:	4b9d      	ldr	r3, [pc, #628]	; (800112c <lcd_init+0x27c>)
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	4a9c      	ldr	r2, [pc, #624]	; (800112c <lcd_init+0x27c>)
 8000eba:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8000ebe:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8000ec0:	4b9a      	ldr	r3, [pc, #616]	; (800112c <lcd_init+0x27c>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	4a99      	ldr	r2, [pc, #612]	; (800112c <lcd_init+0x27c>)
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eca:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8000ecc:	4b98      	ldr	r3, [pc, #608]	; (8001130 <lcd_init+0x280>)
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	4a97      	ldr	r2, [pc, #604]	; (8001130 <lcd_init+0x280>)
 8000ed2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000ed6:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8000ed8:	4b95      	ldr	r3, [pc, #596]	; (8001130 <lcd_init+0x280>)
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	4a94      	ldr	r2, [pc, #592]	; (8001130 <lcd_init+0x280>)
 8000ede:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000ee2:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8000ee4:	4b92      	ldr	r3, [pc, #584]	; (8001130 <lcd_init+0x280>)
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	4a91      	ldr	r2, [pc, #580]	; (8001130 <lcd_init+0x280>)
 8000eea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000eee:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8000ef0:	4b8f      	ldr	r3, [pc, #572]	; (8001130 <lcd_init+0x280>)
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	4a8e      	ldr	r2, [pc, #568]	; (8001130 <lcd_init+0x280>)
 8000ef6:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000efa:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8000efc:	4b8c      	ldr	r3, [pc, #560]	; (8001130 <lcd_init+0x280>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4a8b      	ldr	r2, [pc, #556]	; (8001130 <lcd_init+0x280>)
 8000f02:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000f06:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000f08:	4b89      	ldr	r3, [pc, #548]	; (8001130 <lcd_init+0x280>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4a88      	ldr	r2, [pc, #544]	; (8001130 <lcd_init+0x280>)
 8000f0e:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000f12:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 8000f14:	4b86      	ldr	r3, [pc, #536]	; (8001130 <lcd_init+0x280>)
 8000f16:	889b      	ldrh	r3, [r3, #4]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4985      	ldr	r1, [pc, #532]	; (8001130 <lcd_init+0x280>)
 8000f1c:	f645 73ff 	movw	r3, #24575	; 0x5fff
 8000f20:	4013      	ands	r3, r2
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000f26:	4a82      	ldr	r2, [pc, #520]	; (8001130 <lcd_init+0x280>)
 8000f28:	4b81      	ldr	r3, [pc, #516]	; (8001130 <lcd_init+0x280>)
 8000f2a:	8892      	ldrh	r2, [r2, #4]
 8000f2c:	b292      	uxth	r2, r2
 8000f2e:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 8000f30:	4b7f      	ldr	r3, [pc, #508]	; (8001130 <lcd_init+0x280>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a7e      	ldr	r2, [pc, #504]	; (8001130 <lcd_init+0x280>)
 8000f36:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000f3a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000f3c:	4b7c      	ldr	r3, [pc, #496]	; (8001130 <lcd_init+0x280>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a7b      	ldr	r2, [pc, #492]	; (8001130 <lcd_init+0x280>)
 8000f42:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 8000f46:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 8000f48:	4b79      	ldr	r3, [pc, #484]	; (8001130 <lcd_init+0x280>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	4a78      	ldr	r2, [pc, #480]	; (8001130 <lcd_init+0x280>)
 8000f4e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000f52:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000f54:	4b76      	ldr	r3, [pc, #472]	; (8001130 <lcd_init+0x280>)
 8000f56:	4a76      	ldr	r2, [pc, #472]	; (8001130 <lcd_init+0x280>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 8000f5c:	4b74      	ldr	r3, [pc, #464]	; (8001130 <lcd_init+0x280>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	4a73      	ldr	r2, [pc, #460]	; (8001130 <lcd_init+0x280>)
 8000f62:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8000f66:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000f68:	4b71      	ldr	r3, [pc, #452]	; (8001130 <lcd_init+0x280>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	4a70      	ldr	r2, [pc, #448]	; (8001130 <lcd_init+0x280>)
 8000f6e:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 8000f72:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 8000f74:	4b6e      	ldr	r3, [pc, #440]	; (8001130 <lcd_init+0x280>)
 8000f76:	889b      	ldrh	r3, [r3, #4]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	4a6d      	ldr	r2, [pc, #436]	; (8001130 <lcd_init+0x280>)
 8000f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000f88:	4a69      	ldr	r2, [pc, #420]	; (8001130 <lcd_init+0x280>)
 8000f8a:	4b69      	ldr	r3, [pc, #420]	; (8001130 <lcd_init+0x280>)
 8000f8c:	8892      	ldrh	r2, [r2, #4]
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 8000f92:	4b67      	ldr	r3, [pc, #412]	; (8001130 <lcd_init+0x280>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a66      	ldr	r2, [pc, #408]	; (8001130 <lcd_init+0x280>)
 8000f98:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8000f9c:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000f9e:	4b64      	ldr	r3, [pc, #400]	; (8001130 <lcd_init+0x280>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a63      	ldr	r2, [pc, #396]	; (8001130 <lcd_init+0x280>)
 8000fa4:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 8000fa8:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 8000faa:	4b61      	ldr	r3, [pc, #388]	; (8001130 <lcd_init+0x280>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	4a60      	ldr	r2, [pc, #384]	; (8001130 <lcd_init+0x280>)
 8000fb0:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8000fb4:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000fb6:	4b5e      	ldr	r3, [pc, #376]	; (8001130 <lcd_init+0x280>)
 8000fb8:	4a5d      	ldr	r2, [pc, #372]	; (8001130 <lcd_init+0x280>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 8000fbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fc8:	0c9b      	lsrs	r3, r3, #18
 8000fca:	049b      	lsls	r3, r3, #18
 8000fcc:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000fce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fdc:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 8000fde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fe2:	889b      	ldrh	r3, [r3, #4]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000fee:	f023 0301 	bic.w	r3, r3, #1
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000ff6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ffa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ffe:	8892      	ldrh	r2, [r2, #4]
 8001000:	b292      	uxth	r2, r2
 8001002:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 8001004:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800100e:	0c9b      	lsrs	r3, r3, #18
 8001010:	049b      	lsls	r3, r3, #18
 8001012:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001014:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800101e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 8001024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800102e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001032:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 8001034:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800103e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001042:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 8001044:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800104e:	0c9b      	lsrs	r3, r3, #18
 8001050:	049b      	lsls	r3, r3, #18
 8001052:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001054:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001058:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 8001060:	4b33      	ldr	r3, [pc, #204]	; (8001130 <lcd_init+0x280>)
 8001062:	8a9b      	ldrh	r3, [r3, #20]
 8001064:	b29b      	uxth	r3, r3
 8001066:	4a32      	ldr	r2, [pc, #200]	; (8001130 <lcd_init+0x280>)
 8001068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106c:	b29b      	uxth	r3, r3
 800106e:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <lcd_init+0x284>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	b29b      	uxth	r3, r3
 8001076:	4a2f      	ldr	r2, [pc, #188]	; (8001134 <lcd_init+0x284>)
 8001078:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800107c:	b29b      	uxth	r3, r3
 800107e:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 8001080:	4a2c      	ldr	r2, [pc, #176]	; (8001134 <lcd_init+0x284>)
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <lcd_init+0x284>)
 8001084:	8812      	ldrh	r2, [r2, #0]
 8001086:	b292      	uxth	r2, r2
 8001088:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <lcd_init+0x284>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <lcd_init+0x284>)
 8001092:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8001096:	b29b      	uxth	r3, r3
 8001098:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <lcd_init+0x284>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4a24      	ldr	r2, [pc, #144]	; (8001134 <lcd_init+0x284>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <lcd_init+0x284>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4a20      	ldr	r2, [pc, #128]	; (8001134 <lcd_init+0x284>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <lcd_init+0x284>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <lcd_init+0x284>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <lcd_init+0x284>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4a18      	ldr	r2, [pc, #96]	; (8001134 <lcd_init+0x284>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 80010da:	4a16      	ldr	r2, [pc, #88]	; (8001134 <lcd_init+0x284>)
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <lcd_init+0x284>)
 80010de:	8812      	ldrh	r2, [r2, #0]
 80010e0:	b292      	uxth	r2, r2
 80010e2:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <lcd_init+0x284>)
 80010e6:	889b      	ldrh	r3, [r3, #4]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <lcd_init+0x284>)
 80010ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <lcd_init+0x284>)
 80010f6:	889b      	ldrh	r3, [r3, #4]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <lcd_init+0x284>)
 80010fc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001100:	b29b      	uxth	r3, r3
 8001102:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <lcd_init+0x284>)
 8001106:	8b9b      	ldrh	r3, [r3, #28]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <lcd_init+0x284>)
 800110c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001110:	b29b      	uxth	r3, r3
 8001112:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <lcd_init+0x284>)
 8001116:	2207      	movs	r2, #7
 8001118:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <lcd_init+0x284>)
 800111c:	889b      	ldrh	r3, [r3, #4]
 800111e:	b29b      	uxth	r3, r3
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <lcd_init+0x284>)
 8001122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001126:	b29b      	uxth	r3, r3
 8001128:	e006      	b.n	8001138 <lcd_init+0x288>
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	48000400 	.word	0x48000400
 8001134:	40003800 	.word	0x40003800
 8001138:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <lcd_init+0x2b4>)
 800113c:	889b      	ldrh	r3, [r3, #4]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <lcd_init+0x2b4>)
 8001142:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001146:	b29b      	uxth	r3, r3
 8001148:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <lcd_init+0x2b4>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <lcd_init+0x2b4>)
 8001152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001156:	b29b      	uxth	r3, r3
 8001158:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 800115a:	f7ff fe39 	bl	8000dd0 <lcd_reset>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40003800 	.word	0x40003800

08001168 <intiJoystick>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi.h"
#include "joystick.h"

void intiJoystick(){
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 800116c:	4b46      	ldr	r3, [pc, #280]	; (8001288 <intiJoystick+0x120>)
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	4a45      	ldr	r2, [pc, #276]	; (8001288 <intiJoystick+0x120>)
 8001172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001176:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
 8001178:	4b43      	ldr	r3, [pc, #268]	; (8001288 <intiJoystick+0x120>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	4a42      	ldr	r2, [pc, #264]	; (8001288 <intiJoystick+0x120>)
 800117e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001182:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 8001184:	4b40      	ldr	r3, [pc, #256]	; (8001288 <intiJoystick+0x120>)
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	4a3f      	ldr	r2, [pc, #252]	; (8001288 <intiJoystick+0x120>)
 800118a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800118e:	6153      	str	r3, [r2, #20]

	// Set pin PC0 to input
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001190:	4b3e      	ldr	r3, [pc, #248]	; (800128c <intiJoystick+0x124>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a3d      	ldr	r2, [pc, #244]	; (800128c <intiJoystick+0x124>)
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (0 * 2));	// Set mode register
 800119c:	4b3b      	ldr	r3, [pc, #236]	; (800128c <intiJoystick+0x124>)
 800119e:	4a3b      	ldr	r2, [pc, #236]	; (800128c <intiJoystick+0x124>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80011a4:	4b39      	ldr	r3, [pc, #228]	; (800128c <intiJoystick+0x124>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	4a38      	ldr	r2, [pc, #224]	; (800128c <intiJoystick+0x124>)
 80011aa:	f023 0303 	bic.w	r3, r3, #3
 80011ae:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (0 * 2));// Set push/pull register
 80011b0:	4b36      	ldr	r3, [pc, #216]	; (800128c <intiJoystick+0x124>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	4a35      	ldr	r2, [pc, #212]	; (800128c <intiJoystick+0x124>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PA4 to input
	GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 80011bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x00000000 << (4 * 2)); // Set mode register
 80011cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOA->PUPDR &= ~(0x00000003 << (4 * 2)); // Clear push/pull register
 80011d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011e6:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x00000002 << (4 * 2)); // Set push/pull register
 80011e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB5 to input
	GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <intiJoystick+0x128>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a24      	ldr	r2, [pc, #144]	; (8001290 <intiJoystick+0x128>)
 80011fe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001202:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (5 * 2)); // Set mode register
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <intiJoystick+0x128>)
 8001206:	4a22      	ldr	r2, [pc, #136]	; (8001290 <intiJoystick+0x128>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIOB->PUPDR &= ~(0x00000003 << (5 * 2)); // Clear push/pull register
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <intiJoystick+0x128>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <intiJoystick+0x128>)
 8001212:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001216:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (5 * 2)); // Set push/pull register
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <intiJoystick+0x128>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <intiJoystick+0x128>)
 800121e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001222:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PC1 to input
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <intiJoystick+0x124>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a18      	ldr	r2, [pc, #96]	; (800128c <intiJoystick+0x124>)
 800122a:	f023 030c 	bic.w	r3, r3, #12
 800122e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (1 * 2)); // Set mode register
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <intiJoystick+0x124>)
 8001232:	4a16      	ldr	r2, [pc, #88]	; (800128c <intiJoystick+0x124>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); // Clear push/pull register
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <intiJoystick+0x124>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a13      	ldr	r2, [pc, #76]	; (800128c <intiJoystick+0x124>)
 800123e:	f023 030c 	bic.w	r3, r3, #12
 8001242:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (1 * 2)); // Set push/pull register
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <intiJoystick+0x124>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4a10      	ldr	r2, [pc, #64]	; (800128c <intiJoystick+0x124>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB0 to input
	GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <intiJoystick+0x128>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <intiJoystick+0x128>)
 8001256:	f023 0303 	bic.w	r3, r3, #3
 800125a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (0 * 2)); // Set mode register
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <intiJoystick+0x128>)
 800125e:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <intiJoystick+0x128>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <intiJoystick+0x128>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	4a09      	ldr	r2, [pc, #36]	; (8001290 <intiJoystick+0x128>)
 800126a:	f023 0303 	bic.w	r3, r3, #3
 800126e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (0 * 2)); // Set push/pull register
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <intiJoystick+0x128>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <intiJoystick+0x128>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	60d3      	str	r3, [r2, #12]
	// 0x00 - No pull
	// 0x01 - Pull-up
	// 0x02 - Pull-down

}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	48000800 	.word	0x48000800
 8001290:	48000400 	.word	0x48000400

08001294 <readJoystick>:


void readJoystick(){
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0

	int32_t a = GPIOC->IDR & (0x0001 << 0); //Read from pin PCx - right
 800129a:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <readJoystick+0xc4>)
 800129c:	8a1b      	ldrh	r3, [r3, #16]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
	int32_t b = GPIOA->IDR & (0x0001 << 4); //Read from pin PCx - up
 80012a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012aa:	8a1b      	ldrh	r3, [r3, #16]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	617b      	str	r3, [r7, #20]
	int32_t c = GPIOB->IDR & (0x0001 << 5); //Read from pin PCx - center
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <readJoystick+0xc8>)
 80012b6:	8a1b      	ldrh	r3, [r3, #16]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	f003 0320 	and.w	r3, r3, #32
 80012be:	613b      	str	r3, [r7, #16]
	int32_t d = GPIOC->IDR & (0x0001 << 1); //Read from pin PCx - left
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <readJoystick+0xc4>)
 80012c2:	8a1b      	ldrh	r3, [r3, #16]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60fb      	str	r3, [r7, #12]
	int32_t e = GPIOB->IDR & (0x0001 << 0); //Read from pin PCx - down
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <readJoystick+0xc8>)
 80012ce:	8a1b      	ldrh	r3, [r3, #16]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]

	if(b){b = 1;}
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <readJoystick+0x4e>
 80012de:	2301      	movs	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
	if(c){c = 1;}
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <readJoystick+0x58>
 80012e8:	2301      	movs	r3, #1
 80012ea:	613b      	str	r3, [r7, #16]
	if(d){d = 1;}
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <readJoystick+0x62>
 80012f2:	2301      	movs	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
	if(e){e = 1;}
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <readJoystick+0x6c>
 80012fc:	2301      	movs	r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]

	joy.right 	= a;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	b25a      	sxtb	r2, r3
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <readJoystick+0xcc>)
 8001306:	70da      	strb	r2, [r3, #3]
	joy.up 		= b;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	b25a      	sxtb	r2, r3
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <readJoystick+0xcc>)
 800130e:	701a      	strb	r2, [r3, #0]
	joy.center	= c;
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	b25a      	sxtb	r2, r3
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <readJoystick+0xcc>)
 8001316:	711a      	strb	r2, [r3, #4]
	joy.left	= d;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	b25a      	sxtb	r2, r3
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <readJoystick+0xcc>)
 800131e:	709a      	strb	r2, [r3, #2]
	joy.down 	= e;
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	b25a      	sxtb	r2, r3
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <readJoystick+0xcc>)
 8001326:	705a      	strb	r2, [r3, #1]

	led.red = joy.up;
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <readJoystick+0xcc>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b25b      	sxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <readJoystick+0xd0>)
 8001332:	601a      	str	r2, [r3, #0]
	led.gre = joy.down;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <readJoystick+0xcc>)
 8001336:	785b      	ldrb	r3, [r3, #1]
 8001338:	b25b      	sxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <readJoystick+0xd0>)
 800133e:	609a      	str	r2, [r3, #8]
	led.blu = joy.right;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <readJoystick+0xcc>)
 8001342:	78db      	ldrb	r3, [r3, #3]
 8001344:	b25b      	sxtb	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <readJoystick+0xd0>)
 800134a:	605a      	str	r2, [r3, #4]
}
 800134c:	bf00      	nop
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	48000800 	.word	0x48000800
 800135c:	48000400 	.word	0x48000400
 8001360:	200001e4 	.word	0x200001e4
 8001364:	200001d0 	.word	0x200001d0

08001368 <lcd_write_string>:
#include "ansi.h"
#include "LCD.h"

uint8_t buffer[512];

void lcd_write_string(char slice[], uint32_t line, uint32_t place) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	for (int j = 0; j < strlen(slice); j++) {
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	e076      	b.n	8001468 <lcd_write_string+0x100>
		int x = slice[j];
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 5; i++) {
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	e068      	b.n	800145c <lcd_write_string+0xf4>
			if (line == 1) {
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d114      	bne.n	80013ba <lcd_write_string+0x52>
				buffer[i + place + j * 5] = character_data[x - 32][i];
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f1a3 0220 	sub.w	r2, r3, #32
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	18c8      	adds	r0, r1, r3
 800139c:	69f9      	ldr	r1, [r7, #28]
 800139e:	460b      	mov	r3, r1
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	18c1      	adds	r1, r0, r3
 80013a6:	4837      	ldr	r0, [pc, #220]	; (8001484 <lcd_write_string+0x11c>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	18c2      	adds	r2, r0, r3
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	4413      	add	r3, r2
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	4b34      	ldr	r3, [pc, #208]	; (8001488 <lcd_write_string+0x120>)
 80013b8:	545a      	strb	r2, [r3, r1]
			}
			if (line == 2) {
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d116      	bne.n	80013ee <lcd_write_string+0x86>
				buffer[128 + i + place + j * 5] = character_data[x - 32][i];
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f1a3 0220 	sub.w	r2, r3, #32
 80013c6:	69b9      	ldr	r1, [r7, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	18c8      	adds	r0, r1, r3
 80013cc:	69f9      	ldr	r1, [r7, #28]
 80013ce:	460b      	mov	r3, r1
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	4403      	add	r3, r0
 80013d6:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80013da:	482a      	ldr	r0, [pc, #168]	; (8001484 <lcd_write_string+0x11c>)
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	18c2      	adds	r2, r0, r3
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	4413      	add	r3, r2
 80013e8:	781a      	ldrb	r2, [r3, #0]
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <lcd_write_string+0x120>)
 80013ec:	545a      	strb	r2, [r3, r1]
			}
			if (line == 3) {
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d116      	bne.n	8001422 <lcd_write_string+0xba>
				buffer[256 + i + place + j * 5] = character_data[x - 32][i];
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f1a3 0220 	sub.w	r2, r3, #32
 80013fa:	69b9      	ldr	r1, [r7, #24]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	18c8      	adds	r0, r1, r3
 8001400:	69f9      	ldr	r1, [r7, #28]
 8001402:	460b      	mov	r3, r1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	4403      	add	r3, r0
 800140a:	f503 7180 	add.w	r1, r3, #256	; 0x100
 800140e:	481d      	ldr	r0, [pc, #116]	; (8001484 <lcd_write_string+0x11c>)
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	18c2      	adds	r2, r0, r3
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	4413      	add	r3, r2
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <lcd_write_string+0x120>)
 8001420:	545a      	strb	r2, [r3, r1]
			}
			if (line == 4) {
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b04      	cmp	r3, #4
 8001426:	d116      	bne.n	8001456 <lcd_write_string+0xee>
				buffer[384 + i + place + j * 5] = character_data[x - 32][i];
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f1a3 0220 	sub.w	r2, r3, #32
 800142e:	69b9      	ldr	r1, [r7, #24]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	18c8      	adds	r0, r1, r3
 8001434:	69f9      	ldr	r1, [r7, #28]
 8001436:	460b      	mov	r3, r1
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	4403      	add	r3, r0
 800143e:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 8001442:	4810      	ldr	r0, [pc, #64]	; (8001484 <lcd_write_string+0x11c>)
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	18c2      	adds	r2, r0, r3
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	4413      	add	r3, r2
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <lcd_write_string+0x120>)
 8001454:	545a      	strb	r2, [r3, r1]
		for (int i = 0; i < 5; i++) {
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	3301      	adds	r3, #1
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b04      	cmp	r3, #4
 8001460:	dd93      	ble.n	800138a <lcd_write_string+0x22>
	for (int j = 0; j < strlen(slice); j++) {
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7fe feb1 	bl	80001d0 <strlen>
 800146e:	4602      	mov	r2, r0
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	429a      	cmp	r2, r3
 8001474:	d881      	bhi.n	800137a <lcd_write_string+0x12>
			}
		}
	}
	lcd_push_buffer(buffer);
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <lcd_write_string+0x120>)
 8001478:	f7ff fbe6 	bl	8000c48 <lcd_push_buffer>
}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	08003c68 	.word	0x08003c68
 8001488:	200001ec 	.word	0x200001ec

0800148c <lcd_write_string_no_push>:

void lcd_write_string_no_push(char slice[], uint32_t line, uint32_t place) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
	for (int j = 0; j < strlen(slice); j++) {
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	e076      	b.n	800158c <lcd_write_string_no_push+0x100>
		int x = slice[j];
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 5; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	e068      	b.n	8001580 <lcd_write_string_no_push+0xf4>
			if (line == 1) {
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d114      	bne.n	80014de <lcd_write_string_no_push+0x52>
				buffer[i + place + j * 5] = character_data[x - 32][i];
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f1a3 0220 	sub.w	r2, r3, #32
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	18c8      	adds	r0, r1, r3
 80014c0:	69f9      	ldr	r1, [r7, #28]
 80014c2:	460b      	mov	r3, r1
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	18c1      	adds	r1, r0, r3
 80014ca:	4836      	ldr	r0, [pc, #216]	; (80015a4 <lcd_write_string_no_push+0x118>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	18c2      	adds	r2, r0, r3
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	4413      	add	r3, r2
 80014d8:	781a      	ldrb	r2, [r3, #0]
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <lcd_write_string_no_push+0x11c>)
 80014dc:	545a      	strb	r2, [r3, r1]
			}
			if (line == 2) {
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d116      	bne.n	8001512 <lcd_write_string_no_push+0x86>
				buffer[128 + i + place + j * 5] = character_data[x - 32][i];
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f1a3 0220 	sub.w	r2, r3, #32
 80014ea:	69b9      	ldr	r1, [r7, #24]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	18c8      	adds	r0, r1, r3
 80014f0:	69f9      	ldr	r1, [r7, #28]
 80014f2:	460b      	mov	r3, r1
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	4403      	add	r3, r0
 80014fa:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80014fe:	4829      	ldr	r0, [pc, #164]	; (80015a4 <lcd_write_string_no_push+0x118>)
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	18c2      	adds	r2, r0, r3
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	4413      	add	r3, r2
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <lcd_write_string_no_push+0x11c>)
 8001510:	545a      	strb	r2, [r3, r1]
			}
			if (line == 3) {
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b03      	cmp	r3, #3
 8001516:	d116      	bne.n	8001546 <lcd_write_string_no_push+0xba>
				buffer[256 + i + place + j * 5] = character_data[x - 32][i];
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f1a3 0220 	sub.w	r2, r3, #32
 800151e:	69b9      	ldr	r1, [r7, #24]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	18c8      	adds	r0, r1, r3
 8001524:	69f9      	ldr	r1, [r7, #28]
 8001526:	460b      	mov	r3, r1
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	4403      	add	r3, r0
 800152e:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8001532:	481c      	ldr	r0, [pc, #112]	; (80015a4 <lcd_write_string_no_push+0x118>)
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	18c2      	adds	r2, r0, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	4413      	add	r3, r2
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <lcd_write_string_no_push+0x11c>)
 8001544:	545a      	strb	r2, [r3, r1]
			}
			if (line == 4) {
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d116      	bne.n	800157a <lcd_write_string_no_push+0xee>
				buffer[384 + i + place + j * 5] = character_data[x - 32][i];
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f1a3 0220 	sub.w	r2, r3, #32
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	18c8      	adds	r0, r1, r3
 8001558:	69f9      	ldr	r1, [r7, #28]
 800155a:	460b      	mov	r3, r1
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	4403      	add	r3, r0
 8001562:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 8001566:	480f      	ldr	r0, [pc, #60]	; (80015a4 <lcd_write_string_no_push+0x118>)
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	18c2      	adds	r2, r0, r3
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	4413      	add	r3, r2
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <lcd_write_string_no_push+0x11c>)
 8001578:	545a      	strb	r2, [r3, r1]
		for (int i = 0; i < 5; i++) {
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	3301      	adds	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b04      	cmp	r3, #4
 8001584:	dd93      	ble.n	80014ae <lcd_write_string_no_push+0x22>
	for (int j = 0; j < strlen(slice); j++) {
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3301      	adds	r3, #1
 800158a:	61fb      	str	r3, [r7, #28]
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7fe fe1f 	bl	80001d0 <strlen>
 8001592:	4602      	mov	r2, r0
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	429a      	cmp	r2, r3
 8001598:	d881      	bhi.n	800149e <lcd_write_string_no_push+0x12>
			}
		}
	}
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	08003c68 	.word	0x08003c68
 80015a8:	200001ec 	.word	0x200001ec

080015ac <lcd_write_string_custom>:

void lcd_write_string_custom(int character, int amount, uint32_t line, uint32_t place) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
	for (int j = 0; j < amount; j++) {
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e06d      	b.n	800169c <lcd_write_string_custom+0xf0>
		for (int i = 0; i < 5; i++) {
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	e064      	b.n	8001690 <lcd_write_string_custom+0xe4>
			if (line == 1) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d113      	bne.n	80015f4 <lcd_write_string_custom+0x48>
				buffer[i + place + j * 5] = custom_character_data[character - 1][i];
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1e5a      	subs	r2, r3, #1
 80015d0:	6939      	ldr	r1, [r7, #16]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	18c8      	adds	r0, r1, r3
 80015d6:	6979      	ldr	r1, [r7, #20]
 80015d8:	460b      	mov	r3, r1
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	18c1      	adds	r1, r0, r3
 80015e0:	4834      	ldr	r0, [pc, #208]	; (80016b4 <lcd_write_string_custom+0x108>)
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	18c2      	adds	r2, r0, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4413      	add	r3, r2
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <lcd_write_string_custom+0x10c>)
 80015f2:	545a      	strb	r2, [r3, r1]
			}
			if (line == 2) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d115      	bne.n	8001626 <lcd_write_string_custom+0x7a>
				buffer[128 + i + place + j * 5] = custom_character_data[character - 1][i];
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1e5a      	subs	r2, r3, #1
 80015fe:	6939      	ldr	r1, [r7, #16]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	18c8      	adds	r0, r1, r3
 8001604:	6979      	ldr	r1, [r7, #20]
 8001606:	460b      	mov	r3, r1
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	4403      	add	r3, r0
 800160e:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8001612:	4828      	ldr	r0, [pc, #160]	; (80016b4 <lcd_write_string_custom+0x108>)
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	18c2      	adds	r2, r0, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4413      	add	r3, r2
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <lcd_write_string_custom+0x10c>)
 8001624:	545a      	strb	r2, [r3, r1]
			}
			if (line == 3) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d115      	bne.n	8001658 <lcd_write_string_custom+0xac>
				buffer[256 + i + place + j * 5] = custom_character_data[character - 1][i];
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	6939      	ldr	r1, [r7, #16]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	18c8      	adds	r0, r1, r3
 8001636:	6979      	ldr	r1, [r7, #20]
 8001638:	460b      	mov	r3, r1
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	4403      	add	r3, r0
 8001640:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8001644:	481b      	ldr	r0, [pc, #108]	; (80016b4 <lcd_write_string_custom+0x108>)
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	18c2      	adds	r2, r0, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4413      	add	r3, r2
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <lcd_write_string_custom+0x10c>)
 8001656:	545a      	strb	r2, [r3, r1]
			}
			if (line == 4) {
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b04      	cmp	r3, #4
 800165c:	d115      	bne.n	800168a <lcd_write_string_custom+0xde>
				buffer[384 + i + place + j * 5] = custom_character_data[character - 1][i];
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1e5a      	subs	r2, r3, #1
 8001662:	6939      	ldr	r1, [r7, #16]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	18c8      	adds	r0, r1, r3
 8001668:	6979      	ldr	r1, [r7, #20]
 800166a:	460b      	mov	r3, r1
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	4403      	add	r3, r0
 8001672:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 8001676:	480f      	ldr	r0, [pc, #60]	; (80016b4 <lcd_write_string_custom+0x108>)
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	18c2      	adds	r2, r0, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4413      	add	r3, r2
 8001684:	781a      	ldrb	r2, [r3, #0]
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <lcd_write_string_custom+0x10c>)
 8001688:	545a      	strb	r2, [r3, r1]
		for (int i = 0; i < 5; i++) {
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	3301      	adds	r3, #1
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2b04      	cmp	r3, #4
 8001694:	dd97      	ble.n	80015c6 <lcd_write_string_custom+0x1a>
	for (int j = 0; j < amount; j++) {
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	db8d      	blt.n	80015c0 <lcd_write_string_custom+0x14>
			}
		}
	}
	lcd_push_buffer(buffer);
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <lcd_write_string_custom+0x10c>)
 80016a6:	f7ff facf 	bl	8000c48 <lcd_push_buffer>
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	08003e44 	.word	0x08003e44
 80016b8:	200001ec 	.word	0x200001ec

080016bc <draw_gameplay_start>:
		}
	}

}

void draw_gameplay_start() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
	lcd_write_string("Score:", 1, 36);
 80016c2:	2224      	movs	r2, #36	; 0x24
 80016c4:	2101      	movs	r1, #1
 80016c6:	480b      	ldr	r0, [pc, #44]	; (80016f4 <draw_gameplay_start+0x38>)
 80016c8:	f7ff fe4e 	bl	8001368 <lcd_write_string>
	for (int i = 0; i < 128; i++) {
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	e007      	b.n	80016e2 <draw_gameplay_start+0x26>
		buffer[128 + i] = 0x01;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3380      	adds	r3, #128	; 0x80
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <draw_gameplay_start+0x3c>)
 80016d8:	2101      	movs	r1, #1
 80016da:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 128; i++) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3301      	adds	r3, #1
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b7f      	cmp	r3, #127	; 0x7f
 80016e6:	ddf4      	ble.n	80016d2 <draw_gameplay_start+0x16>
	}
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	08003a7c 	.word	0x08003a7c
 80016f8:	200001ec 	.word	0x200001ec

080016fc <draw_score>:

void draw_score() {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
	char score_str[8];
	sprintf(score_str, "%d", score);
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <draw_score+0x28>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	463b      	mov	r3, r7
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <draw_score+0x2c>)
 800170a:	4618      	mov	r0, r3
 800170c:	f001 f85c 	bl	80027c8 <siprintf>
	lcd_write_string(score_str, 1, 66);
 8001710:	463b      	mov	r3, r7
 8001712:	2242      	movs	r2, #66	; 0x42
 8001714:	2101      	movs	r1, #1
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fe26 	bl	8001368 <lcd_write_string>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200001c8 	.word	0x200001c8
 8001728:	08003a84 	.word	0x08003a84

0800172c <LCD_alarm>:
			x = 1;
		}
	}
}

int LCD_alarm() {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
	if (t.ml == 50) {
 8001732:	4b34      	ldr	r3, [pc, #208]	; (8001804 <LCD_alarm+0xd8>)
 8001734:	78db      	ldrb	r3, [r3, #3]
 8001736:	b25b      	sxtb	r3, r3
 8001738:	2b32      	cmp	r3, #50	; 0x32
 800173a:	d13c      	bne.n	80017b6 <LCD_alarm+0x8a>
		while (t.ml == 50) {
 800173c:	bf00      	nop
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <LCD_alarm+0xd8>)
 8001740:	78db      	ldrb	r3, [r3, #3]
 8001742:	b25b      	sxtb	r3, r3
 8001744:	2b32      	cmp	r3, #50	; 0x32
 8001746:	d0fa      	beq.n	800173e <LCD_alarm+0x12>
		}
		lcd_write_string_custom(3, 1, 2, 58);
 8001748:	233a      	movs	r3, #58	; 0x3a
 800174a:	2202      	movs	r2, #2
 800174c:	2101      	movs	r1, #1
 800174e:	2003      	movs	r0, #3
 8001750:	f7ff ff2c 	bl	80015ac <lcd_write_string_custom>
		lcd_write_string_custom(4, 1, 2, 63);
 8001754:	233f      	movs	r3, #63	; 0x3f
 8001756:	2202      	movs	r2, #2
 8001758:	2101      	movs	r1, #1
 800175a:	2004      	movs	r0, #4
 800175c:	f7ff ff26 	bl	80015ac <lcd_write_string_custom>
		lcd_write_string_custom(5, 1, 3, 58);
 8001760:	233a      	movs	r3, #58	; 0x3a
 8001762:	2203      	movs	r2, #3
 8001764:	2101      	movs	r1, #1
 8001766:	2005      	movs	r0, #5
 8001768:	f7ff ff20 	bl	80015ac <lcd_write_string_custom>
		lcd_write_string_custom(6, 1, 3, 63);
 800176c:	233f      	movs	r3, #63	; 0x3f
 800176e:	2203      	movs	r2, #3
 8001770:	2101      	movs	r1, #1
 8001772:	2006      	movs	r0, #6
 8001774:	f7ff ff1a 	bl	80015ac <lcd_write_string_custom>
		lcd_write_string_custom(7, 1, 2, 68);
 8001778:	2344      	movs	r3, #68	; 0x44
 800177a:	2202      	movs	r2, #2
 800177c:	2101      	movs	r1, #1
 800177e:	2007      	movs	r0, #7
 8001780:	f7ff ff14 	bl	80015ac <lcd_write_string_custom>
		lcd_write_string_custom(8, 1, 3, 68);
 8001784:	2344      	movs	r3, #68	; 0x44
 8001786:	2203      	movs	r2, #3
 8001788:	2101      	movs	r1, #1
 800178a:	2008      	movs	r0, #8
 800178c:	f7ff ff0e 	bl	80015ac <lcd_write_string_custom>
		lcd_write_string_custom(9, 1, 2, 53);
 8001790:	2335      	movs	r3, #53	; 0x35
 8001792:	2202      	movs	r2, #2
 8001794:	2101      	movs	r1, #1
 8001796:	2009      	movs	r0, #9
 8001798:	f7ff ff08 	bl	80015ac <lcd_write_string_custom>
		lcd_write_string_custom(10, 1, 3, 53);
 800179c:	2335      	movs	r3, #53	; 0x35
 800179e:	2203      	movs	r2, #3
 80017a0:	2101      	movs	r1, #1
 80017a2:	200a      	movs	r0, #10
 80017a4:	f7ff ff02 	bl	80015ac <lcd_write_string_custom>
		lcd_write_string("hull breach !!!", 4, 26);
 80017a8:	221a      	movs	r2, #26
 80017aa:	2104      	movs	r1, #4
 80017ac:	4816      	ldr	r0, [pc, #88]	; (8001808 <LCD_alarm+0xdc>)
 80017ae:	f7ff fddb 	bl	8001368 <lcd_write_string>
		return 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e021      	b.n	80017fa <LCD_alarm+0xce>
	}
	else if (t.ml == 95) {
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <LCD_alarm+0xd8>)
 80017b8:	78db      	ldrb	r3, [r3, #3]
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	2b5f      	cmp	r3, #95	; 0x5f
 80017be:	d11b      	bne.n	80017f8 <LCD_alarm+0xcc>
		while (t.ml == 95) {
 80017c0:	bf00      	nop
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <LCD_alarm+0xd8>)
 80017c4:	78db      	ldrb	r3, [r3, #3]
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	2b5f      	cmp	r3, #95	; 0x5f
 80017ca:	d0fa      	beq.n	80017c2 <LCD_alarm+0x96>
		}
		for (int i = 0; i < 128; i++) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	e007      	b.n	80017e2 <LCD_alarm+0xb6>
			buffer[128 + i] = 0x01;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3380      	adds	r3, #128	; 0x80
 80017d6:	4a0d      	ldr	r2, [pc, #52]	; (800180c <LCD_alarm+0xe0>)
 80017d8:	2101      	movs	r1, #1
 80017da:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 128; i++) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3301      	adds	r3, #1
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b7f      	cmp	r3, #127	; 0x7f
 80017e6:	ddf4      	ble.n	80017d2 <LCD_alarm+0xa6>
		}
		lcd_write_string_custom(11, 51, 3, 0);
 80017e8:	2300      	movs	r3, #0
 80017ea:	2203      	movs	r2, #3
 80017ec:	2133      	movs	r1, #51	; 0x33
 80017ee:	200b      	movs	r0, #11
 80017f0:	f7ff fedc 	bl	80015ac <lcd_write_string_custom>
		return 1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <LCD_alarm+0xce>
	} else {
		return 0;
 80017f8:	2300      	movs	r3, #0
	}
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200001c0 	.word	0x200001c0
 8001808:	08003a98 	.word	0x08003a98
 800180c:	200001ec 	.word	0x200001ec

08001810 <LCD_timer>:

void LCD_timer() {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
	char milisec_str[3];
	char sec_str[2];
	char min_str[2];
	sprintf(milisec_str, "%d", t.ml);
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <LCD_timer+0x9c>)
 8001818:	78db      	ldrb	r3, [r3, #3]
 800181a:	b25b      	sxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4923      	ldr	r1, [pc, #140]	; (80018b0 <LCD_timer+0xa0>)
 8001824:	4618      	mov	r0, r3
 8001826:	f000 ffcf 	bl	80027c8 <siprintf>
	sprintf(sec_str, "%d", t.sk);
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <LCD_timer+0x9c>)
 800182c:	789b      	ldrb	r3, [r3, #2]
 800182e:	b25b      	sxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	491e      	ldr	r1, [pc, #120]	; (80018b0 <LCD_timer+0xa0>)
 8001838:	4618      	mov	r0, r3
 800183a:	f000 ffc5 	bl	80027c8 <siprintf>
	sprintf(min_str, "%d", t.mn);
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <LCD_timer+0x9c>)
 8001840:	785b      	ldrb	r3, [r3, #1]
 8001842:	b25b      	sxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4919      	ldr	r1, [pc, #100]	; (80018b0 <LCD_timer+0xa0>)
 800184a:	4618      	mov	r0, r3
 800184c:	f000 ffbc 	bl	80027c8 <siprintf>
	lcd_write_string_no_push("0:00", 3, 55);
 8001850:	2237      	movs	r2, #55	; 0x37
 8001852:	2103      	movs	r1, #3
 8001854:	4817      	ldr	r0, [pc, #92]	; (80018b4 <LCD_timer+0xa4>)
 8001856:	f7ff fe19 	bl	800148c <lcd_write_string_no_push>
		lcd_write_string_no_push(milisec_str, 3, 73);
	} else if (t.ml <= 9) {
		lcd_write_string_no_push(milisec_str, 3, 78);
	}
	*/
	if (t.sk >= 10) {
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <LCD_timer+0x9c>)
 800185c:	789b      	ldrb	r3, [r3, #2]
 800185e:	b25b      	sxtb	r3, r3
 8001860:	2b09      	cmp	r3, #9
 8001862:	dd07      	ble.n	8001874 <LCD_timer+0x64>
		lcd_write_string_no_push(sec_str, 3, 65);
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	2241      	movs	r2, #65	; 0x41
 800186a:	2103      	movs	r1, #3
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fe0d 	bl	800148c <lcd_write_string_no_push>
 8001872:	e00b      	b.n	800188c <LCD_timer+0x7c>
	} else if (t.sk <= 9) {
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <LCD_timer+0x9c>)
 8001876:	789b      	ldrb	r3, [r3, #2]
 8001878:	b25b      	sxtb	r3, r3
 800187a:	2b09      	cmp	r3, #9
 800187c:	dc06      	bgt.n	800188c <LCD_timer+0x7c>
		lcd_write_string_no_push(sec_str, 3, 70);
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	2246      	movs	r2, #70	; 0x46
 8001884:	2103      	movs	r1, #3
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fe00 	bl	800148c <lcd_write_string_no_push>
	}
	lcd_write_string_no_push(min_str, 3, 55);
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2237      	movs	r2, #55	; 0x37
 8001890:	2103      	movs	r1, #3
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fdfa 	bl	800148c <lcd_write_string_no_push>
	lcd_write_string(":", 3, 60);
 8001898:	223c      	movs	r2, #60	; 0x3c
 800189a:	2103      	movs	r1, #3
 800189c:	4806      	ldr	r0, [pc, #24]	; (80018b8 <LCD_timer+0xa8>)
 800189e:	f7ff fd63 	bl	8001368 <lcd_write_string>
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200001c0 	.word	0x200001c0
 80018b0:	08003a84 	.word	0x08003a84
 80018b4:	08003aa8 	.word	0x08003aa8
 80018b8:	08003ab0 	.word	0x08003ab0

080018bc <initLed>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi.h"

void initLed(){
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	// Set pin PA9 to output - BLUE LED
	GPIOA->OSPEEDR &= ~(0x00000003 << (9 * 2)); // Clear speed register
 80018c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018ca:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80018ce:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (9 * 2)); // set speed register
 80018d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018de:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOA->OTYPER &= ~(0x0001 << (9 * 1)); // Clear output type register
 80018e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018e4:	889b      	ldrh	r3, [r3, #4]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER |= (0x0000 << (9)); // Set output type register
 80018f4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018fc:	8892      	ldrh	r2, [r2, #4]
 80018fe:	b292      	uxth	r2, r2
 8001900:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOA->MODER &= ~(0x00000003 << (9 * 2)); // Clear mode register
 8001902:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800190c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001910:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000001 << (9 * 2)); // Set mode register
 8001912:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PC7 to output - GREEN LED
	GPIOC->OSPEEDR &= ~(0x00000003 << (7 * 2)); // Clear speed register
 8001922:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <initLed+0x104>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	4a26      	ldr	r2, [pc, #152]	; (80019c0 <initLed+0x104>)
 8001928:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800192c:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (7 * 2)); // set speed register
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <initLed+0x104>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <initLed+0x104>)
 8001934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001938:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOC->OTYPER &= ~(0x0001 << (7 * 1)); // Clear output type register
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <initLed+0x104>)
 800193c:	889b      	ldrh	r3, [r3, #4]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <initLed+0x104>)
 8001942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001946:	b29b      	uxth	r3, r3
 8001948:	8093      	strh	r3, [r2, #4]
	GPIOC->OTYPER |= (0x0000 << (7)); // Set output type register
 800194a:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <initLed+0x104>)
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <initLed+0x104>)
 800194e:	8892      	ldrh	r2, [r2, #4]
 8001950:	b292      	uxth	r2, r2
 8001952:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOC->MODER &= ~(0x00000003 << (7 * 2)); // Clear mode register
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <initLed+0x104>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <initLed+0x104>)
 800195a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800195e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000001 << (7 * 2)); // Set mode register
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <initLed+0x104>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a16      	ldr	r2, [pc, #88]	; (80019c0 <initLed+0x104>)
 8001966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196a:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PB4 to output - RED LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (4 * 2)); // Clear speed register
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <initLed+0x108>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <initLed+0x108>)
 8001972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001976:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (4 * 2)); // set speed register
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <initLed+0x108>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <initLed+0x108>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001982:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (4 * 1)); // Clear output type register
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <initLed+0x108>)
 8001986:	889b      	ldrh	r3, [r3, #4]
 8001988:	b29b      	uxth	r3, r3
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <initLed+0x108>)
 800198c:	f023 0310 	bic.w	r3, r3, #16
 8001990:	b29b      	uxth	r3, r3
 8001992:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (4)); // Set output type register
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <initLed+0x108>)
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <initLed+0x108>)
 8001998:	8892      	ldrh	r2, [r2, #4]
 800199a:	b292      	uxth	r2, r2
 800199c:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <initLed+0x108>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <initLed+0x108>)
 80019a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019a8:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000001 << (4 * 2)); // Set mode register
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <initLed+0x108>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <initLed+0x108>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	48000800 	.word	0x48000800
 80019c4:	48000400 	.word	0x48000400

080019c8 <writeLed>:
	}
}
*/


void writeLed(){
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

	// Right - Blue
	if(led.blu){
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <writeLed+0x94>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00a      	beq.n	80019ea <writeLed+0x22>
		GPIOA->ODR &= ~(0x0001 << 9); //Set pin PA9 to low - on
 80019d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019d8:	8a9b      	ldrh	r3, [r3, #20]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	8293      	strh	r3, [r2, #20]
 80019e8:	e009      	b.n	80019fe <writeLed+0x36>
	}
	else{
		GPIOA->ODR |= (0x0001 << 9); //Set pin PA9 to high - off
 80019ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019ee:	8a9b      	ldrh	r3, [r3, #20]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	8293      	strh	r3, [r2, #20]
	}


	// Up - Green
	if(led.gre){
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <writeLed+0x94>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d008      	beq.n	8001a18 <writeLed+0x50>
		GPIOC->ODR &= ~(0x0001 << 7); //Set pin PC7 to low - on
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <writeLed+0x98>)
 8001a08:	8a9b      	ldrh	r3, [r3, #20]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <writeLed+0x98>)
 8001a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	8293      	strh	r3, [r2, #20]
 8001a16:	e007      	b.n	8001a28 <writeLed+0x60>
	}
	else{
		GPIOC->ODR |= (0x0001 << 7); //Set pin PC7 to high - off
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <writeLed+0x98>)
 8001a1a:	8a9b      	ldrh	r3, [r3, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <writeLed+0x98>)
 8001a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	8293      	strh	r3, [r2, #20]
	}


	// Left - Red
	if(led.red){
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <writeLed+0x94>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <writeLed+0x7a>
		GPIOB->ODR &= ~(0x0001 << 4); //Set pin PB4 to low - on
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <writeLed+0x9c>)
 8001a32:	8a9b      	ldrh	r3, [r3, #20]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <writeLed+0x9c>)
 8001a38:	f023 0310 	bic.w	r3, r3, #16
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	8293      	strh	r3, [r2, #20]
	}
	else{
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
	}

}
 8001a40:	e007      	b.n	8001a52 <writeLed+0x8a>
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <writeLed+0x9c>)
 8001a44:	8a9b      	ldrh	r3, [r3, #20]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <writeLed+0x9c>)
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	8293      	strh	r3, [r2, #20]
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	200001d0 	.word	0x200001d0
 8001a60:	48000800 	.word	0x48000800
 8001a64:	48000400 	.word	0x48000400

08001a68 <windowSmp>:
		printf("%c", btt);
	}
	printf("%c\n", br);
}

void windowSmp(int x1, int y1, int x2, int y2) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b090      	sub	sp, #64	; 0x40
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]

		int tl = 218; 	// ┌
 8001a76:	23da      	movs	r3, #218	; 0xda
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
		int lsd = 180; 	// ┤
 8001a7a:	23b4      	movs	r3, #180	; 0xb4
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		int bl = 192;	// └
 8001a7e:	23c0      	movs	r3, #192	; 0xc0
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
		int wll = 179;	// │
 8001a82:	23b3      	movs	r3, #179	; 0xb3
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
		int btt = 196; 	// ─
 8001a86:	23c4      	movs	r3, #196	; 0xc4
 8001a88:	623b      	str	r3, [r7, #32]
		int tr = 191; 	// ┐
 8001a8a:	23bf      	movs	r3, #191	; 0xbf
 8001a8c:	61fb      	str	r3, [r7, #28]
		int rsd = 195;	// ├
 8001a8e:	23c3      	movs	r3, #195	; 0xc3
 8001a90:	61bb      	str	r3, [r7, #24]
		int br = 217;	// ┘
 8001a92:	23d9      	movs	r3, #217	; 0xd9
 8001a94:	617b      	str	r3, [r7, #20]

		//Top ┌──────┐
		gotoxy(x1, y1);
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f875 	bl	8001b88 <gotoxy>
		printf("%c", tl);
 8001a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001aa0:	f000 fdae 	bl	8002600 <putchar>
		for (int i=x1+1;i<x2-1;i++){
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aaa:	e005      	b.n	8001ab8 <windowSmp+0x50>
			printf("%c",btt);
 8001aac:	6a38      	ldr	r0, [r7, #32]
 8001aae:	f000 fda7 	bl	8002600 <putchar>
		for (int i=x1+1;i<x2-1;i++){
 8001ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	dbf4      	blt.n	8001aac <windowSmp+0x44>
		}


		printf("%c\n", tr);
 8001ac2:	69f9      	ldr	r1, [r7, #28]
 8001ac4:	481d      	ldr	r0, [pc, #116]	; (8001b3c <windowSmp+0xd4>)
 8001ac6:	f000 fd83 	bl	80025d0 <iprintf>

		//Mid │        │
		for (int i = y1+1; i < y2; i++) {
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3301      	adds	r3, #1
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ad0:	e012      	b.n	8001af8 <windowSmp+0x90>
			gotoxy(x1, i);
 8001ad2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f857 	bl	8001b88 <gotoxy>
			printf("%c", wll);
 8001ada:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001adc:	f000 fd90 	bl	8002600 <putchar>
			gotoxy(x2-1,i);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f84e 	bl	8001b88 <gotoxy>
			printf("%c", wll);
 8001aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001aee:	f000 fd87 	bl	8002600 <putchar>
		for (int i = y1+1; i < y2; i++) {
 8001af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af4:	3301      	adds	r3, #1
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbe8      	blt.n	8001ad2 <windowSmp+0x6a>
		}

		//Bottom  └─────────┘
		gotoxy(x1,y2);
 8001b00:	6839      	ldr	r1, [r7, #0]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f840 	bl	8001b88 <gotoxy>
		printf("%c", bl);
 8001b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b0a:	f000 fd79 	bl	8002600 <putchar>
		for (int i=x1; i < x2-2; i++){
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
 8001b12:	e005      	b.n	8001b20 <windowSmp+0xb8>
			printf("%c", btt);
 8001b14:	6a38      	ldr	r0, [r7, #32]
 8001b16:	f000 fd73 	bl	8002600 <putchar>
		for (int i=x1; i < x2-2; i++){
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b02      	subs	r3, #2
 8001b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbf4      	blt.n	8001b14 <windowSmp+0xac>
		}
		printf("%c\n", br);
 8001b2a:	6979      	ldr	r1, [r7, #20]
 8001b2c:	4803      	ldr	r0, [pc, #12]	; (8001b3c <windowSmp+0xd4>)
 8001b2e:	f000 fd4f 	bl	80025d0 <iprintf>
	}
 8001b32:	bf00      	nop
 8001b34:	3740      	adds	r7, #64	; 0x40
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	08003acc 	.word	0x08003acc

08001b40 <resetbgcolor>:
		foreground -= 8;
	}
	printf("%c[%d;%d;%dm", ESC, type, foreground + 30, background + 40);
}

void resetbgcolor() {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
 8001b44:	211b      	movs	r1, #27
 8001b46:	4802      	ldr	r0, [pc, #8]	; (8001b50 <resetbgcolor+0x10>)
 8001b48:	f000 fd42 	bl	80025d0 <iprintf>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	08003af4 	.word	0x08003af4

08001b54 <clrscr>:

void clrscr() {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 8001b58:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <clrscr+0x28>)
 8001b5a:	211b      	movs	r1, #27
 8001b5c:	4808      	ldr	r0, [pc, #32]	; (8001b80 <clrscr+0x2c>)
 8001b5e:	f000 fd37 	bl	80025d0 <iprintf>
	printf("%c[%s", ESC, "3J");
 8001b62:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <clrscr+0x30>)
 8001b64:	211b      	movs	r1, #27
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <clrscr+0x2c>)
 8001b68:	f000 fd32 	bl	80025d0 <iprintf>
	resetbgcolor();
 8001b6c:	f7ff ffe8 	bl	8001b40 <resetbgcolor>

	gotoxy(0, 0);
 8001b70:	2100      	movs	r1, #0
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 f808 	bl	8001b88 <gotoxy>
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	08003afc 	.word	0x08003afc
 8001b80:	08003b00 	.word	0x08003b00
 8001b84:	08003b08 	.word	0x08003b08

08001b88 <gotoxy>:

void clreol() {
	printf("%c[%s", ESC, "2k");
}

void gotoxy(int c, int r) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", ESC, r, c);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	211b      	movs	r1, #27
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <gotoxy+0x20>)
 8001b9a:	f000 fd19 	bl	80025d0 <iprintf>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	08003b10 	.word	0x08003b10

08001bac <TIM2_IRQHandler>:
	NVIC_EnableIRQ(TIM2_IRQn); // Enable interrupt


}

void TIM2_IRQHandler(void) {
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM2->SR &= ~0x0001; // Clear interrupt bit
 8001bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	6113      	str	r3, [r2, #16]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <main>:
#include "ansi.h"
#include "timer.h"
#include "LCD.h"
#include "joystick.h"

int main(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0

	// Setup communication with the PC
	uart_init(115200);
 8001bd2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001bd6:	f7fe feeb 	bl	80009b0 <uart_init>
	clrscr();
 8001bda:	f7ff ffbb 	bl	8001b54 <clrscr>

	intiJoystick();
 8001bde:	f7ff fac3 	bl	8001168 <intiJoystick>
	initLed();
 8001be2:	f7ff fe6b 	bl	80018bc <initLed>
	lcd_init();
 8001be6:	f7ff f963 	bl	8000eb0 <lcd_init>

	memset(buffer, 0x00, 512);
 8001bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4823      	ldr	r0, [pc, #140]	; (8001c80 <main+0xb4>)
 8001bf2:	f000 fce5 	bl	80025c0 <memset>
	initTimer();
 8001bf6:	f000 fbf3 	bl	80023e0 <initTimer>

//	char navn[] = "Player 1 Player 2 Player 3 Player 4                      ";
//	int slicelen = strlen(navn) * 5;
//	int	p = 128;

	refreshRate = 20;
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <main+0xb8>)
 8001bfc:	2214      	movs	r2, #20
 8001bfe:	601a      	str	r2, [r3, #0]

	int player_mode;
	int difficulty;

	menu(&player_mode, &difficulty);
 8001c00:	463a      	mov	r2, r7
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f844 	bl	8001c94 <menu>
	gotoxy(10,15);
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	200a      	movs	r0, #10
 8001c10:	f7ff ffba 	bl	8001b88 <gotoxy>
	printf("%d%d", player_mode, difficulty);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	481b      	ldr	r0, [pc, #108]	; (8001c88 <main+0xbc>)
 8001c1c:	f000 fcd8 	bl	80025d0 <iprintf>

	int alarm = 1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
	int alarm_off = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
	draw_gameplay_start();
 8001c28:	f7ff fd48 	bl	80016bc <draw_gameplay_start>



	while (1) {
		if (lcdUpdate == 0){
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <main+0xc0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10b      	bne.n	8001c4c <main+0x80>
			while (lcdUpdate == 0) {
 8001c34:	bf00      	nop
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <main+0xc0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0fb      	beq.n	8001c36 <main+0x6a>
			}
			score = score + 2;
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <main+0xc4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3302      	adds	r3, #2
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <main+0xc4>)
 8001c46:	6013      	str	r3, [r2, #0]
			draw_score();
 8001c48:	f7ff fd58 	bl	80016fc <draw_score>
		}
		if (alarm == 1) {
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d10c      	bne.n	8001c6c <main+0xa0>
			alarm_off += LCD_alarm();
 8001c52:	f7ff fd6b 	bl	800172c <LCD_alarm>
 8001c56:	4602      	mov	r2, r0
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60bb      	str	r3, [r7, #8]
			if (alarm_off == 5) {
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d103      	bne.n	8001c6c <main+0xa0>
				alarm_off = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
				alarm = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
			}
		}
		if (alarm == 0) {
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <main+0xaa>
			LCD_timer();
 8001c72:	f7ff fdcd 	bl	8001810 <LCD_timer>
		}
		readJoystick();
 8001c76:	f7ff fb0d 	bl	8001294 <readJoystick>
		writeLed();
 8001c7a:	f7ff fea5 	bl	80019c8 <writeLed>
	while (1) {
 8001c7e:	e7d5      	b.n	8001c2c <main+0x60>
 8001c80:	200001ec 	.word	0x200001ec
 8001c84:	200001e0 	.word	0x200001e0
 8001c88:	08003b1c 	.word	0x08003b1c
 8001c8c:	200001dc 	.word	0x200001dc
 8001c90:	200001c8 	.word	0x200001c8

08001c94 <menu>:
#include "ansi.h"
#include "joystick.h"
#include "LCD.h"

void menu(int *players, int *dif) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
	draw_main_menu();
 8001c9e:	f000 fa13 	bl	80020c8 <draw_main_menu>
	int selection = 1;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
	int gameinit = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
	*players = 0;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
	*dif = 0;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

	while (gameinit == 0) {
 8001cb6:	e0ad      	b.n	8001e14 <menu+0x180>
		readJoystick();
 8001cb8:	f7ff faec 	bl	8001294 <readJoystick>
		if (joy.up == 1) {
 8001cbc:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <menu+0x1b0>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d110      	bne.n	8001ce8 <menu+0x54>
			while (joy.up == 1) {
 8001cc6:	e001      	b.n	8001ccc <menu+0x38>
				readJoystick();
 8001cc8:	f7ff fae4 	bl	8001294 <readJoystick>
			while (joy.up == 1) {
 8001ccc:	4b5d      	ldr	r3, [pc, #372]	; (8001e44 <menu+0x1b0>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d0f8      	beq.n	8001cc8 <menu+0x34>
			}
			if (selection > 1 && selection <= 4 ) {
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	dd05      	ble.n	8001ce8 <menu+0x54>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	dc02      	bgt.n	8001ce8 <menu+0x54>
				selection--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
			}
		}

		if (joy.down == 1) {
 8001ce8:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <menu+0x1b0>)
 8001cea:	785b      	ldrb	r3, [r3, #1]
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d110      	bne.n	8001d14 <menu+0x80>
			while (joy.down == 1) {
 8001cf2:	e001      	b.n	8001cf8 <menu+0x64>
				readJoystick();
 8001cf4:	f7ff face 	bl	8001294 <readJoystick>
			while (joy.down == 1) {
 8001cf8:	4b52      	ldr	r3, [pc, #328]	; (8001e44 <menu+0x1b0>)
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	b25b      	sxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d0f8      	beq.n	8001cf4 <menu+0x60>
			}
			if (selection >= 1 && selection < 4 ) {
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	dd05      	ble.n	8001d14 <menu+0x80>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	dc02      	bgt.n	8001d14 <menu+0x80>
				selection++;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3301      	adds	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
			}
		}
		if (selection == 1) {
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d11b      	bne.n	8001d52 <menu+0xbe>
			lcd_write_string("  ", 2, 1);
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	484a      	ldr	r0, [pc, #296]	; (8001e48 <menu+0x1b4>)
 8001d20:	f7ff fb22 	bl	8001368 <lcd_write_string>
			lcd_write_string("->", 1, 1);
 8001d24:	2201      	movs	r2, #1
 8001d26:	2101      	movs	r1, #1
 8001d28:	4848      	ldr	r0, [pc, #288]	; (8001e4c <menu+0x1b8>)
 8001d2a:	f7ff fb1d 	bl	8001368 <lcd_write_string>
			if (joy.center == 1) {
 8001d2e:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <menu+0x1b0>)
 8001d30:	791b      	ldrb	r3, [r3, #4]
 8001d32:	b25b      	sxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10c      	bne.n	8001d52 <menu+0xbe>
				while (joy.center == 1) {
 8001d38:	e001      	b.n	8001d3e <menu+0xaa>
					readJoystick();
 8001d3a:	f7ff faab 	bl	8001294 <readJoystick>
				while (joy.center == 1) {
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <menu+0x1b0>)
 8001d40:	791b      	ldrb	r3, [r3, #4]
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d0f8      	beq.n	8001d3a <menu+0xa6>
				}
				*players = player_selection();
 8001d48:	f000 f886 	bl	8001e58 <player_selection>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]
			}
		}
		if (selection == 2) {
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d120      	bne.n	8001d9a <menu+0x106>
			lcd_write_string("  ", 1, 1);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	483a      	ldr	r0, [pc, #232]	; (8001e48 <menu+0x1b4>)
 8001d5e:	f7ff fb03 	bl	8001368 <lcd_write_string>
			lcd_write_string("  ", 3, 1);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2103      	movs	r1, #3
 8001d66:	4838      	ldr	r0, [pc, #224]	; (8001e48 <menu+0x1b4>)
 8001d68:	f7ff fafe 	bl	8001368 <lcd_write_string>
			lcd_write_string("->", 2, 1);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2102      	movs	r1, #2
 8001d70:	4836      	ldr	r0, [pc, #216]	; (8001e4c <menu+0x1b8>)
 8001d72:	f7ff faf9 	bl	8001368 <lcd_write_string>
			if (joy.center == 1) {
 8001d76:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <menu+0x1b0>)
 8001d78:	791b      	ldrb	r3, [r3, #4]
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d10c      	bne.n	8001d9a <menu+0x106>
				while (joy.center == 1) {
 8001d80:	e001      	b.n	8001d86 <menu+0xf2>
					readJoystick();
 8001d82:	f7ff fa87 	bl	8001294 <readJoystick>
				while (joy.center == 1) {
 8001d86:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <menu+0x1b0>)
 8001d88:	791b      	ldrb	r3, [r3, #4]
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d0f8      	beq.n	8001d82 <menu+0xee>
				}
				*dif = difficulty();
 8001d90:	f000 f8ca 	bl	8001f28 <difficulty>
 8001d94:	4602      	mov	r2, r0
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	601a      	str	r2, [r3, #0]
			}
		}
		if (selection == 3) {
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d11d      	bne.n	8001ddc <menu+0x148>
			lcd_write_string("  ", 2, 1);
 8001da0:	2201      	movs	r2, #1
 8001da2:	2102      	movs	r1, #2
 8001da4:	4828      	ldr	r0, [pc, #160]	; (8001e48 <menu+0x1b4>)
 8001da6:	f7ff fadf 	bl	8001368 <lcd_write_string>
			lcd_write_string("  ", 4, 1);
 8001daa:	2201      	movs	r2, #1
 8001dac:	2104      	movs	r1, #4
 8001dae:	4826      	ldr	r0, [pc, #152]	; (8001e48 <menu+0x1b4>)
 8001db0:	f7ff fada 	bl	8001368 <lcd_write_string>
			lcd_write_string("->", 3, 1);
 8001db4:	2201      	movs	r2, #1
 8001db6:	2103      	movs	r1, #3
 8001db8:	4824      	ldr	r0, [pc, #144]	; (8001e4c <menu+0x1b8>)
 8001dba:	f7ff fad5 	bl	8001368 <lcd_write_string>
			if (joy.center == 1) {
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <menu+0x1b0>)
 8001dc0:	791b      	ldrb	r3, [r3, #4]
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d109      	bne.n	8001ddc <menu+0x148>
				while (joy.center == 1) {
 8001dc8:	e001      	b.n	8001dce <menu+0x13a>
					readJoystick();
 8001dca:	f7ff fa63 	bl	8001294 <readJoystick>
				while (joy.center == 1) {
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <menu+0x1b0>)
 8001dd0:	791b      	ldrb	r3, [r3, #4]
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d0f8      	beq.n	8001dca <menu+0x136>
				}
				help_menu();
 8001dd8:	f000 f94e 	bl	8002078 <help_menu>
			}
		}
		if (selection == 4) {
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d118      	bne.n	8001e14 <menu+0x180>
			lcd_write_string("  ", 3, 1);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2103      	movs	r1, #3
 8001de6:	4818      	ldr	r0, [pc, #96]	; (8001e48 <menu+0x1b4>)
 8001de8:	f7ff fabe 	bl	8001368 <lcd_write_string>
			lcd_write_string("->", 4, 1);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2104      	movs	r1, #4
 8001df0:	4816      	ldr	r0, [pc, #88]	; (8001e4c <menu+0x1b8>)
 8001df2:	f7ff fab9 	bl	8001368 <lcd_write_string>
			if (joy.center == 1) {
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <menu+0x1b0>)
 8001df8:	791b      	ldrb	r3, [r3, #4]
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d109      	bne.n	8001e14 <menu+0x180>
				while (joy.center == 1) {
 8001e00:	e001      	b.n	8001e06 <menu+0x172>
					readJoystick();
 8001e02:	f7ff fa47 	bl	8001294 <readJoystick>
				while (joy.center == 1) {
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <menu+0x1b0>)
 8001e08:	791b      	ldrb	r3, [r3, #4]
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d0f8      	beq.n	8001e02 <menu+0x16e>
				}
				gameinit = 1;
 8001e10:	2301      	movs	r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
	while (gameinit == 0) {
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f43f af4e 	beq.w	8001cb8 <menu+0x24>
			}

		}

	}
	memset(buffer, 0x00, 512);
 8001e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e20:	2100      	movs	r1, #0
 8001e22:	480b      	ldr	r0, [pc, #44]	; (8001e50 <menu+0x1bc>)
 8001e24:	f000 fbcc 	bl	80025c0 <memset>
	t.mn = 2;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <menu+0x1c0>)
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	705a      	strb	r2, [r3, #1]
	t.sk = 0;
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <menu+0x1c0>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	709a      	strb	r2, [r3, #2]
	t.state = 1;
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <menu+0x1c0>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	711a      	strb	r2, [r3, #4]
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200001e4 	.word	0x200001e4
 8001e48:	08003b24 	.word	0x08003b24
 8001e4c:	08003b28 	.word	0x08003b28
 8001e50:	200001ec 	.word	0x200001ec
 8001e54:	200001c0 	.word	0x200001c0

08001e58 <player_selection>:

int player_selection() {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
	int x = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
	int a;
	lcd_write_string("                   ", 1, 12);
 8001e62:	220c      	movs	r2, #12
 8001e64:	2101      	movs	r1, #1
 8001e66:	4829      	ldr	r0, [pc, #164]	; (8001f0c <player_selection+0xb4>)
 8001e68:	f7ff fa7e 	bl	8001368 <lcd_write_string>
	while (x == 0) {
 8001e6c:	e03e      	b.n	8001eec <player_selection+0x94>
		readJoystick();
 8001e6e:	f7ff fa11 	bl	8001294 <readJoystick>

		if (joy.right == 1) {
 8001e72:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <player_selection+0xb8>)
 8001e74:	78db      	ldrb	r3, [r3, #3]
 8001e76:	b25b      	sxtb	r3, r3
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d102      	bne.n	8001e82 <player_selection+0x2a>
			a = 1;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	e006      	b.n	8001e90 <player_selection+0x38>
		} else if (joy.left == 1) {
 8001e82:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <player_selection+0xb8>)
 8001e84:	789b      	ldrb	r3, [r3, #2]
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <player_selection+0x38>
			a = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	603b      	str	r3, [r7, #0]
		}
		if (a == 0) {
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <player_selection+0x4a>
			lcd_write_string("<1 Player>", 1, 12);
 8001e96:	220c      	movs	r2, #12
 8001e98:	2101      	movs	r1, #1
 8001e9a:	481e      	ldr	r0, [pc, #120]	; (8001f14 <player_selection+0xbc>)
 8001e9c:	f7ff fa64 	bl	8001368 <lcd_write_string>
 8001ea0:	e007      	b.n	8001eb2 <player_selection+0x5a>
		} else if (a == 1) {
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d104      	bne.n	8001eb2 <player_selection+0x5a>
			lcd_write_string("<2 Player>", 1, 12);
 8001ea8:	220c      	movs	r2, #12
 8001eaa:	2101      	movs	r1, #1
 8001eac:	481a      	ldr	r0, [pc, #104]	; (8001f18 <player_selection+0xc0>)
 8001eae:	f7ff fa5b 	bl	8001368 <lcd_write_string>
		}
		if (joy.center == 1 ) {
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <player_selection+0xb8>)
 8001eb4:	791b      	ldrb	r3, [r3, #4]
 8001eb6:	b25b      	sxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d117      	bne.n	8001eec <player_selection+0x94>
			lcd_write_string("Player Selection", 1, 12);
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4816      	ldr	r0, [pc, #88]	; (8001f1c <player_selection+0xc4>)
 8001ec2:	f7ff fa51 	bl	8001368 <lcd_write_string>
			if (a == 0) {
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <player_selection+0x80>
				lcd_write_string("<P1>", 1, 108);
 8001ecc:	226c      	movs	r2, #108	; 0x6c
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4813      	ldr	r0, [pc, #76]	; (8001f20 <player_selection+0xc8>)
 8001ed2:	f7ff fa49 	bl	8001368 <lcd_write_string>
 8001ed6:	e007      	b.n	8001ee8 <player_selection+0x90>
			} else if (a == 1) {
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d104      	bne.n	8001ee8 <player_selection+0x90>
				lcd_write_string("<P2>", 1, 108);
 8001ede:	226c      	movs	r2, #108	; 0x6c
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4810      	ldr	r0, [pc, #64]	; (8001f24 <player_selection+0xcc>)
 8001ee4:	f7ff fa40 	bl	8001368 <lcd_write_string>
			}
			x = 1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	607b      	str	r3, [r7, #4]
	while (x == 0) {
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0bd      	beq.n	8001e6e <player_selection+0x16>
		}
	}
	while (joy.center == 1 ) {
 8001ef2:	e001      	b.n	8001ef8 <player_selection+0xa0>
		readJoystick();
 8001ef4:	f7ff f9ce 	bl	8001294 <readJoystick>
	while (joy.center == 1 ) {
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <player_selection+0xb8>)
 8001efa:	791b      	ldrb	r3, [r3, #4]
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d0f8      	beq.n	8001ef4 <player_selection+0x9c>
	}
	return a;
 8001f02:	683b      	ldr	r3, [r7, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	08003b2c 	.word	0x08003b2c
 8001f10:	200001e4 	.word	0x200001e4
 8001f14:	08003b40 	.word	0x08003b40
 8001f18:	08003b4c 	.word	0x08003b4c
 8001f1c:	08003b58 	.word	0x08003b58
 8001f20:	08003b6c 	.word	0x08003b6c
 8001f24:	08003b74 	.word	0x08003b74

08001f28 <difficulty>:


int difficulty() {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
	int x = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
	int a = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
	lcd_write_string("                ", 2, 12);
 8001f36:	220c      	movs	r2, #12
 8001f38:	2102      	movs	r1, #2
 8001f3a:	4846      	ldr	r0, [pc, #280]	; (8002054 <difficulty+0x12c>)
 8001f3c:	f7ff fa14 	bl	8001368 <lcd_write_string>
	lcd_write_string("<Easy>", 2, 12);
 8001f40:	220c      	movs	r2, #12
 8001f42:	2102      	movs	r1, #2
 8001f44:	4844      	ldr	r0, [pc, #272]	; (8002058 <difficulty+0x130>)
 8001f46:	f7ff fa0f 	bl	8001368 <lcd_write_string>
	while (x == 0) {
 8001f4a:	e072      	b.n	8002032 <difficulty+0x10a>
		readJoystick();
 8001f4c:	f7ff f9a2 	bl	8001294 <readJoystick>
		if (joy.right == 1 && a <= 1) {
 8001f50:	4b42      	ldr	r3, [pc, #264]	; (800205c <difficulty+0x134>)
 8001f52:	78db      	ldrb	r3, [r3, #3]
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10e      	bne.n	8001f78 <difficulty+0x50>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	dc0b      	bgt.n	8001f78 <difficulty+0x50>
			while (joy.right == 1) {
 8001f60:	e001      	b.n	8001f66 <difficulty+0x3e>
				readJoystick();
 8001f62:	f7ff f997 	bl	8001294 <readJoystick>
			while (joy.right == 1) {
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <difficulty+0x134>)
 8001f68:	78db      	ldrb	r3, [r3, #3]
 8001f6a:	b25b      	sxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d0f8      	beq.n	8001f62 <difficulty+0x3a>
			}
			a++;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	e012      	b.n	8001f9e <difficulty+0x76>
		} else if (joy.left == 1 && a >= 1) {
 8001f78:	4b38      	ldr	r3, [pc, #224]	; (800205c <difficulty+0x134>)
 8001f7a:	789b      	ldrb	r3, [r3, #2]
 8001f7c:	b25b      	sxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d10d      	bne.n	8001f9e <difficulty+0x76>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	dd0a      	ble.n	8001f9e <difficulty+0x76>
			while (joy.left == 1) {
 8001f88:	e001      	b.n	8001f8e <difficulty+0x66>
				readJoystick();
 8001f8a:	f7ff f983 	bl	8001294 <readJoystick>
			while (joy.left == 1) {
 8001f8e:	4b33      	ldr	r3, [pc, #204]	; (800205c <difficulty+0x134>)
 8001f90:	789b      	ldrb	r3, [r3, #2]
 8001f92:	b25b      	sxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d0f8      	beq.n	8001f8a <difficulty+0x62>
			}
			a--;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	603b      	str	r3, [r7, #0]
		}
		if (a == 0 ) {
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10a      	bne.n	8001fba <difficulty+0x92>
			lcd_write_string_no_push("        ", 2, 12);
 8001fa4:	220c      	movs	r2, #12
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	482d      	ldr	r0, [pc, #180]	; (8002060 <difficulty+0x138>)
 8001faa:	f7ff fa6f 	bl	800148c <lcd_write_string_no_push>
			lcd_write_string("<easy>", 2, 12);
 8001fae:	220c      	movs	r2, #12
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	482c      	ldr	r0, [pc, #176]	; (8002064 <difficulty+0x13c>)
 8001fb4:	f7ff f9d8 	bl	8001368 <lcd_write_string>
 8001fb8:	e015      	b.n	8001fe6 <difficulty+0xbe>
		} else if (a == 1 ) {
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d105      	bne.n	8001fcc <difficulty+0xa4>
			lcd_write_string("<normal>", 2, 12);
 8001fc0:	220c      	movs	r2, #12
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	4828      	ldr	r0, [pc, #160]	; (8002068 <difficulty+0x140>)
 8001fc6:	f7ff f9cf 	bl	8001368 <lcd_write_string>
 8001fca:	e00c      	b.n	8001fe6 <difficulty+0xbe>
		} else if (a == 2 ) {
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d109      	bne.n	8001fe6 <difficulty+0xbe>
			lcd_write_string_no_push("        ", 2, 12);
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	4822      	ldr	r0, [pc, #136]	; (8002060 <difficulty+0x138>)
 8001fd8:	f7ff fa58 	bl	800148c <lcd_write_string_no_push>
			lcd_write_string("<hard>", 2, 12);
 8001fdc:	220c      	movs	r2, #12
 8001fde:	2102      	movs	r1, #2
 8001fe0:	4822      	ldr	r0, [pc, #136]	; (800206c <difficulty+0x144>)
 8001fe2:	f7ff f9c1 	bl	8001368 <lcd_write_string>
		}
		if (joy.center == 1 ) {
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <difficulty+0x134>)
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d120      	bne.n	8002032 <difficulty+0x10a>
			lcd_write_string("Difficulty", 2, 12);
 8001ff0:	220c      	movs	r2, #12
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	481e      	ldr	r0, [pc, #120]	; (8002070 <difficulty+0x148>)
 8001ff6:	f7ff f9b7 	bl	8001368 <lcd_write_string>
			if (a == 0) {
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <difficulty+0xe4>
				lcd_write_string("<easy>", 2, 98);
 8002000:	2262      	movs	r2, #98	; 0x62
 8002002:	2102      	movs	r1, #2
 8002004:	4817      	ldr	r0, [pc, #92]	; (8002064 <difficulty+0x13c>)
 8002006:	f7ff f9af 	bl	8001368 <lcd_write_string>
 800200a:	e010      	b.n	800202e <difficulty+0x106>
			} else if (a == 1) {
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <difficulty+0xf6>
				lcd_write_string("<norm>", 2, 98);
 8002012:	2262      	movs	r2, #98	; 0x62
 8002014:	2102      	movs	r1, #2
 8002016:	4817      	ldr	r0, [pc, #92]	; (8002074 <difficulty+0x14c>)
 8002018:	f7ff f9a6 	bl	8001368 <lcd_write_string>
 800201c:	e007      	b.n	800202e <difficulty+0x106>
			} else if (a == 2) {
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d104      	bne.n	800202e <difficulty+0x106>
				lcd_write_string("<hard>", 2, 98);
 8002024:	2262      	movs	r2, #98	; 0x62
 8002026:	2102      	movs	r1, #2
 8002028:	4810      	ldr	r0, [pc, #64]	; (800206c <difficulty+0x144>)
 800202a:	f7ff f99d 	bl	8001368 <lcd_write_string>
			}
			x = 1;
 800202e:	2301      	movs	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
	while (x == 0) {
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d089      	beq.n	8001f4c <difficulty+0x24>
		}
	}
	while (joy.center == 1 ) {
 8002038:	e001      	b.n	800203e <difficulty+0x116>
		readJoystick();
 800203a:	f7ff f92b 	bl	8001294 <readJoystick>
	while (joy.center == 1 ) {
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <difficulty+0x134>)
 8002040:	791b      	ldrb	r3, [r3, #4]
 8002042:	b25b      	sxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d0f8      	beq.n	800203a <difficulty+0x112>
	}
	return a;
 8002048:	683b      	ldr	r3, [r7, #0]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	08003b7c 	.word	0x08003b7c
 8002058:	08003b90 	.word	0x08003b90
 800205c:	200001e4 	.word	0x200001e4
 8002060:	08003b98 	.word	0x08003b98
 8002064:	08003ba4 	.word	0x08003ba4
 8002068:	08003bac 	.word	0x08003bac
 800206c:	08003bb8 	.word	0x08003bb8
 8002070:	08003bc0 	.word	0x08003bc0
 8002074:	08003bcc 	.word	0x08003bcc

08002078 <help_menu>:

void help_menu() {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
	int x = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
	lcd_write_string("!Help window on screen!", 3, 12);
 8002082:	220c      	movs	r2, #12
 8002084:	2103      	movs	r1, #3
 8002086:	480d      	ldr	r0, [pc, #52]	; (80020bc <help_menu+0x44>)
 8002088:	f7ff f96e 	bl	8001368 <lcd_write_string>
	windowSmp(5,5,80,35);
 800208c:	2323      	movs	r3, #35	; 0x23
 800208e:	2250      	movs	r2, #80	; 0x50
 8002090:	2105      	movs	r1, #5
 8002092:	2005      	movs	r0, #5
 8002094:	f7ff fce8 	bl	8001a68 <windowSmp>
	gotoxy(10,7);
 8002098:	2107      	movs	r1, #7
 800209a:	200a      	movs	r0, #10
 800209c:	f7ff fd74 	bl	8001b88 <gotoxy>
	printf("Player 1 uses the joystick to move and center to shoot");
 80020a0:	4807      	ldr	r0, [pc, #28]	; (80020c0 <help_menu+0x48>)
 80020a2:	f000 fa95 	bl	80025d0 <iprintf>
	gotoxy(10,10);
 80020a6:	210a      	movs	r1, #10
 80020a8:	200a      	movs	r0, #10
 80020aa:	f7ff fd6d 	bl	8001b88 <gotoxy>
	printf("Player 2 uses WASD to move and E to shoot");
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <help_menu+0x4c>)
 80020b0:	f000 fa8e 	bl	80025d0 <iprintf>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	08003bd4 	.word	0x08003bd4
 80020c0:	08003bec 	.word	0x08003bec
 80020c4:	08003c24 	.word	0x08003c24

080020c8 <draw_main_menu>:

void draw_main_menu() {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	lcd_write_string("Player Selection", 1, 12);
 80020cc:	220c      	movs	r2, #12
 80020ce:	2101      	movs	r1, #1
 80020d0:	4811      	ldr	r0, [pc, #68]	; (8002118 <draw_main_menu+0x50>)
 80020d2:	f7ff f949 	bl	8001368 <lcd_write_string>
	lcd_write_string("<P1>", 1, 108);
 80020d6:	226c      	movs	r2, #108	; 0x6c
 80020d8:	2101      	movs	r1, #1
 80020da:	4810      	ldr	r0, [pc, #64]	; (800211c <draw_main_menu+0x54>)
 80020dc:	f7ff f944 	bl	8001368 <lcd_write_string>
	lcd_write_string("Difficulty", 2, 12);
 80020e0:	220c      	movs	r2, #12
 80020e2:	2102      	movs	r1, #2
 80020e4:	480e      	ldr	r0, [pc, #56]	; (8002120 <draw_main_menu+0x58>)
 80020e6:	f7ff f93f 	bl	8001368 <lcd_write_string>
	lcd_write_string("<easy>", 2, 98);
 80020ea:	2262      	movs	r2, #98	; 0x62
 80020ec:	2102      	movs	r1, #2
 80020ee:	480d      	ldr	r0, [pc, #52]	; (8002124 <draw_main_menu+0x5c>)
 80020f0:	f7ff f93a 	bl	8001368 <lcd_write_string>
	lcd_write_string("Help Menu", 3, 12);
 80020f4:	220c      	movs	r2, #12
 80020f6:	2103      	movs	r1, #3
 80020f8:	480b      	ldr	r0, [pc, #44]	; (8002128 <draw_main_menu+0x60>)
 80020fa:	f7ff f935 	bl	8001368 <lcd_write_string>
	lcd_write_string("Start Game", 4, 12);
 80020fe:	220c      	movs	r2, #12
 8002100:	2104      	movs	r1, #4
 8002102:	480a      	ldr	r0, [pc, #40]	; (800212c <draw_main_menu+0x64>)
 8002104:	f7ff f930 	bl	8001368 <lcd_write_string>
	lcd_write_string("->", 1, 1);
 8002108:	2201      	movs	r2, #1
 800210a:	2101      	movs	r1, #1
 800210c:	4808      	ldr	r0, [pc, #32]	; (8002130 <draw_main_menu+0x68>)
 800210e:	f7ff f92b 	bl	8001368 <lcd_write_string>
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	08003b58 	.word	0x08003b58
 800211c:	08003b6c 	.word	0x08003b6c
 8002120:	08003bc0 	.word	0x08003bc0
 8002124:	08003ba4 	.word	0x08003ba4
 8002128:	08003c50 	.word	0x08003c50
 800212c:	08003c5c 	.word	0x08003c5c
 8002130:	08003b28 	.word	0x08003b28

08002134 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e00a      	b.n	800215c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002146:	f3af 8000 	nop.w
 800214a:	4601      	mov	r1, r0
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	60ba      	str	r2, [r7, #8]
 8002152:	b2ca      	uxtb	r2, r1
 8002154:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	dbf0      	blt.n	8002146 <_read+0x12>
	}

return len;
 8002164:	687b      	ldr	r3, [r7, #4]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_close>:
	}
	return len;
}

int _close(int file)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
	return -1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002196:	605a      	str	r2, [r3, #4]
	return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_isatty>:

int _isatty(int file)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
	return 1;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
	return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <_sbrk+0x50>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <_sbrk+0x16>
		heap_end = &end;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <_sbrk+0x50>)
 80021ea:	4a10      	ldr	r2, [pc, #64]	; (800222c <_sbrk+0x54>)
 80021ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <_sbrk+0x50>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <_sbrk+0x50>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	466a      	mov	r2, sp
 80021fe:	4293      	cmp	r3, r2
 8002200:	d907      	bls.n	8002212 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002202:	f000 f9b3 	bl	800256c <__errno>
 8002206:	4603      	mov	r3, r0
 8002208:	220c      	movs	r2, #12
 800220a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800220c:	f04f 33ff 	mov.w	r3, #4294967295
 8002210:	e006      	b.n	8002220 <_sbrk+0x48>
	}

	heap_end += incr;
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <_sbrk+0x50>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	4a03      	ldr	r2, [pc, #12]	; (8002228 <_sbrk+0x50>)
 800221c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200001b0 	.word	0x200001b0
 800222c:	20000400 	.word	0x20000400

08002230 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <SystemInit+0x84>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <SystemInit+0x84>)
 800223c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <SystemInit+0x88>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <SystemInit+0x88>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <SystemInit+0x88>)
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	4918      	ldr	r1, [pc, #96]	; (80022b8 <SystemInit+0x88>)
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <SystemInit+0x8c>)
 8002258:	4013      	ands	r3, r2
 800225a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800225c:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <SystemInit+0x88>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <SystemInit+0x88>)
 8002262:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <SystemInit+0x88>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <SystemInit+0x88>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <SystemInit+0x88>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <SystemInit+0x88>)
 800227e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002282:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <SystemInit+0x88>)
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <SystemInit+0x88>)
 800228a:	f023 030f 	bic.w	r3, r3, #15
 800228e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <SystemInit+0x88>)
 8002292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002294:	4908      	ldr	r1, [pc, #32]	; (80022b8 <SystemInit+0x88>)
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <SystemInit+0x90>)
 8002298:	4013      	ands	r3, r2
 800229a:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <SystemInit+0x88>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80022a2:	f000 f80f 	bl	80022c4 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022a6:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <SystemInit+0x84>)
 80022a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ac:	609a      	str	r2, [r3, #8]
#endif  
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00
 80022b8:	40021000 	.word	0x40021000
 80022bc:	f87fc00c 	.word	0xf87fc00c
 80022c0:	ff00fccc 	.word	0xff00fccc

080022c4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80022c8:	4b21      	ldr	r3, [pc, #132]	; (8002350 <SetSysClock+0x8c>)
 80022ca:	2212      	movs	r2, #18
 80022cc:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80022ce:	4b21      	ldr	r3, [pc, #132]	; (8002354 <SetSysClock+0x90>)
 80022d0:	4a20      	ldr	r2, [pc, #128]	; (8002354 <SetSysClock+0x90>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80022d6:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <SetSysClock+0x90>)
 80022d8:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <SetSysClock+0x90>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <SetSysClock+0x90>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <SetSysClock+0x90>)
 80022e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e8:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80022ea:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <SetSysClock+0x90>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a19      	ldr	r2, [pc, #100]	; (8002354 <SetSysClock+0x90>)
 80022f0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80022f4:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <SetSysClock+0x90>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a16      	ldr	r2, [pc, #88]	; (8002354 <SetSysClock+0x90>)
 80022fc:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8002300:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <SetSysClock+0x90>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a13      	ldr	r2, [pc, #76]	; (8002354 <SetSysClock+0x90>)
 8002308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800230e:	bf00      	nop
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <SetSysClock+0x90>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f9      	beq.n	8002310 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <SetSysClock+0x90>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <SetSysClock+0x90>)
 8002322:	f023 0303 	bic.w	r3, r3, #3
 8002326:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <SetSysClock+0x90>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a09      	ldr	r2, [pc, #36]	; (8002354 <SetSysClock+0x90>)
 800232e:	f043 0302 	orr.w	r3, r3, #2
 8002332:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002334:	bf00      	nop
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <SetSysClock+0x90>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b08      	cmp	r3, #8
 8002340:	d1f9      	bne.n	8002336 <SetSysClock+0x72>
  {
  }
}
 8002342:	bf00      	nop
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40022000 	.word	0x40022000
 8002354:	40021000 	.word	0x40021000

08002358 <NVIC_EnableIRQ>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	2201      	movs	r2, #1
 800236a:	fa02 f103 	lsl.w	r1, r2, r3
 800236e:	4a06      	ldr	r2, [pc, #24]	; (8002388 <NVIC_EnableIRQ+0x30>)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da0b      	bge.n	80023b8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <NVIC_SetPriority+0x4c>)
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	3b04      	subs	r3, #4
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	440b      	add	r3, r1
 80023b4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80023b6:	e009      	b.n	80023cc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4907      	ldr	r1, [pc, #28]	; (80023dc <NVIC_SetPriority+0x50>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <initTimer>:
#include "ansi.h"
#include "stm32f30x_conf.h"
#include "timer.h"


void initTimer(){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <initTimer+0x48>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <initTimer+0x48>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ee:	6193      	str	r3, [r2, #24]
	TIM15->CR1 	= 0x0001; // Configure timer 15
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <initTimer+0x4c>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	801a      	strh	r2, [r3, #0]
	TIM15->ARR 	= 0xF9FF; // Set reload value
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <initTimer+0x4c>)
 80023f8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->PSC 	= 0x0009; // Set prescale value
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <initTimer+0x4c>)
 8002400:	2209      	movs	r2, #9
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->DIER	|= 0x0001;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <initTimer+0x4c>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a08      	ldr	r2, [pc, #32]	; (800242c <initTimer+0x4c>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	60d3      	str	r3, [r2, #12]
	TIM15->SR	= 0x0000;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <initTimer+0x4c>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
	NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8002416:	2100      	movs	r1, #0
 8002418:	2018      	movs	r0, #24
 800241a:	f7ff ffb7 	bl	800238c <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 800241e:	2018      	movs	r0, #24
 8002420:	f7ff ff9a 	bl	8002358 <NVIC_EnableIRQ>
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	40014000 	.word	0x40014000

08002430 <TIM1_BRK_TIM15_IRQHandler>:


void TIM1_BRK_TIM15_IRQHandler(void) {
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
	static int i;

	if(t.state){
 8002434:	4b33      	ldr	r3, [pc, #204]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 8002436:	791b      	ldrb	r3, [r3, #4]
 8002438:	b25b      	sxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d03b      	beq.n	80024b6 <TIM1_BRK_TIM15_IRQHandler+0x86>
		if (t.ml <= 0){
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 8002440:	78db      	ldrb	r3, [r3, #3]
 8002442:	b25b      	sxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	dc0b      	bgt.n	8002460 <TIM1_BRK_TIM15_IRQHandler+0x30>
			t.ml = 99;
 8002448:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 800244a:	2263      	movs	r2, #99	; 0x63
 800244c:	70da      	strb	r2, [r3, #3]
			t.sk--;
 800244e:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 8002450:	789b      	ldrb	r3, [r3, #2]
 8002452:	b25b      	sxtb	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	b25a      	sxtb	r2, r3
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 800245e:	709a      	strb	r2, [r3, #2]
		}
		if (t.sk < 0){
 8002460:	4b28      	ldr	r3, [pc, #160]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 8002462:	789b      	ldrb	r3, [r3, #2]
 8002464:	b25b      	sxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	da0b      	bge.n	8002482 <TIM1_BRK_TIM15_IRQHandler+0x52>
			t.sk = 59;
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 800246c:	223b      	movs	r2, #59	; 0x3b
 800246e:	709a      	strb	r2, [r3, #2]
			t.mn--;
 8002470:	4b24      	ldr	r3, [pc, #144]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	b25b      	sxtb	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	b25a      	sxtb	r2, r3
 800247e:	4b21      	ldr	r3, [pc, #132]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 8002480:	705a      	strb	r2, [r3, #1]
		}
		t.ml--;
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 8002484:	78db      	ldrb	r3, [r3, #3]
 8002486:	b25b      	sxtb	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	b25a      	sxtb	r2, r3
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 8002492:	70da      	strb	r2, [r3, #3]
		if (t.mn < 0){
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	b25b      	sxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	da0b      	bge.n	80024b6 <TIM1_BRK_TIM15_IRQHandler+0x86>
			t.state = 0;
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	711a      	strb	r2, [r3, #4]
			t.mn = 0;
 80024a4:	4b17      	ldr	r3, [pc, #92]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	705a      	strb	r2, [r3, #1]
			t.sk = 0;
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	709a      	strb	r2, [r3, #2]
			t.ml = 0;
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <TIM1_BRK_TIM15_IRQHandler+0xd4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	70da      	strb	r2, [r3, #3]
		}
	}

	lcdUpdate++;
 80024b6:	4b14      	ldr	r3, [pc, #80]	; (8002508 <TIM1_BRK_TIM15_IRQHandler+0xd8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	4a12      	ldr	r2, [pc, #72]	; (8002508 <TIM1_BRK_TIM15_IRQHandler+0xd8>)
 80024be:	6013      	str	r3, [r2, #0]
	if (lcdUpdate >= refreshRate){
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <TIM1_BRK_TIM15_IRQHandler+0xd8>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <TIM1_BRK_TIM15_IRQHandler+0xdc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	db0f      	blt.n	80024ec <TIM1_BRK_TIM15_IRQHandler+0xbc>
//	}
//	else if (led.blu == 1){
//		led.blu = 0;
//	}

		if (i > 4){
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <TIM1_BRK_TIM15_IRQHandler+0xe0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	dd03      	ble.n	80024dc <TIM1_BRK_TIM15_IRQHandler+0xac>
			i = 0;
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <TIM1_BRK_TIM15_IRQHandler+0xe0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e004      	b.n	80024e6 <TIM1_BRK_TIM15_IRQHandler+0xb6>
		}
		else {
			i++;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <TIM1_BRK_TIM15_IRQHandler+0xe0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <TIM1_BRK_TIM15_IRQHandler+0xe0>)
 80024e4:	6013      	str	r3, [r2, #0]
		}

	lcdUpdate = 0;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <TIM1_BRK_TIM15_IRQHandler+0xd8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

//	gotoxy(1,1);
//	printf("i:%d | red:%d, green:%d, blue:%d",i,led.red,led.gre,led.blu);


TIM15->SR &= ~0x0001; // Clear interrupt bit
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	4a08      	ldr	r2, [pc, #32]	; (8002514 <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6113      	str	r3, [r2, #16]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	200001c0 	.word	0x200001c0
 8002508:	200001dc 	.word	0x200001dc
 800250c:	200001e0 	.word	0x200001e0
 8002510:	200001b4 	.word	0x200001b4
 8002514:	40014000 	.word	0x40014000

08002518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002518:	480d      	ldr	r0, [pc, #52]	; (8002550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800251a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800251c:	480d      	ldr	r0, [pc, #52]	; (8002554 <LoopForever+0x6>)
  ldr r1, =_edata
 800251e:	490e      	ldr	r1, [pc, #56]	; (8002558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <LoopForever+0xe>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002524:	e002      	b.n	800252c <LoopCopyDataInit>

08002526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252a:	3304      	adds	r3, #4

0800252c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800252c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002530:	d3f9      	bcc.n	8002526 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002534:	4c0b      	ldr	r4, [pc, #44]	; (8002564 <LoopForever+0x16>)
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002538:	e001      	b.n	800253e <LoopFillZerobss>

0800253a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800253c:	3204      	adds	r2, #4

0800253e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002540:	d3fb      	bcc.n	800253a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002542:	f7ff fe75 	bl	8002230 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002546:	f000 f817 	bl	8002578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800254a:	f7ff fb3f 	bl	8001bcc <main>

0800254e <LoopForever>:

LoopForever:
    b LoopForever
 800254e:	e7fe      	b.n	800254e <LoopForever>
  ldr   r0, =_estack
 8002550:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002558:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800255c:	08003f1c 	.word	0x08003f1c
  ldr r2, =_sbss
 8002560:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002564:	200003fc 	.word	0x200003fc

08002568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002568:	e7fe      	b.n	8002568 <ADC1_2_IRQHandler>
	...

0800256c <__errno>:
 800256c:	4b01      	ldr	r3, [pc, #4]	; (8002574 <__errno+0x8>)
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	2000002c 	.word	0x2000002c

08002578 <__libc_init_array>:
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	4d0d      	ldr	r5, [pc, #52]	; (80025b0 <__libc_init_array+0x38>)
 800257c:	4c0d      	ldr	r4, [pc, #52]	; (80025b4 <__libc_init_array+0x3c>)
 800257e:	1b64      	subs	r4, r4, r5
 8002580:	10a4      	asrs	r4, r4, #2
 8002582:	2600      	movs	r6, #0
 8002584:	42a6      	cmp	r6, r4
 8002586:	d109      	bne.n	800259c <__libc_init_array+0x24>
 8002588:	4d0b      	ldr	r5, [pc, #44]	; (80025b8 <__libc_init_array+0x40>)
 800258a:	4c0c      	ldr	r4, [pc, #48]	; (80025bc <__libc_init_array+0x44>)
 800258c:	f001 fa6a 	bl	8003a64 <_init>
 8002590:	1b64      	subs	r4, r4, r5
 8002592:	10a4      	asrs	r4, r4, #2
 8002594:	2600      	movs	r6, #0
 8002596:	42a6      	cmp	r6, r4
 8002598:	d105      	bne.n	80025a6 <__libc_init_array+0x2e>
 800259a:	bd70      	pop	{r4, r5, r6, pc}
 800259c:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a0:	4798      	blx	r3
 80025a2:	3601      	adds	r6, #1
 80025a4:	e7ee      	b.n	8002584 <__libc_init_array+0xc>
 80025a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025aa:	4798      	blx	r3
 80025ac:	3601      	adds	r6, #1
 80025ae:	e7f2      	b.n	8002596 <__libc_init_array+0x1e>
 80025b0:	08003f14 	.word	0x08003f14
 80025b4:	08003f14 	.word	0x08003f14
 80025b8:	08003f14 	.word	0x08003f14
 80025bc:	08003f18 	.word	0x08003f18

080025c0 <memset>:
 80025c0:	4402      	add	r2, r0
 80025c2:	4603      	mov	r3, r0
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d100      	bne.n	80025ca <memset+0xa>
 80025c8:	4770      	bx	lr
 80025ca:	f803 1b01 	strb.w	r1, [r3], #1
 80025ce:	e7f9      	b.n	80025c4 <memset+0x4>

080025d0 <iprintf>:
 80025d0:	b40f      	push	{r0, r1, r2, r3}
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <iprintf+0x2c>)
 80025d4:	b513      	push	{r0, r1, r4, lr}
 80025d6:	681c      	ldr	r4, [r3, #0]
 80025d8:	b124      	cbz	r4, 80025e4 <iprintf+0x14>
 80025da:	69a3      	ldr	r3, [r4, #24]
 80025dc:	b913      	cbnz	r3, 80025e4 <iprintf+0x14>
 80025de:	4620      	mov	r0, r4
 80025e0:	f000 fa2c 	bl	8002a3c <__sinit>
 80025e4:	ab05      	add	r3, sp, #20
 80025e6:	9a04      	ldr	r2, [sp, #16]
 80025e8:	68a1      	ldr	r1, [r4, #8]
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	4620      	mov	r0, r4
 80025ee:	f000 fd61 	bl	80030b4 <_vfiprintf_r>
 80025f2:	b002      	add	sp, #8
 80025f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f8:	b004      	add	sp, #16
 80025fa:	4770      	bx	lr
 80025fc:	2000002c 	.word	0x2000002c

08002600 <putchar>:
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <putchar+0x28>)
 8002602:	b513      	push	{r0, r1, r4, lr}
 8002604:	681c      	ldr	r4, [r3, #0]
 8002606:	4601      	mov	r1, r0
 8002608:	b134      	cbz	r4, 8002618 <putchar+0x18>
 800260a:	69a3      	ldr	r3, [r4, #24]
 800260c:	b923      	cbnz	r3, 8002618 <putchar+0x18>
 800260e:	9001      	str	r0, [sp, #4]
 8002610:	4620      	mov	r0, r4
 8002612:	f000 fa13 	bl	8002a3c <__sinit>
 8002616:	9901      	ldr	r1, [sp, #4]
 8002618:	68a2      	ldr	r2, [r4, #8]
 800261a:	4620      	mov	r0, r4
 800261c:	b002      	add	sp, #8
 800261e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002622:	f001 b80b 	b.w	800363c <_putc_r>
 8002626:	bf00      	nop
 8002628:	2000002c 	.word	0x2000002c

0800262c <setbuf>:
 800262c:	2900      	cmp	r1, #0
 800262e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002632:	bf0c      	ite	eq
 8002634:	2202      	moveq	r2, #2
 8002636:	2200      	movne	r2, #0
 8002638:	f000 b800 	b.w	800263c <setvbuf>

0800263c <setvbuf>:
 800263c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002640:	461d      	mov	r5, r3
 8002642:	4b5d      	ldr	r3, [pc, #372]	; (80027b8 <setvbuf+0x17c>)
 8002644:	681f      	ldr	r7, [r3, #0]
 8002646:	4604      	mov	r4, r0
 8002648:	460e      	mov	r6, r1
 800264a:	4690      	mov	r8, r2
 800264c:	b127      	cbz	r7, 8002658 <setvbuf+0x1c>
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	b913      	cbnz	r3, 8002658 <setvbuf+0x1c>
 8002652:	4638      	mov	r0, r7
 8002654:	f000 f9f2 	bl	8002a3c <__sinit>
 8002658:	4b58      	ldr	r3, [pc, #352]	; (80027bc <setvbuf+0x180>)
 800265a:	429c      	cmp	r4, r3
 800265c:	d167      	bne.n	800272e <setvbuf+0xf2>
 800265e:	687c      	ldr	r4, [r7, #4]
 8002660:	f1b8 0f02 	cmp.w	r8, #2
 8002664:	d006      	beq.n	8002674 <setvbuf+0x38>
 8002666:	f1b8 0f01 	cmp.w	r8, #1
 800266a:	f200 809f 	bhi.w	80027ac <setvbuf+0x170>
 800266e:	2d00      	cmp	r5, #0
 8002670:	f2c0 809c 	blt.w	80027ac <setvbuf+0x170>
 8002674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002676:	07db      	lsls	r3, r3, #31
 8002678:	d405      	bmi.n	8002686 <setvbuf+0x4a>
 800267a:	89a3      	ldrh	r3, [r4, #12]
 800267c:	0598      	lsls	r0, r3, #22
 800267e:	d402      	bmi.n	8002686 <setvbuf+0x4a>
 8002680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002682:	f000 fa79 	bl	8002b78 <__retarget_lock_acquire_recursive>
 8002686:	4621      	mov	r1, r4
 8002688:	4638      	mov	r0, r7
 800268a:	f000 f943 	bl	8002914 <_fflush_r>
 800268e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002690:	b141      	cbz	r1, 80026a4 <setvbuf+0x68>
 8002692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002696:	4299      	cmp	r1, r3
 8002698:	d002      	beq.n	80026a0 <setvbuf+0x64>
 800269a:	4638      	mov	r0, r7
 800269c:	f000 fada 	bl	8002c54 <_free_r>
 80026a0:	2300      	movs	r3, #0
 80026a2:	6363      	str	r3, [r4, #52]	; 0x34
 80026a4:	2300      	movs	r3, #0
 80026a6:	61a3      	str	r3, [r4, #24]
 80026a8:	6063      	str	r3, [r4, #4]
 80026aa:	89a3      	ldrh	r3, [r4, #12]
 80026ac:	0619      	lsls	r1, r3, #24
 80026ae:	d503      	bpl.n	80026b8 <setvbuf+0x7c>
 80026b0:	6921      	ldr	r1, [r4, #16]
 80026b2:	4638      	mov	r0, r7
 80026b4:	f000 face 	bl	8002c54 <_free_r>
 80026b8:	89a3      	ldrh	r3, [r4, #12]
 80026ba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80026be:	f023 0303 	bic.w	r3, r3, #3
 80026c2:	f1b8 0f02 	cmp.w	r8, #2
 80026c6:	81a3      	strh	r3, [r4, #12]
 80026c8:	d06c      	beq.n	80027a4 <setvbuf+0x168>
 80026ca:	ab01      	add	r3, sp, #4
 80026cc:	466a      	mov	r2, sp
 80026ce:	4621      	mov	r1, r4
 80026d0:	4638      	mov	r0, r7
 80026d2:	f000 fa53 	bl	8002b7c <__swhatbuf_r>
 80026d6:	89a3      	ldrh	r3, [r4, #12]
 80026d8:	4318      	orrs	r0, r3
 80026da:	81a0      	strh	r0, [r4, #12]
 80026dc:	2d00      	cmp	r5, #0
 80026de:	d130      	bne.n	8002742 <setvbuf+0x106>
 80026e0:	9d00      	ldr	r5, [sp, #0]
 80026e2:	4628      	mov	r0, r5
 80026e4:	f000 faae 	bl	8002c44 <malloc>
 80026e8:	4606      	mov	r6, r0
 80026ea:	2800      	cmp	r0, #0
 80026ec:	d155      	bne.n	800279a <setvbuf+0x15e>
 80026ee:	f8dd 9000 	ldr.w	r9, [sp]
 80026f2:	45a9      	cmp	r9, r5
 80026f4:	d14a      	bne.n	800278c <setvbuf+0x150>
 80026f6:	f04f 35ff 	mov.w	r5, #4294967295
 80026fa:	2200      	movs	r2, #0
 80026fc:	60a2      	str	r2, [r4, #8]
 80026fe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002702:	6022      	str	r2, [r4, #0]
 8002704:	6122      	str	r2, [r4, #16]
 8002706:	2201      	movs	r2, #1
 8002708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800270c:	6162      	str	r2, [r4, #20]
 800270e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	07d2      	lsls	r2, r2, #31
 8002716:	81a3      	strh	r3, [r4, #12]
 8002718:	d405      	bmi.n	8002726 <setvbuf+0xea>
 800271a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800271e:	d102      	bne.n	8002726 <setvbuf+0xea>
 8002720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002722:	f000 fa2a 	bl	8002b7a <__retarget_lock_release_recursive>
 8002726:	4628      	mov	r0, r5
 8002728:	b003      	add	sp, #12
 800272a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <setvbuf+0x184>)
 8002730:	429c      	cmp	r4, r3
 8002732:	d101      	bne.n	8002738 <setvbuf+0xfc>
 8002734:	68bc      	ldr	r4, [r7, #8]
 8002736:	e793      	b.n	8002660 <setvbuf+0x24>
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <setvbuf+0x188>)
 800273a:	429c      	cmp	r4, r3
 800273c:	bf08      	it	eq
 800273e:	68fc      	ldreq	r4, [r7, #12]
 8002740:	e78e      	b.n	8002660 <setvbuf+0x24>
 8002742:	2e00      	cmp	r6, #0
 8002744:	d0cd      	beq.n	80026e2 <setvbuf+0xa6>
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	b913      	cbnz	r3, 8002750 <setvbuf+0x114>
 800274a:	4638      	mov	r0, r7
 800274c:	f000 f976 	bl	8002a3c <__sinit>
 8002750:	f1b8 0f01 	cmp.w	r8, #1
 8002754:	bf08      	it	eq
 8002756:	89a3      	ldrheq	r3, [r4, #12]
 8002758:	6026      	str	r6, [r4, #0]
 800275a:	bf04      	itt	eq
 800275c:	f043 0301 	orreq.w	r3, r3, #1
 8002760:	81a3      	strheq	r3, [r4, #12]
 8002762:	89a2      	ldrh	r2, [r4, #12]
 8002764:	f012 0308 	ands.w	r3, r2, #8
 8002768:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800276c:	d01c      	beq.n	80027a8 <setvbuf+0x16c>
 800276e:	07d3      	lsls	r3, r2, #31
 8002770:	bf41      	itttt	mi
 8002772:	2300      	movmi	r3, #0
 8002774:	426d      	negmi	r5, r5
 8002776:	60a3      	strmi	r3, [r4, #8]
 8002778:	61a5      	strmi	r5, [r4, #24]
 800277a:	bf58      	it	pl
 800277c:	60a5      	strpl	r5, [r4, #8]
 800277e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002780:	f015 0501 	ands.w	r5, r5, #1
 8002784:	d115      	bne.n	80027b2 <setvbuf+0x176>
 8002786:	f412 7f00 	tst.w	r2, #512	; 0x200
 800278a:	e7c8      	b.n	800271e <setvbuf+0xe2>
 800278c:	4648      	mov	r0, r9
 800278e:	f000 fa59 	bl	8002c44 <malloc>
 8002792:	4606      	mov	r6, r0
 8002794:	2800      	cmp	r0, #0
 8002796:	d0ae      	beq.n	80026f6 <setvbuf+0xba>
 8002798:	464d      	mov	r5, r9
 800279a:	89a3      	ldrh	r3, [r4, #12]
 800279c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a0:	81a3      	strh	r3, [r4, #12]
 80027a2:	e7d0      	b.n	8002746 <setvbuf+0x10a>
 80027a4:	2500      	movs	r5, #0
 80027a6:	e7a8      	b.n	80026fa <setvbuf+0xbe>
 80027a8:	60a3      	str	r3, [r4, #8]
 80027aa:	e7e8      	b.n	800277e <setvbuf+0x142>
 80027ac:	f04f 35ff 	mov.w	r5, #4294967295
 80027b0:	e7b9      	b.n	8002726 <setvbuf+0xea>
 80027b2:	2500      	movs	r5, #0
 80027b4:	e7b7      	b.n	8002726 <setvbuf+0xea>
 80027b6:	bf00      	nop
 80027b8:	2000002c 	.word	0x2000002c
 80027bc:	08003ea0 	.word	0x08003ea0
 80027c0:	08003ec0 	.word	0x08003ec0
 80027c4:	08003e80 	.word	0x08003e80

080027c8 <siprintf>:
 80027c8:	b40e      	push	{r1, r2, r3}
 80027ca:	b500      	push	{lr}
 80027cc:	b09c      	sub	sp, #112	; 0x70
 80027ce:	ab1d      	add	r3, sp, #116	; 0x74
 80027d0:	9002      	str	r0, [sp, #8]
 80027d2:	9006      	str	r0, [sp, #24]
 80027d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027d8:	4809      	ldr	r0, [pc, #36]	; (8002800 <siprintf+0x38>)
 80027da:	9107      	str	r1, [sp, #28]
 80027dc:	9104      	str	r1, [sp, #16]
 80027de:	4909      	ldr	r1, [pc, #36]	; (8002804 <siprintf+0x3c>)
 80027e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80027e4:	9105      	str	r1, [sp, #20]
 80027e6:	6800      	ldr	r0, [r0, #0]
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	a902      	add	r1, sp, #8
 80027ec:	f000 fb38 	bl	8002e60 <_svfiprintf_r>
 80027f0:	9b02      	ldr	r3, [sp, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	b01c      	add	sp, #112	; 0x70
 80027f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80027fc:	b003      	add	sp, #12
 80027fe:	4770      	bx	lr
 8002800:	2000002c 	.word	0x2000002c
 8002804:	ffff0208 	.word	0xffff0208

08002808 <__sflush_r>:
 8002808:	898a      	ldrh	r2, [r1, #12]
 800280a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800280e:	4605      	mov	r5, r0
 8002810:	0710      	lsls	r0, r2, #28
 8002812:	460c      	mov	r4, r1
 8002814:	d458      	bmi.n	80028c8 <__sflush_r+0xc0>
 8002816:	684b      	ldr	r3, [r1, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	dc05      	bgt.n	8002828 <__sflush_r+0x20>
 800281c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	dc02      	bgt.n	8002828 <__sflush_r+0x20>
 8002822:	2000      	movs	r0, #0
 8002824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800282a:	2e00      	cmp	r6, #0
 800282c:	d0f9      	beq.n	8002822 <__sflush_r+0x1a>
 800282e:	2300      	movs	r3, #0
 8002830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002834:	682f      	ldr	r7, [r5, #0]
 8002836:	602b      	str	r3, [r5, #0]
 8002838:	d032      	beq.n	80028a0 <__sflush_r+0x98>
 800283a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	075a      	lsls	r2, r3, #29
 8002840:	d505      	bpl.n	800284e <__sflush_r+0x46>
 8002842:	6863      	ldr	r3, [r4, #4]
 8002844:	1ac0      	subs	r0, r0, r3
 8002846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002848:	b10b      	cbz	r3, 800284e <__sflush_r+0x46>
 800284a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800284c:	1ac0      	subs	r0, r0, r3
 800284e:	2300      	movs	r3, #0
 8002850:	4602      	mov	r2, r0
 8002852:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002854:	6a21      	ldr	r1, [r4, #32]
 8002856:	4628      	mov	r0, r5
 8002858:	47b0      	blx	r6
 800285a:	1c43      	adds	r3, r0, #1
 800285c:	89a3      	ldrh	r3, [r4, #12]
 800285e:	d106      	bne.n	800286e <__sflush_r+0x66>
 8002860:	6829      	ldr	r1, [r5, #0]
 8002862:	291d      	cmp	r1, #29
 8002864:	d82c      	bhi.n	80028c0 <__sflush_r+0xb8>
 8002866:	4a2a      	ldr	r2, [pc, #168]	; (8002910 <__sflush_r+0x108>)
 8002868:	40ca      	lsrs	r2, r1
 800286a:	07d6      	lsls	r6, r2, #31
 800286c:	d528      	bpl.n	80028c0 <__sflush_r+0xb8>
 800286e:	2200      	movs	r2, #0
 8002870:	6062      	str	r2, [r4, #4]
 8002872:	04d9      	lsls	r1, r3, #19
 8002874:	6922      	ldr	r2, [r4, #16]
 8002876:	6022      	str	r2, [r4, #0]
 8002878:	d504      	bpl.n	8002884 <__sflush_r+0x7c>
 800287a:	1c42      	adds	r2, r0, #1
 800287c:	d101      	bne.n	8002882 <__sflush_r+0x7a>
 800287e:	682b      	ldr	r3, [r5, #0]
 8002880:	b903      	cbnz	r3, 8002884 <__sflush_r+0x7c>
 8002882:	6560      	str	r0, [r4, #84]	; 0x54
 8002884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002886:	602f      	str	r7, [r5, #0]
 8002888:	2900      	cmp	r1, #0
 800288a:	d0ca      	beq.n	8002822 <__sflush_r+0x1a>
 800288c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002890:	4299      	cmp	r1, r3
 8002892:	d002      	beq.n	800289a <__sflush_r+0x92>
 8002894:	4628      	mov	r0, r5
 8002896:	f000 f9dd 	bl	8002c54 <_free_r>
 800289a:	2000      	movs	r0, #0
 800289c:	6360      	str	r0, [r4, #52]	; 0x34
 800289e:	e7c1      	b.n	8002824 <__sflush_r+0x1c>
 80028a0:	6a21      	ldr	r1, [r4, #32]
 80028a2:	2301      	movs	r3, #1
 80028a4:	4628      	mov	r0, r5
 80028a6:	47b0      	blx	r6
 80028a8:	1c41      	adds	r1, r0, #1
 80028aa:	d1c7      	bne.n	800283c <__sflush_r+0x34>
 80028ac:	682b      	ldr	r3, [r5, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0c4      	beq.n	800283c <__sflush_r+0x34>
 80028b2:	2b1d      	cmp	r3, #29
 80028b4:	d001      	beq.n	80028ba <__sflush_r+0xb2>
 80028b6:	2b16      	cmp	r3, #22
 80028b8:	d101      	bne.n	80028be <__sflush_r+0xb6>
 80028ba:	602f      	str	r7, [r5, #0]
 80028bc:	e7b1      	b.n	8002822 <__sflush_r+0x1a>
 80028be:	89a3      	ldrh	r3, [r4, #12]
 80028c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c4:	81a3      	strh	r3, [r4, #12]
 80028c6:	e7ad      	b.n	8002824 <__sflush_r+0x1c>
 80028c8:	690f      	ldr	r7, [r1, #16]
 80028ca:	2f00      	cmp	r7, #0
 80028cc:	d0a9      	beq.n	8002822 <__sflush_r+0x1a>
 80028ce:	0793      	lsls	r3, r2, #30
 80028d0:	680e      	ldr	r6, [r1, #0]
 80028d2:	bf08      	it	eq
 80028d4:	694b      	ldreq	r3, [r1, #20]
 80028d6:	600f      	str	r7, [r1, #0]
 80028d8:	bf18      	it	ne
 80028da:	2300      	movne	r3, #0
 80028dc:	eba6 0807 	sub.w	r8, r6, r7
 80028e0:	608b      	str	r3, [r1, #8]
 80028e2:	f1b8 0f00 	cmp.w	r8, #0
 80028e6:	dd9c      	ble.n	8002822 <__sflush_r+0x1a>
 80028e8:	6a21      	ldr	r1, [r4, #32]
 80028ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028ec:	4643      	mov	r3, r8
 80028ee:	463a      	mov	r2, r7
 80028f0:	4628      	mov	r0, r5
 80028f2:	47b0      	blx	r6
 80028f4:	2800      	cmp	r0, #0
 80028f6:	dc06      	bgt.n	8002906 <__sflush_r+0xfe>
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028fe:	81a3      	strh	r3, [r4, #12]
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	e78e      	b.n	8002824 <__sflush_r+0x1c>
 8002906:	4407      	add	r7, r0
 8002908:	eba8 0800 	sub.w	r8, r8, r0
 800290c:	e7e9      	b.n	80028e2 <__sflush_r+0xda>
 800290e:	bf00      	nop
 8002910:	20400001 	.word	0x20400001

08002914 <_fflush_r>:
 8002914:	b538      	push	{r3, r4, r5, lr}
 8002916:	690b      	ldr	r3, [r1, #16]
 8002918:	4605      	mov	r5, r0
 800291a:	460c      	mov	r4, r1
 800291c:	b913      	cbnz	r3, 8002924 <_fflush_r+0x10>
 800291e:	2500      	movs	r5, #0
 8002920:	4628      	mov	r0, r5
 8002922:	bd38      	pop	{r3, r4, r5, pc}
 8002924:	b118      	cbz	r0, 800292e <_fflush_r+0x1a>
 8002926:	6983      	ldr	r3, [r0, #24]
 8002928:	b90b      	cbnz	r3, 800292e <_fflush_r+0x1a>
 800292a:	f000 f887 	bl	8002a3c <__sinit>
 800292e:	4b14      	ldr	r3, [pc, #80]	; (8002980 <_fflush_r+0x6c>)
 8002930:	429c      	cmp	r4, r3
 8002932:	d11b      	bne.n	800296c <_fflush_r+0x58>
 8002934:	686c      	ldr	r4, [r5, #4]
 8002936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ef      	beq.n	800291e <_fflush_r+0xa>
 800293e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002940:	07d0      	lsls	r0, r2, #31
 8002942:	d404      	bmi.n	800294e <_fflush_r+0x3a>
 8002944:	0599      	lsls	r1, r3, #22
 8002946:	d402      	bmi.n	800294e <_fflush_r+0x3a>
 8002948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800294a:	f000 f915 	bl	8002b78 <__retarget_lock_acquire_recursive>
 800294e:	4628      	mov	r0, r5
 8002950:	4621      	mov	r1, r4
 8002952:	f7ff ff59 	bl	8002808 <__sflush_r>
 8002956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002958:	07da      	lsls	r2, r3, #31
 800295a:	4605      	mov	r5, r0
 800295c:	d4e0      	bmi.n	8002920 <_fflush_r+0xc>
 800295e:	89a3      	ldrh	r3, [r4, #12]
 8002960:	059b      	lsls	r3, r3, #22
 8002962:	d4dd      	bmi.n	8002920 <_fflush_r+0xc>
 8002964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002966:	f000 f908 	bl	8002b7a <__retarget_lock_release_recursive>
 800296a:	e7d9      	b.n	8002920 <_fflush_r+0xc>
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <_fflush_r+0x70>)
 800296e:	429c      	cmp	r4, r3
 8002970:	d101      	bne.n	8002976 <_fflush_r+0x62>
 8002972:	68ac      	ldr	r4, [r5, #8]
 8002974:	e7df      	b.n	8002936 <_fflush_r+0x22>
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <_fflush_r+0x74>)
 8002978:	429c      	cmp	r4, r3
 800297a:	bf08      	it	eq
 800297c:	68ec      	ldreq	r4, [r5, #12]
 800297e:	e7da      	b.n	8002936 <_fflush_r+0x22>
 8002980:	08003ea0 	.word	0x08003ea0
 8002984:	08003ec0 	.word	0x08003ec0
 8002988:	08003e80 	.word	0x08003e80

0800298c <std>:
 800298c:	2300      	movs	r3, #0
 800298e:	b510      	push	{r4, lr}
 8002990:	4604      	mov	r4, r0
 8002992:	e9c0 3300 	strd	r3, r3, [r0]
 8002996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800299a:	6083      	str	r3, [r0, #8]
 800299c:	8181      	strh	r1, [r0, #12]
 800299e:	6643      	str	r3, [r0, #100]	; 0x64
 80029a0:	81c2      	strh	r2, [r0, #14]
 80029a2:	6183      	str	r3, [r0, #24]
 80029a4:	4619      	mov	r1, r3
 80029a6:	2208      	movs	r2, #8
 80029a8:	305c      	adds	r0, #92	; 0x5c
 80029aa:	f7ff fe09 	bl	80025c0 <memset>
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <std+0x38>)
 80029b0:	6263      	str	r3, [r4, #36]	; 0x24
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <std+0x3c>)
 80029b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <std+0x40>)
 80029b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <std+0x44>)
 80029bc:	6224      	str	r4, [r4, #32]
 80029be:	6323      	str	r3, [r4, #48]	; 0x30
 80029c0:	bd10      	pop	{r4, pc}
 80029c2:	bf00      	nop
 80029c4:	080036ed 	.word	0x080036ed
 80029c8:	0800370f 	.word	0x0800370f
 80029cc:	08003747 	.word	0x08003747
 80029d0:	0800376b 	.word	0x0800376b

080029d4 <_cleanup_r>:
 80029d4:	4901      	ldr	r1, [pc, #4]	; (80029dc <_cleanup_r+0x8>)
 80029d6:	f000 b8af 	b.w	8002b38 <_fwalk_reent>
 80029da:	bf00      	nop
 80029dc:	08002915 	.word	0x08002915

080029e0 <__sfmoreglue>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	1e4a      	subs	r2, r1, #1
 80029e4:	2568      	movs	r5, #104	; 0x68
 80029e6:	4355      	muls	r5, r2
 80029e8:	460e      	mov	r6, r1
 80029ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029ee:	f000 f981 	bl	8002cf4 <_malloc_r>
 80029f2:	4604      	mov	r4, r0
 80029f4:	b140      	cbz	r0, 8002a08 <__sfmoreglue+0x28>
 80029f6:	2100      	movs	r1, #0
 80029f8:	e9c0 1600 	strd	r1, r6, [r0]
 80029fc:	300c      	adds	r0, #12
 80029fe:	60a0      	str	r0, [r4, #8]
 8002a00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a04:	f7ff fddc 	bl	80025c0 <memset>
 8002a08:	4620      	mov	r0, r4
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}

08002a0c <__sfp_lock_acquire>:
 8002a0c:	4801      	ldr	r0, [pc, #4]	; (8002a14 <__sfp_lock_acquire+0x8>)
 8002a0e:	f000 b8b3 	b.w	8002b78 <__retarget_lock_acquire_recursive>
 8002a12:	bf00      	nop
 8002a14:	200003f4 	.word	0x200003f4

08002a18 <__sfp_lock_release>:
 8002a18:	4801      	ldr	r0, [pc, #4]	; (8002a20 <__sfp_lock_release+0x8>)
 8002a1a:	f000 b8ae 	b.w	8002b7a <__retarget_lock_release_recursive>
 8002a1e:	bf00      	nop
 8002a20:	200003f4 	.word	0x200003f4

08002a24 <__sinit_lock_acquire>:
 8002a24:	4801      	ldr	r0, [pc, #4]	; (8002a2c <__sinit_lock_acquire+0x8>)
 8002a26:	f000 b8a7 	b.w	8002b78 <__retarget_lock_acquire_recursive>
 8002a2a:	bf00      	nop
 8002a2c:	200003ef 	.word	0x200003ef

08002a30 <__sinit_lock_release>:
 8002a30:	4801      	ldr	r0, [pc, #4]	; (8002a38 <__sinit_lock_release+0x8>)
 8002a32:	f000 b8a2 	b.w	8002b7a <__retarget_lock_release_recursive>
 8002a36:	bf00      	nop
 8002a38:	200003ef 	.word	0x200003ef

08002a3c <__sinit>:
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	4604      	mov	r4, r0
 8002a40:	f7ff fff0 	bl	8002a24 <__sinit_lock_acquire>
 8002a44:	69a3      	ldr	r3, [r4, #24]
 8002a46:	b11b      	cbz	r3, 8002a50 <__sinit+0x14>
 8002a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a4c:	f7ff bff0 	b.w	8002a30 <__sinit_lock_release>
 8002a50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a54:	6523      	str	r3, [r4, #80]	; 0x50
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <__sinit+0x68>)
 8002a58:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <__sinit+0x6c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a5e:	42a3      	cmp	r3, r4
 8002a60:	bf04      	itt	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	61a3      	streq	r3, [r4, #24]
 8002a66:	4620      	mov	r0, r4
 8002a68:	f000 f820 	bl	8002aac <__sfp>
 8002a6c:	6060      	str	r0, [r4, #4]
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f000 f81c 	bl	8002aac <__sfp>
 8002a74:	60a0      	str	r0, [r4, #8]
 8002a76:	4620      	mov	r0, r4
 8002a78:	f000 f818 	bl	8002aac <__sfp>
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	60e0      	str	r0, [r4, #12]
 8002a80:	2104      	movs	r1, #4
 8002a82:	6860      	ldr	r0, [r4, #4]
 8002a84:	f7ff ff82 	bl	800298c <std>
 8002a88:	68a0      	ldr	r0, [r4, #8]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	2109      	movs	r1, #9
 8002a8e:	f7ff ff7d 	bl	800298c <std>
 8002a92:	68e0      	ldr	r0, [r4, #12]
 8002a94:	2202      	movs	r2, #2
 8002a96:	2112      	movs	r1, #18
 8002a98:	f7ff ff78 	bl	800298c <std>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	61a3      	str	r3, [r4, #24]
 8002aa0:	e7d2      	b.n	8002a48 <__sinit+0xc>
 8002aa2:	bf00      	nop
 8002aa4:	08003e7c 	.word	0x08003e7c
 8002aa8:	080029d5 	.word	0x080029d5

08002aac <__sfp>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	4607      	mov	r7, r0
 8002ab0:	f7ff ffac 	bl	8002a0c <__sfp_lock_acquire>
 8002ab4:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <__sfp+0x84>)
 8002ab6:	681e      	ldr	r6, [r3, #0]
 8002ab8:	69b3      	ldr	r3, [r6, #24]
 8002aba:	b913      	cbnz	r3, 8002ac2 <__sfp+0x16>
 8002abc:	4630      	mov	r0, r6
 8002abe:	f7ff ffbd 	bl	8002a3c <__sinit>
 8002ac2:	3648      	adds	r6, #72	; 0x48
 8002ac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	d503      	bpl.n	8002ad4 <__sfp+0x28>
 8002acc:	6833      	ldr	r3, [r6, #0]
 8002ace:	b30b      	cbz	r3, 8002b14 <__sfp+0x68>
 8002ad0:	6836      	ldr	r6, [r6, #0]
 8002ad2:	e7f7      	b.n	8002ac4 <__sfp+0x18>
 8002ad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ad8:	b9d5      	cbnz	r5, 8002b10 <__sfp+0x64>
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <__sfp+0x88>)
 8002adc:	60e3      	str	r3, [r4, #12]
 8002ade:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ae2:	6665      	str	r5, [r4, #100]	; 0x64
 8002ae4:	f000 f847 	bl	8002b76 <__retarget_lock_init_recursive>
 8002ae8:	f7ff ff96 	bl	8002a18 <__sfp_lock_release>
 8002aec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002af0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002af4:	6025      	str	r5, [r4, #0]
 8002af6:	61a5      	str	r5, [r4, #24]
 8002af8:	2208      	movs	r2, #8
 8002afa:	4629      	mov	r1, r5
 8002afc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b00:	f7ff fd5e 	bl	80025c0 <memset>
 8002b04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b10:	3468      	adds	r4, #104	; 0x68
 8002b12:	e7d9      	b.n	8002ac8 <__sfp+0x1c>
 8002b14:	2104      	movs	r1, #4
 8002b16:	4638      	mov	r0, r7
 8002b18:	f7ff ff62 	bl	80029e0 <__sfmoreglue>
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	6030      	str	r0, [r6, #0]
 8002b20:	2800      	cmp	r0, #0
 8002b22:	d1d5      	bne.n	8002ad0 <__sfp+0x24>
 8002b24:	f7ff ff78 	bl	8002a18 <__sfp_lock_release>
 8002b28:	230c      	movs	r3, #12
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	e7ee      	b.n	8002b0c <__sfp+0x60>
 8002b2e:	bf00      	nop
 8002b30:	08003e7c 	.word	0x08003e7c
 8002b34:	ffff0001 	.word	0xffff0001

08002b38 <_fwalk_reent>:
 8002b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b3c:	4606      	mov	r6, r0
 8002b3e:	4688      	mov	r8, r1
 8002b40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b44:	2700      	movs	r7, #0
 8002b46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b4a:	f1b9 0901 	subs.w	r9, r9, #1
 8002b4e:	d505      	bpl.n	8002b5c <_fwalk_reent+0x24>
 8002b50:	6824      	ldr	r4, [r4, #0]
 8002b52:	2c00      	cmp	r4, #0
 8002b54:	d1f7      	bne.n	8002b46 <_fwalk_reent+0xe>
 8002b56:	4638      	mov	r0, r7
 8002b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b5c:	89ab      	ldrh	r3, [r5, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d907      	bls.n	8002b72 <_fwalk_reent+0x3a>
 8002b62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b66:	3301      	adds	r3, #1
 8002b68:	d003      	beq.n	8002b72 <_fwalk_reent+0x3a>
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	47c0      	blx	r8
 8002b70:	4307      	orrs	r7, r0
 8002b72:	3568      	adds	r5, #104	; 0x68
 8002b74:	e7e9      	b.n	8002b4a <_fwalk_reent+0x12>

08002b76 <__retarget_lock_init_recursive>:
 8002b76:	4770      	bx	lr

08002b78 <__retarget_lock_acquire_recursive>:
 8002b78:	4770      	bx	lr

08002b7a <__retarget_lock_release_recursive>:
 8002b7a:	4770      	bx	lr

08002b7c <__swhatbuf_r>:
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	460e      	mov	r6, r1
 8002b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b84:	2900      	cmp	r1, #0
 8002b86:	b096      	sub	sp, #88	; 0x58
 8002b88:	4614      	mov	r4, r2
 8002b8a:	461d      	mov	r5, r3
 8002b8c:	da07      	bge.n	8002b9e <__swhatbuf_r+0x22>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	602b      	str	r3, [r5, #0]
 8002b92:	89b3      	ldrh	r3, [r6, #12]
 8002b94:	061a      	lsls	r2, r3, #24
 8002b96:	d410      	bmi.n	8002bba <__swhatbuf_r+0x3e>
 8002b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b9c:	e00e      	b.n	8002bbc <__swhatbuf_r+0x40>
 8002b9e:	466a      	mov	r2, sp
 8002ba0:	f000 feb8 	bl	8003914 <_fstat_r>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	dbf2      	blt.n	8002b8e <__swhatbuf_r+0x12>
 8002ba8:	9a01      	ldr	r2, [sp, #4]
 8002baa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002bae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002bb2:	425a      	negs	r2, r3
 8002bb4:	415a      	adcs	r2, r3
 8002bb6:	602a      	str	r2, [r5, #0]
 8002bb8:	e7ee      	b.n	8002b98 <__swhatbuf_r+0x1c>
 8002bba:	2340      	movs	r3, #64	; 0x40
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	6023      	str	r3, [r4, #0]
 8002bc0:	b016      	add	sp, #88	; 0x58
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}

08002bc4 <__smakebuf_r>:
 8002bc4:	898b      	ldrh	r3, [r1, #12]
 8002bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bc8:	079d      	lsls	r5, r3, #30
 8002bca:	4606      	mov	r6, r0
 8002bcc:	460c      	mov	r4, r1
 8002bce:	d507      	bpl.n	8002be0 <__smakebuf_r+0x1c>
 8002bd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	6123      	str	r3, [r4, #16]
 8002bd8:	2301      	movs	r3, #1
 8002bda:	6163      	str	r3, [r4, #20]
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
 8002be0:	ab01      	add	r3, sp, #4
 8002be2:	466a      	mov	r2, sp
 8002be4:	f7ff ffca 	bl	8002b7c <__swhatbuf_r>
 8002be8:	9900      	ldr	r1, [sp, #0]
 8002bea:	4605      	mov	r5, r0
 8002bec:	4630      	mov	r0, r6
 8002bee:	f000 f881 	bl	8002cf4 <_malloc_r>
 8002bf2:	b948      	cbnz	r0, 8002c08 <__smakebuf_r+0x44>
 8002bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bf8:	059a      	lsls	r2, r3, #22
 8002bfa:	d4ef      	bmi.n	8002bdc <__smakebuf_r+0x18>
 8002bfc:	f023 0303 	bic.w	r3, r3, #3
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	81a3      	strh	r3, [r4, #12]
 8002c06:	e7e3      	b.n	8002bd0 <__smakebuf_r+0xc>
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <__smakebuf_r+0x7c>)
 8002c0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	6020      	str	r0, [r4, #0]
 8002c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c14:	81a3      	strh	r3, [r4, #12]
 8002c16:	9b00      	ldr	r3, [sp, #0]
 8002c18:	6163      	str	r3, [r4, #20]
 8002c1a:	9b01      	ldr	r3, [sp, #4]
 8002c1c:	6120      	str	r0, [r4, #16]
 8002c1e:	b15b      	cbz	r3, 8002c38 <__smakebuf_r+0x74>
 8002c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c24:	4630      	mov	r0, r6
 8002c26:	f000 fe87 	bl	8003938 <_isatty_r>
 8002c2a:	b128      	cbz	r0, 8002c38 <__smakebuf_r+0x74>
 8002c2c:	89a3      	ldrh	r3, [r4, #12]
 8002c2e:	f023 0303 	bic.w	r3, r3, #3
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	81a3      	strh	r3, [r4, #12]
 8002c38:	89a0      	ldrh	r0, [r4, #12]
 8002c3a:	4305      	orrs	r5, r0
 8002c3c:	81a5      	strh	r5, [r4, #12]
 8002c3e:	e7cd      	b.n	8002bdc <__smakebuf_r+0x18>
 8002c40:	080029d5 	.word	0x080029d5

08002c44 <malloc>:
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <malloc+0xc>)
 8002c46:	4601      	mov	r1, r0
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	f000 b853 	b.w	8002cf4 <_malloc_r>
 8002c4e:	bf00      	nop
 8002c50:	2000002c 	.word	0x2000002c

08002c54 <_free_r>:
 8002c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c56:	2900      	cmp	r1, #0
 8002c58:	d048      	beq.n	8002cec <_free_r+0x98>
 8002c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c5e:	9001      	str	r0, [sp, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f1a1 0404 	sub.w	r4, r1, #4
 8002c66:	bfb8      	it	lt
 8002c68:	18e4      	addlt	r4, r4, r3
 8002c6a:	f000 feaf 	bl	80039cc <__malloc_lock>
 8002c6e:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <_free_r+0x9c>)
 8002c70:	9801      	ldr	r0, [sp, #4]
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	4615      	mov	r5, r2
 8002c76:	b933      	cbnz	r3, 8002c86 <_free_r+0x32>
 8002c78:	6063      	str	r3, [r4, #4]
 8002c7a:	6014      	str	r4, [r2, #0]
 8002c7c:	b003      	add	sp, #12
 8002c7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c82:	f000 bea9 	b.w	80039d8 <__malloc_unlock>
 8002c86:	42a3      	cmp	r3, r4
 8002c88:	d90b      	bls.n	8002ca2 <_free_r+0x4e>
 8002c8a:	6821      	ldr	r1, [r4, #0]
 8002c8c:	1862      	adds	r2, r4, r1
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	bf04      	itt	eq
 8002c92:	681a      	ldreq	r2, [r3, #0]
 8002c94:	685b      	ldreq	r3, [r3, #4]
 8002c96:	6063      	str	r3, [r4, #4]
 8002c98:	bf04      	itt	eq
 8002c9a:	1852      	addeq	r2, r2, r1
 8002c9c:	6022      	streq	r2, [r4, #0]
 8002c9e:	602c      	str	r4, [r5, #0]
 8002ca0:	e7ec      	b.n	8002c7c <_free_r+0x28>
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	b10b      	cbz	r3, 8002cac <_free_r+0x58>
 8002ca8:	42a3      	cmp	r3, r4
 8002caa:	d9fa      	bls.n	8002ca2 <_free_r+0x4e>
 8002cac:	6811      	ldr	r1, [r2, #0]
 8002cae:	1855      	adds	r5, r2, r1
 8002cb0:	42a5      	cmp	r5, r4
 8002cb2:	d10b      	bne.n	8002ccc <_free_r+0x78>
 8002cb4:	6824      	ldr	r4, [r4, #0]
 8002cb6:	4421      	add	r1, r4
 8002cb8:	1854      	adds	r4, r2, r1
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	6011      	str	r1, [r2, #0]
 8002cbe:	d1dd      	bne.n	8002c7c <_free_r+0x28>
 8002cc0:	681c      	ldr	r4, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	6053      	str	r3, [r2, #4]
 8002cc6:	4421      	add	r1, r4
 8002cc8:	6011      	str	r1, [r2, #0]
 8002cca:	e7d7      	b.n	8002c7c <_free_r+0x28>
 8002ccc:	d902      	bls.n	8002cd4 <_free_r+0x80>
 8002cce:	230c      	movs	r3, #12
 8002cd0:	6003      	str	r3, [r0, #0]
 8002cd2:	e7d3      	b.n	8002c7c <_free_r+0x28>
 8002cd4:	6825      	ldr	r5, [r4, #0]
 8002cd6:	1961      	adds	r1, r4, r5
 8002cd8:	428b      	cmp	r3, r1
 8002cda:	bf04      	itt	eq
 8002cdc:	6819      	ldreq	r1, [r3, #0]
 8002cde:	685b      	ldreq	r3, [r3, #4]
 8002ce0:	6063      	str	r3, [r4, #4]
 8002ce2:	bf04      	itt	eq
 8002ce4:	1949      	addeq	r1, r1, r5
 8002ce6:	6021      	streq	r1, [r4, #0]
 8002ce8:	6054      	str	r4, [r2, #4]
 8002cea:	e7c7      	b.n	8002c7c <_free_r+0x28>
 8002cec:	b003      	add	sp, #12
 8002cee:	bd30      	pop	{r4, r5, pc}
 8002cf0:	200001b8 	.word	0x200001b8

08002cf4 <_malloc_r>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	1ccd      	adds	r5, r1, #3
 8002cf8:	f025 0503 	bic.w	r5, r5, #3
 8002cfc:	3508      	adds	r5, #8
 8002cfe:	2d0c      	cmp	r5, #12
 8002d00:	bf38      	it	cc
 8002d02:	250c      	movcc	r5, #12
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	4606      	mov	r6, r0
 8002d08:	db01      	blt.n	8002d0e <_malloc_r+0x1a>
 8002d0a:	42a9      	cmp	r1, r5
 8002d0c:	d903      	bls.n	8002d16 <_malloc_r+0x22>
 8002d0e:	230c      	movs	r3, #12
 8002d10:	6033      	str	r3, [r6, #0]
 8002d12:	2000      	movs	r0, #0
 8002d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d16:	f000 fe59 	bl	80039cc <__malloc_lock>
 8002d1a:	4921      	ldr	r1, [pc, #132]	; (8002da0 <_malloc_r+0xac>)
 8002d1c:	680a      	ldr	r2, [r1, #0]
 8002d1e:	4614      	mov	r4, r2
 8002d20:	b99c      	cbnz	r4, 8002d4a <_malloc_r+0x56>
 8002d22:	4f20      	ldr	r7, [pc, #128]	; (8002da4 <_malloc_r+0xb0>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b923      	cbnz	r3, 8002d32 <_malloc_r+0x3e>
 8002d28:	4621      	mov	r1, r4
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	f000 fcce 	bl	80036cc <_sbrk_r>
 8002d30:	6038      	str	r0, [r7, #0]
 8002d32:	4629      	mov	r1, r5
 8002d34:	4630      	mov	r0, r6
 8002d36:	f000 fcc9 	bl	80036cc <_sbrk_r>
 8002d3a:	1c43      	adds	r3, r0, #1
 8002d3c:	d123      	bne.n	8002d86 <_malloc_r+0x92>
 8002d3e:	230c      	movs	r3, #12
 8002d40:	6033      	str	r3, [r6, #0]
 8002d42:	4630      	mov	r0, r6
 8002d44:	f000 fe48 	bl	80039d8 <__malloc_unlock>
 8002d48:	e7e3      	b.n	8002d12 <_malloc_r+0x1e>
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	1b5b      	subs	r3, r3, r5
 8002d4e:	d417      	bmi.n	8002d80 <_malloc_r+0x8c>
 8002d50:	2b0b      	cmp	r3, #11
 8002d52:	d903      	bls.n	8002d5c <_malloc_r+0x68>
 8002d54:	6023      	str	r3, [r4, #0]
 8002d56:	441c      	add	r4, r3
 8002d58:	6025      	str	r5, [r4, #0]
 8002d5a:	e004      	b.n	8002d66 <_malloc_r+0x72>
 8002d5c:	6863      	ldr	r3, [r4, #4]
 8002d5e:	42a2      	cmp	r2, r4
 8002d60:	bf0c      	ite	eq
 8002d62:	600b      	streq	r3, [r1, #0]
 8002d64:	6053      	strne	r3, [r2, #4]
 8002d66:	4630      	mov	r0, r6
 8002d68:	f000 fe36 	bl	80039d8 <__malloc_unlock>
 8002d6c:	f104 000b 	add.w	r0, r4, #11
 8002d70:	1d23      	adds	r3, r4, #4
 8002d72:	f020 0007 	bic.w	r0, r0, #7
 8002d76:	1ac2      	subs	r2, r0, r3
 8002d78:	d0cc      	beq.n	8002d14 <_malloc_r+0x20>
 8002d7a:	1a1b      	subs	r3, r3, r0
 8002d7c:	50a3      	str	r3, [r4, r2]
 8002d7e:	e7c9      	b.n	8002d14 <_malloc_r+0x20>
 8002d80:	4622      	mov	r2, r4
 8002d82:	6864      	ldr	r4, [r4, #4]
 8002d84:	e7cc      	b.n	8002d20 <_malloc_r+0x2c>
 8002d86:	1cc4      	adds	r4, r0, #3
 8002d88:	f024 0403 	bic.w	r4, r4, #3
 8002d8c:	42a0      	cmp	r0, r4
 8002d8e:	d0e3      	beq.n	8002d58 <_malloc_r+0x64>
 8002d90:	1a21      	subs	r1, r4, r0
 8002d92:	4630      	mov	r0, r6
 8002d94:	f000 fc9a 	bl	80036cc <_sbrk_r>
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d1dd      	bne.n	8002d58 <_malloc_r+0x64>
 8002d9c:	e7cf      	b.n	8002d3e <_malloc_r+0x4a>
 8002d9e:	bf00      	nop
 8002da0:	200001b8 	.word	0x200001b8
 8002da4:	200001bc 	.word	0x200001bc

08002da8 <__ssputs_r>:
 8002da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dac:	688e      	ldr	r6, [r1, #8]
 8002dae:	429e      	cmp	r6, r3
 8002db0:	4682      	mov	sl, r0
 8002db2:	460c      	mov	r4, r1
 8002db4:	4690      	mov	r8, r2
 8002db6:	461f      	mov	r7, r3
 8002db8:	d838      	bhi.n	8002e2c <__ssputs_r+0x84>
 8002dba:	898a      	ldrh	r2, [r1, #12]
 8002dbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002dc0:	d032      	beq.n	8002e28 <__ssputs_r+0x80>
 8002dc2:	6825      	ldr	r5, [r4, #0]
 8002dc4:	6909      	ldr	r1, [r1, #16]
 8002dc6:	eba5 0901 	sub.w	r9, r5, r1
 8002dca:	6965      	ldr	r5, [r4, #20]
 8002dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	444b      	add	r3, r9
 8002dd8:	106d      	asrs	r5, r5, #1
 8002dda:	429d      	cmp	r5, r3
 8002ddc:	bf38      	it	cc
 8002dde:	461d      	movcc	r5, r3
 8002de0:	0553      	lsls	r3, r2, #21
 8002de2:	d531      	bpl.n	8002e48 <__ssputs_r+0xa0>
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7ff ff85 	bl	8002cf4 <_malloc_r>
 8002dea:	4606      	mov	r6, r0
 8002dec:	b950      	cbnz	r0, 8002e04 <__ssputs_r+0x5c>
 8002dee:	230c      	movs	r3, #12
 8002df0:	f8ca 3000 	str.w	r3, [sl]
 8002df4:	89a3      	ldrh	r3, [r4, #12]
 8002df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dfa:	81a3      	strh	r3, [r4, #12]
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e04:	6921      	ldr	r1, [r4, #16]
 8002e06:	464a      	mov	r2, r9
 8002e08:	f000 fdb8 	bl	800397c <memcpy>
 8002e0c:	89a3      	ldrh	r3, [r4, #12]
 8002e0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e16:	81a3      	strh	r3, [r4, #12]
 8002e18:	6126      	str	r6, [r4, #16]
 8002e1a:	6165      	str	r5, [r4, #20]
 8002e1c:	444e      	add	r6, r9
 8002e1e:	eba5 0509 	sub.w	r5, r5, r9
 8002e22:	6026      	str	r6, [r4, #0]
 8002e24:	60a5      	str	r5, [r4, #8]
 8002e26:	463e      	mov	r6, r7
 8002e28:	42be      	cmp	r6, r7
 8002e2a:	d900      	bls.n	8002e2e <__ssputs_r+0x86>
 8002e2c:	463e      	mov	r6, r7
 8002e2e:	4632      	mov	r2, r6
 8002e30:	6820      	ldr	r0, [r4, #0]
 8002e32:	4641      	mov	r1, r8
 8002e34:	f000 fdb0 	bl	8003998 <memmove>
 8002e38:	68a3      	ldr	r3, [r4, #8]
 8002e3a:	6822      	ldr	r2, [r4, #0]
 8002e3c:	1b9b      	subs	r3, r3, r6
 8002e3e:	4432      	add	r2, r6
 8002e40:	60a3      	str	r3, [r4, #8]
 8002e42:	6022      	str	r2, [r4, #0]
 8002e44:	2000      	movs	r0, #0
 8002e46:	e7db      	b.n	8002e00 <__ssputs_r+0x58>
 8002e48:	462a      	mov	r2, r5
 8002e4a:	f000 fdcb 	bl	80039e4 <_realloc_r>
 8002e4e:	4606      	mov	r6, r0
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d1e1      	bne.n	8002e18 <__ssputs_r+0x70>
 8002e54:	6921      	ldr	r1, [r4, #16]
 8002e56:	4650      	mov	r0, sl
 8002e58:	f7ff fefc 	bl	8002c54 <_free_r>
 8002e5c:	e7c7      	b.n	8002dee <__ssputs_r+0x46>
	...

08002e60 <_svfiprintf_r>:
 8002e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e64:	4698      	mov	r8, r3
 8002e66:	898b      	ldrh	r3, [r1, #12]
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	b09d      	sub	sp, #116	; 0x74
 8002e6c:	4607      	mov	r7, r0
 8002e6e:	460d      	mov	r5, r1
 8002e70:	4614      	mov	r4, r2
 8002e72:	d50e      	bpl.n	8002e92 <_svfiprintf_r+0x32>
 8002e74:	690b      	ldr	r3, [r1, #16]
 8002e76:	b963      	cbnz	r3, 8002e92 <_svfiprintf_r+0x32>
 8002e78:	2140      	movs	r1, #64	; 0x40
 8002e7a:	f7ff ff3b 	bl	8002cf4 <_malloc_r>
 8002e7e:	6028      	str	r0, [r5, #0]
 8002e80:	6128      	str	r0, [r5, #16]
 8002e82:	b920      	cbnz	r0, 8002e8e <_svfiprintf_r+0x2e>
 8002e84:	230c      	movs	r3, #12
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	e0d1      	b.n	8003032 <_svfiprintf_r+0x1d2>
 8002e8e:	2340      	movs	r3, #64	; 0x40
 8002e90:	616b      	str	r3, [r5, #20]
 8002e92:	2300      	movs	r3, #0
 8002e94:	9309      	str	r3, [sp, #36]	; 0x24
 8002e96:	2320      	movs	r3, #32
 8002e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ea0:	2330      	movs	r3, #48	; 0x30
 8002ea2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800304c <_svfiprintf_r+0x1ec>
 8002ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002eaa:	f04f 0901 	mov.w	r9, #1
 8002eae:	4623      	mov	r3, r4
 8002eb0:	469a      	mov	sl, r3
 8002eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002eb6:	b10a      	cbz	r2, 8002ebc <_svfiprintf_r+0x5c>
 8002eb8:	2a25      	cmp	r2, #37	; 0x25
 8002eba:	d1f9      	bne.n	8002eb0 <_svfiprintf_r+0x50>
 8002ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8002ec0:	d00b      	beq.n	8002eda <_svfiprintf_r+0x7a>
 8002ec2:	465b      	mov	r3, fp
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	4638      	mov	r0, r7
 8002eca:	f7ff ff6d 	bl	8002da8 <__ssputs_r>
 8002ece:	3001      	adds	r0, #1
 8002ed0:	f000 80aa 	beq.w	8003028 <_svfiprintf_r+0x1c8>
 8002ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ed6:	445a      	add	r2, fp
 8002ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8002eda:	f89a 3000 	ldrb.w	r3, [sl]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80a2 	beq.w	8003028 <_svfiprintf_r+0x1c8>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002eee:	f10a 0a01 	add.w	sl, sl, #1
 8002ef2:	9304      	str	r3, [sp, #16]
 8002ef4:	9307      	str	r3, [sp, #28]
 8002ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002efa:	931a      	str	r3, [sp, #104]	; 0x68
 8002efc:	4654      	mov	r4, sl
 8002efe:	2205      	movs	r2, #5
 8002f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f04:	4851      	ldr	r0, [pc, #324]	; (800304c <_svfiprintf_r+0x1ec>)
 8002f06:	f7fd f96b 	bl	80001e0 <memchr>
 8002f0a:	9a04      	ldr	r2, [sp, #16]
 8002f0c:	b9d8      	cbnz	r0, 8002f46 <_svfiprintf_r+0xe6>
 8002f0e:	06d0      	lsls	r0, r2, #27
 8002f10:	bf44      	itt	mi
 8002f12:	2320      	movmi	r3, #32
 8002f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f18:	0711      	lsls	r1, r2, #28
 8002f1a:	bf44      	itt	mi
 8002f1c:	232b      	movmi	r3, #43	; 0x2b
 8002f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f22:	f89a 3000 	ldrb.w	r3, [sl]
 8002f26:	2b2a      	cmp	r3, #42	; 0x2a
 8002f28:	d015      	beq.n	8002f56 <_svfiprintf_r+0xf6>
 8002f2a:	9a07      	ldr	r2, [sp, #28]
 8002f2c:	4654      	mov	r4, sl
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f04f 0c0a 	mov.w	ip, #10
 8002f34:	4621      	mov	r1, r4
 8002f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f3a:	3b30      	subs	r3, #48	; 0x30
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	d94e      	bls.n	8002fde <_svfiprintf_r+0x17e>
 8002f40:	b1b0      	cbz	r0, 8002f70 <_svfiprintf_r+0x110>
 8002f42:	9207      	str	r2, [sp, #28]
 8002f44:	e014      	b.n	8002f70 <_svfiprintf_r+0x110>
 8002f46:	eba0 0308 	sub.w	r3, r0, r8
 8002f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	9304      	str	r3, [sp, #16]
 8002f52:	46a2      	mov	sl, r4
 8002f54:	e7d2      	b.n	8002efc <_svfiprintf_r+0x9c>
 8002f56:	9b03      	ldr	r3, [sp, #12]
 8002f58:	1d19      	adds	r1, r3, #4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	9103      	str	r1, [sp, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bfbb      	ittet	lt
 8002f62:	425b      	neglt	r3, r3
 8002f64:	f042 0202 	orrlt.w	r2, r2, #2
 8002f68:	9307      	strge	r3, [sp, #28]
 8002f6a:	9307      	strlt	r3, [sp, #28]
 8002f6c:	bfb8      	it	lt
 8002f6e:	9204      	strlt	r2, [sp, #16]
 8002f70:	7823      	ldrb	r3, [r4, #0]
 8002f72:	2b2e      	cmp	r3, #46	; 0x2e
 8002f74:	d10c      	bne.n	8002f90 <_svfiprintf_r+0x130>
 8002f76:	7863      	ldrb	r3, [r4, #1]
 8002f78:	2b2a      	cmp	r3, #42	; 0x2a
 8002f7a:	d135      	bne.n	8002fe8 <_svfiprintf_r+0x188>
 8002f7c:	9b03      	ldr	r3, [sp, #12]
 8002f7e:	1d1a      	adds	r2, r3, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	9203      	str	r2, [sp, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bfb8      	it	lt
 8002f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f8c:	3402      	adds	r4, #2
 8002f8e:	9305      	str	r3, [sp, #20]
 8002f90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800305c <_svfiprintf_r+0x1fc>
 8002f94:	7821      	ldrb	r1, [r4, #0]
 8002f96:	2203      	movs	r2, #3
 8002f98:	4650      	mov	r0, sl
 8002f9a:	f7fd f921 	bl	80001e0 <memchr>
 8002f9e:	b140      	cbz	r0, 8002fb2 <_svfiprintf_r+0x152>
 8002fa0:	2340      	movs	r3, #64	; 0x40
 8002fa2:	eba0 000a 	sub.w	r0, r0, sl
 8002fa6:	fa03 f000 	lsl.w	r0, r3, r0
 8002faa:	9b04      	ldr	r3, [sp, #16]
 8002fac:	4303      	orrs	r3, r0
 8002fae:	3401      	adds	r4, #1
 8002fb0:	9304      	str	r3, [sp, #16]
 8002fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fb6:	4826      	ldr	r0, [pc, #152]	; (8003050 <_svfiprintf_r+0x1f0>)
 8002fb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fbc:	2206      	movs	r2, #6
 8002fbe:	f7fd f90f 	bl	80001e0 <memchr>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d038      	beq.n	8003038 <_svfiprintf_r+0x1d8>
 8002fc6:	4b23      	ldr	r3, [pc, #140]	; (8003054 <_svfiprintf_r+0x1f4>)
 8002fc8:	bb1b      	cbnz	r3, 8003012 <_svfiprintf_r+0x1b2>
 8002fca:	9b03      	ldr	r3, [sp, #12]
 8002fcc:	3307      	adds	r3, #7
 8002fce:	f023 0307 	bic.w	r3, r3, #7
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	9303      	str	r3, [sp, #12]
 8002fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fd8:	4433      	add	r3, r6
 8002fda:	9309      	str	r3, [sp, #36]	; 0x24
 8002fdc:	e767      	b.n	8002eae <_svfiprintf_r+0x4e>
 8002fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	e7a5      	b.n	8002f34 <_svfiprintf_r+0xd4>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	3401      	adds	r4, #1
 8002fec:	9305      	str	r3, [sp, #20]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f04f 0c0a 	mov.w	ip, #10
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ffa:	3a30      	subs	r2, #48	; 0x30
 8002ffc:	2a09      	cmp	r2, #9
 8002ffe:	d903      	bls.n	8003008 <_svfiprintf_r+0x1a8>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0c5      	beq.n	8002f90 <_svfiprintf_r+0x130>
 8003004:	9105      	str	r1, [sp, #20]
 8003006:	e7c3      	b.n	8002f90 <_svfiprintf_r+0x130>
 8003008:	fb0c 2101 	mla	r1, ip, r1, r2
 800300c:	4604      	mov	r4, r0
 800300e:	2301      	movs	r3, #1
 8003010:	e7f0      	b.n	8002ff4 <_svfiprintf_r+0x194>
 8003012:	ab03      	add	r3, sp, #12
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	462a      	mov	r2, r5
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <_svfiprintf_r+0x1f8>)
 800301a:	a904      	add	r1, sp, #16
 800301c:	4638      	mov	r0, r7
 800301e:	f3af 8000 	nop.w
 8003022:	1c42      	adds	r2, r0, #1
 8003024:	4606      	mov	r6, r0
 8003026:	d1d6      	bne.n	8002fd6 <_svfiprintf_r+0x176>
 8003028:	89ab      	ldrh	r3, [r5, #12]
 800302a:	065b      	lsls	r3, r3, #25
 800302c:	f53f af2c 	bmi.w	8002e88 <_svfiprintf_r+0x28>
 8003030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003032:	b01d      	add	sp, #116	; 0x74
 8003034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003038:	ab03      	add	r3, sp, #12
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	462a      	mov	r2, r5
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <_svfiprintf_r+0x1f8>)
 8003040:	a904      	add	r1, sp, #16
 8003042:	4638      	mov	r0, r7
 8003044:	f000 f9d4 	bl	80033f0 <_printf_i>
 8003048:	e7eb      	b.n	8003022 <_svfiprintf_r+0x1c2>
 800304a:	bf00      	nop
 800304c:	08003ee0 	.word	0x08003ee0
 8003050:	08003eea 	.word	0x08003eea
 8003054:	00000000 	.word	0x00000000
 8003058:	08002da9 	.word	0x08002da9
 800305c:	08003ee6 	.word	0x08003ee6

08003060 <__sfputc_r>:
 8003060:	6893      	ldr	r3, [r2, #8]
 8003062:	3b01      	subs	r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	b410      	push	{r4}
 8003068:	6093      	str	r3, [r2, #8]
 800306a:	da08      	bge.n	800307e <__sfputc_r+0x1e>
 800306c:	6994      	ldr	r4, [r2, #24]
 800306e:	42a3      	cmp	r3, r4
 8003070:	db01      	blt.n	8003076 <__sfputc_r+0x16>
 8003072:	290a      	cmp	r1, #10
 8003074:	d103      	bne.n	800307e <__sfputc_r+0x1e>
 8003076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800307a:	f000 bb7b 	b.w	8003774 <__swbuf_r>
 800307e:	6813      	ldr	r3, [r2, #0]
 8003080:	1c58      	adds	r0, r3, #1
 8003082:	6010      	str	r0, [r2, #0]
 8003084:	7019      	strb	r1, [r3, #0]
 8003086:	4608      	mov	r0, r1
 8003088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800308c:	4770      	bx	lr

0800308e <__sfputs_r>:
 800308e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003090:	4606      	mov	r6, r0
 8003092:	460f      	mov	r7, r1
 8003094:	4614      	mov	r4, r2
 8003096:	18d5      	adds	r5, r2, r3
 8003098:	42ac      	cmp	r4, r5
 800309a:	d101      	bne.n	80030a0 <__sfputs_r+0x12>
 800309c:	2000      	movs	r0, #0
 800309e:	e007      	b.n	80030b0 <__sfputs_r+0x22>
 80030a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030a4:	463a      	mov	r2, r7
 80030a6:	4630      	mov	r0, r6
 80030a8:	f7ff ffda 	bl	8003060 <__sfputc_r>
 80030ac:	1c43      	adds	r3, r0, #1
 80030ae:	d1f3      	bne.n	8003098 <__sfputs_r+0xa>
 80030b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030b4 <_vfiprintf_r>:
 80030b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b8:	460d      	mov	r5, r1
 80030ba:	b09d      	sub	sp, #116	; 0x74
 80030bc:	4614      	mov	r4, r2
 80030be:	4698      	mov	r8, r3
 80030c0:	4606      	mov	r6, r0
 80030c2:	b118      	cbz	r0, 80030cc <_vfiprintf_r+0x18>
 80030c4:	6983      	ldr	r3, [r0, #24]
 80030c6:	b90b      	cbnz	r3, 80030cc <_vfiprintf_r+0x18>
 80030c8:	f7ff fcb8 	bl	8002a3c <__sinit>
 80030cc:	4b89      	ldr	r3, [pc, #548]	; (80032f4 <_vfiprintf_r+0x240>)
 80030ce:	429d      	cmp	r5, r3
 80030d0:	d11b      	bne.n	800310a <_vfiprintf_r+0x56>
 80030d2:	6875      	ldr	r5, [r6, #4]
 80030d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030d6:	07d9      	lsls	r1, r3, #31
 80030d8:	d405      	bmi.n	80030e6 <_vfiprintf_r+0x32>
 80030da:	89ab      	ldrh	r3, [r5, #12]
 80030dc:	059a      	lsls	r2, r3, #22
 80030de:	d402      	bmi.n	80030e6 <_vfiprintf_r+0x32>
 80030e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030e2:	f7ff fd49 	bl	8002b78 <__retarget_lock_acquire_recursive>
 80030e6:	89ab      	ldrh	r3, [r5, #12]
 80030e8:	071b      	lsls	r3, r3, #28
 80030ea:	d501      	bpl.n	80030f0 <_vfiprintf_r+0x3c>
 80030ec:	692b      	ldr	r3, [r5, #16]
 80030ee:	b9eb      	cbnz	r3, 800312c <_vfiprintf_r+0x78>
 80030f0:	4629      	mov	r1, r5
 80030f2:	4630      	mov	r0, r6
 80030f4:	f000 fb90 	bl	8003818 <__swsetup_r>
 80030f8:	b1c0      	cbz	r0, 800312c <_vfiprintf_r+0x78>
 80030fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030fc:	07dc      	lsls	r4, r3, #31
 80030fe:	d50e      	bpl.n	800311e <_vfiprintf_r+0x6a>
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	b01d      	add	sp, #116	; 0x74
 8003106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800310a:	4b7b      	ldr	r3, [pc, #492]	; (80032f8 <_vfiprintf_r+0x244>)
 800310c:	429d      	cmp	r5, r3
 800310e:	d101      	bne.n	8003114 <_vfiprintf_r+0x60>
 8003110:	68b5      	ldr	r5, [r6, #8]
 8003112:	e7df      	b.n	80030d4 <_vfiprintf_r+0x20>
 8003114:	4b79      	ldr	r3, [pc, #484]	; (80032fc <_vfiprintf_r+0x248>)
 8003116:	429d      	cmp	r5, r3
 8003118:	bf08      	it	eq
 800311a:	68f5      	ldreq	r5, [r6, #12]
 800311c:	e7da      	b.n	80030d4 <_vfiprintf_r+0x20>
 800311e:	89ab      	ldrh	r3, [r5, #12]
 8003120:	0598      	lsls	r0, r3, #22
 8003122:	d4ed      	bmi.n	8003100 <_vfiprintf_r+0x4c>
 8003124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003126:	f7ff fd28 	bl	8002b7a <__retarget_lock_release_recursive>
 800312a:	e7e9      	b.n	8003100 <_vfiprintf_r+0x4c>
 800312c:	2300      	movs	r3, #0
 800312e:	9309      	str	r3, [sp, #36]	; 0x24
 8003130:	2320      	movs	r3, #32
 8003132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003136:	f8cd 800c 	str.w	r8, [sp, #12]
 800313a:	2330      	movs	r3, #48	; 0x30
 800313c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003300 <_vfiprintf_r+0x24c>
 8003140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003144:	f04f 0901 	mov.w	r9, #1
 8003148:	4623      	mov	r3, r4
 800314a:	469a      	mov	sl, r3
 800314c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003150:	b10a      	cbz	r2, 8003156 <_vfiprintf_r+0xa2>
 8003152:	2a25      	cmp	r2, #37	; 0x25
 8003154:	d1f9      	bne.n	800314a <_vfiprintf_r+0x96>
 8003156:	ebba 0b04 	subs.w	fp, sl, r4
 800315a:	d00b      	beq.n	8003174 <_vfiprintf_r+0xc0>
 800315c:	465b      	mov	r3, fp
 800315e:	4622      	mov	r2, r4
 8003160:	4629      	mov	r1, r5
 8003162:	4630      	mov	r0, r6
 8003164:	f7ff ff93 	bl	800308e <__sfputs_r>
 8003168:	3001      	adds	r0, #1
 800316a:	f000 80aa 	beq.w	80032c2 <_vfiprintf_r+0x20e>
 800316e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003170:	445a      	add	r2, fp
 8003172:	9209      	str	r2, [sp, #36]	; 0x24
 8003174:	f89a 3000 	ldrb.w	r3, [sl]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a2 	beq.w	80032c2 <_vfiprintf_r+0x20e>
 800317e:	2300      	movs	r3, #0
 8003180:	f04f 32ff 	mov.w	r2, #4294967295
 8003184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003188:	f10a 0a01 	add.w	sl, sl, #1
 800318c:	9304      	str	r3, [sp, #16]
 800318e:	9307      	str	r3, [sp, #28]
 8003190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003194:	931a      	str	r3, [sp, #104]	; 0x68
 8003196:	4654      	mov	r4, sl
 8003198:	2205      	movs	r2, #5
 800319a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800319e:	4858      	ldr	r0, [pc, #352]	; (8003300 <_vfiprintf_r+0x24c>)
 80031a0:	f7fd f81e 	bl	80001e0 <memchr>
 80031a4:	9a04      	ldr	r2, [sp, #16]
 80031a6:	b9d8      	cbnz	r0, 80031e0 <_vfiprintf_r+0x12c>
 80031a8:	06d1      	lsls	r1, r2, #27
 80031aa:	bf44      	itt	mi
 80031ac:	2320      	movmi	r3, #32
 80031ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031b2:	0713      	lsls	r3, r2, #28
 80031b4:	bf44      	itt	mi
 80031b6:	232b      	movmi	r3, #43	; 0x2b
 80031b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031bc:	f89a 3000 	ldrb.w	r3, [sl]
 80031c0:	2b2a      	cmp	r3, #42	; 0x2a
 80031c2:	d015      	beq.n	80031f0 <_vfiprintf_r+0x13c>
 80031c4:	9a07      	ldr	r2, [sp, #28]
 80031c6:	4654      	mov	r4, sl
 80031c8:	2000      	movs	r0, #0
 80031ca:	f04f 0c0a 	mov.w	ip, #10
 80031ce:	4621      	mov	r1, r4
 80031d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031d4:	3b30      	subs	r3, #48	; 0x30
 80031d6:	2b09      	cmp	r3, #9
 80031d8:	d94e      	bls.n	8003278 <_vfiprintf_r+0x1c4>
 80031da:	b1b0      	cbz	r0, 800320a <_vfiprintf_r+0x156>
 80031dc:	9207      	str	r2, [sp, #28]
 80031de:	e014      	b.n	800320a <_vfiprintf_r+0x156>
 80031e0:	eba0 0308 	sub.w	r3, r0, r8
 80031e4:	fa09 f303 	lsl.w	r3, r9, r3
 80031e8:	4313      	orrs	r3, r2
 80031ea:	9304      	str	r3, [sp, #16]
 80031ec:	46a2      	mov	sl, r4
 80031ee:	e7d2      	b.n	8003196 <_vfiprintf_r+0xe2>
 80031f0:	9b03      	ldr	r3, [sp, #12]
 80031f2:	1d19      	adds	r1, r3, #4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	9103      	str	r1, [sp, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bfbb      	ittet	lt
 80031fc:	425b      	neglt	r3, r3
 80031fe:	f042 0202 	orrlt.w	r2, r2, #2
 8003202:	9307      	strge	r3, [sp, #28]
 8003204:	9307      	strlt	r3, [sp, #28]
 8003206:	bfb8      	it	lt
 8003208:	9204      	strlt	r2, [sp, #16]
 800320a:	7823      	ldrb	r3, [r4, #0]
 800320c:	2b2e      	cmp	r3, #46	; 0x2e
 800320e:	d10c      	bne.n	800322a <_vfiprintf_r+0x176>
 8003210:	7863      	ldrb	r3, [r4, #1]
 8003212:	2b2a      	cmp	r3, #42	; 0x2a
 8003214:	d135      	bne.n	8003282 <_vfiprintf_r+0x1ce>
 8003216:	9b03      	ldr	r3, [sp, #12]
 8003218:	1d1a      	adds	r2, r3, #4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	9203      	str	r2, [sp, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	bfb8      	it	lt
 8003222:	f04f 33ff 	movlt.w	r3, #4294967295
 8003226:	3402      	adds	r4, #2
 8003228:	9305      	str	r3, [sp, #20]
 800322a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003310 <_vfiprintf_r+0x25c>
 800322e:	7821      	ldrb	r1, [r4, #0]
 8003230:	2203      	movs	r2, #3
 8003232:	4650      	mov	r0, sl
 8003234:	f7fc ffd4 	bl	80001e0 <memchr>
 8003238:	b140      	cbz	r0, 800324c <_vfiprintf_r+0x198>
 800323a:	2340      	movs	r3, #64	; 0x40
 800323c:	eba0 000a 	sub.w	r0, r0, sl
 8003240:	fa03 f000 	lsl.w	r0, r3, r0
 8003244:	9b04      	ldr	r3, [sp, #16]
 8003246:	4303      	orrs	r3, r0
 8003248:	3401      	adds	r4, #1
 800324a:	9304      	str	r3, [sp, #16]
 800324c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003250:	482c      	ldr	r0, [pc, #176]	; (8003304 <_vfiprintf_r+0x250>)
 8003252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003256:	2206      	movs	r2, #6
 8003258:	f7fc ffc2 	bl	80001e0 <memchr>
 800325c:	2800      	cmp	r0, #0
 800325e:	d03f      	beq.n	80032e0 <_vfiprintf_r+0x22c>
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <_vfiprintf_r+0x254>)
 8003262:	bb1b      	cbnz	r3, 80032ac <_vfiprintf_r+0x1f8>
 8003264:	9b03      	ldr	r3, [sp, #12]
 8003266:	3307      	adds	r3, #7
 8003268:	f023 0307 	bic.w	r3, r3, #7
 800326c:	3308      	adds	r3, #8
 800326e:	9303      	str	r3, [sp, #12]
 8003270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003272:	443b      	add	r3, r7
 8003274:	9309      	str	r3, [sp, #36]	; 0x24
 8003276:	e767      	b.n	8003148 <_vfiprintf_r+0x94>
 8003278:	fb0c 3202 	mla	r2, ip, r2, r3
 800327c:	460c      	mov	r4, r1
 800327e:	2001      	movs	r0, #1
 8003280:	e7a5      	b.n	80031ce <_vfiprintf_r+0x11a>
 8003282:	2300      	movs	r3, #0
 8003284:	3401      	adds	r4, #1
 8003286:	9305      	str	r3, [sp, #20]
 8003288:	4619      	mov	r1, r3
 800328a:	f04f 0c0a 	mov.w	ip, #10
 800328e:	4620      	mov	r0, r4
 8003290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003294:	3a30      	subs	r2, #48	; 0x30
 8003296:	2a09      	cmp	r2, #9
 8003298:	d903      	bls.n	80032a2 <_vfiprintf_r+0x1ee>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0c5      	beq.n	800322a <_vfiprintf_r+0x176>
 800329e:	9105      	str	r1, [sp, #20]
 80032a0:	e7c3      	b.n	800322a <_vfiprintf_r+0x176>
 80032a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80032a6:	4604      	mov	r4, r0
 80032a8:	2301      	movs	r3, #1
 80032aa:	e7f0      	b.n	800328e <_vfiprintf_r+0x1da>
 80032ac:	ab03      	add	r3, sp, #12
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	462a      	mov	r2, r5
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <_vfiprintf_r+0x258>)
 80032b4:	a904      	add	r1, sp, #16
 80032b6:	4630      	mov	r0, r6
 80032b8:	f3af 8000 	nop.w
 80032bc:	4607      	mov	r7, r0
 80032be:	1c78      	adds	r0, r7, #1
 80032c0:	d1d6      	bne.n	8003270 <_vfiprintf_r+0x1bc>
 80032c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032c4:	07d9      	lsls	r1, r3, #31
 80032c6:	d405      	bmi.n	80032d4 <_vfiprintf_r+0x220>
 80032c8:	89ab      	ldrh	r3, [r5, #12]
 80032ca:	059a      	lsls	r2, r3, #22
 80032cc:	d402      	bmi.n	80032d4 <_vfiprintf_r+0x220>
 80032ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032d0:	f7ff fc53 	bl	8002b7a <__retarget_lock_release_recursive>
 80032d4:	89ab      	ldrh	r3, [r5, #12]
 80032d6:	065b      	lsls	r3, r3, #25
 80032d8:	f53f af12 	bmi.w	8003100 <_vfiprintf_r+0x4c>
 80032dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032de:	e711      	b.n	8003104 <_vfiprintf_r+0x50>
 80032e0:	ab03      	add	r3, sp, #12
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	462a      	mov	r2, r5
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <_vfiprintf_r+0x258>)
 80032e8:	a904      	add	r1, sp, #16
 80032ea:	4630      	mov	r0, r6
 80032ec:	f000 f880 	bl	80033f0 <_printf_i>
 80032f0:	e7e4      	b.n	80032bc <_vfiprintf_r+0x208>
 80032f2:	bf00      	nop
 80032f4:	08003ea0 	.word	0x08003ea0
 80032f8:	08003ec0 	.word	0x08003ec0
 80032fc:	08003e80 	.word	0x08003e80
 8003300:	08003ee0 	.word	0x08003ee0
 8003304:	08003eea 	.word	0x08003eea
 8003308:	00000000 	.word	0x00000000
 800330c:	0800308f 	.word	0x0800308f
 8003310:	08003ee6 	.word	0x08003ee6

08003314 <_printf_common>:
 8003314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003318:	4616      	mov	r6, r2
 800331a:	4699      	mov	r9, r3
 800331c:	688a      	ldr	r2, [r1, #8]
 800331e:	690b      	ldr	r3, [r1, #16]
 8003320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003324:	4293      	cmp	r3, r2
 8003326:	bfb8      	it	lt
 8003328:	4613      	movlt	r3, r2
 800332a:	6033      	str	r3, [r6, #0]
 800332c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003330:	4607      	mov	r7, r0
 8003332:	460c      	mov	r4, r1
 8003334:	b10a      	cbz	r2, 800333a <_printf_common+0x26>
 8003336:	3301      	adds	r3, #1
 8003338:	6033      	str	r3, [r6, #0]
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	0699      	lsls	r1, r3, #26
 800333e:	bf42      	ittt	mi
 8003340:	6833      	ldrmi	r3, [r6, #0]
 8003342:	3302      	addmi	r3, #2
 8003344:	6033      	strmi	r3, [r6, #0]
 8003346:	6825      	ldr	r5, [r4, #0]
 8003348:	f015 0506 	ands.w	r5, r5, #6
 800334c:	d106      	bne.n	800335c <_printf_common+0x48>
 800334e:	f104 0a19 	add.w	sl, r4, #25
 8003352:	68e3      	ldr	r3, [r4, #12]
 8003354:	6832      	ldr	r2, [r6, #0]
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	42ab      	cmp	r3, r5
 800335a:	dc26      	bgt.n	80033aa <_printf_common+0x96>
 800335c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003360:	1e13      	subs	r3, r2, #0
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	bf18      	it	ne
 8003366:	2301      	movne	r3, #1
 8003368:	0692      	lsls	r2, r2, #26
 800336a:	d42b      	bmi.n	80033c4 <_printf_common+0xb0>
 800336c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003370:	4649      	mov	r1, r9
 8003372:	4638      	mov	r0, r7
 8003374:	47c0      	blx	r8
 8003376:	3001      	adds	r0, #1
 8003378:	d01e      	beq.n	80033b8 <_printf_common+0xa4>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	68e5      	ldr	r5, [r4, #12]
 800337e:	6832      	ldr	r2, [r6, #0]
 8003380:	f003 0306 	and.w	r3, r3, #6
 8003384:	2b04      	cmp	r3, #4
 8003386:	bf08      	it	eq
 8003388:	1aad      	subeq	r5, r5, r2
 800338a:	68a3      	ldr	r3, [r4, #8]
 800338c:	6922      	ldr	r2, [r4, #16]
 800338e:	bf0c      	ite	eq
 8003390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003394:	2500      	movne	r5, #0
 8003396:	4293      	cmp	r3, r2
 8003398:	bfc4      	itt	gt
 800339a:	1a9b      	subgt	r3, r3, r2
 800339c:	18ed      	addgt	r5, r5, r3
 800339e:	2600      	movs	r6, #0
 80033a0:	341a      	adds	r4, #26
 80033a2:	42b5      	cmp	r5, r6
 80033a4:	d11a      	bne.n	80033dc <_printf_common+0xc8>
 80033a6:	2000      	movs	r0, #0
 80033a8:	e008      	b.n	80033bc <_printf_common+0xa8>
 80033aa:	2301      	movs	r3, #1
 80033ac:	4652      	mov	r2, sl
 80033ae:	4649      	mov	r1, r9
 80033b0:	4638      	mov	r0, r7
 80033b2:	47c0      	blx	r8
 80033b4:	3001      	adds	r0, #1
 80033b6:	d103      	bne.n	80033c0 <_printf_common+0xac>
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c0:	3501      	adds	r5, #1
 80033c2:	e7c6      	b.n	8003352 <_printf_common+0x3e>
 80033c4:	18e1      	adds	r1, r4, r3
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	2030      	movs	r0, #48	; 0x30
 80033ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033ce:	4422      	add	r2, r4
 80033d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033d8:	3302      	adds	r3, #2
 80033da:	e7c7      	b.n	800336c <_printf_common+0x58>
 80033dc:	2301      	movs	r3, #1
 80033de:	4622      	mov	r2, r4
 80033e0:	4649      	mov	r1, r9
 80033e2:	4638      	mov	r0, r7
 80033e4:	47c0      	blx	r8
 80033e6:	3001      	adds	r0, #1
 80033e8:	d0e6      	beq.n	80033b8 <_printf_common+0xa4>
 80033ea:	3601      	adds	r6, #1
 80033ec:	e7d9      	b.n	80033a2 <_printf_common+0x8e>
	...

080033f0 <_printf_i>:
 80033f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033f4:	460c      	mov	r4, r1
 80033f6:	4691      	mov	r9, r2
 80033f8:	7e27      	ldrb	r7, [r4, #24]
 80033fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033fc:	2f78      	cmp	r7, #120	; 0x78
 80033fe:	4680      	mov	r8, r0
 8003400:	469a      	mov	sl, r3
 8003402:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003406:	d807      	bhi.n	8003418 <_printf_i+0x28>
 8003408:	2f62      	cmp	r7, #98	; 0x62
 800340a:	d80a      	bhi.n	8003422 <_printf_i+0x32>
 800340c:	2f00      	cmp	r7, #0
 800340e:	f000 80d8 	beq.w	80035c2 <_printf_i+0x1d2>
 8003412:	2f58      	cmp	r7, #88	; 0x58
 8003414:	f000 80a3 	beq.w	800355e <_printf_i+0x16e>
 8003418:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800341c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003420:	e03a      	b.n	8003498 <_printf_i+0xa8>
 8003422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003426:	2b15      	cmp	r3, #21
 8003428:	d8f6      	bhi.n	8003418 <_printf_i+0x28>
 800342a:	a001      	add	r0, pc, #4	; (adr r0, 8003430 <_printf_i+0x40>)
 800342c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003430:	08003489 	.word	0x08003489
 8003434:	0800349d 	.word	0x0800349d
 8003438:	08003419 	.word	0x08003419
 800343c:	08003419 	.word	0x08003419
 8003440:	08003419 	.word	0x08003419
 8003444:	08003419 	.word	0x08003419
 8003448:	0800349d 	.word	0x0800349d
 800344c:	08003419 	.word	0x08003419
 8003450:	08003419 	.word	0x08003419
 8003454:	08003419 	.word	0x08003419
 8003458:	08003419 	.word	0x08003419
 800345c:	080035a9 	.word	0x080035a9
 8003460:	080034cd 	.word	0x080034cd
 8003464:	0800358b 	.word	0x0800358b
 8003468:	08003419 	.word	0x08003419
 800346c:	08003419 	.word	0x08003419
 8003470:	080035cb 	.word	0x080035cb
 8003474:	08003419 	.word	0x08003419
 8003478:	080034cd 	.word	0x080034cd
 800347c:	08003419 	.word	0x08003419
 8003480:	08003419 	.word	0x08003419
 8003484:	08003593 	.word	0x08003593
 8003488:	680b      	ldr	r3, [r1, #0]
 800348a:	1d1a      	adds	r2, r3, #4
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	600a      	str	r2, [r1, #0]
 8003490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003498:	2301      	movs	r3, #1
 800349a:	e0a3      	b.n	80035e4 <_printf_i+0x1f4>
 800349c:	6825      	ldr	r5, [r4, #0]
 800349e:	6808      	ldr	r0, [r1, #0]
 80034a0:	062e      	lsls	r6, r5, #24
 80034a2:	f100 0304 	add.w	r3, r0, #4
 80034a6:	d50a      	bpl.n	80034be <_printf_i+0xce>
 80034a8:	6805      	ldr	r5, [r0, #0]
 80034aa:	600b      	str	r3, [r1, #0]
 80034ac:	2d00      	cmp	r5, #0
 80034ae:	da03      	bge.n	80034b8 <_printf_i+0xc8>
 80034b0:	232d      	movs	r3, #45	; 0x2d
 80034b2:	426d      	negs	r5, r5
 80034b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034b8:	485e      	ldr	r0, [pc, #376]	; (8003634 <_printf_i+0x244>)
 80034ba:	230a      	movs	r3, #10
 80034bc:	e019      	b.n	80034f2 <_printf_i+0x102>
 80034be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80034c2:	6805      	ldr	r5, [r0, #0]
 80034c4:	600b      	str	r3, [r1, #0]
 80034c6:	bf18      	it	ne
 80034c8:	b22d      	sxthne	r5, r5
 80034ca:	e7ef      	b.n	80034ac <_printf_i+0xbc>
 80034cc:	680b      	ldr	r3, [r1, #0]
 80034ce:	6825      	ldr	r5, [r4, #0]
 80034d0:	1d18      	adds	r0, r3, #4
 80034d2:	6008      	str	r0, [r1, #0]
 80034d4:	0628      	lsls	r0, r5, #24
 80034d6:	d501      	bpl.n	80034dc <_printf_i+0xec>
 80034d8:	681d      	ldr	r5, [r3, #0]
 80034da:	e002      	b.n	80034e2 <_printf_i+0xf2>
 80034dc:	0669      	lsls	r1, r5, #25
 80034de:	d5fb      	bpl.n	80034d8 <_printf_i+0xe8>
 80034e0:	881d      	ldrh	r5, [r3, #0]
 80034e2:	4854      	ldr	r0, [pc, #336]	; (8003634 <_printf_i+0x244>)
 80034e4:	2f6f      	cmp	r7, #111	; 0x6f
 80034e6:	bf0c      	ite	eq
 80034e8:	2308      	moveq	r3, #8
 80034ea:	230a      	movne	r3, #10
 80034ec:	2100      	movs	r1, #0
 80034ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034f2:	6866      	ldr	r6, [r4, #4]
 80034f4:	60a6      	str	r6, [r4, #8]
 80034f6:	2e00      	cmp	r6, #0
 80034f8:	bfa2      	ittt	ge
 80034fa:	6821      	ldrge	r1, [r4, #0]
 80034fc:	f021 0104 	bicge.w	r1, r1, #4
 8003500:	6021      	strge	r1, [r4, #0]
 8003502:	b90d      	cbnz	r5, 8003508 <_printf_i+0x118>
 8003504:	2e00      	cmp	r6, #0
 8003506:	d04d      	beq.n	80035a4 <_printf_i+0x1b4>
 8003508:	4616      	mov	r6, r2
 800350a:	fbb5 f1f3 	udiv	r1, r5, r3
 800350e:	fb03 5711 	mls	r7, r3, r1, r5
 8003512:	5dc7      	ldrb	r7, [r0, r7]
 8003514:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003518:	462f      	mov	r7, r5
 800351a:	42bb      	cmp	r3, r7
 800351c:	460d      	mov	r5, r1
 800351e:	d9f4      	bls.n	800350a <_printf_i+0x11a>
 8003520:	2b08      	cmp	r3, #8
 8003522:	d10b      	bne.n	800353c <_printf_i+0x14c>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	07df      	lsls	r7, r3, #31
 8003528:	d508      	bpl.n	800353c <_printf_i+0x14c>
 800352a:	6923      	ldr	r3, [r4, #16]
 800352c:	6861      	ldr	r1, [r4, #4]
 800352e:	4299      	cmp	r1, r3
 8003530:	bfde      	ittt	le
 8003532:	2330      	movle	r3, #48	; 0x30
 8003534:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003538:	f106 36ff 	addle.w	r6, r6, #4294967295
 800353c:	1b92      	subs	r2, r2, r6
 800353e:	6122      	str	r2, [r4, #16]
 8003540:	f8cd a000 	str.w	sl, [sp]
 8003544:	464b      	mov	r3, r9
 8003546:	aa03      	add	r2, sp, #12
 8003548:	4621      	mov	r1, r4
 800354a:	4640      	mov	r0, r8
 800354c:	f7ff fee2 	bl	8003314 <_printf_common>
 8003550:	3001      	adds	r0, #1
 8003552:	d14c      	bne.n	80035ee <_printf_i+0x1fe>
 8003554:	f04f 30ff 	mov.w	r0, #4294967295
 8003558:	b004      	add	sp, #16
 800355a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800355e:	4835      	ldr	r0, [pc, #212]	; (8003634 <_printf_i+0x244>)
 8003560:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	680e      	ldr	r6, [r1, #0]
 8003568:	061f      	lsls	r7, r3, #24
 800356a:	f856 5b04 	ldr.w	r5, [r6], #4
 800356e:	600e      	str	r6, [r1, #0]
 8003570:	d514      	bpl.n	800359c <_printf_i+0x1ac>
 8003572:	07d9      	lsls	r1, r3, #31
 8003574:	bf44      	itt	mi
 8003576:	f043 0320 	orrmi.w	r3, r3, #32
 800357a:	6023      	strmi	r3, [r4, #0]
 800357c:	b91d      	cbnz	r5, 8003586 <_printf_i+0x196>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	f023 0320 	bic.w	r3, r3, #32
 8003584:	6023      	str	r3, [r4, #0]
 8003586:	2310      	movs	r3, #16
 8003588:	e7b0      	b.n	80034ec <_printf_i+0xfc>
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	f043 0320 	orr.w	r3, r3, #32
 8003590:	6023      	str	r3, [r4, #0]
 8003592:	2378      	movs	r3, #120	; 0x78
 8003594:	4828      	ldr	r0, [pc, #160]	; (8003638 <_printf_i+0x248>)
 8003596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800359a:	e7e3      	b.n	8003564 <_printf_i+0x174>
 800359c:	065e      	lsls	r6, r3, #25
 800359e:	bf48      	it	mi
 80035a0:	b2ad      	uxthmi	r5, r5
 80035a2:	e7e6      	b.n	8003572 <_printf_i+0x182>
 80035a4:	4616      	mov	r6, r2
 80035a6:	e7bb      	b.n	8003520 <_printf_i+0x130>
 80035a8:	680b      	ldr	r3, [r1, #0]
 80035aa:	6826      	ldr	r6, [r4, #0]
 80035ac:	6960      	ldr	r0, [r4, #20]
 80035ae:	1d1d      	adds	r5, r3, #4
 80035b0:	600d      	str	r5, [r1, #0]
 80035b2:	0635      	lsls	r5, r6, #24
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	d501      	bpl.n	80035bc <_printf_i+0x1cc>
 80035b8:	6018      	str	r0, [r3, #0]
 80035ba:	e002      	b.n	80035c2 <_printf_i+0x1d2>
 80035bc:	0671      	lsls	r1, r6, #25
 80035be:	d5fb      	bpl.n	80035b8 <_printf_i+0x1c8>
 80035c0:	8018      	strh	r0, [r3, #0]
 80035c2:	2300      	movs	r3, #0
 80035c4:	6123      	str	r3, [r4, #16]
 80035c6:	4616      	mov	r6, r2
 80035c8:	e7ba      	b.n	8003540 <_printf_i+0x150>
 80035ca:	680b      	ldr	r3, [r1, #0]
 80035cc:	1d1a      	adds	r2, r3, #4
 80035ce:	600a      	str	r2, [r1, #0]
 80035d0:	681e      	ldr	r6, [r3, #0]
 80035d2:	6862      	ldr	r2, [r4, #4]
 80035d4:	2100      	movs	r1, #0
 80035d6:	4630      	mov	r0, r6
 80035d8:	f7fc fe02 	bl	80001e0 <memchr>
 80035dc:	b108      	cbz	r0, 80035e2 <_printf_i+0x1f2>
 80035de:	1b80      	subs	r0, r0, r6
 80035e0:	6060      	str	r0, [r4, #4]
 80035e2:	6863      	ldr	r3, [r4, #4]
 80035e4:	6123      	str	r3, [r4, #16]
 80035e6:	2300      	movs	r3, #0
 80035e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035ec:	e7a8      	b.n	8003540 <_printf_i+0x150>
 80035ee:	6923      	ldr	r3, [r4, #16]
 80035f0:	4632      	mov	r2, r6
 80035f2:	4649      	mov	r1, r9
 80035f4:	4640      	mov	r0, r8
 80035f6:	47d0      	blx	sl
 80035f8:	3001      	adds	r0, #1
 80035fa:	d0ab      	beq.n	8003554 <_printf_i+0x164>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	079b      	lsls	r3, r3, #30
 8003600:	d413      	bmi.n	800362a <_printf_i+0x23a>
 8003602:	68e0      	ldr	r0, [r4, #12]
 8003604:	9b03      	ldr	r3, [sp, #12]
 8003606:	4298      	cmp	r0, r3
 8003608:	bfb8      	it	lt
 800360a:	4618      	movlt	r0, r3
 800360c:	e7a4      	b.n	8003558 <_printf_i+0x168>
 800360e:	2301      	movs	r3, #1
 8003610:	4632      	mov	r2, r6
 8003612:	4649      	mov	r1, r9
 8003614:	4640      	mov	r0, r8
 8003616:	47d0      	blx	sl
 8003618:	3001      	adds	r0, #1
 800361a:	d09b      	beq.n	8003554 <_printf_i+0x164>
 800361c:	3501      	adds	r5, #1
 800361e:	68e3      	ldr	r3, [r4, #12]
 8003620:	9903      	ldr	r1, [sp, #12]
 8003622:	1a5b      	subs	r3, r3, r1
 8003624:	42ab      	cmp	r3, r5
 8003626:	dcf2      	bgt.n	800360e <_printf_i+0x21e>
 8003628:	e7eb      	b.n	8003602 <_printf_i+0x212>
 800362a:	2500      	movs	r5, #0
 800362c:	f104 0619 	add.w	r6, r4, #25
 8003630:	e7f5      	b.n	800361e <_printf_i+0x22e>
 8003632:	bf00      	nop
 8003634:	08003ef1 	.word	0x08003ef1
 8003638:	08003f02 	.word	0x08003f02

0800363c <_putc_r>:
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	460d      	mov	r5, r1
 8003640:	4614      	mov	r4, r2
 8003642:	4606      	mov	r6, r0
 8003644:	b118      	cbz	r0, 800364e <_putc_r+0x12>
 8003646:	6983      	ldr	r3, [r0, #24]
 8003648:	b90b      	cbnz	r3, 800364e <_putc_r+0x12>
 800364a:	f7ff f9f7 	bl	8002a3c <__sinit>
 800364e:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <_putc_r+0x84>)
 8003650:	429c      	cmp	r4, r3
 8003652:	d124      	bne.n	800369e <_putc_r+0x62>
 8003654:	6874      	ldr	r4, [r6, #4]
 8003656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003658:	07d8      	lsls	r0, r3, #31
 800365a:	d405      	bmi.n	8003668 <_putc_r+0x2c>
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	0599      	lsls	r1, r3, #22
 8003660:	d402      	bmi.n	8003668 <_putc_r+0x2c>
 8003662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003664:	f7ff fa88 	bl	8002b78 <__retarget_lock_acquire_recursive>
 8003668:	68a3      	ldr	r3, [r4, #8]
 800366a:	3b01      	subs	r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	60a3      	str	r3, [r4, #8]
 8003670:	da05      	bge.n	800367e <_putc_r+0x42>
 8003672:	69a2      	ldr	r2, [r4, #24]
 8003674:	4293      	cmp	r3, r2
 8003676:	db1c      	blt.n	80036b2 <_putc_r+0x76>
 8003678:	b2eb      	uxtb	r3, r5
 800367a:	2b0a      	cmp	r3, #10
 800367c:	d019      	beq.n	80036b2 <_putc_r+0x76>
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	6022      	str	r2, [r4, #0]
 8003684:	701d      	strb	r5, [r3, #0]
 8003686:	b2ed      	uxtb	r5, r5
 8003688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800368a:	07da      	lsls	r2, r3, #31
 800368c:	d405      	bmi.n	800369a <_putc_r+0x5e>
 800368e:	89a3      	ldrh	r3, [r4, #12]
 8003690:	059b      	lsls	r3, r3, #22
 8003692:	d402      	bmi.n	800369a <_putc_r+0x5e>
 8003694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003696:	f7ff fa70 	bl	8002b7a <__retarget_lock_release_recursive>
 800369a:	4628      	mov	r0, r5
 800369c:	bd70      	pop	{r4, r5, r6, pc}
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <_putc_r+0x88>)
 80036a0:	429c      	cmp	r4, r3
 80036a2:	d101      	bne.n	80036a8 <_putc_r+0x6c>
 80036a4:	68b4      	ldr	r4, [r6, #8]
 80036a6:	e7d6      	b.n	8003656 <_putc_r+0x1a>
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <_putc_r+0x8c>)
 80036aa:	429c      	cmp	r4, r3
 80036ac:	bf08      	it	eq
 80036ae:	68f4      	ldreq	r4, [r6, #12]
 80036b0:	e7d1      	b.n	8003656 <_putc_r+0x1a>
 80036b2:	4629      	mov	r1, r5
 80036b4:	4622      	mov	r2, r4
 80036b6:	4630      	mov	r0, r6
 80036b8:	f000 f85c 	bl	8003774 <__swbuf_r>
 80036bc:	4605      	mov	r5, r0
 80036be:	e7e3      	b.n	8003688 <_putc_r+0x4c>
 80036c0:	08003ea0 	.word	0x08003ea0
 80036c4:	08003ec0 	.word	0x08003ec0
 80036c8:	08003e80 	.word	0x08003e80

080036cc <_sbrk_r>:
 80036cc:	b538      	push	{r3, r4, r5, lr}
 80036ce:	4d06      	ldr	r5, [pc, #24]	; (80036e8 <_sbrk_r+0x1c>)
 80036d0:	2300      	movs	r3, #0
 80036d2:	4604      	mov	r4, r0
 80036d4:	4608      	mov	r0, r1
 80036d6:	602b      	str	r3, [r5, #0]
 80036d8:	f7fe fd7e 	bl	80021d8 <_sbrk>
 80036dc:	1c43      	adds	r3, r0, #1
 80036de:	d102      	bne.n	80036e6 <_sbrk_r+0x1a>
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	b103      	cbz	r3, 80036e6 <_sbrk_r+0x1a>
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
 80036e8:	200003f8 	.word	0x200003f8

080036ec <__sread>:
 80036ec:	b510      	push	{r4, lr}
 80036ee:	460c      	mov	r4, r1
 80036f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f4:	f000 f99c 	bl	8003a30 <_read_r>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	bfab      	itete	ge
 80036fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003700:	181b      	addge	r3, r3, r0
 8003702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003706:	bfac      	ite	ge
 8003708:	6563      	strge	r3, [r4, #84]	; 0x54
 800370a:	81a3      	strhlt	r3, [r4, #12]
 800370c:	bd10      	pop	{r4, pc}

0800370e <__swrite>:
 800370e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003712:	461f      	mov	r7, r3
 8003714:	898b      	ldrh	r3, [r1, #12]
 8003716:	05db      	lsls	r3, r3, #23
 8003718:	4605      	mov	r5, r0
 800371a:	460c      	mov	r4, r1
 800371c:	4616      	mov	r6, r2
 800371e:	d505      	bpl.n	800372c <__swrite+0x1e>
 8003720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003724:	2302      	movs	r3, #2
 8003726:	2200      	movs	r2, #0
 8003728:	f000 f916 	bl	8003958 <_lseek_r>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003736:	81a3      	strh	r3, [r4, #12]
 8003738:	4632      	mov	r2, r6
 800373a:	463b      	mov	r3, r7
 800373c:	4628      	mov	r0, r5
 800373e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003742:	f7fd b8d5 	b.w	80008f0 <_write_r>

08003746 <__sseek>:
 8003746:	b510      	push	{r4, lr}
 8003748:	460c      	mov	r4, r1
 800374a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800374e:	f000 f903 	bl	8003958 <_lseek_r>
 8003752:	1c43      	adds	r3, r0, #1
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	bf15      	itete	ne
 8003758:	6560      	strne	r0, [r4, #84]	; 0x54
 800375a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800375e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003762:	81a3      	strheq	r3, [r4, #12]
 8003764:	bf18      	it	ne
 8003766:	81a3      	strhne	r3, [r4, #12]
 8003768:	bd10      	pop	{r4, pc}

0800376a <__sclose>:
 800376a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800376e:	f000 b8c1 	b.w	80038f4 <_close_r>
	...

08003774 <__swbuf_r>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	460e      	mov	r6, r1
 8003778:	4614      	mov	r4, r2
 800377a:	4605      	mov	r5, r0
 800377c:	b118      	cbz	r0, 8003786 <__swbuf_r+0x12>
 800377e:	6983      	ldr	r3, [r0, #24]
 8003780:	b90b      	cbnz	r3, 8003786 <__swbuf_r+0x12>
 8003782:	f7ff f95b 	bl	8002a3c <__sinit>
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <__swbuf_r+0x98>)
 8003788:	429c      	cmp	r4, r3
 800378a:	d12b      	bne.n	80037e4 <__swbuf_r+0x70>
 800378c:	686c      	ldr	r4, [r5, #4]
 800378e:	69a3      	ldr	r3, [r4, #24]
 8003790:	60a3      	str	r3, [r4, #8]
 8003792:	89a3      	ldrh	r3, [r4, #12]
 8003794:	071a      	lsls	r2, r3, #28
 8003796:	d52f      	bpl.n	80037f8 <__swbuf_r+0x84>
 8003798:	6923      	ldr	r3, [r4, #16]
 800379a:	b36b      	cbz	r3, 80037f8 <__swbuf_r+0x84>
 800379c:	6923      	ldr	r3, [r4, #16]
 800379e:	6820      	ldr	r0, [r4, #0]
 80037a0:	1ac0      	subs	r0, r0, r3
 80037a2:	6963      	ldr	r3, [r4, #20]
 80037a4:	b2f6      	uxtb	r6, r6
 80037a6:	4283      	cmp	r3, r0
 80037a8:	4637      	mov	r7, r6
 80037aa:	dc04      	bgt.n	80037b6 <__swbuf_r+0x42>
 80037ac:	4621      	mov	r1, r4
 80037ae:	4628      	mov	r0, r5
 80037b0:	f7ff f8b0 	bl	8002914 <_fflush_r>
 80037b4:	bb30      	cbnz	r0, 8003804 <__swbuf_r+0x90>
 80037b6:	68a3      	ldr	r3, [r4, #8]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	60a3      	str	r3, [r4, #8]
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	6022      	str	r2, [r4, #0]
 80037c2:	701e      	strb	r6, [r3, #0]
 80037c4:	6963      	ldr	r3, [r4, #20]
 80037c6:	3001      	adds	r0, #1
 80037c8:	4283      	cmp	r3, r0
 80037ca:	d004      	beq.n	80037d6 <__swbuf_r+0x62>
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	07db      	lsls	r3, r3, #31
 80037d0:	d506      	bpl.n	80037e0 <__swbuf_r+0x6c>
 80037d2:	2e0a      	cmp	r6, #10
 80037d4:	d104      	bne.n	80037e0 <__swbuf_r+0x6c>
 80037d6:	4621      	mov	r1, r4
 80037d8:	4628      	mov	r0, r5
 80037da:	f7ff f89b 	bl	8002914 <_fflush_r>
 80037de:	b988      	cbnz	r0, 8003804 <__swbuf_r+0x90>
 80037e0:	4638      	mov	r0, r7
 80037e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e4:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <__swbuf_r+0x9c>)
 80037e6:	429c      	cmp	r4, r3
 80037e8:	d101      	bne.n	80037ee <__swbuf_r+0x7a>
 80037ea:	68ac      	ldr	r4, [r5, #8]
 80037ec:	e7cf      	b.n	800378e <__swbuf_r+0x1a>
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <__swbuf_r+0xa0>)
 80037f0:	429c      	cmp	r4, r3
 80037f2:	bf08      	it	eq
 80037f4:	68ec      	ldreq	r4, [r5, #12]
 80037f6:	e7ca      	b.n	800378e <__swbuf_r+0x1a>
 80037f8:	4621      	mov	r1, r4
 80037fa:	4628      	mov	r0, r5
 80037fc:	f000 f80c 	bl	8003818 <__swsetup_r>
 8003800:	2800      	cmp	r0, #0
 8003802:	d0cb      	beq.n	800379c <__swbuf_r+0x28>
 8003804:	f04f 37ff 	mov.w	r7, #4294967295
 8003808:	e7ea      	b.n	80037e0 <__swbuf_r+0x6c>
 800380a:	bf00      	nop
 800380c:	08003ea0 	.word	0x08003ea0
 8003810:	08003ec0 	.word	0x08003ec0
 8003814:	08003e80 	.word	0x08003e80

08003818 <__swsetup_r>:
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <__swsetup_r+0xcc>)
 800381a:	b570      	push	{r4, r5, r6, lr}
 800381c:	681d      	ldr	r5, [r3, #0]
 800381e:	4606      	mov	r6, r0
 8003820:	460c      	mov	r4, r1
 8003822:	b125      	cbz	r5, 800382e <__swsetup_r+0x16>
 8003824:	69ab      	ldr	r3, [r5, #24]
 8003826:	b913      	cbnz	r3, 800382e <__swsetup_r+0x16>
 8003828:	4628      	mov	r0, r5
 800382a:	f7ff f907 	bl	8002a3c <__sinit>
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <__swsetup_r+0xd0>)
 8003830:	429c      	cmp	r4, r3
 8003832:	d10f      	bne.n	8003854 <__swsetup_r+0x3c>
 8003834:	686c      	ldr	r4, [r5, #4]
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800383c:	0719      	lsls	r1, r3, #28
 800383e:	d42c      	bmi.n	800389a <__swsetup_r+0x82>
 8003840:	06dd      	lsls	r5, r3, #27
 8003842:	d411      	bmi.n	8003868 <__swsetup_r+0x50>
 8003844:	2309      	movs	r3, #9
 8003846:	6033      	str	r3, [r6, #0]
 8003848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800384c:	81a3      	strh	r3, [r4, #12]
 800384e:	f04f 30ff 	mov.w	r0, #4294967295
 8003852:	e03e      	b.n	80038d2 <__swsetup_r+0xba>
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <__swsetup_r+0xd4>)
 8003856:	429c      	cmp	r4, r3
 8003858:	d101      	bne.n	800385e <__swsetup_r+0x46>
 800385a:	68ac      	ldr	r4, [r5, #8]
 800385c:	e7eb      	b.n	8003836 <__swsetup_r+0x1e>
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <__swsetup_r+0xd8>)
 8003860:	429c      	cmp	r4, r3
 8003862:	bf08      	it	eq
 8003864:	68ec      	ldreq	r4, [r5, #12]
 8003866:	e7e6      	b.n	8003836 <__swsetup_r+0x1e>
 8003868:	0758      	lsls	r0, r3, #29
 800386a:	d512      	bpl.n	8003892 <__swsetup_r+0x7a>
 800386c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800386e:	b141      	cbz	r1, 8003882 <__swsetup_r+0x6a>
 8003870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003874:	4299      	cmp	r1, r3
 8003876:	d002      	beq.n	800387e <__swsetup_r+0x66>
 8003878:	4630      	mov	r0, r6
 800387a:	f7ff f9eb 	bl	8002c54 <_free_r>
 800387e:	2300      	movs	r3, #0
 8003880:	6363      	str	r3, [r4, #52]	; 0x34
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	2300      	movs	r3, #0
 800388c:	6063      	str	r3, [r4, #4]
 800388e:	6923      	ldr	r3, [r4, #16]
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	f043 0308 	orr.w	r3, r3, #8
 8003898:	81a3      	strh	r3, [r4, #12]
 800389a:	6923      	ldr	r3, [r4, #16]
 800389c:	b94b      	cbnz	r3, 80038b2 <__swsetup_r+0x9a>
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a8:	d003      	beq.n	80038b2 <__swsetup_r+0x9a>
 80038aa:	4621      	mov	r1, r4
 80038ac:	4630      	mov	r0, r6
 80038ae:	f7ff f989 	bl	8002bc4 <__smakebuf_r>
 80038b2:	89a0      	ldrh	r0, [r4, #12]
 80038b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038b8:	f010 0301 	ands.w	r3, r0, #1
 80038bc:	d00a      	beq.n	80038d4 <__swsetup_r+0xbc>
 80038be:	2300      	movs	r3, #0
 80038c0:	60a3      	str	r3, [r4, #8]
 80038c2:	6963      	ldr	r3, [r4, #20]
 80038c4:	425b      	negs	r3, r3
 80038c6:	61a3      	str	r3, [r4, #24]
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	b943      	cbnz	r3, 80038de <__swsetup_r+0xc6>
 80038cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038d0:	d1ba      	bne.n	8003848 <__swsetup_r+0x30>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	0781      	lsls	r1, r0, #30
 80038d6:	bf58      	it	pl
 80038d8:	6963      	ldrpl	r3, [r4, #20]
 80038da:	60a3      	str	r3, [r4, #8]
 80038dc:	e7f4      	b.n	80038c8 <__swsetup_r+0xb0>
 80038de:	2000      	movs	r0, #0
 80038e0:	e7f7      	b.n	80038d2 <__swsetup_r+0xba>
 80038e2:	bf00      	nop
 80038e4:	2000002c 	.word	0x2000002c
 80038e8:	08003ea0 	.word	0x08003ea0
 80038ec:	08003ec0 	.word	0x08003ec0
 80038f0:	08003e80 	.word	0x08003e80

080038f4 <_close_r>:
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	4d06      	ldr	r5, [pc, #24]	; (8003910 <_close_r+0x1c>)
 80038f8:	2300      	movs	r3, #0
 80038fa:	4604      	mov	r4, r0
 80038fc:	4608      	mov	r0, r1
 80038fe:	602b      	str	r3, [r5, #0]
 8003900:	f7fe fc35 	bl	800216e <_close>
 8003904:	1c43      	adds	r3, r0, #1
 8003906:	d102      	bne.n	800390e <_close_r+0x1a>
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	b103      	cbz	r3, 800390e <_close_r+0x1a>
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	bd38      	pop	{r3, r4, r5, pc}
 8003910:	200003f8 	.word	0x200003f8

08003914 <_fstat_r>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	4d07      	ldr	r5, [pc, #28]	; (8003934 <_fstat_r+0x20>)
 8003918:	2300      	movs	r3, #0
 800391a:	4604      	mov	r4, r0
 800391c:	4608      	mov	r0, r1
 800391e:	4611      	mov	r1, r2
 8003920:	602b      	str	r3, [r5, #0]
 8003922:	f7fe fc30 	bl	8002186 <_fstat>
 8003926:	1c43      	adds	r3, r0, #1
 8003928:	d102      	bne.n	8003930 <_fstat_r+0x1c>
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	b103      	cbz	r3, 8003930 <_fstat_r+0x1c>
 800392e:	6023      	str	r3, [r4, #0]
 8003930:	bd38      	pop	{r3, r4, r5, pc}
 8003932:	bf00      	nop
 8003934:	200003f8 	.word	0x200003f8

08003938 <_isatty_r>:
 8003938:	b538      	push	{r3, r4, r5, lr}
 800393a:	4d06      	ldr	r5, [pc, #24]	; (8003954 <_isatty_r+0x1c>)
 800393c:	2300      	movs	r3, #0
 800393e:	4604      	mov	r4, r0
 8003940:	4608      	mov	r0, r1
 8003942:	602b      	str	r3, [r5, #0]
 8003944:	f7fe fc2f 	bl	80021a6 <_isatty>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	d102      	bne.n	8003952 <_isatty_r+0x1a>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	b103      	cbz	r3, 8003952 <_isatty_r+0x1a>
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	200003f8 	.word	0x200003f8

08003958 <_lseek_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4d07      	ldr	r5, [pc, #28]	; (8003978 <_lseek_r+0x20>)
 800395c:	4604      	mov	r4, r0
 800395e:	4608      	mov	r0, r1
 8003960:	4611      	mov	r1, r2
 8003962:	2200      	movs	r2, #0
 8003964:	602a      	str	r2, [r5, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	f7fe fc28 	bl	80021bc <_lseek>
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	d102      	bne.n	8003976 <_lseek_r+0x1e>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	b103      	cbz	r3, 8003976 <_lseek_r+0x1e>
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	bd38      	pop	{r3, r4, r5, pc}
 8003978:	200003f8 	.word	0x200003f8

0800397c <memcpy>:
 800397c:	440a      	add	r2, r1
 800397e:	4291      	cmp	r1, r2
 8003980:	f100 33ff 	add.w	r3, r0, #4294967295
 8003984:	d100      	bne.n	8003988 <memcpy+0xc>
 8003986:	4770      	bx	lr
 8003988:	b510      	push	{r4, lr}
 800398a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800398e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003992:	4291      	cmp	r1, r2
 8003994:	d1f9      	bne.n	800398a <memcpy+0xe>
 8003996:	bd10      	pop	{r4, pc}

08003998 <memmove>:
 8003998:	4288      	cmp	r0, r1
 800399a:	b510      	push	{r4, lr}
 800399c:	eb01 0402 	add.w	r4, r1, r2
 80039a0:	d902      	bls.n	80039a8 <memmove+0x10>
 80039a2:	4284      	cmp	r4, r0
 80039a4:	4623      	mov	r3, r4
 80039a6:	d807      	bhi.n	80039b8 <memmove+0x20>
 80039a8:	1e43      	subs	r3, r0, #1
 80039aa:	42a1      	cmp	r1, r4
 80039ac:	d008      	beq.n	80039c0 <memmove+0x28>
 80039ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039b6:	e7f8      	b.n	80039aa <memmove+0x12>
 80039b8:	4402      	add	r2, r0
 80039ba:	4601      	mov	r1, r0
 80039bc:	428a      	cmp	r2, r1
 80039be:	d100      	bne.n	80039c2 <memmove+0x2a>
 80039c0:	bd10      	pop	{r4, pc}
 80039c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039ca:	e7f7      	b.n	80039bc <memmove+0x24>

080039cc <__malloc_lock>:
 80039cc:	4801      	ldr	r0, [pc, #4]	; (80039d4 <__malloc_lock+0x8>)
 80039ce:	f7ff b8d3 	b.w	8002b78 <__retarget_lock_acquire_recursive>
 80039d2:	bf00      	nop
 80039d4:	200003f0 	.word	0x200003f0

080039d8 <__malloc_unlock>:
 80039d8:	4801      	ldr	r0, [pc, #4]	; (80039e0 <__malloc_unlock+0x8>)
 80039da:	f7ff b8ce 	b.w	8002b7a <__retarget_lock_release_recursive>
 80039de:	bf00      	nop
 80039e0:	200003f0 	.word	0x200003f0

080039e4 <_realloc_r>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	4607      	mov	r7, r0
 80039e8:	4614      	mov	r4, r2
 80039ea:	460e      	mov	r6, r1
 80039ec:	b921      	cbnz	r1, 80039f8 <_realloc_r+0x14>
 80039ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039f2:	4611      	mov	r1, r2
 80039f4:	f7ff b97e 	b.w	8002cf4 <_malloc_r>
 80039f8:	b922      	cbnz	r2, 8003a04 <_realloc_r+0x20>
 80039fa:	f7ff f92b 	bl	8002c54 <_free_r>
 80039fe:	4625      	mov	r5, r4
 8003a00:	4628      	mov	r0, r5
 8003a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a04:	f000 f826 	bl	8003a54 <_malloc_usable_size_r>
 8003a08:	42a0      	cmp	r0, r4
 8003a0a:	d20f      	bcs.n	8003a2c <_realloc_r+0x48>
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	4638      	mov	r0, r7
 8003a10:	f7ff f970 	bl	8002cf4 <_malloc_r>
 8003a14:	4605      	mov	r5, r0
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d0f2      	beq.n	8003a00 <_realloc_r+0x1c>
 8003a1a:	4631      	mov	r1, r6
 8003a1c:	4622      	mov	r2, r4
 8003a1e:	f7ff ffad 	bl	800397c <memcpy>
 8003a22:	4631      	mov	r1, r6
 8003a24:	4638      	mov	r0, r7
 8003a26:	f7ff f915 	bl	8002c54 <_free_r>
 8003a2a:	e7e9      	b.n	8003a00 <_realloc_r+0x1c>
 8003a2c:	4635      	mov	r5, r6
 8003a2e:	e7e7      	b.n	8003a00 <_realloc_r+0x1c>

08003a30 <_read_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	4d07      	ldr	r5, [pc, #28]	; (8003a50 <_read_r+0x20>)
 8003a34:	4604      	mov	r4, r0
 8003a36:	4608      	mov	r0, r1
 8003a38:	4611      	mov	r1, r2
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	602a      	str	r2, [r5, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f7fe fb78 	bl	8002134 <_read>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	d102      	bne.n	8003a4e <_read_r+0x1e>
 8003a48:	682b      	ldr	r3, [r5, #0]
 8003a4a:	b103      	cbz	r3, 8003a4e <_read_r+0x1e>
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
 8003a50:	200003f8 	.word	0x200003f8

08003a54 <_malloc_usable_size_r>:
 8003a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a58:	1f18      	subs	r0, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bfbc      	itt	lt
 8003a5e:	580b      	ldrlt	r3, [r1, r0]
 8003a60:	18c0      	addlt	r0, r0, r3
 8003a62:	4770      	bx	lr

08003a64 <_init>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr

08003a70 <_fini>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr
