
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005154  08005154  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08005154  08005154  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005154  08005154  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800515c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000090  080051ec  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080051ec  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abe0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a86  00000000  00000000  0002aca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  0002c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  0002cdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003fb8  00000000  00000000  0002d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bae  00000000  00000000  00031348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a2d5  00000000  00000000  00039ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000941cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002298  00000000  00000000  00094220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fdc 	.word	0x08004fdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08004fdc 	.word	0x08004fdc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000270:	b480      	push	{r7}
 8000272:	b08b      	sub	sp, #44	; 0x2c
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000298:	4b91      	ldr	r3, [pc, #580]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	f003 030c 	and.w	r3, r3, #12
 80002a0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	2b08      	cmp	r3, #8
 80002a6:	d011      	beq.n	80002cc <RCC_GetClocksFreq+0x5c>
 80002a8:	6a3b      	ldr	r3, [r7, #32]
 80002aa:	2b08      	cmp	r3, #8
 80002ac:	d837      	bhi.n	800031e <RCC_GetClocksFreq+0xae>
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d003      	beq.n	80002bc <RCC_GetClocksFreq+0x4c>
 80002b4:	6a3b      	ldr	r3, [r7, #32]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d004      	beq.n	80002c4 <RCC_GetClocksFreq+0x54>
 80002ba:	e030      	b.n	800031e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a89      	ldr	r2, [pc, #548]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c0:	601a      	str	r2, [r3, #0]
      break;
 80002c2:	e030      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a87      	ldr	r2, [pc, #540]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c8:	601a      	str	r2, [r3, #0]
      break;
 80002ca:	e02c      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002cc:	4b84      	ldr	r3, [pc, #528]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002d4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002d6:	4b82      	ldr	r3, [pc, #520]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002de:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	0c9b      	lsrs	r3, r3, #18
 80002e4:	3302      	adds	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4a7d      	ldr	r2, [pc, #500]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80002f2:	fb02 f303 	mul.w	r3, r2, r3
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
 80002f8:	e00d      	b.n	8000316 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80002fa:	4b79      	ldr	r3, [pc, #484]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000306:	4a77      	ldr	r2, [pc, #476]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fbb2 f2f3 	udiv	r2, r2, r3
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	fb02 f303 	mul.w	r3, r2, r3
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800031a:	601a      	str	r2, [r3, #0]
      break;
 800031c:	e003      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a70      	ldr	r2, [pc, #448]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000322:	601a      	str	r2, [r3, #0]
      break;
 8000324:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000326:	4b6e      	ldr	r3, [pc, #440]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800032e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000330:	6a3b      	ldr	r3, [r7, #32]
 8000332:	091b      	lsrs	r3, r3, #4
 8000334:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000336:	4a6d      	ldr	r2, [pc, #436]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000338:	6a3b      	ldr	r3, [r7, #32]
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	40da      	lsrs	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800034e:	4b64      	ldr	r3, [pc, #400]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000356:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000358:	6a3b      	ldr	r3, [r7, #32]
 800035a:	0a1b      	lsrs	r3, r3, #8
 800035c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800035e:	4a63      	ldr	r2, [pc, #396]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	40da      	lsrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000376:	4b5a      	ldr	r3, [pc, #360]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800037e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000380:	6a3b      	ldr	r3, [r7, #32]
 8000382:	0adb      	lsrs	r3, r3, #11
 8000384:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000386:	4a59      	ldr	r2, [pc, #356]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000388:	6a3b      	ldr	r3, [r7, #32]
 800038a:	4413      	add	r3, r2
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	40da      	lsrs	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800039e:	4b50      	ldr	r3, [pc, #320]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003a8:	6a3b      	ldr	r3, [r7, #32]
 80003aa:	091b      	lsrs	r3, r3, #4
 80003ac:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ae:	4a50      	ldr	r2, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d006      	beq.n	80003d2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	e003      	b.n	80003da <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003da:	4b41      	ldr	r3, [pc, #260]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003de:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	0a5b      	lsrs	r3, r3, #9
 80003e8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ea:	4a41      	ldr	r2, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	fbb2 f2f3 	udiv	r2, r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	e003      	b.n	8000416 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000416:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	f003 0310 	and.w	r3, r3, #16
 800041e:	2b10      	cmp	r3, #16
 8000420:	d003      	beq.n	800042a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000426:	619a      	str	r2, [r3, #24]
 8000428:	e003      	b.n	8000432 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	f003 0320 	and.w	r3, r3, #32
 800043a:	2b20      	cmp	r3, #32
 800043c:	d003      	beq.n	8000446 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a28      	ldr	r2, [pc, #160]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000442:	61da      	str	r2, [r3, #28]
 8000444:	e003      	b.n	800044e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800045a:	d10d      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000462:	429a      	cmp	r2, r3
 8000464:	d108      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	429a      	cmp	r2, r3
 800046c:	d104      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000470:	005a      	lsls	r2, r3, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	621a      	str	r2, [r3, #32]
 8000476:	e003      	b.n	8000480 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800048c:	d10d      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000494:	429a      	cmp	r2, r3
 8000496:	d108      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	429a      	cmp	r2, r3
 800049e:	d104      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a2:	005a      	lsls	r2, r3, #1
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	625a      	str	r2, [r3, #36]	; 0x24
 80004a8:	e003      	b.n	80004b2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d104      	bne.n	80004c8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
 80004c6:	e029      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d10f      	bne.n	80004f4 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	629a      	str	r2, [r3, #40]	; 0x28
 80004dc:	e01e      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	007a1200 	.word	0x007a1200
 80004e8:	003d0900 	.word	0x003d0900
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80004f4:	4b66      	ldr	r3, [pc, #408]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	f003 0303 	and.w	r3, r3, #3
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d104      	bne.n	800050a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
 8000508:	e008      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800050a:	4b61      	ldr	r3, [pc, #388]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	2b03      	cmp	r3, #3
 8000514:	d102      	bne.n	800051c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a5e      	ldr	r2, [pc, #376]	; (8000694 <RCC_GetClocksFreq+0x424>)
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800051c:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689a      	ldr	r2, [r3, #8]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000530:	e021      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000532:	4b57      	ldr	r3, [pc, #348]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800053a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800053e:	d104      	bne.n	800054a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
 8000548:	e015      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800054a:	4b51      	ldr	r3, [pc, #324]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000556:	d104      	bne.n	8000562 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000560:	e009      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000562:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800056a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800056e:	d102      	bne.n	8000576 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a48      	ldr	r2, [pc, #288]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000576:	4b46      	ldr	r3, [pc, #280]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d104      	bne.n	800058c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
 800058a:	e021      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000598:	d104      	bne.n	80005a4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	631a      	str	r2, [r3, #48]	; 0x30
 80005a2:	e015      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005b0:	d104      	bne.n	80005bc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ba:	e009      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005bc:	4b34      	ldr	r3, [pc, #208]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005c8:	d102      	bne.n	80005d0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a31      	ldr	r2, [pc, #196]	; (8000694 <RCC_GetClocksFreq+0x424>)
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005d0:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d104      	bne.n	80005e6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
 80005e4:	e021      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80005f2:	d104      	bne.n	80005fe <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
 80005fc:	e015      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800060a:	d104      	bne.n	8000616 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
 8000614:	e009      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800061e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000622:	d102      	bne.n	800062a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d104      	bne.n	8000640 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800063e:	e021      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800064c:	d104      	bne.n	8000658 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000656:	e015      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000664:	d104      	bne.n	8000670 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800066c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800066e:	e009      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000678:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800067c:	d102      	bne.n	8000684 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000682:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000684:	bf00      	nop
 8000686:	372c      	adds	r7, #44	; 0x2c
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	007a1200 	.word	0x007a1200

08000698 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006ee:	2201      	movs	r2, #1
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d103      	bne.n	8000706 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e005      	b.n	8000712 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d102      	bne.n	8000712 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3308      	adds	r3, #8
 8000710:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d006      	beq.n	8000726 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	430a      	orrs	r2, r1
 8000722:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000724:	e006      	b.n	8000734 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	43da      	mvns	r2, r3
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	400a      	ands	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	3724      	adds	r7, #36	; 0x24
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4013      	ands	r3, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000772:	b480      	push	{r7}
 8000774:	b087      	sub	sp, #28
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b29b      	uxth	r3, r3
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800079c:	2201      	movs	r2, #1
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d105      	bne.n	80007b8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	4013      	ands	r3, r2
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	e00d      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d105      	bne.n	80007ca <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	4013      	ands	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e004      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4013      	ands	r3, r2
 80007d2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	0c1b      	lsrs	r3, r3, #16
 80007d8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007da:	2201      	movs	r2, #1
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <USART_GetITStatus+0x8e>
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80007fa:	2301      	movs	r3, #1
 80007fc:	74fb      	strb	r3, [r7, #19]
 80007fe:	e001      	b.n	8000804 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000804:	7cfb      	ldrb	r3, [r7, #19]
}
 8000806:	4618      	mov	r0, r3
 8000808:	371c      	adds	r7, #28
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	2201      	movs	r2, #1
 8000826:	fa02 f103 	lsl.w	r1, r2, r3
 800082a:	4a06      	ldr	r2, [pc, #24]	; (8000844 <NVIC_EnableIRQ+0x30>)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	095b      	lsrs	r3, r3, #5
 8000832:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <uart_get_char+0x48>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d011      	beq.n	8000880 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <uart_get_char+0x4c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	b2d1      	uxtb	r1, r2
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <uart_get_char+0x4c>)
 8000868:	7011      	strb	r1, [r2, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <uart_get_char+0x50>)
 800086e:	5c9b      	ldrb	r3, [r3, r2]
 8000870:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <uart_get_char+0x48>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	3b01      	subs	r3, #1
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <uart_get_char+0x48>)
 800087e:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8000880:	79fb      	ldrb	r3, [r7, #7]
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	200001ae 	.word	0x200001ae
 8000894:	200001ad 	.word	0x200001ad
 8000898:	200000ac 	.word	0x200000ac

0800089c <uart_put_char>:

void uart_put_char(uint8_t c) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	4619      	mov	r1, r3
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <uart_put_char+0x30>)
 80008ae:	f7ff fef3 	bl	8000698 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80008b2:	bf00      	nop
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <uart_put_char+0x30>)
 80008b8:	f7ff ff42 	bl	8000740 <USART_GetFlagStatus>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f8      	beq.n	80008b4 <uart_put_char+0x18>
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40004400 	.word	0x40004400

080008d0 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e012      	b.n	800090a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b0a      	cmp	r3, #10
 80008ee:	d102      	bne.n	80008f6 <_write_r+0x26>
            uart_put_char('\r');
 80008f0:	200d      	movs	r0, #13
 80008f2:	f7ff ffd3 	bl	800089c <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffcc 	bl	800089c <uart_put_char>
    for (n = 0; n < len; n++) {
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	dbe8      	blt.n	80008e4 <_write_r+0x14>
    }

    return len;
 8000912:	683b      	ldr	r3, [r7, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000920:	4915      	ldr	r1, [pc, #84]	; (8000978 <USART2_IRQHandler+0x5c>)
 8000922:	4816      	ldr	r0, [pc, #88]	; (800097c <USART2_IRQHandler+0x60>)
 8000924:	f7ff ff25 	bl	8000772 <USART_GetITStatus>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d021      	beq.n	8000972 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <USART2_IRQHandler+0x60>)
 8000930:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000932:	b299      	uxth	r1, r3
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <USART2_IRQHandler+0x64>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	b2d0      	uxtb	r0, r2
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <USART2_IRQHandler+0x64>)
 8000940:	7010      	strb	r0, [r2, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	b2c9      	uxtb	r1, r1
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <USART2_IRQHandler+0x68>)
 8000948:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <USART2_IRQHandler+0x6c>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2bff      	cmp	r3, #255	; 0xff
 8000952:	d107      	bne.n	8000964 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <USART2_IRQHandler+0x70>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	3301      	adds	r3, #1
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <USART2_IRQHandler+0x70>)
 8000960:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000962:	e006      	b.n	8000972 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <USART2_IRQHandler+0x6c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <USART2_IRQHandler+0x6c>)
 8000970:	701a      	strb	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	00050105 	.word	0x00050105
 800097c:	40004400 	.word	0x40004400
 8000980:	200001ac 	.word	0x200001ac
 8000984:	200000ac 	.word	0x200000ac
 8000988:	200001ae 	.word	0x200001ae
 800098c:	200001ad 	.word	0x200001ad

08000990 <uart_clear>:

void uart_clear(){
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
    UART_START_IDX = 0;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <uart_clear+0x20>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
    UART_END_IDX = 0;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <uart_clear+0x24>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
    UART_COUNT = 0;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <uart_clear+0x28>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	200001ad 	.word	0x200001ad
 80009b4:	200001ac 	.word	0x200001ac
 80009b8:	200001ae 	.word	0x200001ae

080009bc <uart_get_count>:

uint8_t uart_get_count(){
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
    return UART_COUNT;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <uart_get_count+0x14>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	200001ae 	.word	0x200001ae

080009d4 <uart_init>:

void uart_init(uint32_t baud) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80009dc:	4b86      	ldr	r3, [pc, #536]	; (8000bf8 <uart_init+0x224>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 faaf 	bl	8003f48 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80009ea:	4b83      	ldr	r3, [pc, #524]	; (8000bf8 <uart_init+0x224>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 faa8 	bl	8003f48 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80009f8:	4b80      	ldr	r3, [pc, #512]	; (8000bfc <uart_init+0x228>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	4a7f      	ldr	r2, [pc, #508]	; (8000bfc <uart_init+0x228>)
 80009fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a02:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000a04:	4b7d      	ldr	r3, [pc, #500]	; (8000bfc <uart_init+0x228>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	4a7c      	ldr	r2, [pc, #496]	; (8000bfc <uart_init+0x228>)
 8000a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000a10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a14:	6a1b      	ldr	r3, [r3, #32]
 8000a16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a1e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000a20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a24:	6a1b      	ldr	r3, [r3, #32]
 8000a26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a2e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000a30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000a3e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000a40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a44:	6a1b      	ldr	r3, [r3, #32]
 8000a46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a4a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a4e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000a50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a5e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000a60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a6a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a6e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000a70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a7c:	f023 030c 	bic.w	r3, r3, #12
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000a84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a8c:	8892      	ldrh	r2, [r2, #4]
 8000a8e:	b292      	uxth	r2, r2
 8000a90:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000a92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aa0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000aa2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aac:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000ab0:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000ab2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000abc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ac0:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000ac2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000acc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000ad0:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000ad2:	4b4b      	ldr	r3, [pc, #300]	; (8000c00 <uart_init+0x22c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a4a      	ldr	r2, [pc, #296]	; (8000c00 <uart_init+0x22c>)
 8000ad8:	f023 0301 	bic.w	r3, r3, #1
 8000adc:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000ade:	4b48      	ldr	r3, [pc, #288]	; (8000c00 <uart_init+0x22c>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <uart_init+0x22c>)
 8000ae4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ae8:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000aea:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <uart_init+0x22c>)
 8000aec:	4a44      	ldr	r2, [pc, #272]	; (8000c00 <uart_init+0x22c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000af2:	4b43      	ldr	r3, [pc, #268]	; (8000c00 <uart_init+0x22c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a42      	ldr	r2, [pc, #264]	; (8000c00 <uart_init+0x22c>)
 8000af8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000afc:	f023 030c 	bic.w	r3, r3, #12
 8000b00:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000b02:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <uart_init+0x22c>)
 8000b04:	4a3e      	ldr	r2, [pc, #248]	; (8000c00 <uart_init+0x22c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000b0a:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <uart_init+0x22c>)
 8000b0c:	4a3c      	ldr	r2, [pc, #240]	; (8000c00 <uart_init+0x22c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000b12:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <uart_init+0x22c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a3a      	ldr	r2, [pc, #232]	; (8000c00 <uart_init+0x22c>)
 8000b18:	f043 030c 	orr.w	r3, r3, #12
 8000b1c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000b1e:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <uart_init+0x22c>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	4a37      	ldr	r2, [pc, #220]	; (8000c00 <uart_init+0x22c>)
 8000b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b28:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000b2a:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <uart_init+0x22c>)
 8000b2c:	4a34      	ldr	r2, [pc, #208]	; (8000c00 <uart_init+0x22c>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b36:	2300      	movs	r3, #0
 8000b38:	647b      	str	r3, [r7, #68]	; 0x44
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb94 	bl	8000270 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b4a:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <uart_init+0x22c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d010      	beq.n	8000b7a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b5a:	005a      	lsls	r2, r3, #1
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	fb01 f202 	mul.w	r2, r1, r2
 8000b74:	1a9b      	subs	r3, r3, r2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b78:	e00d      	b.n	8000b96 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	fb01 f202 	mul.w	r2, r1, r2
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	085b      	lsrs	r3, r3, #1
 8000b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d302      	bcc.n	8000ba6 <uart_init+0x1d2>
        divider++;
 8000ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <uart_init+0x22c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00b      	beq.n	8000bca <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb4:	085b      	lsrs	r3, r3, #1
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000bbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bbe:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <uart_init+0x22c>)
 8000bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bce:	b292      	uxth	r2, r2
 8000bd0:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <uart_init+0x22c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <uart_init+0x22c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000bde:	2201      	movs	r2, #1
 8000be0:	4908      	ldr	r1, [pc, #32]	; (8000c04 <uart_init+0x230>)
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <uart_init+0x22c>)
 8000be4:	f7ff fd6a 	bl	80006bc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000be8:	2026      	movs	r0, #38	; 0x26
 8000bea:	f7ff fe13 	bl	8000814 <NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000002c 	.word	0x2000002c
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40004400 	.word	0x40004400
 8000c04:	00050105 	.word	0x00050105

08000c08 <startWindow>:
#include "ansi_S.h"
#include "joystick.h"
void startWindow(int x1, int y1, int x2, int y2) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	603b      	str	r3, [r7, #0]

//TOP
	gotoxy(x1, y1);
 8000c16:	68b9      	ldr	r1, [r7, #8]
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f002 fb23 	bl	8003264 <gotoxy>
	printf("%c", 201);
 8000c1e:	20c9      	movs	r0, #201	; 0xc9
 8000c20:	f003 f97c 	bl	8003f1c <putchar>
	for (int i=x1+1;i<x2;i++){
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	e005      	b.n	8000c38 <startWindow+0x30>
		printf("%c",205);
 8000c2c:	20cd      	movs	r0, #205	; 0xcd
 8000c2e:	f003 f975 	bl	8003f1c <putchar>
	for (int i=x1+1;i<x2;i++){
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	69fa      	ldr	r2, [r7, #28]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbf5      	blt.n	8000c2c <startWindow+0x24>
	}
	printf("%c", 187);
 8000c40:	20bb      	movs	r0, #187	; 0xbb
 8000c42:	f003 f96b 	bl	8003f1c <putchar>

//SIDES
	for(int i = 1; i<y2-1; i++){
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	e016      	b.n	8000c7a <startWindow+0x72>
		gotoxy(x1, y1+i);
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4413      	add	r3, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f002 fb05 	bl	8003264 <gotoxy>
		printf("%c", 186);
 8000c5a:	20ba      	movs	r0, #186	; 0xba
 8000c5c:	f003 f95e 	bl	8003f1c <putchar>
		gotoxy(x2, y1+i);
 8000c60:	68ba      	ldr	r2, [r7, #8]
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4413      	add	r3, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f002 fafb 	bl	8003264 <gotoxy>
		printf("%c", 186);
 8000c6e:	20ba      	movs	r0, #186	; 0xba
 8000c70:	f003 f954 	bl	8003f1c <putchar>
	for(int i = 1; i<y2-1; i++){
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	3301      	adds	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbe3      	blt.n	8000c4c <startWindow+0x44>
	}

//BUTTOM
	printf("%c",200);
 8000c84:	20c8      	movs	r0, #200	; 0xc8
 8000c86:	f003 f949 	bl	8003f1c <putchar>
	for (int i=x1+1;i<x2;i++){
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	e005      	b.n	8000c9e <startWindow+0x96>
		printf("%c",205);
 8000c92:	20cd      	movs	r0, #205	; 0xcd
 8000c94:	f003 f942 	bl	8003f1c <putchar>
	for (int i=x1+1;i<x2;i++){
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dbf5      	blt.n	8000c92 <startWindow+0x8a>
	}
	printf("%c", 188);
 8000ca6:	20bc      	movs	r0, #188	; 0xbc
 8000ca8:	f003 f938 	bl	8003f1c <putchar>
}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <spaceship>:

int ani = 0;

void spaceship(int x1, int y1, int x2, int y2) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b090      	sub	sp, #64	; 0x40
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	603b      	str	r3, [r7, #0]

	fgcolor(1);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f002 fa88 	bl	80031d8 <fgcolor>
	int ex = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
	gotoxy(x1+15, y1);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	330f      	adds	r3, #15
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fac6 	bl	8003264 <gotoxy>
	for(int i = 0; i <9; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cdc:	e005      	b.n	8000cea <spaceship+0x36>
	printf("%c",219);
 8000cde:	20db      	movs	r0, #219	; 0xdb
 8000ce0:	f003 f91c 	bl	8003f1c <putchar>
	for(int i = 0; i <9; i++) {
 8000ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	ddf6      	ble.n	8000cde <spaceship+0x2a>
	}
	bgcolor(5);
 8000cf0:	2005      	movs	r0, #5
 8000cf2:	f002 fa8d 	bl	8003210 <bgcolor>
	fgcolor(0);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f002 fa6e 	bl	80031d8 <fgcolor>
	printf("  UP  ");
 8000cfc:	4880      	ldr	r0, [pc, #512]	; (8000f00 <spaceship+0x24c>)
 8000cfe:	f003 f8f5 	bl	8003eec <iprintf>
	bgcolor(0);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f002 fa84 	bl	8003210 <bgcolor>
	fgcolor(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f002 fa65 	bl	80031d8 <fgcolor>
	for(int i = 0; i <20; i++) {
 8000d0e:	2300      	movs	r3, #0
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
 8000d12:	e005      	b.n	8000d20 <spaceship+0x6c>
	printf("%c",219);
 8000d14:	20db      	movs	r0, #219	; 0xdb
 8000d16:	f003 f901 	bl	8003f1c <putchar>
	for(int i = 0; i <20; i++) {
 8000d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8000d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d22:	2b13      	cmp	r3, #19
 8000d24:	ddf6      	ble.n	8000d14 <spaceship+0x60>
	}
	bgcolor(6);
 8000d26:	2006      	movs	r0, #6
 8000d28:	f002 fa72 	bl	8003210 <bgcolor>
	fgcolor(0);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f002 fa53 	bl	80031d8 <fgcolor>
	printf("HATCH");
 8000d32:	4874      	ldr	r0, [pc, #464]	; (8000f04 <spaceship+0x250>)
 8000d34:	f003 f8da 	bl	8003eec <iprintf>
	fgcolor(1);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f002 fa4d 	bl	80031d8 <fgcolor>
	for(int i = 0; i <29; i++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
 8000d42:	e005      	b.n	8000d50 <spaceship+0x9c>
	printf("%c",219);
 8000d44:	20db      	movs	r0, #219	; 0xdb
 8000d46:	f003 f8e9 	bl	8003f1c <putchar>
	for(int i = 0; i <29; i++) {
 8000d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8000d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d52:	2b1c      	cmp	r3, #28
 8000d54:	ddf6      	ble.n	8000d44 <spaceship+0x90>
	}
	gotoxy(x1+15, y1+4);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f103 020f 	add.w	r2, r3, #15
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	3304      	adds	r3, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4610      	mov	r0, r2
 8000d64:	f002 fa7e 	bl	8003264 <gotoxy>
	for(int i = 0; i <9; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d6c:	e005      	b.n	8000d7a <spaceship+0xc6>
	printf("%c",219);
 8000d6e:	20db      	movs	r0, #219	; 0xdb
 8000d70:	f003 f8d4 	bl	8003f1c <putchar>
	for(int i = 0; i <9; i++) {
 8000d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d76:	3301      	adds	r3, #1
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	ddf6      	ble.n	8000d6e <spaceship+0xba>
	}
	bgcolor(5);
 8000d80:	2005      	movs	r0, #5
 8000d82:	f002 fa45 	bl	8003210 <bgcolor>
	fgcolor(0);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f002 fa26 	bl	80031d8 <fgcolor>
	printf(" DOWN ");
 8000d8c:	485e      	ldr	r0, [pc, #376]	; (8000f08 <spaceship+0x254>)
 8000d8e:	f003 f8ad 	bl	8003eec <iprintf>
	bgcolor(0);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f002 fa3c 	bl	8003210 <bgcolor>
	fgcolor(1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f002 fa1d 	bl	80031d8 <fgcolor>
	for(int i = 0; i <20; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000da2:	e005      	b.n	8000db0 <spaceship+0xfc>
	printf("%c",219);
 8000da4:	20db      	movs	r0, #219	; 0xdb
 8000da6:	f003 f8b9 	bl	8003f1c <putchar>
	for(int i = 0; i <20; i++) {
 8000daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dac:	3301      	adds	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	2b13      	cmp	r3, #19
 8000db4:	ddf6      	ble.n	8000da4 <spaceship+0xf0>
	}
	bgcolor(6);
 8000db6:	2006      	movs	r0, #6
 8000db8:	f002 fa2a 	bl	8003210 <bgcolor>
	fgcolor(0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f002 fa0b 	bl	80031d8 <fgcolor>
	printf("HATCH");
 8000dc2:	4850      	ldr	r0, [pc, #320]	; (8000f04 <spaceship+0x250>)
 8000dc4:	f003 f892 	bl	8003eec <iprintf>
	fgcolor(1);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f002 fa05 	bl	80031d8 <fgcolor>
	for(int i = 0; i <29; i++) {
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd2:	e005      	b.n	8000de0 <spaceship+0x12c>
	printf("%c",219);
 8000dd4:	20db      	movs	r0, #219	; 0xdb
 8000dd6:	f003 f8a1 	bl	8003f1c <putchar>
	for(int i = 0; i <29; i++) {
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	3301      	adds	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	2b1c      	cmp	r3, #28
 8000de4:	ddf6      	ble.n	8000dd4 <spaceship+0x120>
	}
	int a = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	e030      	b.n	8000e52 <spaceship+0x19e>
	for(int i = 0; i < 7; i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	e024      	b.n	8000e40 <spaceship+0x18c>
	gotoxy(x1+9+i+a, y1-3+j);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f103 0209 	add.w	r2, r3, #9
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	441a      	add	r2, r3
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	18d0      	adds	r0, r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1eda      	subs	r2, r3, #3
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f002 fa29 	bl	8003264 <gotoxy>
	printf("%c",219);
 8000e12:	20db      	movs	r0, #219	; 0xdb
 8000e14:	f003 f882 	bl	8003f1c <putchar>
	gotoxy(x1+9+i+a, y1+7-j);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f103 0209 	add.w	r2, r3, #9
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	441a      	add	r2, r3
 8000e22:	6a3b      	ldr	r3, [r7, #32]
 8000e24:	18d0      	adds	r0, r2, r3
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1dda      	adds	r2, r3, #7
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f002 fa18 	bl	8003264 <gotoxy>
	printf("%c",219);
 8000e34:	20db      	movs	r0, #219	; 0xdb
 8000e36:	f003 f871 	bl	8003f1c <putchar>
	for(int i = 0; i < 7; i++){
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	ddd7      	ble.n	8000df6 <spaceship+0x142>
	} a+=2;
 8000e46:	6a3b      	ldr	r3, [r7, #32]
 8000e48:	3302      	adds	r3, #2
 8000e4a:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	ddcb      	ble.n	8000df0 <spaceship+0x13c>
	}
	for(int i = 1; i < 4; i++) {
 8000e58:	2301      	movs	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e039      	b.n	8000ed2 <spaceship+0x21e>
	gotoxy(x1+15, y1+i);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f103 000f 	add.w	r0, r3, #15
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f002 f9fa 	bl	8003264 <gotoxy>
	printf("%c",219);
 8000e70:	20db      	movs	r0, #219	; 0xdb
 8000e72:	f003 f853 	bl	8003f1c <putchar>
	for(int j = 0; j < 6; j++){
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	e024      	b.n	8000ec6 <spaceship+0x212>
	gotoxy(x2-8+j, y1+i);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f1a3 0208 	sub.w	r2, r3, #8
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	18d0      	adds	r0, r2, r3
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f002 f9e9 	bl	8003264 <gotoxy>
	printf("%c",219);
 8000e92:	20db      	movs	r0, #219	; 0xdb
 8000e94:	f003 f842 	bl	8003f1c <putchar>
	ex++;
 8000e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (ex < 5){
 8000e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	dc0d      	bgt.n	8000ec0 <spaceship+0x20c>
	gotoxy(x2-3+j, y1+i+1);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	1eda      	subs	r2, r3, #3
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	18d0      	adds	r0, r2, r3
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f002 f9d5 	bl	8003264 <gotoxy>
	printf("%c",219);
 8000eba:	20db      	movs	r0, #219	; 0xdb
 8000ebc:	f003 f82e 	bl	8003f1c <putchar>
	for(int j = 0; j < 6; j++){
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	ddd7      	ble.n	8000e7c <spaceship+0x1c8>
	for(int i = 1; i < 4; i++) {
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	ddc2      	ble.n	8000e5e <spaceship+0x1aa>
	}
	}
	}
	gotoxy(83,y1+2);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3302      	adds	r3, #2
 8000edc:	4619      	mov	r1, r3
 8000ede:	2053      	movs	r0, #83	; 0x53
 8000ee0:	f002 f9c0 	bl	8003264 <gotoxy>
	fgcolor(0);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f002 f977 	bl	80031d8 <fgcolor>
	bgcolor(7);
 8000eea:	2007      	movs	r0, #7
 8000eec:	f002 f990 	bl	8003210 <bgcolor>
	printf(" CANON   ");
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <spaceship+0x258>)
 8000ef2:	f002 fffb 	bl	8003eec <iprintf>
}
 8000ef6:	bf00      	nop
 8000ef8:	3740      	adds	r7, #64	; 0x40
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	08004ff4 	.word	0x08004ff4
 8000f04:	08004ffc 	.word	0x08004ffc
 8000f08:	08005004 	.word	0x08005004
 8000f0c:	0800500c 	.word	0x0800500c

08000f10 <spaceshipDelete>:

void spaceshipDelete(int x1, int y1, int x2, int y2) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	603b      	str	r3, [r7, #0]

	int ex = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
	gotoxy(x1+15, y1);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	330f      	adds	r3, #15
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 f99b 	bl	8003264 <gotoxy>
	for(int i = 0; i <69; i++) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f32:	e005      	b.n	8000f40 <spaceshipDelete+0x30>
	printf("%c",32);
 8000f34:	2020      	movs	r0, #32
 8000f36:	f002 fff1 	bl	8003f1c <putchar>
	for(int i = 0; i <69; i++) {
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	2b44      	cmp	r3, #68	; 0x44
 8000f44:	ddf6      	ble.n	8000f34 <spaceshipDelete+0x24>
	}
	gotoxy(x1+15, y1+4);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f103 020f 	add.w	r2, r3, #15
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4610      	mov	r0, r2
 8000f54:	f002 f986 	bl	8003264 <gotoxy>
	for(int i = 0; i <69; i++) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5c:	e005      	b.n	8000f6a <spaceshipDelete+0x5a>
	printf("%c",32);
 8000f5e:	2020      	movs	r0, #32
 8000f60:	f002 ffdc 	bl	8003f1c <putchar>
	for(int i = 0; i <69; i++) {
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	3301      	adds	r3, #1
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	2b44      	cmp	r3, #68	; 0x44
 8000f6e:	ddf6      	ble.n	8000f5e <spaceshipDelete+0x4e>
	}
	int a = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	e030      	b.n	8000fdc <spaceshipDelete+0xcc>
	for(int i = 0; i < 7; i++){
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	e024      	b.n	8000fca <spaceshipDelete+0xba>
	gotoxy(x1+9+i+a, y1-3+j);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f103 0209 	add.w	r2, r3, #9
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	441a      	add	r2, r3
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	18d0      	adds	r0, r2, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1eda      	subs	r2, r3, #3
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	4413      	add	r3, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f002 f964 	bl	8003264 <gotoxy>
	printf("%c",32);
 8000f9c:	2020      	movs	r0, #32
 8000f9e:	f002 ffbd 	bl	8003f1c <putchar>
	gotoxy(x1+9+i+a, y1+7-j);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f103 0209 	add.w	r2, r3, #9
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	441a      	add	r2, r3
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	18d0      	adds	r0, r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1dda      	adds	r2, r3, #7
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f002 f953 	bl	8003264 <gotoxy>
	printf("%c",32);
 8000fbe:	2020      	movs	r0, #32
 8000fc0:	f002 ffac 	bl	8003f1c <putchar>
	for(int i = 0; i < 7; i++){
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	2b06      	cmp	r3, #6
 8000fce:	ddd7      	ble.n	8000f80 <spaceshipDelete+0x70>
	} a+=2;
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	ddcb      	ble.n	8000f7a <spaceshipDelete+0x6a>
	}
	for(int i = 1; i < 4; i++) {
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e039      	b.n	800105c <spaceshipDelete+0x14c>
	gotoxy(x1+15, y1+i);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f103 000f 	add.w	r0, r3, #15
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f002 f935 	bl	8003264 <gotoxy>
	printf("%c",32);
 8000ffa:	2020      	movs	r0, #32
 8000ffc:	f002 ff8e 	bl	8003f1c <putchar>
	for(int j = 0; j < 6; j++){
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e024      	b.n	8001050 <spaceshipDelete+0x140>
	gotoxy(x2-8+j, y1+i);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f1a3 0208 	sub.w	r2, r3, #8
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	18d0      	adds	r0, r2, r3
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	4413      	add	r3, r2
 8001016:	4619      	mov	r1, r3
 8001018:	f002 f924 	bl	8003264 <gotoxy>
	printf("%c",32);
 800101c:	2020      	movs	r0, #32
 800101e:	f002 ff7d 	bl	8003f1c <putchar>
	ex++;
 8001022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001024:	3301      	adds	r3, #1
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (ex < 5){
 8001028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102a:	2b04      	cmp	r3, #4
 800102c:	dc0d      	bgt.n	800104a <spaceshipDelete+0x13a>
	gotoxy(x2-3+j, y1+i+1);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	1eda      	subs	r2, r3, #3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	18d0      	adds	r0, r2, r3
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	4413      	add	r3, r2
 800103c:	3301      	adds	r3, #1
 800103e:	4619      	mov	r1, r3
 8001040:	f002 f910 	bl	8003264 <gotoxy>
	printf("%c",32);
 8001044:	2020      	movs	r0, #32
 8001046:	f002 ff69 	bl	8003f1c <putchar>
	for(int j = 0; j < 6; j++){
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	2b05      	cmp	r3, #5
 8001054:	ddd7      	ble.n	8001006 <spaceshipDelete+0xf6>
	for(int i = 1; i < 4; i++) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b03      	cmp	r3, #3
 8001060:	ddc2      	ble.n	8000fe8 <spaceshipDelete+0xd8>
	}
	}
	}
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	; 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <fire>:

void fire(int x1, int y1, int x2, int y2) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
	int s = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (ani < 2) {
 800107e:	4ba1      	ldr	r3, [pc, #644]	; (8001304 <fire+0x298>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	f300 8101 	bgt.w	800128a <fire+0x21e>
	for (int i = 0; i <= 8; i++){
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
 800108c:	e044      	b.n	8001118 <fire+0xac>
	if (s == 0){
 800108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d114      	bne.n	80010be <fire+0x52>
	fgcolor(0);
 8001094:	2000      	movs	r0, #0
 8001096:	f002 f89f 	bl	80031d8 <fgcolor>
	gotoxy(7+i,y1);
 800109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109c:	3307      	adds	r3, #7
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 f8df 	bl	8003264 <gotoxy>
	printf("%c",219);
 80010a6:	20db      	movs	r0, #219	; 0xdb
 80010a8:	f002 ff38 	bl	8003f1c <putchar>
	gotoxy(7+i,y2);
 80010ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ae:	3307      	adds	r3, #7
 80010b0:	6839      	ldr	r1, [r7, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 f8d6 	bl	8003264 <gotoxy>
	printf("%c",219);
 80010b8:	20db      	movs	r0, #219	; 0xdb
 80010ba:	f002 ff2f 	bl	8003f1c <putchar>
	}
	if (s < 3){
 80010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	dc02      	bgt.n	80010ca <fire+0x5e>
	fgcolor(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f002 f887 	bl	80031d8 <fgcolor>
	}
	if (s < 6 && s >= 3){
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	dc05      	bgt.n	80010dc <fire+0x70>
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	dd02      	ble.n	80010dc <fire+0x70>
	fgcolor(9);
 80010d6:	2009      	movs	r0, #9
 80010d8:	f002 f87e 	bl	80031d8 <fgcolor>
	}
	if (s >= 6){
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	2b05      	cmp	r3, #5
 80010e0:	dd02      	ble.n	80010e8 <fire+0x7c>
	fgcolor(11);
 80010e2:	200b      	movs	r0, #11
 80010e4:	f002 f878 	bl	80031d8 <fgcolor>
	}
	gotoxy(8+i,y1);
 80010e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ea:	3308      	adds	r3, #8
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 f8b8 	bl	8003264 <gotoxy>
	printf("%c",219);
 80010f4:	20db      	movs	r0, #219	; 0xdb
 80010f6:	f002 ff11 	bl	8003f1c <putchar>
	gotoxy(8+i,y2);
 80010fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fc:	3308      	adds	r3, #8
 80010fe:	6839      	ldr	r1, [r7, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f002 f8af 	bl	8003264 <gotoxy>
	printf("%c",219);
 8001106:	20db      	movs	r0, #219	; 0xdb
 8001108:	f002 ff08 	bl	8003f1c <putchar>
	s++;
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	3301      	adds	r3, #1
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 8; i++){
 8001112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001114:	3301      	adds	r3, #1
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	2b08      	cmp	r3, #8
 800111c:	ddb7      	ble.n	800108e <fire+0x22>
	} s = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 11; i++){
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
 8001126:	e055      	b.n	80011d4 <fire+0x168>
	if (s == 0){
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	2b00      	cmp	r3, #0
 800112c:	d118      	bne.n	8001160 <fire+0xf4>
	fgcolor(0);
 800112e:	2000      	movs	r0, #0
 8001130:	f002 f852 	bl	80031d8 <fgcolor>
	gotoxy(4+i,y1+1);
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	1d1a      	adds	r2, r3, #4
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	3301      	adds	r3, #1
 800113c:	4619      	mov	r1, r3
 800113e:	4610      	mov	r0, r2
 8001140:	f002 f890 	bl	8003264 <gotoxy>
	printf("%c",219);
 8001144:	20db      	movs	r0, #219	; 0xdb
 8001146:	f002 fee9 	bl	8003f1c <putchar>
	gotoxy(4+i,y2-1);
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	1d1a      	adds	r2, r3, #4
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3b01      	subs	r3, #1
 8001152:	4619      	mov	r1, r3
 8001154:	4610      	mov	r0, r2
 8001156:	f002 f885 	bl	8003264 <gotoxy>
	printf("%c",219);
 800115a:	20db      	movs	r0, #219	; 0xdb
 800115c:	f002 fede 	bl	8003f1c <putchar>
	}
	if (s < 4){
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	2b03      	cmp	r3, #3
 8001164:	dc02      	bgt.n	800116c <fire+0x100>
	fgcolor(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f002 f836 	bl	80031d8 <fgcolor>
	}
	if (s < 7 && s >= 4){
 800116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116e:	2b06      	cmp	r3, #6
 8001170:	dc05      	bgt.n	800117e <fire+0x112>
 8001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001174:	2b03      	cmp	r3, #3
 8001176:	dd02      	ble.n	800117e <fire+0x112>
	fgcolor(9);
 8001178:	2009      	movs	r0, #9
 800117a:	f002 f82d 	bl	80031d8 <fgcolor>
	}
	if (s < 10 && s >= 7){
 800117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001180:	2b09      	cmp	r3, #9
 8001182:	dc05      	bgt.n	8001190 <fire+0x124>
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	2b06      	cmp	r3, #6
 8001188:	dd02      	ble.n	8001190 <fire+0x124>
	fgcolor(11);
 800118a:	200b      	movs	r0, #11
 800118c:	f002 f824 	bl	80031d8 <fgcolor>
	}
	if (s >= 10){
 8001190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001192:	2b09      	cmp	r3, #9
 8001194:	dd02      	ble.n	800119c <fire+0x130>
	fgcolor(15);
 8001196:	200f      	movs	r0, #15
 8001198:	f002 f81e 	bl	80031d8 <fgcolor>
	}
	gotoxy(5+i,y1+1);
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	1d5a      	adds	r2, r3, #5
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4619      	mov	r1, r3
 80011a6:	4610      	mov	r0, r2
 80011a8:	f002 f85c 	bl	8003264 <gotoxy>
	printf("%c",219);
 80011ac:	20db      	movs	r0, #219	; 0xdb
 80011ae:	f002 feb5 	bl	8003f1c <putchar>
	gotoxy(5+i,y2-1);
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	1d5a      	adds	r2, r3, #5
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	4610      	mov	r0, r2
 80011be:	f002 f851 	bl	8003264 <gotoxy>
	printf("%c",219);
 80011c2:	20db      	movs	r0, #219	; 0xdb
 80011c4:	f002 feaa 	bl	8003f1c <putchar>
	s++;
 80011c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ca:	3301      	adds	r3, #1
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 11; i++){
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	3301      	adds	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	2b0b      	cmp	r3, #11
 80011d8:	dda6      	ble.n	8001128 <fire+0xbc>
	} s = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 13; i++){
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
 80011e2:	e048      	b.n	8001276 <fire+0x20a>
	if (s == 0){
 80011e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10d      	bne.n	8001206 <fire+0x19a>
	fgcolor(0);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f001 fff4 	bl	80031d8 <fgcolor>
	gotoxy(2+i,y1+2);
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	1c9a      	adds	r2, r3, #2
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	3302      	adds	r3, #2
 80011f8:	4619      	mov	r1, r3
 80011fa:	4610      	mov	r0, r2
 80011fc:	f002 f832 	bl	8003264 <gotoxy>
	printf("%c",219);
 8001200:	20db      	movs	r0, #219	; 0xdb
 8001202:	f002 fe8b 	bl	8003f1c <putchar>
	}
	if(s < 3) {
 8001206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001208:	2b02      	cmp	r3, #2
 800120a:	dc02      	bgt.n	8001212 <fire+0x1a6>
	fgcolor(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f001 ffe3 	bl	80031d8 <fgcolor>
	}
	if (s < 7 && s >= 3){
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	2b06      	cmp	r3, #6
 8001216:	dc05      	bgt.n	8001224 <fire+0x1b8>
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	2b02      	cmp	r3, #2
 800121c:	dd02      	ble.n	8001224 <fire+0x1b8>
	fgcolor(9);
 800121e:	2009      	movs	r0, #9
 8001220:	f001 ffda 	bl	80031d8 <fgcolor>
	}
	if (s < 10 && s >=7){
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	2b09      	cmp	r3, #9
 8001228:	dc05      	bgt.n	8001236 <fire+0x1ca>
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	2b06      	cmp	r3, #6
 800122e:	dd02      	ble.n	8001236 <fire+0x1ca>
	fgcolor(11);
 8001230:	200b      	movs	r0, #11
 8001232:	f001 ffd1 	bl	80031d8 <fgcolor>
	}
	if (s < 13 && s >= 10){
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	2b0c      	cmp	r3, #12
 800123a:	dc05      	bgt.n	8001248 <fire+0x1dc>
 800123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123e:	2b09      	cmp	r3, #9
 8001240:	dd02      	ble.n	8001248 <fire+0x1dc>
	fgcolor(15);
 8001242:	200f      	movs	r0, #15
 8001244:	f001 ffc8 	bl	80031d8 <fgcolor>
	}
	if (s >= 13) {
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	2b0c      	cmp	r3, #12
 800124c:	dd02      	ble.n	8001254 <fire+0x1e8>
	fgcolor(12);
 800124e:	200c      	movs	r0, #12
 8001250:	f001 ffc2 	bl	80031d8 <fgcolor>
	}
	gotoxy(3+i,y1+2);
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	1cda      	adds	r2, r3, #3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	3302      	adds	r3, #2
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f002 f800 	bl	8003264 <gotoxy>
	printf("%c",219);
 8001264:	20db      	movs	r0, #219	; 0xdb
 8001266:	f002 fe59 	bl	8003f1c <putchar>
	s++;
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	3301      	adds	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 13; i++){
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	3301      	adds	r3, #1
 8001274:	623b      	str	r3, [r7, #32]
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	2b0d      	cmp	r3, #13
 800127a:	ddb3      	ble.n	80011e4 <fire+0x178>
	} s = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
	ani++;
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <fire+0x298>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <fire+0x298>)
 8001288:	6013      	str	r3, [r2, #0]
	}

	if (ani >= 2) {
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <fire+0x298>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	f340 80c5 	ble.w	800141e <fire+0x3b2>
	for (int i = 0; i <= 9; i++){
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	e02c      	b.n	80012f4 <fire+0x288>
	if (s < 3){
 800129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129c:	2b02      	cmp	r3, #2
 800129e:	dc02      	bgt.n	80012a6 <fire+0x23a>
	fgcolor(9);
 80012a0:	2009      	movs	r0, #9
 80012a2:	f001 ff99 	bl	80031d8 <fgcolor>
	}
	if (s < 6 && s >= 3){
 80012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	dc05      	bgt.n	80012b8 <fire+0x24c>
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	dd02      	ble.n	80012b8 <fire+0x24c>
	fgcolor(11);
 80012b2:	200b      	movs	r0, #11
 80012b4:	f001 ff90 	bl	80031d8 <fgcolor>
	}
	if (s >= 6){
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	dd02      	ble.n	80012c4 <fire+0x258>
	fgcolor(15);
 80012be:	200f      	movs	r0, #15
 80012c0:	f001 ff8a 	bl	80031d8 <fgcolor>
	}
	gotoxy(7+i,y1);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	3307      	adds	r3, #7
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 ffca 	bl	8003264 <gotoxy>
	printf("%c",219);
 80012d0:	20db      	movs	r0, #219	; 0xdb
 80012d2:	f002 fe23 	bl	8003f1c <putchar>
	gotoxy(7+i,y2);
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3307      	adds	r3, #7
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 ffc1 	bl	8003264 <gotoxy>
	printf("%c",219);
 80012e2:	20db      	movs	r0, #219	; 0xdb
 80012e4:	f002 fe1a 	bl	8003f1c <putchar>
	s++;
 80012e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ea:	3301      	adds	r3, #1
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 9; i++){
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	2b09      	cmp	r3, #9
 80012f8:	ddcf      	ble.n	800129a <fire+0x22e>
	} s = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 12; i++){
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	e03b      	b.n	800137c <fire+0x310>
 8001304:	200001b0 	.word	0x200001b0
	if (s < 4){
 8001308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130a:	2b03      	cmp	r3, #3
 800130c:	dc02      	bgt.n	8001314 <fire+0x2a8>
	fgcolor(9);
 800130e:	2009      	movs	r0, #9
 8001310:	f001 ff62 	bl	80031d8 <fgcolor>
	}
	if (s < 7 && s >= 4){
 8001314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001316:	2b06      	cmp	r3, #6
 8001318:	dc05      	bgt.n	8001326 <fire+0x2ba>
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	2b03      	cmp	r3, #3
 800131e:	dd02      	ble.n	8001326 <fire+0x2ba>
	fgcolor(11);
 8001320:	200b      	movs	r0, #11
 8001322:	f001 ff59 	bl	80031d8 <fgcolor>
	}
	if (s < 10 && s >= 7){
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001328:	2b09      	cmp	r3, #9
 800132a:	dc05      	bgt.n	8001338 <fire+0x2cc>
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	2b06      	cmp	r3, #6
 8001330:	dd02      	ble.n	8001338 <fire+0x2cc>
	fgcolor(15);
 8001332:	200f      	movs	r0, #15
 8001334:	f001 ff50 	bl	80031d8 <fgcolor>
	}
	if (s >= 10){
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	2b09      	cmp	r3, #9
 800133c:	dd02      	ble.n	8001344 <fire+0x2d8>
	fgcolor(12);
 800133e:	200c      	movs	r0, #12
 8001340:	f001 ff4a 	bl	80031d8 <fgcolor>
	}
	gotoxy(4+i,y1+1);
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	1d1a      	adds	r2, r3, #4
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3301      	adds	r3, #1
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f001 ff88 	bl	8003264 <gotoxy>
	printf("%c",219);
 8001354:	20db      	movs	r0, #219	; 0xdb
 8001356:	f002 fde1 	bl	8003f1c <putchar>
	gotoxy(4+i,y2-1);
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	1d1a      	adds	r2, r3, #4
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	4619      	mov	r1, r3
 8001364:	4610      	mov	r0, r2
 8001366:	f001 ff7d 	bl	8003264 <gotoxy>
	printf("%c",219);
 800136a:	20db      	movs	r0, #219	; 0xdb
 800136c:	f002 fdd6 	bl	8003f1c <putchar>
	s++;
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	3301      	adds	r3, #1
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 12; i++){
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	3301      	adds	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b0c      	cmp	r3, #12
 8001380:	ddc2      	ble.n	8001308 <fire+0x29c>
	} s = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 14; i++){
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e037      	b.n	80013fc <fire+0x390>
	if(s < 3) {
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	2b02      	cmp	r3, #2
 8001390:	dc02      	bgt.n	8001398 <fire+0x32c>
	fgcolor(9);
 8001392:	2009      	movs	r0, #9
 8001394:	f001 ff20 	bl	80031d8 <fgcolor>
	}
	if (s < 7 && s >= 3){
 8001398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139a:	2b06      	cmp	r3, #6
 800139c:	dc05      	bgt.n	80013aa <fire+0x33e>
 800139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	dd02      	ble.n	80013aa <fire+0x33e>
	fgcolor(11);
 80013a4:	200b      	movs	r0, #11
 80013a6:	f001 ff17 	bl	80031d8 <fgcolor>
	}
	if (s < 10 && s >=7){
 80013aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	dc05      	bgt.n	80013bc <fire+0x350>
 80013b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	dd02      	ble.n	80013bc <fire+0x350>
	fgcolor(15);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f001 ff0e 	bl	80031d8 <fgcolor>
	}
	if (s < 13 && s >= 10){
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	2b0c      	cmp	r3, #12
 80013c0:	dc05      	bgt.n	80013ce <fire+0x362>
 80013c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c4:	2b09      	cmp	r3, #9
 80013c6:	dd02      	ble.n	80013ce <fire+0x362>
	fgcolor(12);
 80013c8:	200c      	movs	r0, #12
 80013ca:	f001 ff05 	bl	80031d8 <fgcolor>
	}
	if (s >= 13) {
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	dd02      	ble.n	80013da <fire+0x36e>
	fgcolor(4);
 80013d4:	2004      	movs	r0, #4
 80013d6:	f001 feff 	bl	80031d8 <fgcolor>
	}
	gotoxy(2+i,y1+2);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	1c9a      	adds	r2, r3, #2
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	3302      	adds	r3, #2
 80013e2:	4619      	mov	r1, r3
 80013e4:	4610      	mov	r0, r2
 80013e6:	f001 ff3d 	bl	8003264 <gotoxy>
	printf("%c",219);
 80013ea:	20db      	movs	r0, #219	; 0xdb
 80013ec:	f002 fd96 	bl	8003f1c <putchar>
	s++;
 80013f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f2:	3301      	adds	r3, #1
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 14; i++){
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b0e      	cmp	r3, #14
 8001400:	ddc4      	ble.n	800138c <fire+0x320>
	} s = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
	ani++;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <fire+0x3bc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <fire+0x3bc>)
 800140e:	6013      	str	r3, [r2, #0]
	if (ani == 3) {
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <fire+0x3bc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d102      	bne.n	800141e <fire+0x3b2>
		ani = 0;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <fire+0x3bc>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
	}
	}
}
 800141e:	bf00      	nop
 8001420:	3730      	adds	r7, #48	; 0x30
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200001b0 	.word	0x200001b0

0800142c <fireDelete>:

void fireDelete(int x1, int y1, int x2, int y2) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	603b      	str	r3, [r7, #0]
	gotoxy(7,y1);
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	2007      	movs	r0, #7
 800143e:	f001 ff11 	bl	8003264 <gotoxy>
	for (int i = 0; i <= 9; i++){
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	e005      	b.n	8001454 <fireDelete+0x28>
	printf("%c",32);
 8001448:	2020      	movs	r0, #32
 800144a:	f002 fd67 	bl	8003f1c <putchar>
	for (int i = 0; i <= 9; i++){
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	3301      	adds	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2b09      	cmp	r3, #9
 8001458:	ddf6      	ble.n	8001448 <fireDelete+0x1c>
	}
	gotoxy(7,y2);
 800145a:	6839      	ldr	r1, [r7, #0]
 800145c:	2007      	movs	r0, #7
 800145e:	f001 ff01 	bl	8003264 <gotoxy>
	for (int i = 0; i <= 9; i++){
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	e005      	b.n	8001474 <fireDelete+0x48>
	printf("%c",32);
 8001468:	2020      	movs	r0, #32
 800146a:	f002 fd57 	bl	8003f1c <putchar>
	for (int i = 0; i <= 9; i++){
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	3301      	adds	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	2b09      	cmp	r3, #9
 8001478:	ddf6      	ble.n	8001468 <fireDelete+0x3c>
	}
	gotoxy(4,y1+1);
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3301      	adds	r3, #1
 800147e:	4619      	mov	r1, r3
 8001480:	2004      	movs	r0, #4
 8001482:	f001 feef 	bl	8003264 <gotoxy>
	for (int i = 0; i <= 12; i++){
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e005      	b.n	8001498 <fireDelete+0x6c>
	printf("%c",32);
 800148c:	2020      	movs	r0, #32
 800148e:	f002 fd45 	bl	8003f1c <putchar>
	for (int i = 0; i <= 12; i++){
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3301      	adds	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	2b0c      	cmp	r3, #12
 800149c:	ddf6      	ble.n	800148c <fireDelete+0x60>
	}
	gotoxy(4,y2-1);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	4619      	mov	r1, r3
 80014a4:	2004      	movs	r0, #4
 80014a6:	f001 fedd 	bl	8003264 <gotoxy>
	for (int i = 0; i <= 12; i++){
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	e005      	b.n	80014bc <fireDelete+0x90>
	printf("%c",32);
 80014b0:	2020      	movs	r0, #32
 80014b2:	f002 fd33 	bl	8003f1c <putchar>
	for (int i = 0; i <= 12; i++){
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	ddf6      	ble.n	80014b0 <fireDelete+0x84>
	}
	gotoxy(2,y1+2);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3302      	adds	r3, #2
 80014c6:	4619      	mov	r1, r3
 80014c8:	2002      	movs	r0, #2
 80014ca:	f001 fecb 	bl	8003264 <gotoxy>
	for (int i = 0; i <= 14; i++){
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e005      	b.n	80014e0 <fireDelete+0xb4>
	printf("%c",32);
 80014d4:	2020      	movs	r0, #32
 80014d6:	f002 fd21 	bl	8003f1c <putchar>
	for (int i = 0; i <= 14; i++){
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b0e      	cmp	r3, #14
 80014e4:	ddf6      	ble.n	80014d4 <fireDelete+0xa8>
	}
	}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <playerInShipR>:


void playerInShipR(int p,int x, int y){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d140      	bne.n	8001584 <playerInShipR+0x94>
	fgcolor(15);
 8001502:	200f      	movs	r0, #15
 8001504:	f001 fe68 	bl	80031d8 <fgcolor>
	gotoxy(x+2,y);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3302      	adds	r3, #2
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fea8 	bl	8003264 <gotoxy>
	printf("%c",254	);
 8001514:	20fe      	movs	r0, #254	; 0xfe
 8001516:	f002 fd01 	bl	8003f1c <putchar>

	gotoxy(x,y+1);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3301      	adds	r3, #1
 800151e:	4619      	mov	r1, r3
 8001520:	68b8      	ldr	r0, [r7, #8]
 8001522:	f001 fe9f 	bl	8003264 <gotoxy>
	printf("%c",223);
 8001526:	20df      	movs	r0, #223	; 0xdf
 8001528:	f002 fcf8 	bl	8003f1c <putchar>
	printf("%c",219);
 800152c:	20db      	movs	r0, #219	; 0xdb
 800152e:	f002 fcf5 	bl	8003f1c <putchar>
	printf("%c",219);
 8001532:	20db      	movs	r0, #219	; 0xdb
 8001534:	f002 fcf2 	bl	8003f1c <putchar>

	fgcolor(9);
 8001538:	2009      	movs	r0, #9
 800153a:	f001 fe4d 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y+2);
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3302      	adds	r3, #2
 8001546:	4619      	mov	r1, r3
 8001548:	4610      	mov	r0, r2
 800154a:	f001 fe8b 	bl	8003264 <gotoxy>
	printf("%c",192);
 800154e:	20c0      	movs	r0, #192	; 0xc0
 8001550:	f002 fce4 	bl	8003f1c <putchar>
	printf("%c",192);
 8001554:	20c0      	movs	r0, #192	; 0xc0
 8001556:	f002 fce1 	bl	8003f1c <putchar>

	fat(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f001 f976 	bl	800284c <fat>
	fgcolor(9);
 8001560:	2009      	movs	r0, #9
 8001562:	f001 fe39 	bl	80031d8 <fgcolor>
	gotoxy(x+3,y);
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3303      	adds	r3, #3
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	f001 fe79 	bl	8003264 <gotoxy>
	printf("%c",60);
 8001572:	203c      	movs	r0, #60	; 0x3c
 8001574:	f002 fcd2 	bl	8003f1c <putchar>
	fgcolor(2);
 8001578:	2002      	movs	r0, #2
 800157a:	f001 fe2d 	bl	80031d8 <fgcolor>
	fat(0);
 800157e:	2000      	movs	r0, #0
 8001580:	f001 f964 	bl	800284c <fat>
	}

	if (p == 2) {
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d140      	bne.n	800160c <playerInShipR+0x11c>
	fgcolor(11);
 800158a:	200b      	movs	r0, #11
 800158c:	f001 fe24 	bl	80031d8 <fgcolor>
	gotoxy(x+2,y);
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	3302      	adds	r3, #2
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	f001 fe64 	bl	8003264 <gotoxy>
	printf("%c",254	);
 800159c:	20fe      	movs	r0, #254	; 0xfe
 800159e:	f002 fcbd 	bl	8003f1c <putchar>

	gotoxy(x,y+1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3301      	adds	r3, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f001 fe5b 	bl	8003264 <gotoxy>
	printf("%c",223);
 80015ae:	20df      	movs	r0, #223	; 0xdf
 80015b0:	f002 fcb4 	bl	8003f1c <putchar>
	printf("%c",219);
 80015b4:	20db      	movs	r0, #219	; 0xdb
 80015b6:	f002 fcb1 	bl	8003f1c <putchar>
	printf("%c",219);
 80015ba:	20db      	movs	r0, #219	; 0xdb
 80015bc:	f002 fcae 	bl	8003f1c <putchar>

	fgcolor(9);
 80015c0:	2009      	movs	r0, #9
 80015c2:	f001 fe09 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y+2);
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3302      	adds	r3, #2
 80015ce:	4619      	mov	r1, r3
 80015d0:	4610      	mov	r0, r2
 80015d2:	f001 fe47 	bl	8003264 <gotoxy>
	printf("%c",192);
 80015d6:	20c0      	movs	r0, #192	; 0xc0
 80015d8:	f002 fca0 	bl	8003f1c <putchar>
	printf("%c",192);
 80015dc:	20c0      	movs	r0, #192	; 0xc0
 80015de:	f002 fc9d 	bl	8003f1c <putchar>

	fat(1);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f001 f932 	bl	800284c <fat>
	fgcolor(9);
 80015e8:	2009      	movs	r0, #9
 80015ea:	f001 fdf5 	bl	80031d8 <fgcolor>
	gotoxy(x+3,y);
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3303      	adds	r3, #3
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 fe35 	bl	8003264 <gotoxy>
	printf("%c",60);
 80015fa:	203c      	movs	r0, #60	; 0x3c
 80015fc:	f002 fc8e 	bl	8003f1c <putchar>
	fgcolor(2);
 8001600:	2002      	movs	r0, #2
 8001602:	f001 fde9 	bl	80031d8 <fgcolor>
	fat(0);
 8001606:	2000      	movs	r0, #0
 8001608:	f001 f920 	bl	800284c <fat>
	}
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <playerInShipL>:

void playerInShipL(int p,int x, int y){
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d140      	bne.n	80016a8 <playerInShipL+0x94>
	fgcolor(15);
 8001626:	200f      	movs	r0, #15
 8001628:	f001 fdd6 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	3301      	adds	r3, #1
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4618      	mov	r0, r3
 8001634:	f001 fe16 	bl	8003264 <gotoxy>
	printf("%c",254	);
 8001638:	20fe      	movs	r0, #254	; 0xfe
 800163a:	f002 fc6f 	bl	8003f1c <putchar>

	gotoxy(x+1,y+1);
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3301      	adds	r3, #1
 8001646:	4619      	mov	r1, r3
 8001648:	4610      	mov	r0, r2
 800164a:	f001 fe0b 	bl	8003264 <gotoxy>
	printf("%c",219);
 800164e:	20db      	movs	r0, #219	; 0xdb
 8001650:	f002 fc64 	bl	8003f1c <putchar>
	printf("%c",219);
 8001654:	20db      	movs	r0, #219	; 0xdb
 8001656:	f002 fc61 	bl	8003f1c <putchar>
	printf("%c",223);
 800165a:	20df      	movs	r0, #223	; 0xdf
 800165c:	f002 fc5e 	bl	8003f1c <putchar>

	fgcolor(9);
 8001660:	2009      	movs	r0, #9
 8001662:	f001 fdb9 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y+2);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3302      	adds	r3, #2
 800166e:	4619      	mov	r1, r3
 8001670:	4610      	mov	r0, r2
 8001672:	f001 fdf7 	bl	8003264 <gotoxy>
	printf("%c",217);
 8001676:	20d9      	movs	r0, #217	; 0xd9
 8001678:	f002 fc50 	bl	8003f1c <putchar>
	printf("%c",217);
 800167c:	20d9      	movs	r0, #217	; 0xd9
 800167e:	f002 fc4d 	bl	8003f1c <putchar>

	fat(1);
 8001682:	2001      	movs	r0, #1
 8001684:	f001 f8e2 	bl	800284c <fat>
	fgcolor(9);
 8001688:	2009      	movs	r0, #9
 800168a:	f001 fda5 	bl	80031d8 <fgcolor>
	gotoxy(x,y);
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f001 fde7 	bl	8003264 <gotoxy>
	printf("%c",62);
 8001696:	203e      	movs	r0, #62	; 0x3e
 8001698:	f002 fc40 	bl	8003f1c <putchar>
	fgcolor(2);
 800169c:	2002      	movs	r0, #2
 800169e:	f001 fd9b 	bl	80031d8 <fgcolor>
	fat(0);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f001 f8d2 	bl	800284c <fat>
	}

	if (p == 2) {
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d140      	bne.n	8001730 <playerInShipL+0x11c>
	fgcolor(11);
 80016ae:	200b      	movs	r0, #11
 80016b0:	f001 fd92 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y);
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	3301      	adds	r3, #1
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 fdd2 	bl	8003264 <gotoxy>
	printf("%c",254	);
 80016c0:	20fe      	movs	r0, #254	; 0xfe
 80016c2:	f002 fc2b 	bl	8003f1c <putchar>

	gotoxy(x+1,y+1);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4619      	mov	r1, r3
 80016d0:	4610      	mov	r0, r2
 80016d2:	f001 fdc7 	bl	8003264 <gotoxy>
	printf("%c",219);
 80016d6:	20db      	movs	r0, #219	; 0xdb
 80016d8:	f002 fc20 	bl	8003f1c <putchar>
	printf("%c",219);
 80016dc:	20db      	movs	r0, #219	; 0xdb
 80016de:	f002 fc1d 	bl	8003f1c <putchar>
	printf("%c",223);
 80016e2:	20df      	movs	r0, #223	; 0xdf
 80016e4:	f002 fc1a 	bl	8003f1c <putchar>

	fgcolor(9);
 80016e8:	2009      	movs	r0, #9
 80016ea:	f001 fd75 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y+2);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3302      	adds	r3, #2
 80016f6:	4619      	mov	r1, r3
 80016f8:	4610      	mov	r0, r2
 80016fa:	f001 fdb3 	bl	8003264 <gotoxy>
	printf("%c",217);
 80016fe:	20d9      	movs	r0, #217	; 0xd9
 8001700:	f002 fc0c 	bl	8003f1c <putchar>
	printf("%c",217);
 8001704:	20d9      	movs	r0, #217	; 0xd9
 8001706:	f002 fc09 	bl	8003f1c <putchar>

	fat(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f001 f89e 	bl	800284c <fat>
	fgcolor(9);
 8001710:	2009      	movs	r0, #9
 8001712:	f001 fd61 	bl	80031d8 <fgcolor>
	gotoxy(x,y);
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f001 fda3 	bl	8003264 <gotoxy>
	printf("%c",62);
 800171e:	203e      	movs	r0, #62	; 0x3e
 8001720:	f002 fbfc 	bl	8003f1c <putchar>
	fgcolor(2);
 8001724:	2002      	movs	r0, #2
 8001726:	f001 fd57 	bl	80031d8 <fgcolor>
	fat(0);
 800172a:	2000      	movs	r0, #0
 800172c:	f001 f88e 	bl	800284c <fat>
	}
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <playerInSpaceR>:

void playerInSpaceR(int p, int x, int y){   //duck
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d14c      	bne.n	80017e4 <playerInSpaceR+0xac>
	fgcolor(15);
 800174a:	200f      	movs	r0, #15
 800174c:	f001 fd44 	bl	80031d8 <fgcolor>
	bgcolor(7);
 8001750:	2007      	movs	r0, #7
 8001752:	f001 fd5d 	bl	8003210 <bgcolor>
	gotoxy(x+2,y);
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3302      	adds	r3, #2
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	f001 fd81 	bl	8003264 <gotoxy>
	printf("%c",254	);
 8001762:	20fe      	movs	r0, #254	; 0xfe
 8001764:	f002 fbda 	bl	8003f1c <putchar>
	bgcolor(0);
 8001768:	2000      	movs	r0, #0
 800176a:	f001 fd51 	bl	8003210 <bgcolor>

	gotoxy(x,y+1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3301      	adds	r3, #1
 8001772:	4619      	mov	r1, r3
 8001774:	68b8      	ldr	r0, [r7, #8]
 8001776:	f001 fd75 	bl	8003264 <gotoxy>
	printf("%c",223);
 800177a:	20df      	movs	r0, #223	; 0xdf
 800177c:	f002 fbce 	bl	8003f1c <putchar>
	printf("%c",219);
 8001780:	20db      	movs	r0, #219	; 0xdb
 8001782:	f002 fbcb 	bl	8003f1c <putchar>
	printf("%c",219);
 8001786:	20db      	movs	r0, #219	; 0xdb
 8001788:	f002 fbc8 	bl	8003f1c <putchar>

	fgcolor(9);
 800178c:	2009      	movs	r0, #9
 800178e:	f001 fd23 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y+2);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3302      	adds	r3, #2
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f001 fd61 	bl	8003264 <gotoxy>
	printf("%c",192);
 80017a2:	20c0      	movs	r0, #192	; 0xc0
 80017a4:	f002 fbba 	bl	8003f1c <putchar>
	printf("%c",192);
 80017a8:	20c0      	movs	r0, #192	; 0xc0
 80017aa:	f002 fbb7 	bl	8003f1c <putchar>

	fat(1);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f001 f84c 	bl	800284c <fat>
	fgcolor(9);
 80017b4:	2009      	movs	r0, #9
 80017b6:	f001 fd0f 	bl	80031d8 <fgcolor>
	bgcolor(7);
 80017ba:	2007      	movs	r0, #7
 80017bc:	f001 fd28 	bl	8003210 <bgcolor>
	gotoxy(x+3,y);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3303      	adds	r3, #3
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 fd4c 	bl	8003264 <gotoxy>
	printf("%c",60);
 80017cc:	203c      	movs	r0, #60	; 0x3c
 80017ce:	f002 fba5 	bl	8003f1c <putchar>
	bgcolor(0);
 80017d2:	2000      	movs	r0, #0
 80017d4:	f001 fd1c 	bl	8003210 <bgcolor>
	fgcolor(2);
 80017d8:	2002      	movs	r0, #2
 80017da:	f001 fcfd 	bl	80031d8 <fgcolor>
	fat(0);
 80017de:	2000      	movs	r0, #0
 80017e0:	f001 f834 	bl	800284c <fat>
	}

	if (p == 2) {
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d14c      	bne.n	8001884 <playerInSpaceR+0x14c>
	fgcolor(11);
 80017ea:	200b      	movs	r0, #11
 80017ec:	f001 fcf4 	bl	80031d8 <fgcolor>
	bgcolor(7);
 80017f0:	2007      	movs	r0, #7
 80017f2:	f001 fd0d 	bl	8003210 <bgcolor>
	gotoxy(x+2,y);
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3302      	adds	r3, #2
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 fd31 	bl	8003264 <gotoxy>
	printf("%c",254	);
 8001802:	20fe      	movs	r0, #254	; 0xfe
 8001804:	f002 fb8a 	bl	8003f1c <putchar>
	bgcolor(0);
 8001808:	2000      	movs	r0, #0
 800180a:	f001 fd01 	bl	8003210 <bgcolor>

	gotoxy(x,y+1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3301      	adds	r3, #1
 8001812:	4619      	mov	r1, r3
 8001814:	68b8      	ldr	r0, [r7, #8]
 8001816:	f001 fd25 	bl	8003264 <gotoxy>
	printf("%c",223);
 800181a:	20df      	movs	r0, #223	; 0xdf
 800181c:	f002 fb7e 	bl	8003f1c <putchar>
	printf("%c",219);
 8001820:	20db      	movs	r0, #219	; 0xdb
 8001822:	f002 fb7b 	bl	8003f1c <putchar>
	printf("%c",219);
 8001826:	20db      	movs	r0, #219	; 0xdb
 8001828:	f002 fb78 	bl	8003f1c <putchar>

	fgcolor(9);
 800182c:	2009      	movs	r0, #9
 800182e:	f001 fcd3 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y+2);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3302      	adds	r3, #2
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f001 fd11 	bl	8003264 <gotoxy>
	printf("%c",192);
 8001842:	20c0      	movs	r0, #192	; 0xc0
 8001844:	f002 fb6a 	bl	8003f1c <putchar>
	printf("%c",192);
 8001848:	20c0      	movs	r0, #192	; 0xc0
 800184a:	f002 fb67 	bl	8003f1c <putchar>

	fat(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f000 fffc 	bl	800284c <fat>
	fgcolor(9);
 8001854:	2009      	movs	r0, #9
 8001856:	f001 fcbf 	bl	80031d8 <fgcolor>
	bgcolor(7);
 800185a:	2007      	movs	r0, #7
 800185c:	f001 fcd8 	bl	8003210 <bgcolor>
	gotoxy(x+3,y);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	3303      	adds	r3, #3
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fcfc 	bl	8003264 <gotoxy>
	printf("%c",60);
 800186c:	203c      	movs	r0, #60	; 0x3c
 800186e:	f002 fb55 	bl	8003f1c <putchar>
	bgcolor(0);
 8001872:	2000      	movs	r0, #0
 8001874:	f001 fccc 	bl	8003210 <bgcolor>
	fgcolor(2);
 8001878:	2002      	movs	r0, #2
 800187a:	f001 fcad 	bl	80031d8 <fgcolor>
	fat(0);
 800187e:	2000      	movs	r0, #0
 8001880:	f000 ffe4 	bl	800284c <fat>
	}
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <playerInSpaceL>:

void playerInSpaceL(int p, int x, int y){
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d14c      	bne.n	8001938 <playerInSpaceL+0xac>
	fgcolor(15);
 800189e:	200f      	movs	r0, #15
 80018a0:	f001 fc9a 	bl	80031d8 <fgcolor>
	bgcolor(7);
 80018a4:	2007      	movs	r0, #7
 80018a6:	f001 fcb3 	bl	8003210 <bgcolor>
	gotoxy(x+1,y);
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3301      	adds	r3, #1
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 fcd7 	bl	8003264 <gotoxy>
	printf("%c",254	);
 80018b6:	20fe      	movs	r0, #254	; 0xfe
 80018b8:	f002 fb30 	bl	8003f1c <putchar>
	bgcolor(0);
 80018bc:	2000      	movs	r0, #0
 80018be:	f001 fca7 	bl	8003210 <bgcolor>

	gotoxy(x+1,y+1);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f001 fcc9 	bl	8003264 <gotoxy>
	printf("%c",219);
 80018d2:	20db      	movs	r0, #219	; 0xdb
 80018d4:	f002 fb22 	bl	8003f1c <putchar>
	printf("%c",219);
 80018d8:	20db      	movs	r0, #219	; 0xdb
 80018da:	f002 fb1f 	bl	8003f1c <putchar>
	printf("%c",223);
 80018de:	20df      	movs	r0, #223	; 0xdf
 80018e0:	f002 fb1c 	bl	8003f1c <putchar>

	fgcolor(9);
 80018e4:	2009      	movs	r0, #9
 80018e6:	f001 fc77 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y+2);
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3302      	adds	r3, #2
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f001 fcb5 	bl	8003264 <gotoxy>
	printf("%c",217);
 80018fa:	20d9      	movs	r0, #217	; 0xd9
 80018fc:	f002 fb0e 	bl	8003f1c <putchar>
	printf("%c",217);
 8001900:	20d9      	movs	r0, #217	; 0xd9
 8001902:	f002 fb0b 	bl	8003f1c <putchar>

	fat(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f000 ffa0 	bl	800284c <fat>
	fgcolor(9);
 800190c:	2009      	movs	r0, #9
 800190e:	f001 fc63 	bl	80031d8 <fgcolor>
	bgcolor(7);
 8001912:	2007      	movs	r0, #7
 8001914:	f001 fc7c 	bl	8003210 <bgcolor>
	gotoxy(x,y);
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f001 fca2 	bl	8003264 <gotoxy>
	printf("%c",62);
 8001920:	203e      	movs	r0, #62	; 0x3e
 8001922:	f002 fafb 	bl	8003f1c <putchar>
	bgcolor(0);
 8001926:	2000      	movs	r0, #0
 8001928:	f001 fc72 	bl	8003210 <bgcolor>
	fgcolor(2);
 800192c:	2002      	movs	r0, #2
 800192e:	f001 fc53 	bl	80031d8 <fgcolor>
	fat(0);
 8001932:	2000      	movs	r0, #0
 8001934:	f000 ff8a 	bl	800284c <fat>
	}

	if (p == 2) {
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d14c      	bne.n	80019d8 <playerInSpaceL+0x14c>
	fgcolor(11);
 800193e:	200b      	movs	r0, #11
 8001940:	f001 fc4a 	bl	80031d8 <fgcolor>
	bgcolor(7);
 8001944:	2007      	movs	r0, #7
 8001946:	f001 fc63 	bl	8003210 <bgcolor>
	gotoxy(x+1,y);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3301      	adds	r3, #1
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fc87 	bl	8003264 <gotoxy>
	printf("%c",254	);
 8001956:	20fe      	movs	r0, #254	; 0xfe
 8001958:	f002 fae0 	bl	8003f1c <putchar>
	bgcolor(0);
 800195c:	2000      	movs	r0, #0
 800195e:	f001 fc57 	bl	8003210 <bgcolor>

	gotoxy(x+1,y+1);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3301      	adds	r3, #1
 800196a:	4619      	mov	r1, r3
 800196c:	4610      	mov	r0, r2
 800196e:	f001 fc79 	bl	8003264 <gotoxy>
	printf("%c",219);
 8001972:	20db      	movs	r0, #219	; 0xdb
 8001974:	f002 fad2 	bl	8003f1c <putchar>
	printf("%c",219);
 8001978:	20db      	movs	r0, #219	; 0xdb
 800197a:	f002 facf 	bl	8003f1c <putchar>
	printf("%c",223);
 800197e:	20df      	movs	r0, #223	; 0xdf
 8001980:	f002 facc 	bl	8003f1c <putchar>

	fgcolor(9);
 8001984:	2009      	movs	r0, #9
 8001986:	f001 fc27 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y+2);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3302      	adds	r3, #2
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f001 fc65 	bl	8003264 <gotoxy>
	printf("%c",217);
 800199a:	20d9      	movs	r0, #217	; 0xd9
 800199c:	f002 fabe 	bl	8003f1c <putchar>
	printf("%c",217);
 80019a0:	20d9      	movs	r0, #217	; 0xd9
 80019a2:	f002 fabb 	bl	8003f1c <putchar>

	fat(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 ff50 	bl	800284c <fat>
	fgcolor(9);
 80019ac:	2009      	movs	r0, #9
 80019ae:	f001 fc13 	bl	80031d8 <fgcolor>
	bgcolor(7);
 80019b2:	2007      	movs	r0, #7
 80019b4:	f001 fc2c 	bl	8003210 <bgcolor>
	gotoxy(x,y);
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	68b8      	ldr	r0, [r7, #8]
 80019bc:	f001 fc52 	bl	8003264 <gotoxy>
	printf("%c",62);
 80019c0:	203e      	movs	r0, #62	; 0x3e
 80019c2:	f002 faab 	bl	8003f1c <putchar>
	bgcolor(0);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f001 fc22 	bl	8003210 <bgcolor>
	fgcolor(2);
 80019cc:	2002      	movs	r0, #2
 80019ce:	f001 fc03 	bl	80031d8 <fgcolor>
	fat(0);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f000 ff3a 	bl	800284c <fat>
	}
}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <playerInSpaceUSDL>:

void playerInSpaceUSDL(int p, int x, int y){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d14e      	bne.n	8001a90 <playerInSpaceUSDL+0xb0>
	fgcolor(15);
 80019f2:	200f      	movs	r0, #15
 80019f4:	f001 fbf0 	bl	80031d8 <fgcolor>
	bgcolor(7);
 80019f8:	2007      	movs	r0, #7
 80019fa:	f001 fc09 	bl	8003210 <bgcolor>
	gotoxy(x+1,y+2);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3302      	adds	r3, #2
 8001a06:	4619      	mov	r1, r3
 8001a08:	4610      	mov	r0, r2
 8001a0a:	f001 fc2b 	bl	8003264 <gotoxy>
	printf("%c",254	);
 8001a0e:	20fe      	movs	r0, #254	; 0xfe
 8001a10:	f002 fa84 	bl	8003f1c <putchar>
	bgcolor(0);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f001 fbfb 	bl	8003210 <bgcolor>

	gotoxy(x+1,y+1);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3301      	adds	r3, #1
 8001a22:	4619      	mov	r1, r3
 8001a24:	4610      	mov	r0, r2
 8001a26:	f001 fc1d 	bl	8003264 <gotoxy>
	printf("%c",219);
 8001a2a:	20db      	movs	r0, #219	; 0xdb
 8001a2c:	f002 fa76 	bl	8003f1c <putchar>
	printf("%c",219);
 8001a30:	20db      	movs	r0, #219	; 0xdb
 8001a32:	f002 fa73 	bl	8003f1c <putchar>
	printf("%c",220);
 8001a36:	20dc      	movs	r0, #220	; 0xdc
 8001a38:	f002 fa70 	bl	8003f1c <putchar>

	fgcolor(9);
 8001a3c:	2009      	movs	r0, #9
 8001a3e:	f001 fbcb 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3301      	adds	r3, #1
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 fc0b 	bl	8003264 <gotoxy>
	printf("%c",191);
 8001a4e:	20bf      	movs	r0, #191	; 0xbf
 8001a50:	f002 fa64 	bl	8003f1c <putchar>
	printf("%c",191);
 8001a54:	20bf      	movs	r0, #191	; 0xbf
 8001a56:	f002 fa61 	bl	8003f1c <putchar>

	fat(1);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f000 fef6 	bl	800284c <fat>
	fgcolor(9);
 8001a60:	2009      	movs	r0, #9
 8001a62:	f001 fbb9 	bl	80031d8 <fgcolor>
	bgcolor(7);
 8001a66:	2007      	movs	r0, #7
 8001a68:	f001 fbd2 	bl	8003210 <bgcolor>
	gotoxy(x,y+2);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3302      	adds	r3, #2
 8001a70:	4619      	mov	r1, r3
 8001a72:	68b8      	ldr	r0, [r7, #8]
 8001a74:	f001 fbf6 	bl	8003264 <gotoxy>
	printf("%c",62);
 8001a78:	203e      	movs	r0, #62	; 0x3e
 8001a7a:	f002 fa4f 	bl	8003f1c <putchar>
	bgcolor(0);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f001 fbc6 	bl	8003210 <bgcolor>
	fgcolor(2);
 8001a84:	2002      	movs	r0, #2
 8001a86:	f001 fba7 	bl	80031d8 <fgcolor>
	fat(0);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f000 fede 	bl	800284c <fat>
	}

	if (p == 2) {
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d14e      	bne.n	8001b34 <playerInSpaceUSDL+0x154>
	fgcolor(11);
 8001a96:	200b      	movs	r0, #11
 8001a98:	f001 fb9e 	bl	80031d8 <fgcolor>
	bgcolor(7);
 8001a9c:	2007      	movs	r0, #7
 8001a9e:	f001 fbb7 	bl	8003210 <bgcolor>
	gotoxy(x+1,y+2);
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f001 fbd9 	bl	8003264 <gotoxy>
	printf("%c",254	);
 8001ab2:	20fe      	movs	r0, #254	; 0xfe
 8001ab4:	f002 fa32 	bl	8003f1c <putchar>
	bgcolor(0);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f001 fba9 	bl	8003210 <bgcolor>

	gotoxy(x+1,y+1);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f001 fbcb 	bl	8003264 <gotoxy>
	printf("%c",219);
 8001ace:	20db      	movs	r0, #219	; 0xdb
 8001ad0:	f002 fa24 	bl	8003f1c <putchar>
	printf("%c",219);
 8001ad4:	20db      	movs	r0, #219	; 0xdb
 8001ad6:	f002 fa21 	bl	8003f1c <putchar>
	printf("%c",220);
 8001ada:	20dc      	movs	r0, #220	; 0xdc
 8001adc:	f002 fa1e 	bl	8003f1c <putchar>

	fgcolor(9);
 8001ae0:	2009      	movs	r0, #9
 8001ae2:	f001 fb79 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 fbb9 	bl	8003264 <gotoxy>
	printf("%c",191);
 8001af2:	20bf      	movs	r0, #191	; 0xbf
 8001af4:	f002 fa12 	bl	8003f1c <putchar>
	printf("%c",191);
 8001af8:	20bf      	movs	r0, #191	; 0xbf
 8001afa:	f002 fa0f 	bl	8003f1c <putchar>

	fat(1);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f000 fea4 	bl	800284c <fat>
	fgcolor(9);
 8001b04:	2009      	movs	r0, #9
 8001b06:	f001 fb67 	bl	80031d8 <fgcolor>
	bgcolor(7);
 8001b0a:	2007      	movs	r0, #7
 8001b0c:	f001 fb80 	bl	8003210 <bgcolor>
	gotoxy(x,y+2);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3302      	adds	r3, #2
 8001b14:	4619      	mov	r1, r3
 8001b16:	68b8      	ldr	r0, [r7, #8]
 8001b18:	f001 fba4 	bl	8003264 <gotoxy>
	printf("%c",62);
 8001b1c:	203e      	movs	r0, #62	; 0x3e
 8001b1e:	f002 f9fd 	bl	8003f1c <putchar>
	bgcolor(0);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f001 fb74 	bl	8003210 <bgcolor>
	fgcolor(2);
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f001 fb55 	bl	80031d8 <fgcolor>
	fat(0);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f000 fe8c 	bl	800284c <fat>
	}
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <playerInSpaceUSDR>:

void playerInSpaceUSDR(int p, int x, int y){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d14e      	bne.n	8001bec <playerInSpaceUSDR+0xb0>
	fgcolor(15);
 8001b4e:	200f      	movs	r0, #15
 8001b50:	f001 fb42 	bl	80031d8 <fgcolor>
	bgcolor(7);
 8001b54:	2007      	movs	r0, #7
 8001b56:	f001 fb5b 	bl	8003210 <bgcolor>
	gotoxy(x+2,y+2);
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c9a      	adds	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3302      	adds	r3, #2
 8001b62:	4619      	mov	r1, r3
 8001b64:	4610      	mov	r0, r2
 8001b66:	f001 fb7d 	bl	8003264 <gotoxy>
	printf("%c",254	);
 8001b6a:	20fe      	movs	r0, #254	; 0xfe
 8001b6c:	f002 f9d6 	bl	8003f1c <putchar>
	bgcolor(0);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f001 fb4d 	bl	8003210 <bgcolor>

	gotoxy(x,y+1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	68b8      	ldr	r0, [r7, #8]
 8001b7e:	f001 fb71 	bl	8003264 <gotoxy>
	printf("%c",220);
 8001b82:	20dc      	movs	r0, #220	; 0xdc
 8001b84:	f002 f9ca 	bl	8003f1c <putchar>
	printf("%c",219);
 8001b88:	20db      	movs	r0, #219	; 0xdb
 8001b8a:	f002 f9c7 	bl	8003f1c <putchar>
	printf("%c",219);
 8001b8e:	20db      	movs	r0, #219	; 0xdb
 8001b90:	f002 f9c4 	bl	8003f1c <putchar>

	fgcolor(9);
 8001b94:	2009      	movs	r0, #9
 8001b96:	f001 fb1f 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fb5f 	bl	8003264 <gotoxy>
	printf("%c",218);
 8001ba6:	20da      	movs	r0, #218	; 0xda
 8001ba8:	f002 f9b8 	bl	8003f1c <putchar>
	printf("%c",218);
 8001bac:	20da      	movs	r0, #218	; 0xda
 8001bae:	f002 f9b5 	bl	8003f1c <putchar>

	fat(1);
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f000 fe4a 	bl	800284c <fat>
	fgcolor(9);
 8001bb8:	2009      	movs	r0, #9
 8001bba:	f001 fb0d 	bl	80031d8 <fgcolor>
	bgcolor(7);
 8001bbe:	2007      	movs	r0, #7
 8001bc0:	f001 fb26 	bl	8003210 <bgcolor>
	gotoxy(x+3,y+2);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1cda      	adds	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3302      	adds	r3, #2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f001 fb48 	bl	8003264 <gotoxy>
	printf("%c",60);
 8001bd4:	203c      	movs	r0, #60	; 0x3c
 8001bd6:	f002 f9a1 	bl	8003f1c <putchar>
	bgcolor(0);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f001 fb18 	bl	8003210 <bgcolor>
	fgcolor(2);
 8001be0:	2002      	movs	r0, #2
 8001be2:	f001 faf9 	bl	80031d8 <fgcolor>
	fat(0);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 fe30 	bl	800284c <fat>
	}

	if (p == 2) {
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d14e      	bne.n	8001c90 <playerInSpaceUSDR+0x154>
	fgcolor(11);
 8001bf2:	200b      	movs	r0, #11
 8001bf4:	f001 faf0 	bl	80031d8 <fgcolor>
	bgcolor(7);
 8001bf8:	2007      	movs	r0, #7
 8001bfa:	f001 fb09 	bl	8003210 <bgcolor>
	gotoxy(x+2,y+2);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1c9a      	adds	r2, r3, #2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3302      	adds	r3, #2
 8001c06:	4619      	mov	r1, r3
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f001 fb2b 	bl	8003264 <gotoxy>
	printf("%c",254	);
 8001c0e:	20fe      	movs	r0, #254	; 0xfe
 8001c10:	f002 f984 	bl	8003f1c <putchar>
	bgcolor(0);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f001 fafb 	bl	8003210 <bgcolor>

	gotoxy(x,y+1);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	4619      	mov	r1, r3
 8001c20:	68b8      	ldr	r0, [r7, #8]
 8001c22:	f001 fb1f 	bl	8003264 <gotoxy>
	printf("%c",220);
 8001c26:	20dc      	movs	r0, #220	; 0xdc
 8001c28:	f002 f978 	bl	8003f1c <putchar>
	printf("%c",219);
 8001c2c:	20db      	movs	r0, #219	; 0xdb
 8001c2e:	f002 f975 	bl	8003f1c <putchar>
	printf("%c",219);
 8001c32:	20db      	movs	r0, #219	; 0xdb
 8001c34:	f002 f972 	bl	8003f1c <putchar>

	fgcolor(9);
 8001c38:	2009      	movs	r0, #9
 8001c3a:	f001 facd 	bl	80031d8 <fgcolor>
	gotoxy(x+1,y);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3301      	adds	r3, #1
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 fb0d 	bl	8003264 <gotoxy>
	printf("%c",218);
 8001c4a:	20da      	movs	r0, #218	; 0xda
 8001c4c:	f002 f966 	bl	8003f1c <putchar>
	printf("%c",218);
 8001c50:	20da      	movs	r0, #218	; 0xda
 8001c52:	f002 f963 	bl	8003f1c <putchar>

	fat(1);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f000 fdf8 	bl	800284c <fat>
	fgcolor(9);
 8001c5c:	2009      	movs	r0, #9
 8001c5e:	f001 fabb 	bl	80031d8 <fgcolor>
	bgcolor(7);
 8001c62:	2007      	movs	r0, #7
 8001c64:	f001 fad4 	bl	8003210 <bgcolor>
	gotoxy(x+3,y+2);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1cda      	adds	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3302      	adds	r3, #2
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f001 faf6 	bl	8003264 <gotoxy>
	printf("%c",60);
 8001c78:	203c      	movs	r0, #60	; 0x3c
 8001c7a:	f002 f94f 	bl	8003f1c <putchar>
	bgcolor(0);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f001 fac6 	bl	8003210 <bgcolor>
	fgcolor(2);
 8001c84:	2002      	movs	r0, #2
 8001c86:	f001 faa7 	bl	80031d8 <fgcolor>
	fat(0);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f000 fdde 	bl	800284c <fat>
	}
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <goDuckUP1>:

void goDuckUP1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->ud >-21){
 8001ca6:	4b7d      	ldr	r3, [pc, #500]	; (8001e9c <goDuckUP1+0x204>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d034      	beq.n	8001d1a <goDuckUP1+0x82>
 8001cb0:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <goDuckUP1+0x208>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d12f      	bne.n	8001d1a <goDuckUP1+0x82>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc0:	f113 0f14 	cmn.w	r3, #20
 8001cc4:	db29      	blt.n	8001d1a <goDuckUP1+0x82>
	playerInSpaceR(play,x+*rl,y+*ud);
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	18d1      	adds	r1, r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff fd2d 	bl	8001738 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	18d1      	adds	r1, r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 fdc5 	bl	8002880 <playerDelete>
	(*ud)--;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1e5a      	subs	r2, r3, #1
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	18d1      	adds	r1, r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	461a      	mov	r2, r3
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff fd0f 	bl	8001738 <playerInSpaceR>
	}
	if (joy.left && !CJoy.left && D->rl >0){
 8001d1a:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <goDuckUP1+0x204>)
 8001d1c:	789b      	ldrb	r3, [r3, #2]
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d033      	beq.n	8001d8c <goDuckUP1+0xf4>
 8001d24:	4b5e      	ldr	r3, [pc, #376]	; (8001ea0 <goDuckUP1+0x208>)
 8001d26:	789b      	ldrb	r3, [r3, #2]
 8001d28:	b25b      	sxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d12e      	bne.n	8001d8c <goDuckUP1+0xf4>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	dd29      	ble.n	8001d8c <goDuckUP1+0xf4>
	playerInSpaceL(play,x+*rl,y+*ud);
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	18d1      	adds	r1, r2, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7ff fd9e 	bl	800188c <playerInSpaceL>
	playerDelete(play,x+*rl,y+*ud);
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	18d1      	adds	r1, r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fd8c 	bl	8002880 <playerDelete>
	(*rl)-=5;
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	1f5a      	subs	r2, r3, #5
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	601a      	str	r2, [r3, #0]
	playerInSpaceL(play,x+1+*rl,y+*ud);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	18d1      	adds	r1, r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff fd80 	bl	800188c <playerInSpaceL>
	}
	if (joy.right && !CJoy.right && D->rl <65){
 8001d8c:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <goDuckUP1+0x204>)
 8001d8e:	78db      	ldrb	r3, [r3, #3]
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d033      	beq.n	8001dfe <goDuckUP1+0x166>
 8001d96:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <goDuckUP1+0x208>)
 8001d98:	78db      	ldrb	r3, [r3, #3]
 8001d9a:	b25b      	sxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d12e      	bne.n	8001dfe <goDuckUP1+0x166>
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001da6:	2b40      	cmp	r3, #64	; 0x40
 8001da8:	dc29      	bgt.n	8001dfe <goDuckUP1+0x166>
	playerInSpaceR(play,x+*rl,y+*ud);
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	18d1      	adds	r1, r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff fcbb 	bl	8001738 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	18d1      	adds	r1, r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 fd53 	bl	8002880 <playerDelete>
	(*rl)+=5;
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1d5a      	adds	r2, r3, #5
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	18d1      	adds	r1, r2, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	461a      	mov	r2, r3
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7ff fc9d 	bl	8001738 <playerInSpaceR>
	}
	if (joy.center && !CJoy.center && D->rl == 30){
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <goDuckUP1+0x204>)
 8001e00:	791b      	ldrb	r3, [r3, #4]
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d033      	beq.n	8001e70 <goDuckUP1+0x1d8>
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <goDuckUP1+0x208>)
 8001e0a:	791b      	ldrb	r3, [r3, #4]
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d12e      	bne.n	8001e70 <goDuckUP1+0x1d8>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e18:	2b1e      	cmp	r3, #30
 8001e1a:	d129      	bne.n	8001e70 <goDuckUP1+0x1d8>
	playerInSpaceR(play,x+*rl,y+*ud);
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	18d1      	adds	r1, r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff fc82 	bl	8001738 <playerInSpaceR>
	playerDelete(1,x+*rl,y+*ud);
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	18d1      	adds	r1, r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	2001      	movs	r0, #1
 8001e48:	f000 fd1a 	bl	8002880 <playerDelete>
	(*ud)+=4;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	1d1a      	adds	r2, r3, #4
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	18d1      	adds	r1, r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff fb40 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b25a      	sxtb	r2, r3
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3b16      	subs	r3, #22
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	b25a      	sxtb	r2, r3
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	705a      	strb	r2, [r3, #1]
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200001e0 	.word	0x200001e0
 8001ea0:	200001e8 	.word	0x200001e8

08001ea4 <goDuckUP2>:

void goDuckUP2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]

	if (key.up && D->ud >-21){
 8001eb2:	4b73      	ldr	r3, [pc, #460]	; (8002080 <goDuckUP2+0x1dc>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b25b      	sxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d02f      	beq.n	8001f1c <goDuckUP2+0x78>
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec2:	f113 0f14 	cmn.w	r3, #20
 8001ec6:	db29      	blt.n	8001f1c <goDuckUP2+0x78>
	playerInSpaceR(play,x+*rl,y+*ud);
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	18d1      	adds	r1, r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff fc2c 	bl	8001738 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	18d1      	adds	r1, r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 fcc4 	bl	8002880 <playerDelete>
	(*ud)--;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	1e5a      	subs	r2, r3, #1
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	18d1      	adds	r1, r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7ff fc0e 	bl	8001738 <playerInSpaceR>
	}
	if (key.left && D->rl >0){
 8001f1c:	4b58      	ldr	r3, [pc, #352]	; (8002080 <goDuckUP2+0x1dc>)
 8001f1e:	789b      	ldrb	r3, [r3, #2]
 8001f20:	b25b      	sxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d02e      	beq.n	8001f84 <goDuckUP2+0xe0>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dd29      	ble.n	8001f84 <goDuckUP2+0xe0>
	playerInSpaceL(play,x+*rl,y+*ud);
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	18d1      	adds	r1, r2, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	461a      	mov	r2, r3
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff fca2 	bl	800188c <playerInSpaceL>
	playerDelete(play,x+*rl,y+*ud);
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	18d1      	adds	r1, r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fc90 	bl	8002880 <playerDelete>
	(*rl)-=5;
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	1f5a      	subs	r2, r3, #5
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	601a      	str	r2, [r3, #0]
	playerInSpaceL(play,x+1+*rl,y+*ud);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	18d1      	adds	r1, r2, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff fc84 	bl	800188c <playerInSpaceL>
	}
	if (key.right && D->rl <65){
 8001f84:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <goDuckUP2+0x1dc>)
 8001f86:	78db      	ldrb	r3, [r3, #3]
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d02e      	beq.n	8001fec <goDuckUP2+0x148>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	dc29      	bgt.n	8001fec <goDuckUP2+0x148>
	playerInSpaceR(play,x+*rl,y+*ud);
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	18d1      	adds	r1, r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f7ff fbc4 	bl	8001738 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	18d1      	adds	r1, r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 fc5c 	bl	8002880 <playerDelete>
	(*rl)+=5;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	1d5a      	adds	r2, r3, #5
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	18d1      	adds	r1, r2, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fba6 	bl	8001738 <playerInSpaceR>
	}
	if (key.center && D->rl == 30){
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <goDuckUP2+0x1dc>)
 8001fee:	791b      	ldrb	r3, [r3, #4]
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d02e      	beq.n	8002054 <goDuckUP2+0x1b0>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ffc:	2b1e      	cmp	r3, #30
 8001ffe:	d129      	bne.n	8002054 <goDuckUP2+0x1b0>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	18d1      	adds	r1, r2, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	461a      	mov	r2, r3
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7ff fb90 	bl	8001738 <playerInSpaceR>
	playerDelete(1,x+*rl,y+*ud);
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	18d1      	adds	r1, r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4413      	add	r3, r2
 8002028:	461a      	mov	r2, r3
 800202a:	2001      	movs	r0, #1
 800202c:	f000 fc28 	bl	8002880 <playerDelete>
	(*ud)+=4;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	1d1a      	adds	r2, r3, #4
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	18d1      	adds	r1, r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	461a      	mov	r2, r3
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7ff fa4e 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	b25a      	sxtb	r2, r3
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	4413      	add	r3, r2
 800206a:	b2db      	uxtb	r3, r3
 800206c:	3b16      	subs	r3, #22
 800206e:	b2db      	uxtb	r3, r3
 8002070:	b25a      	sxtb	r2, r3
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	705a      	strb	r2, [r3, #1]
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200001d4 	.word	0x200001d4

08002084 <goDuckMID1>:

void goDuckMID1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->rl == 30){
 8002092:	4b7c      	ldr	r3, [pc, #496]	; (8002284 <goDuckMID1+0x200>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b25b      	sxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d033      	beq.n	8002104 <goDuckMID1+0x80>
 800209c:	4b7a      	ldr	r3, [pc, #488]	; (8002288 <goDuckMID1+0x204>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d12e      	bne.n	8002104 <goDuckMID1+0x80>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80020ac:	2b1e      	cmp	r3, #30
 80020ae:	d129      	bne.n	8002104 <goDuckMID1+0x80>
	playerInShipR(play,x+*rl,y+*ud);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	18d1      	adds	r1, r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f7ff fa14 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	18d1      	adds	r1, r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fbd0 	bl	8002880 <playerDelete>
	(*ud)-= 4;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	1f1a      	subs	r2, r3, #4
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	18d1      	adds	r1, r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f7ff fb1a 	bl	8001738 <playerInSpaceR>
	}
	if (joy.down && !CJoy.down  && D->rl == 30){
 8002104:	4b5f      	ldr	r3, [pc, #380]	; (8002284 <goDuckMID1+0x200>)
 8002106:	785b      	ldrb	r3, [r3, #1]
 8002108:	b25b      	sxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d033      	beq.n	8002176 <goDuckMID1+0xf2>
 800210e:	4b5e      	ldr	r3, [pc, #376]	; (8002288 <goDuckMID1+0x204>)
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	b25b      	sxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d12e      	bne.n	8002176 <goDuckMID1+0xf2>
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800211e:	2b1e      	cmp	r3, #30
 8002120:	d129      	bne.n	8002176 <goDuckMID1+0xf2>
	playerInShipR(play,x+*rl,y+*ud);
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	18d1      	adds	r1, r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	461a      	mov	r2, r3
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff f9db 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	18d1      	adds	r1, r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	461a      	mov	r2, r3
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fb97 	bl	8002880 <playerDelete>
	(*ud)+= 4;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1d1a      	adds	r2, r3, #4
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	18d1      	adds	r1, r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	461a      	mov	r2, r3
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f7ff fce3 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (joy.left && !CJoy.left && D->rl >0){
 8002176:	4b43      	ldr	r3, [pc, #268]	; (8002284 <goDuckMID1+0x200>)
 8002178:	789b      	ldrb	r3, [r3, #2]
 800217a:	b25b      	sxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d033      	beq.n	80021e8 <goDuckMID1+0x164>
 8002180:	4b41      	ldr	r3, [pc, #260]	; (8002288 <goDuckMID1+0x204>)
 8002182:	789b      	ldrb	r3, [r3, #2]
 8002184:	b25b      	sxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d12e      	bne.n	80021e8 <goDuckMID1+0x164>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002190:	2b00      	cmp	r3, #0
 8002192:	dd29      	ble.n	80021e8 <goDuckMID1+0x164>
	playerInShipL(play,x+*rl,y+*ud);
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	18d1      	adds	r1, r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff fa34 	bl	8001614 <playerInShipL>
	playerDelete(play,x+*rl,y+*ud);
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	18d1      	adds	r1, r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	461a      	mov	r2, r3
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fb5e 	bl	8002880 <playerDelete>
	(*rl)-=5;
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1f5a      	subs	r2, r3, #5
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	601a      	str	r2, [r3, #0]
	playerInShipL(play,x+1+*rl,y+*ud);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	18d1      	adds	r1, r2, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	461a      	mov	r2, r3
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff fa16 	bl	8001614 <playerInShipL>
	}
	if (joy.right && !CJoy.right && D->rl <55){
 80021e8:	4b26      	ldr	r3, [pc, #152]	; (8002284 <goDuckMID1+0x200>)
 80021ea:	78db      	ldrb	r3, [r3, #3]
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d033      	beq.n	800225a <goDuckMID1+0x1d6>
 80021f2:	4b25      	ldr	r3, [pc, #148]	; (8002288 <goDuckMID1+0x204>)
 80021f4:	78db      	ldrb	r3, [r3, #3]
 80021f6:	b25b      	sxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d12e      	bne.n	800225a <goDuckMID1+0x1d6>
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002202:	2b36      	cmp	r3, #54	; 0x36
 8002204:	dc29      	bgt.n	800225a <goDuckMID1+0x1d6>
	playerInShipR(play,x+*rl,y+*ud);
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	18d1      	adds	r1, r2, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	461a      	mov	r2, r3
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f7ff f969 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	18d1      	adds	r1, r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	461a      	mov	r2, r3
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fb25 	bl	8002880 <playerDelete>
	(*rl)+=5;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1d5a      	adds	r2, r3, #5
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	18d1      	adds	r1, r2, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	461a      	mov	r2, r3
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff f94b 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b25a      	sxtb	r2, r3
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	4413      	add	r3, r2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	3b16      	subs	r3, #22
 8002274:	b2db      	uxtb	r3, r3
 8002276:	b25a      	sxtb	r2, r3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	705a      	strb	r2, [r3, #1]
}
 800227c:	bf00      	nop
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200001e0 	.word	0x200001e0
 8002288:	200001e8 	.word	0x200001e8

0800228c <goDuckMID2>:

void goDuckMID2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]

	if (key.up && D->rl == 30){
 800229a:	4b72      	ldr	r3, [pc, #456]	; (8002464 <goDuckMID2+0x1d8>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b25b      	sxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d02e      	beq.n	8002302 <goDuckMID2+0x76>
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022aa:	2b1e      	cmp	r3, #30
 80022ac:	d129      	bne.n	8002302 <goDuckMID2+0x76>
	playerInShipR(play,x+*rl,y+*ud);
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	18d1      	adds	r1, r2, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	461a      	mov	r2, r3
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff f915 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	18d1      	adds	r1, r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	461a      	mov	r2, r3
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fad1 	bl	8002880 <playerDelete>
	(*ud)-= 4;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1f1a      	subs	r2, r3, #4
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	18d1      	adds	r1, r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	461a      	mov	r2, r3
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff fa1b 	bl	8001738 <playerInSpaceR>
	}
	if (key.down && D->rl == 30){
 8002302:	4b58      	ldr	r3, [pc, #352]	; (8002464 <goDuckMID2+0x1d8>)
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	b25b      	sxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02e      	beq.n	800236a <goDuckMID2+0xde>
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002312:	2b1e      	cmp	r3, #30
 8002314:	d129      	bne.n	800236a <goDuckMID2+0xde>
	playerInShipR(play,x+*rl,y+*ud);
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	18d1      	adds	r1, r2, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	461a      	mov	r2, r3
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff f8e1 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	18d1      	adds	r1, r2, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	461a      	mov	r2, r3
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fa9d 	bl	8002880 <playerDelete>
	(*ud)+= 4;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	1d1a      	adds	r2, r3, #4
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	18d1      	adds	r1, r2, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	461a      	mov	r2, r3
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7ff fbe9 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (key.left && D->rl >0){
 800236a:	4b3e      	ldr	r3, [pc, #248]	; (8002464 <goDuckMID2+0x1d8>)
 800236c:	789b      	ldrb	r3, [r3, #2]
 800236e:	b25b      	sxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02e      	beq.n	80023d2 <goDuckMID2+0x146>
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	dd29      	ble.n	80023d2 <goDuckMID2+0x146>
	playerInShipL(play,x+*rl,y+*ud);
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	18d1      	adds	r1, r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	461a      	mov	r2, r3
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7ff f93f 	bl	8001614 <playerInShipL>
	playerDelete(play,x+*rl,y+*ud);
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	18d1      	adds	r1, r2, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	461a      	mov	r2, r3
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fa69 	bl	8002880 <playerDelete>
	(*rl)-=5;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1f5a      	subs	r2, r3, #5
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	601a      	str	r2, [r3, #0]
	playerInShipL(play,x+1+*rl,y+*ud);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	18d1      	adds	r1, r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	461a      	mov	r2, r3
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7ff f921 	bl	8001614 <playerInShipL>
	}
	if (key.right && D->rl <55){
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <goDuckMID2+0x1d8>)
 80023d4:	78db      	ldrb	r3, [r3, #3]
 80023d6:	b25b      	sxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d02e      	beq.n	800243a <goDuckMID2+0x1ae>
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80023e2:	2b36      	cmp	r3, #54	; 0x36
 80023e4:	dc29      	bgt.n	800243a <goDuckMID2+0x1ae>
	playerInShipR(play,x+*rl,y+*ud);
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	18d1      	adds	r1, r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	461a      	mov	r2, r3
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f7ff f879 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	18d1      	adds	r1, r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	461a      	mov	r2, r3
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fa35 	bl	8002880 <playerDelete>
	(*rl)+=5;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	1d5a      	adds	r2, r3, #5
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	18d1      	adds	r1, r2, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	461a      	mov	r2, r3
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff f85b 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	b25a      	sxtb	r2, r3
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4413      	add	r3, r2
 8002450:	b2db      	uxtb	r3, r3
 8002452:	3b16      	subs	r3, #22
 8002454:	b2db      	uxtb	r3, r3
 8002456:	b25a      	sxtb	r2, r3
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	705a      	strb	r2, [r3, #1]
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200001d4 	.word	0x200001d4

08002468 <goDuckUSD1>:

void goDuckUSD1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->ud <30){
 8002476:	4b7c      	ldr	r3, [pc, #496]	; (8002668 <goDuckUSD1+0x200>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b25b      	sxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d033      	beq.n	80024e8 <goDuckUSD1+0x80>
 8002480:	4b7a      	ldr	r3, [pc, #488]	; (800266c <goDuckUSD1+0x204>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b25b      	sxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d12e      	bne.n	80024e8 <goDuckUSD1+0x80>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f993 3000 	ldrsb.w	r3, [r3]
 8002490:	2b1d      	cmp	r3, #29
 8002492:	dc29      	bgt.n	80024e8 <goDuckUSD1+0x80>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	18d1      	adds	r1, r2, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4413      	add	r3, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f7ff fb48 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	18d1      	adds	r1, r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	461a      	mov	r2, r3
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f9de 	bl	8002880 <playerDelete>
	(*ud)++;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	18d1      	adds	r1, r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff fb2a 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (joy.right && !CJoy.right && D->rl >0){
 80024e8:	4b5f      	ldr	r3, [pc, #380]	; (8002668 <goDuckUSD1+0x200>)
 80024ea:	78db      	ldrb	r3, [r3, #3]
 80024ec:	b25b      	sxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d033      	beq.n	800255a <goDuckUSD1+0xf2>
 80024f2:	4b5e      	ldr	r3, [pc, #376]	; (800266c <goDuckUSD1+0x204>)
 80024f4:	78db      	ldrb	r3, [r3, #3]
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d12e      	bne.n	800255a <goDuckUSD1+0xf2>
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	dd29      	ble.n	800255a <goDuckUSD1+0xf2>
	playerInSpaceUSDL(play,x+*rl,y+*ud);
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	18d1      	adds	r1, r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	461a      	mov	r2, r3
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff fa61 	bl	80019e0 <playerInSpaceUSDL>
	playerDelete(play,x+*rl,y+*ud);
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	18d1      	adds	r1, r2, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	461a      	mov	r2, r3
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f9a5 	bl	8002880 <playerDelete>
	(*rl)-=5;
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	1f5a      	subs	r2, r3, #5
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDL(play,x+1+*rl,y+*ud);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	18d1      	adds	r1, r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	461a      	mov	r2, r3
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7ff fa43 	bl	80019e0 <playerInSpaceUSDL>
	}
	if (joy.left && !CJoy.left && D->rl <65){
 800255a:	4b43      	ldr	r3, [pc, #268]	; (8002668 <goDuckUSD1+0x200>)
 800255c:	789b      	ldrb	r3, [r3, #2]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d033      	beq.n	80025cc <goDuckUSD1+0x164>
 8002564:	4b41      	ldr	r3, [pc, #260]	; (800266c <goDuckUSD1+0x204>)
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	b25b      	sxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d12e      	bne.n	80025cc <goDuckUSD1+0x164>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	dc29      	bgt.n	80025cc <goDuckUSD1+0x164>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	18d1      	adds	r1, r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	461a      	mov	r2, r3
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f7ff fad6 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	18d1      	adds	r1, r2, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f96c 	bl	8002880 <playerDelete>
	(*rl)+=5;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	1d5a      	adds	r2, r3, #5
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	18d1      	adds	r1, r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7ff fab8 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (joy.center && !CJoy.center && D->rl == 30){
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <goDuckUSD1+0x200>)
 80025ce:	791b      	ldrb	r3, [r3, #4]
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d033      	beq.n	800263e <goDuckUSD1+0x1d6>
 80025d6:	4b25      	ldr	r3, [pc, #148]	; (800266c <goDuckUSD1+0x204>)
 80025d8:	791b      	ldrb	r3, [r3, #4]
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d12e      	bne.n	800263e <goDuckUSD1+0x1d6>
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80025e6:	2b1e      	cmp	r3, #30
 80025e8:	d129      	bne.n	800263e <goDuckUSD1+0x1d6>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	18d1      	adds	r1, r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	461a      	mov	r2, r3
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff fa9d 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	18d1      	adds	r1, r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	461a      	mov	r2, r3
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f933 	bl	8002880 <playerDelete>
	(*ud)-=4;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	1f1a      	subs	r2, r3, #4
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	18d1      	adds	r1, r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	461a      	mov	r2, r3
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7fe ff59 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	b25a      	sxtb	r2, r3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4413      	add	r3, r2
 8002654:	b2db      	uxtb	r3, r3
 8002656:	3b16      	subs	r3, #22
 8002658:	b2db      	uxtb	r3, r3
 800265a:	b25a      	sxtb	r2, r3
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	705a      	strb	r2, [r3, #1]
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200001e0 	.word	0x200001e0
 800266c:	200001e8 	.word	0x200001e8

08002670 <goDuckUSD2>:

void goDuckUSD2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]

	if (key.up && D->ud <30){
 800267e:	4b72      	ldr	r3, [pc, #456]	; (8002848 <goDuckUSD2+0x1d8>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b25b      	sxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d02e      	beq.n	80026e6 <goDuckUSD2+0x76>
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f993 3000 	ldrsb.w	r3, [r3]
 800268e:	2b1d      	cmp	r3, #29
 8002690:	dc29      	bgt.n	80026e6 <goDuckUSD2+0x76>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	18d1      	adds	r1, r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	461a      	mov	r2, r3
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff fa49 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	18d1      	adds	r1, r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	461a      	mov	r2, r3
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f8df 	bl	8002880 <playerDelete>
	(*ud)++;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	18d1      	adds	r1, r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	461a      	mov	r2, r3
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff fa2b 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (key.right && D->rl >0){
 80026e6:	4b58      	ldr	r3, [pc, #352]	; (8002848 <goDuckUSD2+0x1d8>)
 80026e8:	78db      	ldrb	r3, [r3, #3]
 80026ea:	b25b      	sxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d02e      	beq.n	800274e <goDuckUSD2+0xde>
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	dd29      	ble.n	800274e <goDuckUSD2+0xde>
	playerInSpaceUSDL(play,x+*rl,y+*ud);
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	18d1      	adds	r1, r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	461a      	mov	r2, r3
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f7ff f967 	bl	80019e0 <playerInSpaceUSDL>
	playerDelete(play,x+*rl,y+*ud);
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	18d1      	adds	r1, r2, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	461a      	mov	r2, r3
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f8ab 	bl	8002880 <playerDelete>
	(*rl)-=5;
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	1f5a      	subs	r2, r3, #5
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDL(play,x+1+*rl,y+*ud);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	18d1      	adds	r1, r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	461a      	mov	r2, r3
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff f949 	bl	80019e0 <playerInSpaceUSDL>
	}
	if (key.left && D->rl <65){
 800274e:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <goDuckUSD2+0x1d8>)
 8002750:	789b      	ldrb	r3, [r3, #2]
 8002752:	b25b      	sxtb	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d02e      	beq.n	80027b6 <goDuckUSD2+0x146>
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	dc29      	bgt.n	80027b6 <goDuckUSD2+0x146>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	18d1      	adds	r1, r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	461a      	mov	r2, r3
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff f9e1 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	18d1      	adds	r1, r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	461a      	mov	r2, r3
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f877 	bl	8002880 <playerDelete>
	(*rl)+=5;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	1d5a      	adds	r2, r3, #5
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	18d1      	adds	r1, r2, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	461a      	mov	r2, r3
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff f9c3 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (key.center && D->rl == 30){
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <goDuckUSD2+0x1d8>)
 80027b8:	791b      	ldrb	r3, [r3, #4]
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d02e      	beq.n	800281e <goDuckUSD2+0x1ae>
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80027c6:	2b1e      	cmp	r3, #30
 80027c8:	d129      	bne.n	800281e <goDuckUSD2+0x1ae>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	18d1      	adds	r1, r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	461a      	mov	r2, r3
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7ff f9ad 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	18d1      	adds	r1, r2, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	461a      	mov	r2, r3
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f843 	bl	8002880 <playerDelete>
	(*ud)-=4;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	1f1a      	subs	r2, r3, #4
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	18d1      	adds	r1, r2, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	461a      	mov	r2, r3
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7fe fe69 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b25a      	sxtb	r2, r3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	4413      	add	r3, r2
 8002834:	b2db      	uxtb	r3, r3
 8002836:	3b16      	subs	r3, #22
 8002838:	b2db      	uxtb	r3, r3
 800283a:	b25a      	sxtb	r2, r3
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	705a      	strb	r2, [r3, #1]
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200001d4 	.word	0x200001d4

0800284c <fat>:

void fat(int state) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	if (state) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <fat+0x1c>
		printf("%c[%d%c", ESC, 01, 'm');
 800285a:	236d      	movs	r3, #109	; 0x6d
 800285c:	2201      	movs	r2, #1
 800285e:	211b      	movs	r1, #27
 8002860:	4806      	ldr	r0, [pc, #24]	; (800287c <fat+0x30>)
 8002862:	f001 fb43 	bl	8003eec <iprintf>
	} else {
		printf("%c[%d%c", ESC, 22, 'm');
	}
}
 8002866:	e005      	b.n	8002874 <fat+0x28>
		printf("%c[%d%c", ESC, 22, 'm');
 8002868:	236d      	movs	r3, #109	; 0x6d
 800286a:	2216      	movs	r2, #22
 800286c:	211b      	movs	r1, #27
 800286e:	4803      	ldr	r0, [pc, #12]	; (800287c <fat+0x30>)
 8002870:	f001 fb3c 	bl	8003eec <iprintf>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	08005018 	.word	0x08005018

08002880 <playerDelete>:


void playerDelete(int p,int x, int y){
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]

	gotoxy(x,y);
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	68b8      	ldr	r0, [r7, #8]
 8002890:	f000 fce8 	bl	8003264 <gotoxy>
	for (int i = 0; i < 5; i++){
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	e005      	b.n	80028a6 <playerDelete+0x26>
		printf("%c",32);
 800289a:	2020      	movs	r0, #32
 800289c:	f001 fb3e 	bl	8003f1c <putchar>
	for (int i = 0; i < 5; i++){
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	3301      	adds	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	ddf6      	ble.n	800289a <playerDelete+0x1a>
	}
	gotoxy(x,y+1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3301      	adds	r3, #1
 80028b0:	4619      	mov	r1, r3
 80028b2:	68b8      	ldr	r0, [r7, #8]
 80028b4:	f000 fcd6 	bl	8003264 <gotoxy>
	for (int i = 0; i < 5; i++){
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e005      	b.n	80028ca <playerDelete+0x4a>
		printf("%c",32);
 80028be:	2020      	movs	r0, #32
 80028c0:	f001 fb2c 	bl	8003f1c <putchar>
	for (int i = 0; i < 5; i++){
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	3301      	adds	r3, #1
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	ddf6      	ble.n	80028be <playerDelete+0x3e>
	}
	gotoxy(x,y+2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3302      	adds	r3, #2
 80028d4:	4619      	mov	r1, r3
 80028d6:	68b8      	ldr	r0, [r7, #8]
 80028d8:	f000 fcc4 	bl	8003264 <gotoxy>
	for (int i = 0; i < 5; i++){
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e005      	b.n	80028ee <playerDelete+0x6e>
		printf("%c",32);
 80028e2:	2020      	movs	r0, #32
 80028e4:	f001 fb1a 	bl	8003f1c <putchar>
	for (int i = 0; i < 5; i++){
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	3301      	adds	r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	ddf6      	ble.n	80028e2 <playerDelete+0x62>
	}
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <canonFire>:

void canonFire(int b,int SS){
 80028fe:	b580      	push	{r7, lr}
 8002900:	b086      	sub	sp, #24
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
	bgcolor(0);
 8002908:	2000      	movs	r0, #0
 800290a:	f000 fc81 	bl	8003210 <bgcolor>

	if (b == 1){
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d14d      	bne.n	80029b0 <canonFire+0xb2>
	fat(1);
 8002914:	2001      	movs	r0, #1
 8002916:	f7ff ff99 	bl	800284c <fat>
	bgcolor(2);
 800291a:	2002      	movs	r0, #2
 800291c:	f000 fc78 	bl	8003210 <bgcolor>
	for(int i = 0; i<88 ;i++){
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	e029      	b.n	800297a <canonFire+0x7c>
	gotoxy(92+i,29+SS);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	331d      	adds	r3, #29
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 fc96 	bl	8003264 <gotoxy>
	printf("%c",205);
 8002938:	20cd      	movs	r0, #205	; 0xcd
 800293a:	f001 faef 	bl	8003f1c <putchar>
	printf("%c",205);
 800293e:	20cd      	movs	r0, #205	; 0xcd
 8002940:	f001 faec 	bl	8003f1c <putchar>
	printf("%c",205);
 8002944:	20cd      	movs	r0, #205	; 0xcd
 8002946:	f001 fae9 	bl	8003f1c <putchar>
	printf("%c",205);
 800294a:	20cd      	movs	r0, #205	; 0xcd
 800294c:	f001 fae6 	bl	8003f1c <putchar>
	printf("%c",205);
 8002950:	20cd      	movs	r0, #205	; 0xcd
 8002952:	f001 fae3 	bl	8003f1c <putchar>
	bgcolor(0);
 8002956:	2000      	movs	r0, #0
 8002958:	f000 fc5a 	bl	8003210 <bgcolor>
	gotoxy(92+i-1,29+SS);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	331d      	adds	r3, #29
 8002966:	4619      	mov	r1, r3
 8002968:	4610      	mov	r0, r2
 800296a:	f000 fc7b 	bl	8003264 <gotoxy>
	printf("%c",32);
 800296e:	2020      	movs	r0, #32
 8002970:	f001 fad4 	bl	8003f1c <putchar>
	for(int i = 0; i<88 ;i++){
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b57      	cmp	r3, #87	; 0x57
 800297e:	ddd2      	ble.n	8002926 <canonFire+0x28>
}
	gotoxy(178,29+SS);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	331d      	adds	r3, #29
 8002984:	4619      	mov	r1, r3
 8002986:	20b2      	movs	r0, #178	; 0xb2
 8002988:	f000 fc6c 	bl	8003264 <gotoxy>
	fgcolor(10);
 800298c:	200a      	movs	r0, #10
 800298e:	f000 fc23 	bl	80031d8 <fgcolor>
	fat(0);
 8002992:	2000      	movs	r0, #0
 8002994:	f7ff ff5a 	bl	800284c <fat>
	for(int i = 0; i<6; i++){
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	e005      	b.n	80029aa <canonFire+0xac>
	printf("%c",32);
 800299e:	2020      	movs	r0, #32
 80029a0:	f001 fabc 	bl	8003f1c <putchar>
	for(int i = 0; i<6; i++){
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	3301      	adds	r3, #1
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	ddf6      	ble.n	800299e <canonFire+0xa0>
	}
}
if (b == 2){
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d14d      	bne.n	8002a52 <canonFire+0x154>
fat(1);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff ff48 	bl	800284c <fat>
bgcolor(1);
 80029bc:	2001      	movs	r0, #1
 80029be:	f000 fc27 	bl	8003210 <bgcolor>
for(int i = 0; i<88 ;i++){
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	e029      	b.n	8002a1c <canonFire+0x11e>
gotoxy(92+i,29+SS);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	331d      	adds	r3, #29
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f000 fc45 	bl	8003264 <gotoxy>
printf("%c",178);
 80029da:	20b2      	movs	r0, #178	; 0xb2
 80029dc:	f001 fa9e 	bl	8003f1c <putchar>
printf("%c",178);
 80029e0:	20b2      	movs	r0, #178	; 0xb2
 80029e2:	f001 fa9b 	bl	8003f1c <putchar>
printf("%c",178);
 80029e6:	20b2      	movs	r0, #178	; 0xb2
 80029e8:	f001 fa98 	bl	8003f1c <putchar>
printf("%c",178);
 80029ec:	20b2      	movs	r0, #178	; 0xb2
 80029ee:	f001 fa95 	bl	8003f1c <putchar>
printf("%c",178);
 80029f2:	20b2      	movs	r0, #178	; 0xb2
 80029f4:	f001 fa92 	bl	8003f1c <putchar>
bgcolor(0);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f000 fc09 	bl	8003210 <bgcolor>
gotoxy(92+i-1,29+SS);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	331d      	adds	r3, #29
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f000 fc2a 	bl	8003264 <gotoxy>
printf("%c",32);
 8002a10:	2020      	movs	r0, #32
 8002a12:	f001 fa83 	bl	8003f1c <putchar>
for(int i = 0; i<88 ;i++){
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b57      	cmp	r3, #87	; 0x57
 8002a20:	ddd2      	ble.n	80029c8 <canonFire+0xca>
}
gotoxy(178,29+SS);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	331d      	adds	r3, #29
 8002a26:	4619      	mov	r1, r3
 8002a28:	20b2      	movs	r0, #178	; 0xb2
 8002a2a:	f000 fc1b 	bl	8003264 <gotoxy>
fgcolor(10);
 8002a2e:	200a      	movs	r0, #10
 8002a30:	f000 fbd2 	bl	80031d8 <fgcolor>
fat(0);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7ff ff09 	bl	800284c <fat>
for(int i = 0; i<6; i++){
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	e005      	b.n	8002a4c <canonFire+0x14e>
printf("%c",32);
 8002a40:	2020      	movs	r0, #32
 8002a42:	f001 fa6b 	bl	8003f1c <putchar>
for(int i = 0; i<6; i++){
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	ddf6      	ble.n	8002a40 <canonFire+0x142>
}
}
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <duckExplotion>:
	blink(0);
	bgcolor(0);
	fgcolor(0);
	}

void duckExplotion(int x, int y, int *ud, int *rl){
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b096      	sub	sp, #88	; 0x58
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]

//1
	fgcolor(15);
 8002a68:	200f      	movs	r0, #15
 8002a6a:	f000 fbb5 	bl	80031d8 <fgcolor>
	gotoxy(x+2+*rl,y+1+*ud);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1c9a      	adds	r2, r3, #2
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	18d0      	adds	r0, r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4413      	add	r3, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f000 fbee 	bl	8003264 <gotoxy>
		printf("%c",219);
 8002a88:	20db      	movs	r0, #219	; 0xdb
 8002a8a:	f001 fa47 	bl	8003f1c <putchar>
//2

	fgcolor(11);
 8002a8e:	200b      	movs	r0, #11
 8002a90:	f000 fba2 	bl	80031d8 <fgcolor>
	gotoxy(x+1+*rl,y+*ud);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	18d0      	adds	r0, r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f000 fbdc 	bl	8003264 <gotoxy>
	for (int i = 0; i < 3; i++){
 8002aac:	2300      	movs	r3, #0
 8002aae:	657b      	str	r3, [r7, #84]	; 0x54
 8002ab0:	e005      	b.n	8002abe <duckExplotion+0x64>
		printf("%c",219);
 8002ab2:	20db      	movs	r0, #219	; 0xdb
 8002ab4:	f001 fa32 	bl	8003f1c <putchar>
	for (int i = 0; i < 3; i++){
 8002ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aba:	3301      	adds	r3, #1
 8002abc:	657b      	str	r3, [r7, #84]	; 0x54
 8002abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	ddf6      	ble.n	8002ab2 <duckExplotion+0x58>
	}
	gotoxy(x+1+*rl,y+1+*ud);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	18d0      	adds	r0, r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f000 fbc3 	bl	8003264 <gotoxy>
	for (int i = 0; i < 3; i++){
 8002ade:	2300      	movs	r3, #0
 8002ae0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ae2:	e005      	b.n	8002af0 <duckExplotion+0x96>
		printf("%c",219);
 8002ae4:	20db      	movs	r0, #219	; 0xdb
 8002ae6:	f001 fa19 	bl	8003f1c <putchar>
	for (int i = 0; i < 3; i++){
 8002aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aec:	3301      	adds	r3, #1
 8002aee:	653b      	str	r3, [r7, #80]	; 0x50
 8002af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	ddf6      	ble.n	8002ae4 <duckExplotion+0x8a>
	}
	gotoxy(x+1+*rl,y+2+*ud);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	18d0      	adds	r0, r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	1c9a      	adds	r2, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4413      	add	r3, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f000 fbaa 	bl	8003264 <gotoxy>
	for (int i = 0; i < 3; i++){
 8002b10:	2300      	movs	r3, #0
 8002b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b14:	e005      	b.n	8002b22 <duckExplotion+0xc8>
		printf("%c",219);
 8002b16:	20db      	movs	r0, #219	; 0xdb
 8002b18:	f001 fa00 	bl	8003f1c <putchar>
	for (int i = 0; i < 3; i++){
 8002b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1e:	3301      	adds	r3, #1
 8002b20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	ddf6      	ble.n	8002b16 <duckExplotion+0xbc>
	}



//3
	fgcolor(9);
 8002b28:	2009      	movs	r0, #9
 8002b2a:	f000 fb55 	bl	80031d8 <fgcolor>
	gotoxy(x+1+*rl,y-1+*ud);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	18d0      	adds	r0, r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	1e5a      	subs	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4413      	add	r3, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f000 fb8e 	bl	8003264 <gotoxy>
	for (int i = 0; i < 3; i++){
 8002b48:	2300      	movs	r3, #0
 8002b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b4c:	e005      	b.n	8002b5a <duckExplotion+0x100>
	printf("%c",219);
 8002b4e:	20db      	movs	r0, #219	; 0xdb
 8002b50:	f001 f9e4 	bl	8003f1c <putchar>
	for (int i = 0; i < 3; i++){
 8002b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b56:	3301      	adds	r3, #1
 8002b58:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	ddf6      	ble.n	8002b4e <duckExplotion+0xf4>
	}
	gotoxy(x+*rl,y+*ud);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	18d0      	adds	r0, r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4413      	add	r3, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	f000 fb77 	bl	8003264 <gotoxy>
	for (int i = 0; i < 5; i++){
 8002b76:	2300      	movs	r3, #0
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
 8002b7a:	e005      	b.n	8002b88 <duckExplotion+0x12e>
		printf("%c",219);
 8002b7c:	20db      	movs	r0, #219	; 0xdb
 8002b7e:	f001 f9cd 	bl	8003f1c <putchar>
	for (int i = 0; i < 5; i++){
 8002b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b84:	3301      	adds	r3, #1
 8002b86:	647b      	str	r3, [r7, #68]	; 0x44
 8002b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	ddf6      	ble.n	8002b7c <duckExplotion+0x122>
	}
	gotoxy(x+*rl,y+1+*ud);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	18d0      	adds	r0, r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f000 fb5f 	bl	8003264 <gotoxy>
	for (int i = 0; i < 5; i++){
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8002baa:	e005      	b.n	8002bb8 <duckExplotion+0x15e>
		printf("%c",219);
 8002bac:	20db      	movs	r0, #219	; 0xdb
 8002bae:	f001 f9b5 	bl	8003f1c <putchar>
	for (int i = 0; i < 5; i++){
 8002bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8002bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	ddf6      	ble.n	8002bac <duckExplotion+0x152>
	}
	gotoxy(x+*rl,y+2+*ud);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	18d0      	adds	r0, r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1c9a      	adds	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f000 fb47 	bl	8003264 <gotoxy>
	for (int i = 0; i < 5; i++){
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bda:	e005      	b.n	8002be8 <duckExplotion+0x18e>
		printf("%c",219);
 8002bdc:	20db      	movs	r0, #219	; 0xdb
 8002bde:	f001 f99d 	bl	8003f1c <putchar>
	for (int i = 0; i < 5; i++){
 8002be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be4:	3301      	adds	r3, #1
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	ddf6      	ble.n	8002bdc <duckExplotion+0x182>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	18d0      	adds	r0, r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	1cda      	adds	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f000 fb2e 	bl	8003264 <gotoxy>
	for (int i = 0; i < 3; i++){
 8002c08:	2300      	movs	r3, #0
 8002c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c0c:	e005      	b.n	8002c1a <duckExplotion+0x1c0>
	printf("%c",219);
 8002c0e:	20db      	movs	r0, #219	; 0xdb
 8002c10:	f001 f984 	bl	8003f1c <putchar>
	for (int i = 0; i < 3; i++){
 8002c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c16:	3301      	adds	r3, #1
 8002c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	ddf6      	ble.n	8002c0e <duckExplotion+0x1b4>
	}


//4
	fgcolor(1);
 8002c20:	2001      	movs	r0, #1
 8002c22:	f000 fad9 	bl	80031d8 <fgcolor>
	gotoxy(x+1+*rl,y-1+*ud);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	18d0      	adds	r0, r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1e5a      	subs	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f000 fb12 	bl	8003264 <gotoxy>
	for (int i = 0; i < 3; i++){
 8002c40:	2300      	movs	r3, #0
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
 8002c44:	e005      	b.n	8002c52 <duckExplotion+0x1f8>
	printf("%c",219);
 8002c46:	20db      	movs	r0, #219	; 0xdb
 8002c48:	f001 f968 	bl	8003f1c <putchar>
	for (int i = 0; i < 3; i++){
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4e:	3301      	adds	r3, #1
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	ddf6      	ble.n	8002c46 <duckExplotion+0x1ec>
	}
	gotoxy(x+*rl,y+*ud);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	18d0      	adds	r0, r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4413      	add	r3, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f000 fafb 	bl	8003264 <gotoxy>
	for (int i = 0; i < 5; i++){
 8002c6e:	2300      	movs	r3, #0
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
 8002c72:	e005      	b.n	8002c80 <duckExplotion+0x226>
	printf("%c",219);
 8002c74:	20db      	movs	r0, #219	; 0xdb
 8002c76:	f001 f951 	bl	8003f1c <putchar>
	for (int i = 0; i < 5; i++){
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	ddf6      	ble.n	8002c74 <duckExplotion+0x21a>
	}
	gotoxy(x-1+*rl,y+1+*ud);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1e5a      	subs	r2, r3, #1
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	18d0      	adds	r0, r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4413      	add	r3, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f000 fae2 	bl	8003264 <gotoxy>
	for (int i = 0; i < 7; i++){
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca4:	e005      	b.n	8002cb2 <duckExplotion+0x258>
	printf("%c",219);
 8002ca6:	20db      	movs	r0, #219	; 0xdb
 8002ca8:	f001 f938 	bl	8003f1c <putchar>
	for (int i = 0; i < 7; i++){
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	3301      	adds	r3, #1
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	2b06      	cmp	r3, #6
 8002cb6:	ddf6      	ble.n	8002ca6 <duckExplotion+0x24c>
	}
	gotoxy(x+*rl,y+2+*ud);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	18d0      	adds	r0, r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1c9a      	adds	r2, r3, #2
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f000 faca 	bl	8003264 <gotoxy>
	for (int i = 0; i < 5; i++){
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd4:	e005      	b.n	8002ce2 <duckExplotion+0x288>
	printf("%c",219);
 8002cd6:	20db      	movs	r0, #219	; 0xdb
 8002cd8:	f001 f920 	bl	8003f1c <putchar>
	for (int i = 0; i < 5; i++){
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	3301      	adds	r3, #1
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	ddf6      	ble.n	8002cd6 <duckExplotion+0x27c>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	18d0      	adds	r0, r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1cda      	adds	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f000 fab1 	bl	8003264 <gotoxy>
	for (int i = 0; i < 3; i++){
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
 8002d06:	e005      	b.n	8002d14 <duckExplotion+0x2ba>
	printf("%c",219);
 8002d08:	20db      	movs	r0, #219	; 0xdb
 8002d0a:	f001 f907 	bl	8003f1c <putchar>
	for (int i = 0; i < 3; i++){
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	3301      	adds	r3, #1
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	ddf6      	ble.n	8002d08 <duckExplotion+0x2ae>
	}



//DELETE
	gotoxy(x+1+*rl,y-1+*ud);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	18d0      	adds	r0, r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1e5a      	subs	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f000 fa98 	bl	8003264 <gotoxy>
	for (int i = 0; i < 3; i++){
 8002d34:	2300      	movs	r3, #0
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	e005      	b.n	8002d46 <duckExplotion+0x2ec>
	printf("%c",32);
 8002d3a:	2020      	movs	r0, #32
 8002d3c:	f001 f8ee 	bl	8003f1c <putchar>
	for (int i = 0; i < 3; i++){
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	3301      	adds	r3, #1
 8002d44:	623b      	str	r3, [r7, #32]
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	ddf6      	ble.n	8002d3a <duckExplotion+0x2e0>
	}
	gotoxy(x+*rl,y+*ud);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	18d0      	adds	r0, r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f000 fa81 	bl	8003264 <gotoxy>
	for (int i = 0; i < 5; i++){
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e005      	b.n	8002d74 <duckExplotion+0x31a>
	printf("%c",32);
 8002d68:	2020      	movs	r0, #32
 8002d6a:	f001 f8d7 	bl	8003f1c <putchar>
	for (int i = 0; i < 5; i++){
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3301      	adds	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	ddf6      	ble.n	8002d68 <duckExplotion+0x30e>
	}
	gotoxy(x-1+*rl,y+1+*ud);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1e5a      	subs	r2, r3, #1
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	18d0      	adds	r0, r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f000 fa68 	bl	8003264 <gotoxy>
	for (int i = 0; i < 7; i++){
 8002d94:	2300      	movs	r3, #0
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	e005      	b.n	8002da6 <duckExplotion+0x34c>
	printf("%c",32);
 8002d9a:	2020      	movs	r0, #32
 8002d9c:	f001 f8be 	bl	8003f1c <putchar>
	for (int i = 0; i < 7; i++){
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	3301      	adds	r3, #1
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	ddf6      	ble.n	8002d9a <duckExplotion+0x340>
	}
	gotoxy(x+*rl,y+2+*ud);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	18d0      	adds	r0, r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	1c9a      	adds	r2, r3, #2
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f000 fa50 	bl	8003264 <gotoxy>
	for (int i = 0; i < 5; i++){
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e005      	b.n	8002dd6 <duckExplotion+0x37c>
	printf("%c",32);
 8002dca:	2020      	movs	r0, #32
 8002dcc:	f001 f8a6 	bl	8003f1c <putchar>
	for (int i = 0; i < 5; i++){
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	ddf6      	ble.n	8002dca <duckExplotion+0x370>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	18d0      	adds	r0, r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1cda      	adds	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	f000 fa37 	bl	8003264 <gotoxy>
	for (int i = 0; i < 3; i++){
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	e005      	b.n	8002e08 <duckExplotion+0x3ae>
	printf("%c",32);
 8002dfc:	2020      	movs	r0, #32
 8002dfe:	f001 f88d 	bl	8003f1c <putchar>
	for (int i = 0; i < 3; i++){
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	3301      	adds	r3, #1
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	ddf6      	ble.n	8002dfc <duckExplotion+0x3a2>
	}
	fgcolor(0);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f000 f9e2 	bl	80031d8 <fgcolor>
	}
 8002e14:	bf00      	nop
 8002e16:	3758      	adds	r7, #88	; 0x58
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <intiJoystick>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi_S.h"
#include "joystick.h"

void intiJoystick(){
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8002e20:	4b46      	ldr	r3, [pc, #280]	; (8002f3c <intiJoystick+0x120>)
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	4a45      	ldr	r2, [pc, #276]	; (8002f3c <intiJoystick+0x120>)
 8002e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
 8002e2c:	4b43      	ldr	r3, [pc, #268]	; (8002f3c <intiJoystick+0x120>)
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	4a42      	ldr	r2, [pc, #264]	; (8002f3c <intiJoystick+0x120>)
 8002e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e36:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 8002e38:	4b40      	ldr	r3, [pc, #256]	; (8002f3c <intiJoystick+0x120>)
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	4a3f      	ldr	r2, [pc, #252]	; (8002f3c <intiJoystick+0x120>)
 8002e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e42:	6153      	str	r3, [r2, #20]

	// Set pin PC0 to input
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8002e44:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <intiJoystick+0x124>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a3d      	ldr	r2, [pc, #244]	; (8002f40 <intiJoystick+0x124>)
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (0 * 2));	// Set mode register
 8002e50:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <intiJoystick+0x124>)
 8002e52:	4a3b      	ldr	r2, [pc, #236]	; (8002f40 <intiJoystick+0x124>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <intiJoystick+0x124>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <intiJoystick+0x124>)
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (0 * 2));// Set push/pull register
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <intiJoystick+0x124>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a35      	ldr	r2, [pc, #212]	; (8002f40 <intiJoystick+0x124>)
 8002e6a:	f043 0302 	orr.w	r3, r3, #2
 8002e6e:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PA4 to input
	GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8002e70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x00000000 << (4 * 2)); // Set mode register
 8002e80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOA->PUPDR &= ~(0x00000003 << (4 * 2)); // Clear push/pull register
 8002e8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x00000002 << (4 * 2)); // Set push/pull register
 8002e9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eaa:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB5 to input
	GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <intiJoystick+0x128>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <intiJoystick+0x128>)
 8002eb2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002eb6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (5 * 2)); // Set mode register
 8002eb8:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <intiJoystick+0x128>)
 8002eba:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <intiJoystick+0x128>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIOB->PUPDR &= ~(0x00000003 << (5 * 2)); // Clear push/pull register
 8002ec0:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <intiJoystick+0x128>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a1f      	ldr	r2, [pc, #124]	; (8002f44 <intiJoystick+0x128>)
 8002ec6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002eca:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (5 * 2)); // Set push/pull register
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <intiJoystick+0x128>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	; (8002f44 <intiJoystick+0x128>)
 8002ed2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ed6:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PC1 to input
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <intiJoystick+0x124>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <intiJoystick+0x124>)
 8002ede:	f023 030c 	bic.w	r3, r3, #12
 8002ee2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (1 * 2)); // Set mode register
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <intiJoystick+0x124>)
 8002ee6:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <intiJoystick+0x124>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); // Clear push/pull register
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <intiJoystick+0x124>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <intiJoystick+0x124>)
 8002ef2:	f023 030c 	bic.w	r3, r3, #12
 8002ef6:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (1 * 2)); // Set push/pull register
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <intiJoystick+0x124>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a10      	ldr	r2, [pc, #64]	; (8002f40 <intiJoystick+0x124>)
 8002efe:	f043 0308 	orr.w	r3, r3, #8
 8002f02:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB0 to input
	GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <intiJoystick+0x128>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <intiJoystick+0x128>)
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (0 * 2)); // Set mode register
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <intiJoystick+0x128>)
 8002f12:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <intiJoystick+0x128>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <intiJoystick+0x128>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <intiJoystick+0x128>)
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (0 * 2)); // Set push/pull register
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <intiJoystick+0x128>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <intiJoystick+0x128>)
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	60d3      	str	r3, [r2, #12]
	// 0x00 - No pull
	// 0x01 - Pull-up
	// 0x02 - Pull-down

}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	48000800 	.word	0x48000800
 8002f44:	48000400 	.word	0x48000400

08002f48 <readJoystick>:


void readJoystick(){
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
	int32_t a = GPIOC->IDR & (0x0001 << 0); //Read from pin PCx - right
 8002f4e:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <readJoystick+0xa0>)
 8002f50:	8a1b      	ldrh	r3, [r3, #16]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	607b      	str	r3, [r7, #4]
	int32_t b = GPIOA->IDR & (0x0001 << 4); //Read from pin PCx - up
 8002f5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f5e:	8a1b      	ldrh	r3, [r3, #16]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	617b      	str	r3, [r7, #20]
	int32_t c = GPIOB->IDR & (0x0001 << 5); //Read from pin PCx - center
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <readJoystick+0xa4>)
 8002f6a:	8a1b      	ldrh	r3, [r3, #16]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	613b      	str	r3, [r7, #16]
	int32_t d = GPIOC->IDR & (0x0001 << 1); //Read from pin PCx - left
 8002f74:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <readJoystick+0xa0>)
 8002f76:	8a1b      	ldrh	r3, [r3, #16]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	60fb      	str	r3, [r7, #12]
	int32_t e = GPIOB->IDR & (0x0001 << 0); //Read from pin PCx - down
 8002f80:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <readJoystick+0xa4>)
 8002f82:	8a1b      	ldrh	r3, [r3, #16]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]

	if(b){b = 1;}
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <readJoystick+0x4e>
 8002f92:	2301      	movs	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
	if(c){c = 1;}
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <readJoystick+0x58>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
	if(d){d = 1;}
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <readJoystick+0x62>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
	if(e){e = 1;}
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <readJoystick+0x6c>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]

	joy.right 	= a;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	b25a      	sxtb	r2, r3
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <readJoystick+0xa8>)
 8002fba:	70da      	strb	r2, [r3, #3]
	joy.up 		= b;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	b25a      	sxtb	r2, r3
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <readJoystick+0xa8>)
 8002fc2:	701a      	strb	r2, [r3, #0]
	joy.center	= c;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	b25a      	sxtb	r2, r3
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <readJoystick+0xa8>)
 8002fca:	711a      	strb	r2, [r3, #4]
	joy.left	= d;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	b25a      	sxtb	r2, r3
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <readJoystick+0xa8>)
 8002fd2:	709a      	strb	r2, [r3, #2]
	joy.down 	= e;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	b25a      	sxtb	r2, r3
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <readJoystick+0xa8>)
 8002fda:	705a      	strb	r2, [r3, #1]

}
 8002fdc:	bf00      	nop
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	48000800 	.word	0x48000800
 8002fec:	48000400 	.word	0x48000400
 8002ff0:	200001e0 	.word	0x200001e0

08002ff4 <copyJoystick>:

void copyJoystick() {
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
	CJoy.up = joy.up;
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <copyJoystick+0x40>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b25a      	sxtb	r2, r3
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <copyJoystick+0x44>)
 8003000:	701a      	strb	r2, [r3, #0]
	CJoy.down = joy.down;
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <copyJoystick+0x40>)
 8003004:	785b      	ldrb	r3, [r3, #1]
 8003006:	b25a      	sxtb	r2, r3
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <copyJoystick+0x44>)
 800300a:	705a      	strb	r2, [r3, #1]
	CJoy.left = joy.left;
 800300c:	4b09      	ldr	r3, [pc, #36]	; (8003034 <copyJoystick+0x40>)
 800300e:	789b      	ldrb	r3, [r3, #2]
 8003010:	b25a      	sxtb	r2, r3
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <copyJoystick+0x44>)
 8003014:	709a      	strb	r2, [r3, #2]
	CJoy.right = joy.right;
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <copyJoystick+0x40>)
 8003018:	78db      	ldrb	r3, [r3, #3]
 800301a:	b25a      	sxtb	r2, r3
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <copyJoystick+0x44>)
 800301e:	70da      	strb	r2, [r3, #3]
	CJoy.center = joy.center;
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <copyJoystick+0x40>)
 8003022:	791b      	ldrb	r3, [r3, #4]
 8003024:	b25a      	sxtb	r2, r3
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <copyJoystick+0x44>)
 8003028:	711a      	strb	r2, [r3, #4]
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	200001e0 	.word	0x200001e0
 8003038:	200001e8 	.word	0x200001e8

0800303c <initLed>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi_S.h"

void initLed(){
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
	// Set pin PA9 to output - BLUE LED
	GPIOA->OSPEEDR &= ~(0x00000003 << (9 * 2)); // Clear speed register
 8003040:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800304a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800304e:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (9 * 2)); // set speed register
 8003050:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800305a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800305e:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOA->OTYPER &= ~(0x0001 << (9 * 1)); // Clear output type register
 8003060:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003064:	889b      	ldrh	r3, [r3, #4]
 8003066:	b29b      	uxth	r3, r3
 8003068:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800306c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003070:	b29b      	uxth	r3, r3
 8003072:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER |= (0x0000 << (9)); // Set output type register
 8003074:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003078:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800307c:	8892      	ldrh	r2, [r2, #4]
 800307e:	b292      	uxth	r2, r2
 8003080:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOA->MODER &= ~(0x00000003 << (9 * 2)); // Clear mode register
 8003082:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800308c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003090:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000001 << (9 * 2)); // Set mode register
 8003092:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800309c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PC7 to output - GREEN LED
	GPIOC->OSPEEDR &= ~(0x00000003 << (7 * 2)); // Clear speed register
 80030a2:	4b27      	ldr	r3, [pc, #156]	; (8003140 <initLed+0x104>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	4a26      	ldr	r2, [pc, #152]	; (8003140 <initLed+0x104>)
 80030a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030ac:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (7 * 2)); // set speed register
 80030ae:	4b24      	ldr	r3, [pc, #144]	; (8003140 <initLed+0x104>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	4a23      	ldr	r2, [pc, #140]	; (8003140 <initLed+0x104>)
 80030b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b8:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOC->OTYPER &= ~(0x0001 << (7 * 1)); // Clear output type register
 80030ba:	4b21      	ldr	r3, [pc, #132]	; (8003140 <initLed+0x104>)
 80030bc:	889b      	ldrh	r3, [r3, #4]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4a1f      	ldr	r2, [pc, #124]	; (8003140 <initLed+0x104>)
 80030c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	8093      	strh	r3, [r2, #4]
	GPIOC->OTYPER |= (0x0000 << (7)); // Set output type register
 80030ca:	4a1d      	ldr	r2, [pc, #116]	; (8003140 <initLed+0x104>)
 80030cc:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <initLed+0x104>)
 80030ce:	8892      	ldrh	r2, [r2, #4]
 80030d0:	b292      	uxth	r2, r2
 80030d2:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOC->MODER &= ~(0x00000003 << (7 * 2)); // Clear mode register
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <initLed+0x104>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a19      	ldr	r2, [pc, #100]	; (8003140 <initLed+0x104>)
 80030da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030de:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000001 << (7 * 2)); // Set mode register
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <initLed+0x104>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a16      	ldr	r2, [pc, #88]	; (8003140 <initLed+0x104>)
 80030e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ea:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PB4 to output - RED LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (4 * 2)); // Clear speed register
 80030ec:	4b15      	ldr	r3, [pc, #84]	; (8003144 <initLed+0x108>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <initLed+0x108>)
 80030f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f6:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (4 * 2)); // set speed register
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <initLed+0x108>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a11      	ldr	r2, [pc, #68]	; (8003144 <initLed+0x108>)
 80030fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003102:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (4 * 1)); // Clear output type register
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <initLed+0x108>)
 8003106:	889b      	ldrh	r3, [r3, #4]
 8003108:	b29b      	uxth	r3, r3
 800310a:	4a0e      	ldr	r2, [pc, #56]	; (8003144 <initLed+0x108>)
 800310c:	f023 0310 	bic.w	r3, r3, #16
 8003110:	b29b      	uxth	r3, r3
 8003112:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (4)); // Set output type register
 8003114:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <initLed+0x108>)
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <initLed+0x108>)
 8003118:	8892      	ldrh	r2, [r2, #4]
 800311a:	b292      	uxth	r2, r2
 800311c:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <initLed+0x108>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a08      	ldr	r2, [pc, #32]	; (8003144 <initLed+0x108>)
 8003124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003128:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000001 << (4 * 2)); // Set mode register
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <initLed+0x108>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <initLed+0x108>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003134:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	48000800 	.word	0x48000800
 8003144:	48000400 	.word	0x48000400

08003148 <writeLed>:


void writeLed(){
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0

	// Right - Blue
	if(led.blu){
 800314c:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <writeLed+0x84>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <writeLed+0x1c>
		GPIOA->ODR &= (0x0000 << 9); //Set pin PA9 to low - on
 8003154:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003158:	8a9b      	ldrh	r3, [r3, #20]
 800315a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800315e:	2200      	movs	r2, #0
 8003160:	829a      	strh	r2, [r3, #20]
 8003162:	e009      	b.n	8003178 <writeLed+0x30>
	}
	else{
		GPIOA->ODR |= (0x0001 << 9); //Set pin PA9 to high - off
 8003164:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003168:	8a9b      	ldrh	r3, [r3, #20]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003174:	b29b      	uxth	r3, r3
 8003176:	8293      	strh	r3, [r2, #20]
	}


	// Up - Green
	if(led.gre){
 8003178:	4b14      	ldr	r3, [pc, #80]	; (80031cc <writeLed+0x84>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <writeLed+0x44>
		GPIOC->ODR &= (0x0000 << 7); //Set pin PC7 to low - on
 8003180:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <writeLed+0x88>)
 8003182:	8a9b      	ldrh	r3, [r3, #20]
 8003184:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <writeLed+0x88>)
 8003186:	2200      	movs	r2, #0
 8003188:	829a      	strh	r2, [r3, #20]
 800318a:	e007      	b.n	800319c <writeLed+0x54>
	}
	else{
		GPIOC->ODR |= (0x0001 << 7); //Set pin PC7 to high - off
 800318c:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <writeLed+0x88>)
 800318e:	8a9b      	ldrh	r3, [r3, #20]
 8003190:	b29b      	uxth	r3, r3
 8003192:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <writeLed+0x88>)
 8003194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003198:	b29b      	uxth	r3, r3
 800319a:	8293      	strh	r3, [r2, #20]
	}


	// Left - Red
	if(led.gre){
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <writeLed+0x84>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <writeLed+0x68>
		GPIOB->ODR &= (0x0000 << 4); //Set pin PB4 to low - on
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <writeLed+0x8c>)
 80031a6:	8a9b      	ldrh	r3, [r3, #20]
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <writeLed+0x8c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	829a      	strh	r2, [r3, #20]
	}
	else{
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
	}

}
 80031ae:	e007      	b.n	80031c0 <writeLed+0x78>
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <writeLed+0x8c>)
 80031b2:	8a9b      	ldrh	r3, [r3, #20]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <writeLed+0x8c>)
 80031b8:	f043 0310 	orr.w	r3, r3, #16
 80031bc:	b29b      	uxth	r3, r3
 80031be:	8293      	strh	r3, [r2, #20]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	200001c0 	.word	0x200001c0
 80031d0:	48000800 	.word	0x48000800
 80031d4:	48000400 	.word	0x48000400

080031d8 <fgcolor>:
#include "ansi_S.h"

void fgcolor(uint8_t foreground) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
	 4        Blue            12       Light Blue
	 5        Purple          13       Light Purple
	 6        Cyan            14       Light Cyan
	 7        Light Gray      15       White
	 */
	uint8_t type = 22;             // normal text
 80031e2:	2316      	movs	r3, #22
 80031e4:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	2b07      	cmp	r3, #7
 80031ea:	d904      	bls.n	80031f6 <fgcolor+0x1e>
		type = 1;                // bold text
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	3b08      	subs	r3, #8
 80031f4:	71fb      	strb	r3, [r7, #7]
	}
	printf("%c[%d;%dm", ESC, type, foreground + 30);
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	331e      	adds	r3, #30
 80031fc:	211b      	movs	r1, #27
 80031fe:	4803      	ldr	r0, [pc, #12]	; (800320c <fgcolor+0x34>)
 8003200:	f000 fe74 	bl	8003eec <iprintf>
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	08005020 	.word	0x08005020

08003210 <bgcolor>:

void bgcolor(uint8_t background) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
	 4        Blue
	 5        Purple
	 6        Cyan
	 7        Gray
	 */
	printf("%c[%dm", ESC, background + 40);
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	3328      	adds	r3, #40	; 0x28
 800321e:	461a      	mov	r2, r3
 8003220:	211b      	movs	r1, #27
 8003222:	4803      	ldr	r0, [pc, #12]	; (8003230 <bgcolor+0x20>)
 8003224:	f000 fe62 	bl	8003eec <iprintf>
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	0800502c 	.word	0x0800502c

08003234 <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
}

void clrscr() {
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <clrscr+0x24>)
 800323a:	211b      	movs	r1, #27
 800323c:	4807      	ldr	r0, [pc, #28]	; (800325c <clrscr+0x28>)
 800323e:	f000 fe55 	bl	8003eec <iprintf>
	printf("%c[%s", ESC, "3J");
 8003242:	4a07      	ldr	r2, [pc, #28]	; (8003260 <clrscr+0x2c>)
 8003244:	211b      	movs	r1, #27
 8003246:	4805      	ldr	r0, [pc, #20]	; (800325c <clrscr+0x28>)
 8003248:	f000 fe50 	bl	8003eec <iprintf>
	gotoxy(1,1);
 800324c:	2101      	movs	r1, #1
 800324e:	2001      	movs	r0, #1
 8003250:	f000 f808 	bl	8003264 <gotoxy>
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	0800504c 	.word	0x0800504c
 800325c:	08005050 	.word	0x08005050
 8003260:	08005058 	.word	0x08005058

08003264 <gotoxy>:

void clreol() {
	printf("%c[%s", ESC, "2k");
}

void gotoxy(int c, int r) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", ESC, r, c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	211b      	movs	r1, #27
 8003274:	4803      	ldr	r0, [pc, #12]	; (8003284 <gotoxy+0x20>)
 8003276:	f000 fe39 	bl	8003eec <iprintf>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	08005060 	.word	0x08005060

08003288 <main>:
#include "joystick.h"
#include "timer.h"


int main(void)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b095      	sub	sp, #84	; 0x54
 800328c:	af02      	add	r7, sp, #8
	uart_init(250000);
 800328e:	48d1      	ldr	r0, [pc, #836]	; (80035d4 <main+0x34c>)
 8003290:	f7fd fba0 	bl	80009d4 <uart_init>
	clrscr();
 8003294:	f7ff ffce 	bl	8003234 <clrscr>
	intiJoystick();
 8003298:	f7ff fdc0 	bl	8002e1c <intiJoystick>
	startWindow(1,1,184,58);
 800329c:	233a      	movs	r3, #58	; 0x3a
 800329e:	22b8      	movs	r2, #184	; 0xb8
 80032a0:	2101      	movs	r1, #1
 80032a2:	2001      	movs	r0, #1
 80032a4:	f7fd fcb0 	bl	8000c08 <startWindow>
	initLed();
 80032a8:	f7ff fec8 	bl	800303c <initLed>
	initTimer();
 80032ac:	f000 fd0e 	bl	8003ccc <initTimer>
	refreshRate = 5;
 80032b0:	4bc9      	ldr	r3, [pc, #804]	; (80035d8 <main+0x350>)
 80032b2:	2205      	movs	r2, #5
 80032b4:	601a      	str	r2, [r3, #0]
	duck_t duck1;
	duck_t duck2;
	spaceship_t SS;
	spaceship(2,27,91,31);
 80032b6:	231f      	movs	r3, #31
 80032b8:	225b      	movs	r2, #91	; 0x5b
 80032ba:	211b      	movs	r1, #27
 80032bc:	2002      	movs	r0, #2
 80032be:	f7fd fcf9 	bl	8000cb4 <spaceship>
	playerInSpaceR(1,23,24);
 80032c2:	2218      	movs	r2, #24
 80032c4:	2117      	movs	r1, #23
 80032c6:	2001      	movs	r0, #1
 80032c8:	f7fe fa36 	bl	8001738 <playerInSpaceR>
	playerInSpaceUSDR(2,23,32);
 80032cc:	2220      	movs	r2, #32
 80032ce:	2117      	movs	r1, #23
 80032d0:	2002      	movs	r0, #2
 80032d2:	f7fe fc33 	bl	8001b3c <playerInSpaceUSDR>
	SS.ud = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	753b      	strb	r3, [r7, #20]
	duck1.rl=0;
 80032da:	2300      	movs	r3, #0
 80032dc:	777b      	strb	r3, [r7, #29]
	duck1.ud=0;
 80032de:	2300      	movs	r3, #0
 80032e0:	773b      	strb	r3, [r7, #28]
	duck2.rl = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	767b      	strb	r3, [r7, #25]
	duck2.ud = 8;
 80032e6:	2308      	movs	r3, #8
 80032e8:	763b      	strb	r3, [r7, #24]

	tid.min = 10;
 80032ea:	4bbc      	ldr	r3, [pc, #752]	; (80035dc <main+0x354>)
 80032ec:	220a      	movs	r2, #10
 80032ee:	701a      	strb	r2, [r3, #0]
	tid.sek = 10;
 80032f0:	4bba      	ldr	r3, [pc, #744]	; (80035dc <main+0x354>)
 80032f2:	220a      	movs	r2, #10
 80032f4:	705a      	strb	r2, [r3, #1]
	tid.mil = 0;
 80032f6:	4bb9      	ldr	r3, [pc, #740]	; (80035dc <main+0x354>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	709a      	strb	r2, [r3, #2]
	tid.state = 1;
 80032fc:	4bb7      	ldr	r3, [pc, #732]	; (80035dc <main+0x354>)
 80032fe:	2201      	movs	r2, #1
 8003300:	70da      	strb	r2, [r3, #3]

	int i=0, keyW=0, keyA=0, keyS=0, keyD=0, keyE=0;
 8003302:	2300      	movs	r3, #0
 8003304:	643b      	str	r3, [r7, #64]	; 0x40
 8003306:	2300      	movs	r3, #0
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330a:	2300      	movs	r3, #0
 800330c:	63bb      	str	r3, [r7, #56]	; 0x38
 800330e:	2300      	movs	r3, #0
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
 8003312:	2300      	movs	r3, #0
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
 8003316:	2300      	movs	r3, #0
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
	uart_clear();
 800331a:	f7fd fb39 	bl	8000990 <uart_clear>
	char random;
	int buffer_lenght;

	int ud1 =0, lr1 =0, ud2 = 8, lr2 = 0, a = 0, b=0;
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	2308      	movs	r3, #8
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	2300      	movs	r3, #0
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
	while(1){

		readJoystick();
 8003336:	f7ff fe07 	bl	8002f48 <readJoystick>
		gotoxy(10,10);
 800333a:	210a      	movs	r1, #10
 800333c:	200a      	movs	r0, #10
 800333e:	f7ff ff91 	bl	8003264 <gotoxy>
		printf("Duck1 ud:%d  Duck1 rl:%d  Duck2 ud:%d Duck2 rl:%d   SS.ud = %d",duck1.ud, duck1.rl, duck2.ud, duck2.rl,SS.ud);
 8003342:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003346:	4619      	mov	r1, r3
 8003348:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800334c:	4618      	mov	r0, r3
 800334e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003352:	461c      	mov	r4, r3
 8003354:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003358:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800335c:	9201      	str	r2, [sp, #4]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	4623      	mov	r3, r4
 8003362:	4602      	mov	r2, r0
 8003364:	489e      	ldr	r0, [pc, #632]	; (80035e0 <main+0x358>)
 8003366:	f000 fdc1 	bl	8003eec <iprintf>

		fire(2,27+SS.ud,91,31+SS.ud);
 800336a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800336e:	f103 011b 	add.w	r1, r3, #27
 8003372:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003376:	331f      	adds	r3, #31
 8003378:	225b      	movs	r2, #91	; 0x5b
 800337a:	2002      	movs	r0, #2
 800337c:	f7fd fe76 	bl	800106c <fire>

		if(duck1.ud == SS.ud) {
 8003380:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8003384:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	d136      	bne.n	80033fa <main+0x172>
		goDuckUP1(1,22,24,&ud1,&lr1,&duck1);
 800338c:	f107 0210 	add.w	r2, r7, #16
 8003390:	f107 031c 	add.w	r3, r7, #28
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	f107 030c 	add.w	r3, r7, #12
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	2218      	movs	r2, #24
 80033a0:	2116      	movs	r1, #22
 80033a2:	2001      	movs	r0, #1
 80033a4:	f7fe fc78 	bl	8001c98 <goDuckUP1>
		if(duck1.rl == 5 && duck2.ud == SS.ud && joy.up){
 80033a8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d124      	bne.n	80033fa <main+0x172>
 80033b0:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80033b4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d11e      	bne.n	80033fa <main+0x172>
 80033bc:	4b89      	ldr	r3, [pc, #548]	; (80035e4 <main+0x35c>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b25b      	sxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d019      	beq.n	80033fa <main+0x172>
		key.up = 1;
 80033c6:	4b88      	ldr	r3, [pc, #544]	; (80035e8 <main+0x360>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	701a      	strb	r2, [r3, #0]
		goDuckUP2(2,22,24,&ud2,&lr2,&duck2);
 80033cc:	f107 0208 	add.w	r2, r7, #8
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	4613      	mov	r3, r2
 80033dc:	2218      	movs	r2, #24
 80033de:	2116      	movs	r1, #22
 80033e0:	2002      	movs	r0, #2
 80033e2:	f7fe fd5f 	bl	8001ea4 <goDuckUP2>
		key.up = 0;
 80033e6:	4b80      	ldr	r3, [pc, #512]	; (80035e8 <main+0x360>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
		ud2 = 0, lr2 = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	2300      	movs	r3, #0
 80033f2:	607b      	str	r3, [r7, #4]
		duck2.ud = SS.ud;
 80033f4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80033f8:	763b      	strb	r3, [r7, #24]
		}
		}

		if(duck1.ud == SS.ud + 4 || duck1.ud == SS.ud - 4){
 80033fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80033fe:	461a      	mov	r2, r3
 8003400:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003404:	3304      	adds	r3, #4
 8003406:	429a      	cmp	r2, r3
 8003408:	d007      	beq.n	800341a <main+0x192>
 800340a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800340e:	461a      	mov	r2, r3
 8003410:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003414:	3b04      	subs	r3, #4
 8003416:	429a      	cmp	r2, r3
 8003418:	d121      	bne.n	800345e <main+0x1d6>
		goDuckMID1(1,22,24,&ud1,&lr1,&duck1);
 800341a:	f107 0210 	add.w	r2, r7, #16
 800341e:	f107 031c 	add.w	r3, r7, #28
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	2218      	movs	r2, #24
 800342e:	2116      	movs	r1, #22
 8003430:	2001      	movs	r0, #1
 8003432:	f7fe fe27 	bl	8002084 <goDuckMID1>
		if(duck1.rl == 55 && joy.right && !CJoy.right){
 8003436:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800343a:	2b37      	cmp	r3, #55	; 0x37
 800343c:	d10f      	bne.n	800345e <main+0x1d6>
 800343e:	4b69      	ldr	r3, [pc, #420]	; (80035e4 <main+0x35c>)
 8003440:	78db      	ldrb	r3, [r3, #3]
 8003442:	b25b      	sxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <main+0x1d6>
 8003448:	4b68      	ldr	r3, [pc, #416]	; (80035ec <main+0x364>)
 800344a:	78db      	ldrb	r3, [r3, #3]
 800344c:	b25b      	sxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <main+0x1d6>
			canonFire(2,SS.ud);
 8003452:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003456:	4619      	mov	r1, r3
 8003458:	2002      	movs	r0, #2
 800345a:	f7ff fa50 	bl	80028fe <canonFire>
		}
		}

		if(duck1.ud == SS.ud+8) {
 800345e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003462:	461a      	mov	r2, r3
 8003464:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003468:	3308      	adds	r3, #8
 800346a:	429a      	cmp	r2, r3
 800346c:	d10d      	bne.n	800348a <main+0x202>
		goDuckUSD1(1,22,24,&ud1,&lr1,&duck1);
 800346e:	f107 0210 	add.w	r2, r7, #16
 8003472:	f107 031c 	add.w	r3, r7, #28
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	2218      	movs	r2, #24
 8003482:	2116      	movs	r1, #22
 8003484:	2001      	movs	r0, #1
 8003486:	f7fe ffef 	bl	8002468 <goDuckUSD1>
		}

		if(duck1.rl == 5 && joy.up && !CJoy.up && SS.ud == duck1.ud+1 & SS.ud != -20){
 800348a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800348e:	2b05      	cmp	r3, #5
 8003490:	d152      	bne.n	8003538 <main+0x2b0>
 8003492:	4b54      	ldr	r3, [pc, #336]	; (80035e4 <main+0x35c>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b25b      	sxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d04d      	beq.n	8003538 <main+0x2b0>
 800349c:	4b53      	ldr	r3, [pc, #332]	; (80035ec <main+0x364>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d148      	bne.n	8003538 <main+0x2b0>
 80034a6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80034b0:	3301      	adds	r3, #1
 80034b2:	429a      	cmp	r2, r3
 80034b4:	bf0c      	ite	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	2300      	movne	r3, #0
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80034c0:	f113 0f14 	cmn.w	r3, #20
 80034c4:	bf14      	ite	ne
 80034c6:	2301      	movne	r3, #1
 80034c8:	2300      	moveq	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	4013      	ands	r3, r2
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d031      	beq.n	8003538 <main+0x2b0>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 80034d4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80034d8:	f103 011b 	add.w	r1, r3, #27
 80034dc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80034e0:	331f      	adds	r3, #31
 80034e2:	225b      	movs	r2, #91	; 0x5b
 80034e4:	2002      	movs	r0, #2
 80034e6:	f7fd fd13 	bl	8000f10 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 80034ea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80034ee:	f103 011b 	add.w	r1, r3, #27
 80034f2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80034f6:	331f      	adds	r3, #31
 80034f8:	225b      	movs	r2, #91	; 0x5b
 80034fa:	2002      	movs	r0, #2
 80034fc:	f7fd ff96 	bl	800142c <fireDelete>
		SS.ud -= 1;
 8003500:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	b25b      	sxtb	r3, r3
 800350c:	753b      	strb	r3, [r7, #20]
		duck2.ud = duck2.ud+SS.ud;
 800350e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4413      	add	r3, r2
 800351c:	b2db      	uxtb	r3, r3
 800351e:	b25b      	sxtb	r3, r3
 8003520:	763b      	strb	r3, [r7, #24]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 8003522:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003526:	f103 011b 	add.w	r1, r3, #27
 800352a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800352e:	331f      	adds	r3, #31
 8003530:	225b      	movs	r2, #91	; 0x5b
 8003532:	2002      	movs	r0, #2
 8003534:	f7fd fbbe 	bl	8000cb4 <spaceship>
		}

		if(duck1.rl == 5 && joy.up && !CJoy.up && SS.ud == duck1.ud-9 && SS.ud != 21){
 8003538:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800353c:	2b05      	cmp	r3, #5
 800353e:	d157      	bne.n	80035f0 <main+0x368>
 8003540:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <main+0x35c>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b25b      	sxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d052      	beq.n	80035f0 <main+0x368>
 800354a:	4b28      	ldr	r3, [pc, #160]	; (80035ec <main+0x364>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b25b      	sxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d14d      	bne.n	80035f0 <main+0x368>
 8003554:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003558:	461a      	mov	r2, r3
 800355a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800355e:	3b09      	subs	r3, #9
 8003560:	429a      	cmp	r2, r3
 8003562:	d145      	bne.n	80035f0 <main+0x368>
 8003564:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003568:	2b15      	cmp	r3, #21
 800356a:	d041      	beq.n	80035f0 <main+0x368>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 800356c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003570:	f103 011b 	add.w	r1, r3, #27
 8003574:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003578:	331f      	adds	r3, #31
 800357a:	225b      	movs	r2, #91	; 0x5b
 800357c:	2002      	movs	r0, #2
 800357e:	f7fd fcc7 	bl	8000f10 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8003582:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003586:	f103 011b 	add.w	r1, r3, #27
 800358a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800358e:	331f      	adds	r3, #31
 8003590:	225b      	movs	r2, #91	; 0x5b
 8003592:	2002      	movs	r0, #2
 8003594:	f7fd ff4a 	bl	800142c <fireDelete>
		SS.ud += 1;
 8003598:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	b25b      	sxtb	r3, r3
 80035a4:	753b      	strb	r3, [r7, #20]
		duck2.ud = duck2.ud+SS.ud;
 80035a6:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	763b      	strb	r3, [r7, #24]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 80035ba:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80035be:	f103 011b 	add.w	r1, r3, #27
 80035c2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80035c6:	331f      	adds	r3, #31
 80035c8:	225b      	movs	r2, #91	; 0x5b
 80035ca:	2002      	movs	r0, #2
 80035cc:	f7fd fb72 	bl	8000cb4 <spaceship>
 80035d0:	e00e      	b.n	80035f0 <main+0x368>
 80035d2:	bf00      	nop
 80035d4:	0003d090 	.word	0x0003d090
 80035d8:	200001dc 	.word	0x200001dc
 80035dc:	200001cc 	.word	0x200001cc
 80035e0:	08005074 	.word	0x08005074
 80035e4:	200001e0 	.word	0x200001e0
 80035e8:	200001d4 	.word	0x200001d4
 80035ec:	200001e8 	.word	0x200001e8
		}

		if (joy.up && duck1.rl != 5 && duck1.ud == SS.ud -1) {
 80035f0:	4bd5      	ldr	r3, [pc, #852]	; (8003948 <main+0x6c0>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	b25b      	sxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d020      	beq.n	800363c <main+0x3b4>
 80035fa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d01c      	beq.n	800363c <main+0x3b4>
 8003602:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003606:	461a      	mov	r2, r3
 8003608:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800360c:	3b01      	subs	r3, #1
 800360e:	429a      	cmp	r2, r3
 8003610:	d114      	bne.n	800363c <main+0x3b4>
		duckExplotion(22,24,&ud1,&lr1);
 8003612:	f107 030c 	add.w	r3, r7, #12
 8003616:	f107 0210 	add.w	r2, r7, #16
 800361a:	2118      	movs	r1, #24
 800361c:	2016      	movs	r0, #22
 800361e:	f7ff fa1c 	bl	8002a5a <duckExplotion>
		playerInSpaceR(1,23,24);
 8003622:	2218      	movs	r2, #24
 8003624:	2117      	movs	r1, #23
 8003626:	2001      	movs	r0, #1
 8003628:	f7fe f886 	bl	8001738 <playerInSpaceR>
		ud1 = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
		duck1.ud = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	773b      	strb	r3, [r7, #28]
		duck1.rl = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	777b      	strb	r3, [r7, #29]
		}
		if (duck1.rl == 65){
 800363c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003640:	2b41      	cmp	r3, #65	; 0x41
 8003642:	d114      	bne.n	800366e <main+0x3e6>
		duckExplotion(22,24,&ud1,&lr1);
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	f107 0210 	add.w	r2, r7, #16
 800364c:	2118      	movs	r1, #24
 800364e:	2016      	movs	r0, #22
 8003650:	f7ff fa03 	bl	8002a5a <duckExplotion>
		playerInSpaceR(1,23,24);
 8003654:	2218      	movs	r2, #24
 8003656:	2117      	movs	r1, #23
 8003658:	2001      	movs	r0, #1
 800365a:	f7fe f86d 	bl	8001738 <playerInSpaceR>
		ud1 = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
		duck1.ud = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	773b      	strb	r3, [r7, #28]
		duck1.rl = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	777b      	strb	r3, [r7, #29]
		}
		if (joy.up && duck1.rl != 5 && duck1.ud == SS.ud +9) {
 800366e:	4bb6      	ldr	r3, [pc, #728]	; (8003948 <main+0x6c0>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b25b      	sxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <main+0x432>
 8003678:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d01c      	beq.n	80036ba <main+0x432>
 8003680:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003684:	461a      	mov	r2, r3
 8003686:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800368a:	3309      	adds	r3, #9
 800368c:	429a      	cmp	r2, r3
 800368e:	d114      	bne.n	80036ba <main+0x432>
		duckExplotion(22,24,&ud1,&lr1);
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	f107 0210 	add.w	r2, r7, #16
 8003698:	2118      	movs	r1, #24
 800369a:	2016      	movs	r0, #22
 800369c:	f7ff f9dd 	bl	8002a5a <duckExplotion>
		playerInSpaceR(1,23,24);
 80036a0:	2218      	movs	r2, #24
 80036a2:	2117      	movs	r1, #23
 80036a4:	2001      	movs	r0, #1
 80036a6:	f7fe f847 	bl	8001738 <playerInSpaceR>
		ud1 = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
		duck1.ud = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	773b      	strb	r3, [r7, #28]
		duck1.rl = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	777b      	strb	r3, [r7, #29]
		}



		if(duck2.ud == SS.ud) {
 80036ba:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80036be:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d10c      	bne.n	80036e0 <main+0x458>
		goDuckUP2(2,22,24,&ud2,&lr2,&duck2);
 80036c6:	f107 0208 	add.w	r2, r7, #8
 80036ca:	f107 0318 	add.w	r3, r7, #24
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	2218      	movs	r2, #24
 80036d8:	2116      	movs	r1, #22
 80036da:	2002      	movs	r0, #2
 80036dc:	f7fe fbe2 	bl	8001ea4 <goDuckUP2>
		}

		if(duck2.ud == SS.ud + 4 || duck2.ud == SS.ud - 4){
 80036e0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80036e4:	461a      	mov	r2, r3
 80036e6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80036ea:	3304      	adds	r3, #4
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d007      	beq.n	8003700 <main+0x478>
 80036f0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80036f4:	461a      	mov	r2, r3
 80036f6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80036fa:	3b04      	subs	r3, #4
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d11b      	bne.n	8003738 <main+0x4b0>
		goDuckMID2(2,22,24,&ud2,&lr2,&duck2);
 8003700:	f107 0208 	add.w	r2, r7, #8
 8003704:	f107 0318 	add.w	r3, r7, #24
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	2218      	movs	r2, #24
 8003712:	2116      	movs	r1, #22
 8003714:	2002      	movs	r0, #2
 8003716:	f7fe fdb9 	bl	800228c <goDuckMID2>
		if(duck2.rl == 55 && key.right){
 800371a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800371e:	2b37      	cmp	r3, #55	; 0x37
 8003720:	d10a      	bne.n	8003738 <main+0x4b0>
 8003722:	4b8a      	ldr	r3, [pc, #552]	; (800394c <main+0x6c4>)
 8003724:	78db      	ldrb	r3, [r3, #3]
 8003726:	b25b      	sxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <main+0x4b0>
		canonFire(2,SS.ud);
 800372c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003730:	4619      	mov	r1, r3
 8003732:	2002      	movs	r0, #2
 8003734:	f7ff f8e3 	bl	80028fe <canonFire>
		}
		}

		if(duck2.ud == SS.ud+8) {
 8003738:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800373c:	461a      	mov	r2, r3
 800373e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003742:	3308      	adds	r3, #8
 8003744:	429a      	cmp	r2, r3
 8003746:	d10c      	bne.n	8003762 <main+0x4da>
		goDuckUSD2(2,22,24,&ud2,&lr2,&duck2);
 8003748:	f107 0208 	add.w	r2, r7, #8
 800374c:	f107 0318 	add.w	r3, r7, #24
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	2218      	movs	r2, #24
 800375a:	2116      	movs	r1, #22
 800375c:	2002      	movs	r0, #2
 800375e:	f7fe ff87 	bl	8002670 <goDuckUSD2>
		}

		if(duck2.rl == 5 && key.up && SS.ud == duck2.ud+1 && SS.ud != -20){
 8003762:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003766:	2b05      	cmp	r3, #5
 8003768:	d143      	bne.n	80037f2 <main+0x56a>
 800376a:	4b78      	ldr	r3, [pc, #480]	; (800394c <main+0x6c4>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b25b      	sxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d03e      	beq.n	80037f2 <main+0x56a>
 8003774:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003778:	461a      	mov	r2, r3
 800377a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800377e:	3301      	adds	r3, #1
 8003780:	429a      	cmp	r2, r3
 8003782:	d136      	bne.n	80037f2 <main+0x56a>
 8003784:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003788:	f113 0f14 	cmn.w	r3, #20
 800378c:	d031      	beq.n	80037f2 <main+0x56a>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 800378e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003792:	f103 011b 	add.w	r1, r3, #27
 8003796:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800379a:	331f      	adds	r3, #31
 800379c:	225b      	movs	r2, #91	; 0x5b
 800379e:	2002      	movs	r0, #2
 80037a0:	f7fd fbb6 	bl	8000f10 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 80037a4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80037a8:	f103 011b 	add.w	r1, r3, #27
 80037ac:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80037b0:	331f      	adds	r3, #31
 80037b2:	225b      	movs	r2, #91	; 0x5b
 80037b4:	2002      	movs	r0, #2
 80037b6:	f7fd fe39 	bl	800142c <fireDelete>
		SS.ud -= 1;
 80037ba:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	753b      	strb	r3, [r7, #20]
		duck1.ud = duck1.ud+SS.ud;
 80037c8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	b25b      	sxtb	r3, r3
 80037da:	773b      	strb	r3, [r7, #28]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 80037dc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80037e0:	f103 011b 	add.w	r1, r3, #27
 80037e4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80037e8:	331f      	adds	r3, #31
 80037ea:	225b      	movs	r2, #91	; 0x5b
 80037ec:	2002      	movs	r0, #2
 80037ee:	f7fd fa61 	bl	8000cb4 <spaceship>
		}

		if(duck2.rl == 5 && key.up && SS.ud == duck2.ud-9 && SS.ud != 21){
 80037f2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d142      	bne.n	8003880 <main+0x5f8>
 80037fa:	4b54      	ldr	r3, [pc, #336]	; (800394c <main+0x6c4>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	b25b      	sxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d03d      	beq.n	8003880 <main+0x5f8>
 8003804:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003808:	461a      	mov	r2, r3
 800380a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800380e:	3b09      	subs	r3, #9
 8003810:	429a      	cmp	r2, r3
 8003812:	d135      	bne.n	8003880 <main+0x5f8>
 8003814:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003818:	2b15      	cmp	r3, #21
 800381a:	d031      	beq.n	8003880 <main+0x5f8>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 800381c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003820:	f103 011b 	add.w	r1, r3, #27
 8003824:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003828:	331f      	adds	r3, #31
 800382a:	225b      	movs	r2, #91	; 0x5b
 800382c:	2002      	movs	r0, #2
 800382e:	f7fd fb6f 	bl	8000f10 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8003832:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003836:	f103 011b 	add.w	r1, r3, #27
 800383a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800383e:	331f      	adds	r3, #31
 8003840:	225b      	movs	r2, #91	; 0x5b
 8003842:	2002      	movs	r0, #2
 8003844:	f7fd fdf2 	bl	800142c <fireDelete>
		SS.ud += 1;
 8003848:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	3301      	adds	r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	b25b      	sxtb	r3, r3
 8003854:	753b      	strb	r3, [r7, #20]
		duck1.ud = duck1.ud+SS.ud;
 8003856:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	4413      	add	r3, r2
 8003864:	b2db      	uxtb	r3, r3
 8003866:	b25b      	sxtb	r3, r3
 8003868:	773b      	strb	r3, [r7, #28]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 800386a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800386e:	f103 011b 	add.w	r1, r3, #27
 8003872:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003876:	331f      	adds	r3, #31
 8003878:	225b      	movs	r2, #91	; 0x5b
 800387a:	2002      	movs	r0, #2
 800387c:	f7fd fa1a 	bl	8000cb4 <spaceship>
		}

		if (key.up && duck2.rl != 5 && duck2.ud == SS.ud -1) {
 8003880:	4b32      	ldr	r3, [pc, #200]	; (800394c <main+0x6c4>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	b25b      	sxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01f      	beq.n	80038ca <main+0x642>
 800388a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d01b      	beq.n	80038ca <main+0x642>
 8003892:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003896:	461a      	mov	r2, r3
 8003898:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800389c:	3b01      	subs	r3, #1
 800389e:	429a      	cmp	r2, r3
 80038a0:	d113      	bne.n	80038ca <main+0x642>
		duckExplotion(22,24,&ud2,&lr2);
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	f107 0208 	add.w	r2, r7, #8
 80038a8:	2118      	movs	r1, #24
 80038aa:	2016      	movs	r0, #22
 80038ac:	f7ff f8d5 	bl	8002a5a <duckExplotion>
		playerInSpaceUSDR(2,23,32);
 80038b0:	2220      	movs	r2, #32
 80038b2:	2117      	movs	r1, #23
 80038b4:	2002      	movs	r0, #2
 80038b6:	f7fe f941 	bl	8001b3c <playerInSpaceUSDR>
		ud2=8;
 80038ba:	2308      	movs	r3, #8
 80038bc:	60bb      	str	r3, [r7, #8]
		lr2=0;
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]
		duck2.ud = 8;
 80038c2:	2308      	movs	r3, #8
 80038c4:	763b      	strb	r3, [r7, #24]
		duck2.rl = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	767b      	strb	r3, [r7, #25]
		}
		if (duck2.rl == 65){
 80038ca:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80038ce:	2b41      	cmp	r3, #65	; 0x41
 80038d0:	d113      	bne.n	80038fa <main+0x672>
		duckExplotion(22,24,&ud2,&lr2);
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	f107 0208 	add.w	r2, r7, #8
 80038d8:	2118      	movs	r1, #24
 80038da:	2016      	movs	r0, #22
 80038dc:	f7ff f8bd 	bl	8002a5a <duckExplotion>
		playerInSpaceUSDR(2,23,32);
 80038e0:	2220      	movs	r2, #32
 80038e2:	2117      	movs	r1, #23
 80038e4:	2002      	movs	r0, #2
 80038e6:	f7fe f929 	bl	8001b3c <playerInSpaceUSDR>
		ud2=8;
 80038ea:	2308      	movs	r3, #8
 80038ec:	60bb      	str	r3, [r7, #8]
		lr2=0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
		duck2.ud = 8;
 80038f2:	2308      	movs	r3, #8
 80038f4:	763b      	strb	r3, [r7, #24]
		duck2.rl = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	767b      	strb	r3, [r7, #25]
		}
		if (key.up && duck2.rl != 5 && duck2.ud == SS.ud + 9) {
 80038fa:	4b14      	ldr	r3, [pc, #80]	; (800394c <main+0x6c4>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b25b      	sxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d025      	beq.n	8003950 <main+0x6c8>
 8003904:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003908:	2b05      	cmp	r3, #5
 800390a:	d021      	beq.n	8003950 <main+0x6c8>
 800390c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003910:	461a      	mov	r2, r3
 8003912:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003916:	3309      	adds	r3, #9
 8003918:	429a      	cmp	r2, r3
 800391a:	d119      	bne.n	8003950 <main+0x6c8>
		duckExplotion(22,24,&ud2,&lr2);
 800391c:	1d3b      	adds	r3, r7, #4
 800391e:	f107 0208 	add.w	r2, r7, #8
 8003922:	2118      	movs	r1, #24
 8003924:	2016      	movs	r0, #22
 8003926:	f7ff f898 	bl	8002a5a <duckExplotion>
		playerInSpaceUSDR(2,23,32);
 800392a:	2220      	movs	r2, #32
 800392c:	2117      	movs	r1, #23
 800392e:	2002      	movs	r0, #2
 8003930:	f7fe f904 	bl	8001b3c <playerInSpaceUSDR>
		ud2=8;
 8003934:	2308      	movs	r3, #8
 8003936:	60bb      	str	r3, [r7, #8]
		lr2=0;
 8003938:	2300      	movs	r3, #0
 800393a:	607b      	str	r3, [r7, #4]
		duck2.ud = 8;
 800393c:	2308      	movs	r3, #8
 800393e:	763b      	strb	r3, [r7, #24]
		duck2.rl = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	767b      	strb	r3, [r7, #25]
 8003944:	e004      	b.n	8003950 <main+0x6c8>
 8003946:	bf00      	nop
 8003948:	200001e0 	.word	0x200001e0
 800394c:	200001d4 	.word	0x200001d4
		}

		buffer_lenght = uart_get_count();
 8003950:	f7fd f834 	bl	80009bc <uart_get_count>
 8003954:	4603      	mov	r3, r0
 8003956:	623b      	str	r3, [r7, #32]
		gotoxy(30,10);
 8003958:	210a      	movs	r1, #10
 800395a:	201e      	movs	r0, #30
 800395c:	f7ff fc82 	bl	8003264 <gotoxy>
		printf("%d", buffer_lenght);
 8003960:	6a39      	ldr	r1, [r7, #32]
 8003962:	482b      	ldr	r0, [pc, #172]	; (8003a10 <main+0x788>)
 8003964:	f000 fac2 	bl	8003eec <iprintf>

		if (lcdUpdate > 0){
 8003968:	4b2a      	ldr	r3, [pc, #168]	; (8003a14 <main+0x78c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	dd4a      	ble.n	8003a06 <main+0x77e>
		//Keyboard input

		if (buffer_lenght > 0) {
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	2b00      	cmp	r3, #0
 8003974:	dd0d      	ble.n	8003992 <main+0x70a>
			random = uart_get_char();
 8003976:	f7fc ff67 	bl	8000848 <uart_get_char>
 800397a:	4603      	mov	r3, r0
 800397c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			gotoxy(10,10);
 8003980:	210a      	movs	r1, #10
 8003982:	200a      	movs	r0, #10
 8003984:	f7ff fc6e 	bl	8003264 <gotoxy>
			printf("%c", random);
 8003988:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fac5 	bl	8003f1c <putchar>
		}


		if (random == 'w'){
 8003992:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003996:	2b77      	cmp	r3, #119	; 0x77
 8003998:	d103      	bne.n	80039a2 <main+0x71a>
			key.up = 1;
 800399a:	4b1f      	ldr	r3, [pc, #124]	; (8003a18 <main+0x790>)
 800399c:	2201      	movs	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e002      	b.n	80039a8 <main+0x720>
		}
		else {key.up = 0;}
 80039a2:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <main+0x790>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]

		if (random == 'a'){
 80039a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039ac:	2b61      	cmp	r3, #97	; 0x61
 80039ae:	d103      	bne.n	80039b8 <main+0x730>
			key.left = 1;
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <main+0x790>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	709a      	strb	r2, [r3, #2]
 80039b6:	e002      	b.n	80039be <main+0x736>
		}
		else {key.left = 0;}
 80039b8:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <main+0x790>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	709a      	strb	r2, [r3, #2]

		if (random == 's'){
 80039be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039c2:	2b73      	cmp	r3, #115	; 0x73
 80039c4:	d103      	bne.n	80039ce <main+0x746>
			key.down = 1;
 80039c6:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <main+0x790>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	705a      	strb	r2, [r3, #1]
 80039cc:	e002      	b.n	80039d4 <main+0x74c>
		}
		else {key.down = 0;}
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <main+0x790>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	705a      	strb	r2, [r3, #1]

		if (random == 'd'){
 80039d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039d8:	2b64      	cmp	r3, #100	; 0x64
 80039da:	d103      	bne.n	80039e4 <main+0x75c>
			key.right = 1;
 80039dc:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <main+0x790>)
 80039de:	2201      	movs	r2, #1
 80039e0:	70da      	strb	r2, [r3, #3]
 80039e2:	e002      	b.n	80039ea <main+0x762>
		}
		else {key.right = 0;}
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <main+0x790>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	70da      	strb	r2, [r3, #3]

		if (random == 'e'){
 80039ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039ee:	2b65      	cmp	r3, #101	; 0x65
 80039f0:	d103      	bne.n	80039fa <main+0x772>
			key.center = 1;
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <main+0x790>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	711a      	strb	r2, [r3, #4]
 80039f8:	e002      	b.n	8003a00 <main+0x778>
		}
		else {key.center = 0;}
 80039fa:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <main+0x790>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	711a      	strb	r2, [r3, #4]



		random = " ";
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <main+0x794>)
 8003a02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
//			collision(a,b,SS.ud);




		copyJoystick();
 8003a06:	f7ff faf5 	bl	8002ff4 <copyJoystick>

		writeLed();
 8003a0a:	f7ff fb9d 	bl	8003148 <writeLed>
	while(1){
 8003a0e:	e492      	b.n	8003336 <main+0xae>
 8003a10:	080050b4 	.word	0x080050b4
 8003a14:	200001d0 	.word	0x200001d0
 8003a18:	200001d4 	.word	0x200001d4
 8003a1c:	080050b8 	.word	0x080050b8

08003a20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e00a      	b.n	8003a48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a32:	f3af 8000 	nop.w
 8003a36:	4601      	mov	r1, r0
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	60ba      	str	r2, [r7, #8]
 8003a3e:	b2ca      	uxtb	r2, r1
 8003a40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	3301      	adds	r3, #1
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	dbf0      	blt.n	8003a32 <_read+0x12>
	}

return len;
 8003a50:	687b      	ldr	r3, [r7, #4]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <_close>:
	}
	return len;
}

int _close(int file)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
	return -1;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a82:	605a      	str	r2, [r3, #4]
	return 0;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <_isatty>:

int _isatty(int file)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
	return 1;
 8003a9a:	2301      	movs	r3, #1
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <_sbrk+0x50>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <_sbrk+0x16>
		heap_end = &end;
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <_sbrk+0x50>)
 8003ad6:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <_sbrk+0x54>)
 8003ad8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003ada:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <_sbrk+0x50>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <_sbrk+0x50>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	466a      	mov	r2, sp
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d907      	bls.n	8003afe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003aee:	f000 f9cb 	bl	8003e88 <__errno>
 8003af2:	4603      	mov	r3, r0
 8003af4:	220c      	movs	r2, #12
 8003af6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003af8:	f04f 33ff 	mov.w	r3, #4294967295
 8003afc:	e006      	b.n	8003b0c <_sbrk+0x48>
	}

	heap_end += incr;
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <_sbrk+0x50>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4413      	add	r3, r2
 8003b06:	4a03      	ldr	r2, [pc, #12]	; (8003b14 <_sbrk+0x50>)
 8003b08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	200001b4 	.word	0x200001b4
 8003b18:	20000200 	.word	0x20000200

08003b1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b20:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <SystemInit+0x84>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <SystemInit+0x84>)
 8003b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b30:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <SystemInit+0x88>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <SystemInit+0x88>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <SystemInit+0x88>)
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	4918      	ldr	r1, [pc, #96]	; (8003ba4 <SystemInit+0x88>)
 8003b42:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <SystemInit+0x8c>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b48:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <SystemInit+0x88>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <SystemInit+0x88>)
 8003b4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <SystemInit+0x88>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <SystemInit+0x88>)
 8003b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <SystemInit+0x88>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <SystemInit+0x88>)
 8003b6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003b6e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <SystemInit+0x88>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	4a0b      	ldr	r2, [pc, #44]	; (8003ba4 <SystemInit+0x88>)
 8003b76:	f023 030f 	bic.w	r3, r3, #15
 8003b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8003b7c:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <SystemInit+0x88>)
 8003b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b80:	4908      	ldr	r1, [pc, #32]	; (8003ba4 <SystemInit+0x88>)
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <SystemInit+0x90>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <SystemInit+0x88>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003b8e:	f000 f80f 	bl	8003bb0 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003b92:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <SystemInit+0x84>)
 8003b94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b98:	609a      	str	r2, [r3, #8]
#endif  
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	e000ed00 	.word	0xe000ed00
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	f87fc00c 	.word	0xf87fc00c
 8003bac:	ff00fccc 	.word	0xff00fccc

08003bb0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8003bb4:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <SetSysClock+0x8c>)
 8003bb6:	2212      	movs	r2, #18
 8003bb8:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <SetSysClock+0x90>)
 8003bbc:	4a20      	ldr	r2, [pc, #128]	; (8003c40 <SetSysClock+0x90>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003bc2:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <SetSysClock+0x90>)
 8003bc4:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <SetSysClock+0x90>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <SetSysClock+0x90>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <SetSysClock+0x90>)
 8003bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bd4:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8003bd6:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <SetSysClock+0x90>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a19      	ldr	r2, [pc, #100]	; (8003c40 <SetSysClock+0x90>)
 8003bdc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003be0:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8003be2:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <SetSysClock+0x90>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <SetSysClock+0x90>)
 8003be8:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8003bec:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8003bee:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <SetSysClock+0x90>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <SetSysClock+0x90>)
 8003bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003bfa:	bf00      	nop
 8003bfc:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <SetSysClock+0x90>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f9      	beq.n	8003bfc <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003c08:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <SetSysClock+0x90>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <SetSysClock+0x90>)
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <SetSysClock+0x90>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <SetSysClock+0x90>)
 8003c1a:	f043 0302 	orr.w	r3, r3, #2
 8003c1e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8003c20:	bf00      	nop
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <SetSysClock+0x90>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d1f9      	bne.n	8003c22 <SetSysClock+0x72>
  {
  }
}
 8003c2e:	bf00      	nop
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40022000 	.word	0x40022000
 8003c40:	40021000 	.word	0x40021000

08003c44 <NVIC_EnableIRQ>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	2201      	movs	r2, #1
 8003c56:	fa02 f103 	lsl.w	r1, r2, r3
 8003c5a:	4a06      	ldr	r2, [pc, #24]	; (8003c74 <NVIC_EnableIRQ+0x30>)
 8003c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	e000e100 	.word	0xe000e100

08003c78 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8003c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da0b      	bge.n	8003ca4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	490c      	ldr	r1, [pc, #48]	; (8003cc4 <NVIC_SetPriority+0x4c>)
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	3b04      	subs	r3, #4
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8003ca2:	e009      	b.n	8003cb8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	4907      	ldr	r1, [pc, #28]	; (8003cc8 <NVIC_SetPriority+0x50>)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	0112      	lsls	r2, r2, #4
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00
 8003cc8:	e000e100 	.word	0xe000e100

08003ccc <initTimer>:
//TIM15->CR1 to disable the timer and configure the mode.
//TIM15->ARR to set the reload value.
//TIM15->PSC to set the prescaler.
// Write to TIM15->CR1 to enable the timer and begin counting

void initTimer(){
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <initTimer+0x48>)
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <initTimer+0x48>)
 8003cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cda:	6193      	str	r3, [r2, #24]
TIM15->CR1 = 0x0000; // Configure timer 15
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <initTimer+0x4c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	801a      	strh	r2, [r3, #0]
TIM15->ARR = 0xF9FF; // Set reload value
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <initTimer+0x4c>)
 8003ce4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003ce8:	62da      	str	r2, [r3, #44]	; 0x2c
TIM15->PSC = 0x0009; // Set prescale value
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <initTimer+0x4c>)
 8003cec:	2209      	movs	r2, #9
 8003cee:	851a      	strh	r2, [r3, #40]	; 0x28
TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <initTimer+0x4c>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <initTimer+0x4c>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	60d3      	str	r3, [r2, #12]
TIM15->CR1 = 0x0001;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <initTimer+0x4c>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	801a      	strh	r2, [r3, #0]
NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8003d02:	2100      	movs	r1, #0
 8003d04:	2018      	movs	r0, #24
 8003d06:	f7ff ffb7 	bl	8003c78 <NVIC_SetPriority>
NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 8003d0a:	2018      	movs	r0, #24
 8003d0c:	f7ff ff9a 	bl	8003c44 <NVIC_EnableIRQ>
}
 8003d10:	bf00      	nop
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40014000 	.word	0x40014000

08003d1c <TIM2_IRQHandler>:
TIM2->ARR = reload; // Set auto reload value
TIM2->CCR3 = reload/2; // Set compare register
TIM2->EGR |= 0x01;
}

void TIM2_IRQHandler(void) {
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
	printf("This is Tim2: %d",i);
	i++;
*/

//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM2->SR &= ~0x0001; // Clear interrupt bit
 8003d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	6113      	str	r3, [r2, #16]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <TIM1_BRK_TIM15_IRQHandler>:
}
void initTimerStart(){
NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
TIM15->CR1 = 0x0001; // Configure timer 15
}
void TIM1_BRK_TIM15_IRQHandler(void) {
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0

	lcdUpdate++;
 8003d40:	4b37      	ldr	r3, [pc, #220]	; (8003e20 <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a36      	ldr	r2, [pc, #216]	; (8003e20 <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 8003d48:	6013      	str	r3, [r2, #0]

	if (lcdUpdate >= refreshRate){
 8003d4a:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	db11      	blt.n	8003d7a <TIM1_BRK_TIM15_IRQHandler+0x3e>
		if (led.blu == 0){
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d103      	bne.n	8003d66 <TIM1_BRK_TIM15_IRQHandler+0x2a>
			led.blu = 1;
 8003d5e:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	e006      	b.n	8003d74 <TIM1_BRK_TIM15_IRQHandler+0x38>
		}
		else if (led.blu == 1){
 8003d66:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d102      	bne.n	8003d74 <TIM1_BRK_TIM15_IRQHandler+0x38>
			led.blu = 0;
 8003d6e:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	605a      	str	r2, [r3, #4]
		}

		lcdUpdate = 0;
 8003d74:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
	}


	if (tid.state == 1) {
 8003d7a:	4b2c      	ldr	r3, [pc, #176]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003d7c:	78db      	ldrb	r3, [r3, #3]
 8003d7e:	b25b      	sxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d141      	bne.n	8003e08 <TIM1_BRK_TIM15_IRQHandler+0xcc>
		if (tid.mil == 0){
 8003d84:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003d86:	789b      	ldrb	r3, [r3, #2]
 8003d88:	b25b      	sxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10b      	bne.n	8003da6 <TIM1_BRK_TIM15_IRQHandler+0x6a>
			tid.mil = 99;
 8003d8e:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003d90:	2263      	movs	r2, #99	; 0x63
 8003d92:	709a      	strb	r2, [r3, #2]
			tid.sek--;
 8003d94:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003d96:	785b      	ldrb	r3, [r3, #1]
 8003d98:	b25b      	sxtb	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	b25a      	sxtb	r2, r3
 8003da2:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003da4:	705a      	strb	r2, [r3, #1]
		}
		if (tid.min > 0 && tid.sek == 0){
 8003da6:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	dd10      	ble.n	8003dd2 <TIM1_BRK_TIM15_IRQHandler+0x96>
 8003db0:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <TIM1_BRK_TIM15_IRQHandler+0x96>
			tid.mil--;
 8003dba:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003dbc:	789b      	ldrb	r3, [r3, #2]
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	b25a      	sxtb	r2, r3
 8003dc8:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003dca:	709a      	strb	r2, [r3, #2]
			tid.sek = 59;
 8003dcc:	4b17      	ldr	r3, [pc, #92]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003dce:	223b      	movs	r2, #59	; 0x3b
 8003dd0:	705a      	strb	r2, [r3, #1]
		}
		if (tid.sek > 0){
 8003dd2:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	dd08      	ble.n	8003dee <TIM1_BRK_TIM15_IRQHandler+0xb2>
			tid.sek--;
 8003ddc:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	b25b      	sxtb	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	b25a      	sxtb	r2, r3
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003dec:	705a      	strb	r2, [r3, #1]
		}
		if (tid.sek == 0 && tid.min == 0) {
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003df0:	785b      	ldrb	r3, [r3, #1]
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d107      	bne.n	8003e08 <TIM1_BRK_TIM15_IRQHandler+0xcc>
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b25b      	sxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <TIM1_BRK_TIM15_IRQHandler+0xcc>
			tid.state = 0;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	70da      	strb	r2, [r3, #3]




//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM15->SR &= ~0x0001; // Clear interrupt bit
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <TIM1_BRK_TIM15_IRQHandler+0xf4>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <TIM1_BRK_TIM15_IRQHandler+0xf4>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	6113      	str	r3, [r2, #16]
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	200001d0 	.word	0x200001d0
 8003e24:	200001dc 	.word	0x200001dc
 8003e28:	200001c0 	.word	0x200001c0
 8003e2c:	200001cc 	.word	0x200001cc
 8003e30:	40014000 	.word	0x40014000

08003e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e34:	480d      	ldr	r0, [pc, #52]	; (8003e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e38:	480d      	ldr	r0, [pc, #52]	; (8003e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e3a:	490e      	ldr	r1, [pc, #56]	; (8003e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e3c:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <LoopForever+0xe>)
  movs r3, #0
 8003e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e40:	e002      	b.n	8003e48 <LoopCopyDataInit>

08003e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e46:	3304      	adds	r3, #4

08003e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e4c:	d3f9      	bcc.n	8003e42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e4e:	4a0b      	ldr	r2, [pc, #44]	; (8003e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e50:	4c0b      	ldr	r4, [pc, #44]	; (8003e80 <LoopForever+0x16>)
  movs r3, #0
 8003e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e54:	e001      	b.n	8003e5a <LoopFillZerobss>

08003e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e58:	3204      	adds	r2, #4

08003e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e5c:	d3fb      	bcc.n	8003e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003e5e:	f7ff fe5d 	bl	8003b1c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003e62:	f000 f817 	bl	8003e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e66:	f7ff fa0f 	bl	8003288 <main>

08003e6a <LoopForever>:

LoopForever:
    b LoopForever
 8003e6a:	e7fe      	b.n	8003e6a <LoopForever>
  ldr   r0, =_estack
 8003e6c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e74:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003e78:	0800515c 	.word	0x0800515c
  ldr r2, =_sbss
 8003e7c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003e80:	200001fc 	.word	0x200001fc

08003e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e84:	e7fe      	b.n	8003e84 <ADC1_2_IRQHandler>
	...

08003e88 <__errno>:
 8003e88:	4b01      	ldr	r3, [pc, #4]	; (8003e90 <__errno+0x8>)
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	2000002c 	.word	0x2000002c

08003e94 <__libc_init_array>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	4d0d      	ldr	r5, [pc, #52]	; (8003ecc <__libc_init_array+0x38>)
 8003e98:	4c0d      	ldr	r4, [pc, #52]	; (8003ed0 <__libc_init_array+0x3c>)
 8003e9a:	1b64      	subs	r4, r4, r5
 8003e9c:	10a4      	asrs	r4, r4, #2
 8003e9e:	2600      	movs	r6, #0
 8003ea0:	42a6      	cmp	r6, r4
 8003ea2:	d109      	bne.n	8003eb8 <__libc_init_array+0x24>
 8003ea4:	4d0b      	ldr	r5, [pc, #44]	; (8003ed4 <__libc_init_array+0x40>)
 8003ea6:	4c0c      	ldr	r4, [pc, #48]	; (8003ed8 <__libc_init_array+0x44>)
 8003ea8:	f001 f898 	bl	8004fdc <_init>
 8003eac:	1b64      	subs	r4, r4, r5
 8003eae:	10a4      	asrs	r4, r4, #2
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	42a6      	cmp	r6, r4
 8003eb4:	d105      	bne.n	8003ec2 <__libc_init_array+0x2e>
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebc:	4798      	blx	r3
 8003ebe:	3601      	adds	r6, #1
 8003ec0:	e7ee      	b.n	8003ea0 <__libc_init_array+0xc>
 8003ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec6:	4798      	blx	r3
 8003ec8:	3601      	adds	r6, #1
 8003eca:	e7f2      	b.n	8003eb2 <__libc_init_array+0x1e>
 8003ecc:	08005154 	.word	0x08005154
 8003ed0:	08005154 	.word	0x08005154
 8003ed4:	08005154 	.word	0x08005154
 8003ed8:	08005158 	.word	0x08005158

08003edc <memset>:
 8003edc:	4402      	add	r2, r0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d100      	bne.n	8003ee6 <memset+0xa>
 8003ee4:	4770      	bx	lr
 8003ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eea:	e7f9      	b.n	8003ee0 <memset+0x4>

08003eec <iprintf>:
 8003eec:	b40f      	push	{r0, r1, r2, r3}
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <iprintf+0x2c>)
 8003ef0:	b513      	push	{r0, r1, r4, lr}
 8003ef2:	681c      	ldr	r4, [r3, #0]
 8003ef4:	b124      	cbz	r4, 8003f00 <iprintf+0x14>
 8003ef6:	69a3      	ldr	r3, [r4, #24]
 8003ef8:	b913      	cbnz	r3, 8003f00 <iprintf+0x14>
 8003efa:	4620      	mov	r0, r4
 8003efc:	f000 fa0c 	bl	8004318 <__sinit>
 8003f00:	ab05      	add	r3, sp, #20
 8003f02:	9a04      	ldr	r2, [sp, #16]
 8003f04:	68a1      	ldr	r1, [r4, #8]
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f000 fbe5 	bl	80046d8 <_vfiprintf_r>
 8003f0e:	b002      	add	sp, #8
 8003f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f14:	b004      	add	sp, #16
 8003f16:	4770      	bx	lr
 8003f18:	2000002c 	.word	0x2000002c

08003f1c <putchar>:
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <putchar+0x28>)
 8003f1e:	b513      	push	{r0, r1, r4, lr}
 8003f20:	681c      	ldr	r4, [r3, #0]
 8003f22:	4601      	mov	r1, r0
 8003f24:	b134      	cbz	r4, 8003f34 <putchar+0x18>
 8003f26:	69a3      	ldr	r3, [r4, #24]
 8003f28:	b923      	cbnz	r3, 8003f34 <putchar+0x18>
 8003f2a:	9001      	str	r0, [sp, #4]
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f000 f9f3 	bl	8004318 <__sinit>
 8003f32:	9901      	ldr	r1, [sp, #4]
 8003f34:	68a2      	ldr	r2, [r4, #8]
 8003f36:	4620      	mov	r0, r4
 8003f38:	b002      	add	sp, #8
 8003f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f3e:	f000 be8f 	b.w	8004c60 <_putc_r>
 8003f42:	bf00      	nop
 8003f44:	2000002c 	.word	0x2000002c

08003f48 <setbuf>:
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f4e:	bf0c      	ite	eq
 8003f50:	2202      	moveq	r2, #2
 8003f52:	2200      	movne	r2, #0
 8003f54:	f000 b800 	b.w	8003f58 <setvbuf>

08003f58 <setvbuf>:
 8003f58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003f5c:	461d      	mov	r5, r3
 8003f5e:	4b5d      	ldr	r3, [pc, #372]	; (80040d4 <setvbuf+0x17c>)
 8003f60:	681f      	ldr	r7, [r3, #0]
 8003f62:	4604      	mov	r4, r0
 8003f64:	460e      	mov	r6, r1
 8003f66:	4690      	mov	r8, r2
 8003f68:	b127      	cbz	r7, 8003f74 <setvbuf+0x1c>
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	b913      	cbnz	r3, 8003f74 <setvbuf+0x1c>
 8003f6e:	4638      	mov	r0, r7
 8003f70:	f000 f9d2 	bl	8004318 <__sinit>
 8003f74:	4b58      	ldr	r3, [pc, #352]	; (80040d8 <setvbuf+0x180>)
 8003f76:	429c      	cmp	r4, r3
 8003f78:	d167      	bne.n	800404a <setvbuf+0xf2>
 8003f7a:	687c      	ldr	r4, [r7, #4]
 8003f7c:	f1b8 0f02 	cmp.w	r8, #2
 8003f80:	d006      	beq.n	8003f90 <setvbuf+0x38>
 8003f82:	f1b8 0f01 	cmp.w	r8, #1
 8003f86:	f200 809f 	bhi.w	80040c8 <setvbuf+0x170>
 8003f8a:	2d00      	cmp	r5, #0
 8003f8c:	f2c0 809c 	blt.w	80040c8 <setvbuf+0x170>
 8003f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f92:	07db      	lsls	r3, r3, #31
 8003f94:	d405      	bmi.n	8003fa2 <setvbuf+0x4a>
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	0598      	lsls	r0, r3, #22
 8003f9a:	d402      	bmi.n	8003fa2 <setvbuf+0x4a>
 8003f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f9e:	f000 fa59 	bl	8004454 <__retarget_lock_acquire_recursive>
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	f000 f923 	bl	80041f0 <_fflush_r>
 8003faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fac:	b141      	cbz	r1, 8003fc0 <setvbuf+0x68>
 8003fae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fb2:	4299      	cmp	r1, r3
 8003fb4:	d002      	beq.n	8003fbc <setvbuf+0x64>
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	f000 faba 	bl	8004530 <_free_r>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	6363      	str	r3, [r4, #52]	; 0x34
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61a3      	str	r3, [r4, #24]
 8003fc4:	6063      	str	r3, [r4, #4]
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	0619      	lsls	r1, r3, #24
 8003fca:	d503      	bpl.n	8003fd4 <setvbuf+0x7c>
 8003fcc:	6921      	ldr	r1, [r4, #16]
 8003fce:	4638      	mov	r0, r7
 8003fd0:	f000 faae 	bl	8004530 <_free_r>
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	f1b8 0f02 	cmp.w	r8, #2
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	d06c      	beq.n	80040c0 <setvbuf+0x168>
 8003fe6:	ab01      	add	r3, sp, #4
 8003fe8:	466a      	mov	r2, sp
 8003fea:	4621      	mov	r1, r4
 8003fec:	4638      	mov	r0, r7
 8003fee:	f000 fa33 	bl	8004458 <__swhatbuf_r>
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	4318      	orrs	r0, r3
 8003ff6:	81a0      	strh	r0, [r4, #12]
 8003ff8:	2d00      	cmp	r5, #0
 8003ffa:	d130      	bne.n	800405e <setvbuf+0x106>
 8003ffc:	9d00      	ldr	r5, [sp, #0]
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 fa8e 	bl	8004520 <malloc>
 8004004:	4606      	mov	r6, r0
 8004006:	2800      	cmp	r0, #0
 8004008:	d155      	bne.n	80040b6 <setvbuf+0x15e>
 800400a:	f8dd 9000 	ldr.w	r9, [sp]
 800400e:	45a9      	cmp	r9, r5
 8004010:	d14a      	bne.n	80040a8 <setvbuf+0x150>
 8004012:	f04f 35ff 	mov.w	r5, #4294967295
 8004016:	2200      	movs	r2, #0
 8004018:	60a2      	str	r2, [r4, #8]
 800401a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800401e:	6022      	str	r2, [r4, #0]
 8004020:	6122      	str	r2, [r4, #16]
 8004022:	2201      	movs	r2, #1
 8004024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004028:	6162      	str	r2, [r4, #20]
 800402a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	07d2      	lsls	r2, r2, #31
 8004032:	81a3      	strh	r3, [r4, #12]
 8004034:	d405      	bmi.n	8004042 <setvbuf+0xea>
 8004036:	f413 7f00 	tst.w	r3, #512	; 0x200
 800403a:	d102      	bne.n	8004042 <setvbuf+0xea>
 800403c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800403e:	f000 fa0a 	bl	8004456 <__retarget_lock_release_recursive>
 8004042:	4628      	mov	r0, r5
 8004044:	b003      	add	sp, #12
 8004046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800404a:	4b24      	ldr	r3, [pc, #144]	; (80040dc <setvbuf+0x184>)
 800404c:	429c      	cmp	r4, r3
 800404e:	d101      	bne.n	8004054 <setvbuf+0xfc>
 8004050:	68bc      	ldr	r4, [r7, #8]
 8004052:	e793      	b.n	8003f7c <setvbuf+0x24>
 8004054:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <setvbuf+0x188>)
 8004056:	429c      	cmp	r4, r3
 8004058:	bf08      	it	eq
 800405a:	68fc      	ldreq	r4, [r7, #12]
 800405c:	e78e      	b.n	8003f7c <setvbuf+0x24>
 800405e:	2e00      	cmp	r6, #0
 8004060:	d0cd      	beq.n	8003ffe <setvbuf+0xa6>
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	b913      	cbnz	r3, 800406c <setvbuf+0x114>
 8004066:	4638      	mov	r0, r7
 8004068:	f000 f956 	bl	8004318 <__sinit>
 800406c:	f1b8 0f01 	cmp.w	r8, #1
 8004070:	bf08      	it	eq
 8004072:	89a3      	ldrheq	r3, [r4, #12]
 8004074:	6026      	str	r6, [r4, #0]
 8004076:	bf04      	itt	eq
 8004078:	f043 0301 	orreq.w	r3, r3, #1
 800407c:	81a3      	strheq	r3, [r4, #12]
 800407e:	89a2      	ldrh	r2, [r4, #12]
 8004080:	f012 0308 	ands.w	r3, r2, #8
 8004084:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004088:	d01c      	beq.n	80040c4 <setvbuf+0x16c>
 800408a:	07d3      	lsls	r3, r2, #31
 800408c:	bf41      	itttt	mi
 800408e:	2300      	movmi	r3, #0
 8004090:	426d      	negmi	r5, r5
 8004092:	60a3      	strmi	r3, [r4, #8]
 8004094:	61a5      	strmi	r5, [r4, #24]
 8004096:	bf58      	it	pl
 8004098:	60a5      	strpl	r5, [r4, #8]
 800409a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800409c:	f015 0501 	ands.w	r5, r5, #1
 80040a0:	d115      	bne.n	80040ce <setvbuf+0x176>
 80040a2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80040a6:	e7c8      	b.n	800403a <setvbuf+0xe2>
 80040a8:	4648      	mov	r0, r9
 80040aa:	f000 fa39 	bl	8004520 <malloc>
 80040ae:	4606      	mov	r6, r0
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d0ae      	beq.n	8004012 <setvbuf+0xba>
 80040b4:	464d      	mov	r5, r9
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040bc:	81a3      	strh	r3, [r4, #12]
 80040be:	e7d0      	b.n	8004062 <setvbuf+0x10a>
 80040c0:	2500      	movs	r5, #0
 80040c2:	e7a8      	b.n	8004016 <setvbuf+0xbe>
 80040c4:	60a3      	str	r3, [r4, #8]
 80040c6:	e7e8      	b.n	800409a <setvbuf+0x142>
 80040c8:	f04f 35ff 	mov.w	r5, #4294967295
 80040cc:	e7b9      	b.n	8004042 <setvbuf+0xea>
 80040ce:	2500      	movs	r5, #0
 80040d0:	e7b7      	b.n	8004042 <setvbuf+0xea>
 80040d2:	bf00      	nop
 80040d4:	2000002c 	.word	0x2000002c
 80040d8:	080050e0 	.word	0x080050e0
 80040dc:	08005100 	.word	0x08005100
 80040e0:	080050c0 	.word	0x080050c0

080040e4 <__sflush_r>:
 80040e4:	898a      	ldrh	r2, [r1, #12]
 80040e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ea:	4605      	mov	r5, r0
 80040ec:	0710      	lsls	r0, r2, #28
 80040ee:	460c      	mov	r4, r1
 80040f0:	d458      	bmi.n	80041a4 <__sflush_r+0xc0>
 80040f2:	684b      	ldr	r3, [r1, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	dc05      	bgt.n	8004104 <__sflush_r+0x20>
 80040f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	dc02      	bgt.n	8004104 <__sflush_r+0x20>
 80040fe:	2000      	movs	r0, #0
 8004100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004106:	2e00      	cmp	r6, #0
 8004108:	d0f9      	beq.n	80040fe <__sflush_r+0x1a>
 800410a:	2300      	movs	r3, #0
 800410c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004110:	682f      	ldr	r7, [r5, #0]
 8004112:	602b      	str	r3, [r5, #0]
 8004114:	d032      	beq.n	800417c <__sflush_r+0x98>
 8004116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	075a      	lsls	r2, r3, #29
 800411c:	d505      	bpl.n	800412a <__sflush_r+0x46>
 800411e:	6863      	ldr	r3, [r4, #4]
 8004120:	1ac0      	subs	r0, r0, r3
 8004122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004124:	b10b      	cbz	r3, 800412a <__sflush_r+0x46>
 8004126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004128:	1ac0      	subs	r0, r0, r3
 800412a:	2300      	movs	r3, #0
 800412c:	4602      	mov	r2, r0
 800412e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004130:	6a21      	ldr	r1, [r4, #32]
 8004132:	4628      	mov	r0, r5
 8004134:	47b0      	blx	r6
 8004136:	1c43      	adds	r3, r0, #1
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	d106      	bne.n	800414a <__sflush_r+0x66>
 800413c:	6829      	ldr	r1, [r5, #0]
 800413e:	291d      	cmp	r1, #29
 8004140:	d82c      	bhi.n	800419c <__sflush_r+0xb8>
 8004142:	4a2a      	ldr	r2, [pc, #168]	; (80041ec <__sflush_r+0x108>)
 8004144:	40ca      	lsrs	r2, r1
 8004146:	07d6      	lsls	r6, r2, #31
 8004148:	d528      	bpl.n	800419c <__sflush_r+0xb8>
 800414a:	2200      	movs	r2, #0
 800414c:	6062      	str	r2, [r4, #4]
 800414e:	04d9      	lsls	r1, r3, #19
 8004150:	6922      	ldr	r2, [r4, #16]
 8004152:	6022      	str	r2, [r4, #0]
 8004154:	d504      	bpl.n	8004160 <__sflush_r+0x7c>
 8004156:	1c42      	adds	r2, r0, #1
 8004158:	d101      	bne.n	800415e <__sflush_r+0x7a>
 800415a:	682b      	ldr	r3, [r5, #0]
 800415c:	b903      	cbnz	r3, 8004160 <__sflush_r+0x7c>
 800415e:	6560      	str	r0, [r4, #84]	; 0x54
 8004160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004162:	602f      	str	r7, [r5, #0]
 8004164:	2900      	cmp	r1, #0
 8004166:	d0ca      	beq.n	80040fe <__sflush_r+0x1a>
 8004168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800416c:	4299      	cmp	r1, r3
 800416e:	d002      	beq.n	8004176 <__sflush_r+0x92>
 8004170:	4628      	mov	r0, r5
 8004172:	f000 f9dd 	bl	8004530 <_free_r>
 8004176:	2000      	movs	r0, #0
 8004178:	6360      	str	r0, [r4, #52]	; 0x34
 800417a:	e7c1      	b.n	8004100 <__sflush_r+0x1c>
 800417c:	6a21      	ldr	r1, [r4, #32]
 800417e:	2301      	movs	r3, #1
 8004180:	4628      	mov	r0, r5
 8004182:	47b0      	blx	r6
 8004184:	1c41      	adds	r1, r0, #1
 8004186:	d1c7      	bne.n	8004118 <__sflush_r+0x34>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0c4      	beq.n	8004118 <__sflush_r+0x34>
 800418e:	2b1d      	cmp	r3, #29
 8004190:	d001      	beq.n	8004196 <__sflush_r+0xb2>
 8004192:	2b16      	cmp	r3, #22
 8004194:	d101      	bne.n	800419a <__sflush_r+0xb6>
 8004196:	602f      	str	r7, [r5, #0]
 8004198:	e7b1      	b.n	80040fe <__sflush_r+0x1a>
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a0:	81a3      	strh	r3, [r4, #12]
 80041a2:	e7ad      	b.n	8004100 <__sflush_r+0x1c>
 80041a4:	690f      	ldr	r7, [r1, #16]
 80041a6:	2f00      	cmp	r7, #0
 80041a8:	d0a9      	beq.n	80040fe <__sflush_r+0x1a>
 80041aa:	0793      	lsls	r3, r2, #30
 80041ac:	680e      	ldr	r6, [r1, #0]
 80041ae:	bf08      	it	eq
 80041b0:	694b      	ldreq	r3, [r1, #20]
 80041b2:	600f      	str	r7, [r1, #0]
 80041b4:	bf18      	it	ne
 80041b6:	2300      	movne	r3, #0
 80041b8:	eba6 0807 	sub.w	r8, r6, r7
 80041bc:	608b      	str	r3, [r1, #8]
 80041be:	f1b8 0f00 	cmp.w	r8, #0
 80041c2:	dd9c      	ble.n	80040fe <__sflush_r+0x1a>
 80041c4:	6a21      	ldr	r1, [r4, #32]
 80041c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041c8:	4643      	mov	r3, r8
 80041ca:	463a      	mov	r2, r7
 80041cc:	4628      	mov	r0, r5
 80041ce:	47b0      	blx	r6
 80041d0:	2800      	cmp	r0, #0
 80041d2:	dc06      	bgt.n	80041e2 <__sflush_r+0xfe>
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	e78e      	b.n	8004100 <__sflush_r+0x1c>
 80041e2:	4407      	add	r7, r0
 80041e4:	eba8 0800 	sub.w	r8, r8, r0
 80041e8:	e7e9      	b.n	80041be <__sflush_r+0xda>
 80041ea:	bf00      	nop
 80041ec:	20400001 	.word	0x20400001

080041f0 <_fflush_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	690b      	ldr	r3, [r1, #16]
 80041f4:	4605      	mov	r5, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	b913      	cbnz	r3, 8004200 <_fflush_r+0x10>
 80041fa:	2500      	movs	r5, #0
 80041fc:	4628      	mov	r0, r5
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	b118      	cbz	r0, 800420a <_fflush_r+0x1a>
 8004202:	6983      	ldr	r3, [r0, #24]
 8004204:	b90b      	cbnz	r3, 800420a <_fflush_r+0x1a>
 8004206:	f000 f887 	bl	8004318 <__sinit>
 800420a:	4b14      	ldr	r3, [pc, #80]	; (800425c <_fflush_r+0x6c>)
 800420c:	429c      	cmp	r4, r3
 800420e:	d11b      	bne.n	8004248 <_fflush_r+0x58>
 8004210:	686c      	ldr	r4, [r5, #4]
 8004212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0ef      	beq.n	80041fa <_fflush_r+0xa>
 800421a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800421c:	07d0      	lsls	r0, r2, #31
 800421e:	d404      	bmi.n	800422a <_fflush_r+0x3a>
 8004220:	0599      	lsls	r1, r3, #22
 8004222:	d402      	bmi.n	800422a <_fflush_r+0x3a>
 8004224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004226:	f000 f915 	bl	8004454 <__retarget_lock_acquire_recursive>
 800422a:	4628      	mov	r0, r5
 800422c:	4621      	mov	r1, r4
 800422e:	f7ff ff59 	bl	80040e4 <__sflush_r>
 8004232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004234:	07da      	lsls	r2, r3, #31
 8004236:	4605      	mov	r5, r0
 8004238:	d4e0      	bmi.n	80041fc <_fflush_r+0xc>
 800423a:	89a3      	ldrh	r3, [r4, #12]
 800423c:	059b      	lsls	r3, r3, #22
 800423e:	d4dd      	bmi.n	80041fc <_fflush_r+0xc>
 8004240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004242:	f000 f908 	bl	8004456 <__retarget_lock_release_recursive>
 8004246:	e7d9      	b.n	80041fc <_fflush_r+0xc>
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <_fflush_r+0x70>)
 800424a:	429c      	cmp	r4, r3
 800424c:	d101      	bne.n	8004252 <_fflush_r+0x62>
 800424e:	68ac      	ldr	r4, [r5, #8]
 8004250:	e7df      	b.n	8004212 <_fflush_r+0x22>
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <_fflush_r+0x74>)
 8004254:	429c      	cmp	r4, r3
 8004256:	bf08      	it	eq
 8004258:	68ec      	ldreq	r4, [r5, #12]
 800425a:	e7da      	b.n	8004212 <_fflush_r+0x22>
 800425c:	080050e0 	.word	0x080050e0
 8004260:	08005100 	.word	0x08005100
 8004264:	080050c0 	.word	0x080050c0

08004268 <std>:
 8004268:	2300      	movs	r3, #0
 800426a:	b510      	push	{r4, lr}
 800426c:	4604      	mov	r4, r0
 800426e:	e9c0 3300 	strd	r3, r3, [r0]
 8004272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004276:	6083      	str	r3, [r0, #8]
 8004278:	8181      	strh	r1, [r0, #12]
 800427a:	6643      	str	r3, [r0, #100]	; 0x64
 800427c:	81c2      	strh	r2, [r0, #14]
 800427e:	6183      	str	r3, [r0, #24]
 8004280:	4619      	mov	r1, r3
 8004282:	2208      	movs	r2, #8
 8004284:	305c      	adds	r0, #92	; 0x5c
 8004286:	f7ff fe29 	bl	8003edc <memset>
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <std+0x38>)
 800428c:	6263      	str	r3, [r4, #36]	; 0x24
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <std+0x3c>)
 8004290:	62a3      	str	r3, [r4, #40]	; 0x28
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <std+0x40>)
 8004294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <std+0x44>)
 8004298:	6224      	str	r4, [r4, #32]
 800429a:	6323      	str	r3, [r4, #48]	; 0x30
 800429c:	bd10      	pop	{r4, pc}
 800429e:	bf00      	nop
 80042a0:	08004d11 	.word	0x08004d11
 80042a4:	08004d33 	.word	0x08004d33
 80042a8:	08004d6b 	.word	0x08004d6b
 80042ac:	08004d8f 	.word	0x08004d8f

080042b0 <_cleanup_r>:
 80042b0:	4901      	ldr	r1, [pc, #4]	; (80042b8 <_cleanup_r+0x8>)
 80042b2:	f000 b8af 	b.w	8004414 <_fwalk_reent>
 80042b6:	bf00      	nop
 80042b8:	080041f1 	.word	0x080041f1

080042bc <__sfmoreglue>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	1e4a      	subs	r2, r1, #1
 80042c0:	2568      	movs	r5, #104	; 0x68
 80042c2:	4355      	muls	r5, r2
 80042c4:	460e      	mov	r6, r1
 80042c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042ca:	f000 f981 	bl	80045d0 <_malloc_r>
 80042ce:	4604      	mov	r4, r0
 80042d0:	b140      	cbz	r0, 80042e4 <__sfmoreglue+0x28>
 80042d2:	2100      	movs	r1, #0
 80042d4:	e9c0 1600 	strd	r1, r6, [r0]
 80042d8:	300c      	adds	r0, #12
 80042da:	60a0      	str	r0, [r4, #8]
 80042dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042e0:	f7ff fdfc 	bl	8003edc <memset>
 80042e4:	4620      	mov	r0, r4
 80042e6:	bd70      	pop	{r4, r5, r6, pc}

080042e8 <__sfp_lock_acquire>:
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <__sfp_lock_acquire+0x8>)
 80042ea:	f000 b8b3 	b.w	8004454 <__retarget_lock_acquire_recursive>
 80042ee:	bf00      	nop
 80042f0:	200001f5 	.word	0x200001f5

080042f4 <__sfp_lock_release>:
 80042f4:	4801      	ldr	r0, [pc, #4]	; (80042fc <__sfp_lock_release+0x8>)
 80042f6:	f000 b8ae 	b.w	8004456 <__retarget_lock_release_recursive>
 80042fa:	bf00      	nop
 80042fc:	200001f5 	.word	0x200001f5

08004300 <__sinit_lock_acquire>:
 8004300:	4801      	ldr	r0, [pc, #4]	; (8004308 <__sinit_lock_acquire+0x8>)
 8004302:	f000 b8a7 	b.w	8004454 <__retarget_lock_acquire_recursive>
 8004306:	bf00      	nop
 8004308:	200001f0 	.word	0x200001f0

0800430c <__sinit_lock_release>:
 800430c:	4801      	ldr	r0, [pc, #4]	; (8004314 <__sinit_lock_release+0x8>)
 800430e:	f000 b8a2 	b.w	8004456 <__retarget_lock_release_recursive>
 8004312:	bf00      	nop
 8004314:	200001f0 	.word	0x200001f0

08004318 <__sinit>:
 8004318:	b510      	push	{r4, lr}
 800431a:	4604      	mov	r4, r0
 800431c:	f7ff fff0 	bl	8004300 <__sinit_lock_acquire>
 8004320:	69a3      	ldr	r3, [r4, #24]
 8004322:	b11b      	cbz	r3, 800432c <__sinit+0x14>
 8004324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004328:	f7ff bff0 	b.w	800430c <__sinit_lock_release>
 800432c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004330:	6523      	str	r3, [r4, #80]	; 0x50
 8004332:	4b13      	ldr	r3, [pc, #76]	; (8004380 <__sinit+0x68>)
 8004334:	4a13      	ldr	r2, [pc, #76]	; (8004384 <__sinit+0x6c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	62a2      	str	r2, [r4, #40]	; 0x28
 800433a:	42a3      	cmp	r3, r4
 800433c:	bf04      	itt	eq
 800433e:	2301      	moveq	r3, #1
 8004340:	61a3      	streq	r3, [r4, #24]
 8004342:	4620      	mov	r0, r4
 8004344:	f000 f820 	bl	8004388 <__sfp>
 8004348:	6060      	str	r0, [r4, #4]
 800434a:	4620      	mov	r0, r4
 800434c:	f000 f81c 	bl	8004388 <__sfp>
 8004350:	60a0      	str	r0, [r4, #8]
 8004352:	4620      	mov	r0, r4
 8004354:	f000 f818 	bl	8004388 <__sfp>
 8004358:	2200      	movs	r2, #0
 800435a:	60e0      	str	r0, [r4, #12]
 800435c:	2104      	movs	r1, #4
 800435e:	6860      	ldr	r0, [r4, #4]
 8004360:	f7ff ff82 	bl	8004268 <std>
 8004364:	68a0      	ldr	r0, [r4, #8]
 8004366:	2201      	movs	r2, #1
 8004368:	2109      	movs	r1, #9
 800436a:	f7ff ff7d 	bl	8004268 <std>
 800436e:	68e0      	ldr	r0, [r4, #12]
 8004370:	2202      	movs	r2, #2
 8004372:	2112      	movs	r1, #18
 8004374:	f7ff ff78 	bl	8004268 <std>
 8004378:	2301      	movs	r3, #1
 800437a:	61a3      	str	r3, [r4, #24]
 800437c:	e7d2      	b.n	8004324 <__sinit+0xc>
 800437e:	bf00      	nop
 8004380:	080050bc 	.word	0x080050bc
 8004384:	080042b1 	.word	0x080042b1

08004388 <__sfp>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	4607      	mov	r7, r0
 800438c:	f7ff ffac 	bl	80042e8 <__sfp_lock_acquire>
 8004390:	4b1e      	ldr	r3, [pc, #120]	; (800440c <__sfp+0x84>)
 8004392:	681e      	ldr	r6, [r3, #0]
 8004394:	69b3      	ldr	r3, [r6, #24]
 8004396:	b913      	cbnz	r3, 800439e <__sfp+0x16>
 8004398:	4630      	mov	r0, r6
 800439a:	f7ff ffbd 	bl	8004318 <__sinit>
 800439e:	3648      	adds	r6, #72	; 0x48
 80043a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	d503      	bpl.n	80043b0 <__sfp+0x28>
 80043a8:	6833      	ldr	r3, [r6, #0]
 80043aa:	b30b      	cbz	r3, 80043f0 <__sfp+0x68>
 80043ac:	6836      	ldr	r6, [r6, #0]
 80043ae:	e7f7      	b.n	80043a0 <__sfp+0x18>
 80043b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043b4:	b9d5      	cbnz	r5, 80043ec <__sfp+0x64>
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <__sfp+0x88>)
 80043b8:	60e3      	str	r3, [r4, #12]
 80043ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043be:	6665      	str	r5, [r4, #100]	; 0x64
 80043c0:	f000 f847 	bl	8004452 <__retarget_lock_init_recursive>
 80043c4:	f7ff ff96 	bl	80042f4 <__sfp_lock_release>
 80043c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043d0:	6025      	str	r5, [r4, #0]
 80043d2:	61a5      	str	r5, [r4, #24]
 80043d4:	2208      	movs	r2, #8
 80043d6:	4629      	mov	r1, r5
 80043d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043dc:	f7ff fd7e 	bl	8003edc <memset>
 80043e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043e8:	4620      	mov	r0, r4
 80043ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ec:	3468      	adds	r4, #104	; 0x68
 80043ee:	e7d9      	b.n	80043a4 <__sfp+0x1c>
 80043f0:	2104      	movs	r1, #4
 80043f2:	4638      	mov	r0, r7
 80043f4:	f7ff ff62 	bl	80042bc <__sfmoreglue>
 80043f8:	4604      	mov	r4, r0
 80043fa:	6030      	str	r0, [r6, #0]
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d1d5      	bne.n	80043ac <__sfp+0x24>
 8004400:	f7ff ff78 	bl	80042f4 <__sfp_lock_release>
 8004404:	230c      	movs	r3, #12
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	e7ee      	b.n	80043e8 <__sfp+0x60>
 800440a:	bf00      	nop
 800440c:	080050bc 	.word	0x080050bc
 8004410:	ffff0001 	.word	0xffff0001

08004414 <_fwalk_reent>:
 8004414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004418:	4606      	mov	r6, r0
 800441a:	4688      	mov	r8, r1
 800441c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004420:	2700      	movs	r7, #0
 8004422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004426:	f1b9 0901 	subs.w	r9, r9, #1
 800442a:	d505      	bpl.n	8004438 <_fwalk_reent+0x24>
 800442c:	6824      	ldr	r4, [r4, #0]
 800442e:	2c00      	cmp	r4, #0
 8004430:	d1f7      	bne.n	8004422 <_fwalk_reent+0xe>
 8004432:	4638      	mov	r0, r7
 8004434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004438:	89ab      	ldrh	r3, [r5, #12]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d907      	bls.n	800444e <_fwalk_reent+0x3a>
 800443e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004442:	3301      	adds	r3, #1
 8004444:	d003      	beq.n	800444e <_fwalk_reent+0x3a>
 8004446:	4629      	mov	r1, r5
 8004448:	4630      	mov	r0, r6
 800444a:	47c0      	blx	r8
 800444c:	4307      	orrs	r7, r0
 800444e:	3568      	adds	r5, #104	; 0x68
 8004450:	e7e9      	b.n	8004426 <_fwalk_reent+0x12>

08004452 <__retarget_lock_init_recursive>:
 8004452:	4770      	bx	lr

08004454 <__retarget_lock_acquire_recursive>:
 8004454:	4770      	bx	lr

08004456 <__retarget_lock_release_recursive>:
 8004456:	4770      	bx	lr

08004458 <__swhatbuf_r>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	460e      	mov	r6, r1
 800445c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004460:	2900      	cmp	r1, #0
 8004462:	b096      	sub	sp, #88	; 0x58
 8004464:	4614      	mov	r4, r2
 8004466:	461d      	mov	r5, r3
 8004468:	da07      	bge.n	800447a <__swhatbuf_r+0x22>
 800446a:	2300      	movs	r3, #0
 800446c:	602b      	str	r3, [r5, #0]
 800446e:	89b3      	ldrh	r3, [r6, #12]
 8004470:	061a      	lsls	r2, r3, #24
 8004472:	d410      	bmi.n	8004496 <__swhatbuf_r+0x3e>
 8004474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004478:	e00e      	b.n	8004498 <__swhatbuf_r+0x40>
 800447a:	466a      	mov	r2, sp
 800447c:	f000 fd5c 	bl	8004f38 <_fstat_r>
 8004480:	2800      	cmp	r0, #0
 8004482:	dbf2      	blt.n	800446a <__swhatbuf_r+0x12>
 8004484:	9a01      	ldr	r2, [sp, #4]
 8004486:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800448a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800448e:	425a      	negs	r2, r3
 8004490:	415a      	adcs	r2, r3
 8004492:	602a      	str	r2, [r5, #0]
 8004494:	e7ee      	b.n	8004474 <__swhatbuf_r+0x1c>
 8004496:	2340      	movs	r3, #64	; 0x40
 8004498:	2000      	movs	r0, #0
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	b016      	add	sp, #88	; 0x58
 800449e:	bd70      	pop	{r4, r5, r6, pc}

080044a0 <__smakebuf_r>:
 80044a0:	898b      	ldrh	r3, [r1, #12]
 80044a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044a4:	079d      	lsls	r5, r3, #30
 80044a6:	4606      	mov	r6, r0
 80044a8:	460c      	mov	r4, r1
 80044aa:	d507      	bpl.n	80044bc <__smakebuf_r+0x1c>
 80044ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	2301      	movs	r3, #1
 80044b6:	6163      	str	r3, [r4, #20]
 80044b8:	b002      	add	sp, #8
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	ab01      	add	r3, sp, #4
 80044be:	466a      	mov	r2, sp
 80044c0:	f7ff ffca 	bl	8004458 <__swhatbuf_r>
 80044c4:	9900      	ldr	r1, [sp, #0]
 80044c6:	4605      	mov	r5, r0
 80044c8:	4630      	mov	r0, r6
 80044ca:	f000 f881 	bl	80045d0 <_malloc_r>
 80044ce:	b948      	cbnz	r0, 80044e4 <__smakebuf_r+0x44>
 80044d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044d4:	059a      	lsls	r2, r3, #22
 80044d6:	d4ef      	bmi.n	80044b8 <__smakebuf_r+0x18>
 80044d8:	f023 0303 	bic.w	r3, r3, #3
 80044dc:	f043 0302 	orr.w	r3, r3, #2
 80044e0:	81a3      	strh	r3, [r4, #12]
 80044e2:	e7e3      	b.n	80044ac <__smakebuf_r+0xc>
 80044e4:	4b0d      	ldr	r3, [pc, #52]	; (800451c <__smakebuf_r+0x7c>)
 80044e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	6020      	str	r0, [r4, #0]
 80044ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f0:	81a3      	strh	r3, [r4, #12]
 80044f2:	9b00      	ldr	r3, [sp, #0]
 80044f4:	6163      	str	r3, [r4, #20]
 80044f6:	9b01      	ldr	r3, [sp, #4]
 80044f8:	6120      	str	r0, [r4, #16]
 80044fa:	b15b      	cbz	r3, 8004514 <__smakebuf_r+0x74>
 80044fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004500:	4630      	mov	r0, r6
 8004502:	f000 fd2b 	bl	8004f5c <_isatty_r>
 8004506:	b128      	cbz	r0, 8004514 <__smakebuf_r+0x74>
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f023 0303 	bic.w	r3, r3, #3
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	81a3      	strh	r3, [r4, #12]
 8004514:	89a0      	ldrh	r0, [r4, #12]
 8004516:	4305      	orrs	r5, r0
 8004518:	81a5      	strh	r5, [r4, #12]
 800451a:	e7cd      	b.n	80044b8 <__smakebuf_r+0x18>
 800451c:	080042b1 	.word	0x080042b1

08004520 <malloc>:
 8004520:	4b02      	ldr	r3, [pc, #8]	; (800452c <malloc+0xc>)
 8004522:	4601      	mov	r1, r0
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	f000 b853 	b.w	80045d0 <_malloc_r>
 800452a:	bf00      	nop
 800452c:	2000002c 	.word	0x2000002c

08004530 <_free_r>:
 8004530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004532:	2900      	cmp	r1, #0
 8004534:	d048      	beq.n	80045c8 <_free_r+0x98>
 8004536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800453a:	9001      	str	r0, [sp, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f1a1 0404 	sub.w	r4, r1, #4
 8004542:	bfb8      	it	lt
 8004544:	18e4      	addlt	r4, r4, r3
 8004546:	f000 fd2b 	bl	8004fa0 <__malloc_lock>
 800454a:	4a20      	ldr	r2, [pc, #128]	; (80045cc <_free_r+0x9c>)
 800454c:	9801      	ldr	r0, [sp, #4]
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	4615      	mov	r5, r2
 8004552:	b933      	cbnz	r3, 8004562 <_free_r+0x32>
 8004554:	6063      	str	r3, [r4, #4]
 8004556:	6014      	str	r4, [r2, #0]
 8004558:	b003      	add	sp, #12
 800455a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800455e:	f000 bd25 	b.w	8004fac <__malloc_unlock>
 8004562:	42a3      	cmp	r3, r4
 8004564:	d90b      	bls.n	800457e <_free_r+0x4e>
 8004566:	6821      	ldr	r1, [r4, #0]
 8004568:	1862      	adds	r2, r4, r1
 800456a:	4293      	cmp	r3, r2
 800456c:	bf04      	itt	eq
 800456e:	681a      	ldreq	r2, [r3, #0]
 8004570:	685b      	ldreq	r3, [r3, #4]
 8004572:	6063      	str	r3, [r4, #4]
 8004574:	bf04      	itt	eq
 8004576:	1852      	addeq	r2, r2, r1
 8004578:	6022      	streq	r2, [r4, #0]
 800457a:	602c      	str	r4, [r5, #0]
 800457c:	e7ec      	b.n	8004558 <_free_r+0x28>
 800457e:	461a      	mov	r2, r3
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	b10b      	cbz	r3, 8004588 <_free_r+0x58>
 8004584:	42a3      	cmp	r3, r4
 8004586:	d9fa      	bls.n	800457e <_free_r+0x4e>
 8004588:	6811      	ldr	r1, [r2, #0]
 800458a:	1855      	adds	r5, r2, r1
 800458c:	42a5      	cmp	r5, r4
 800458e:	d10b      	bne.n	80045a8 <_free_r+0x78>
 8004590:	6824      	ldr	r4, [r4, #0]
 8004592:	4421      	add	r1, r4
 8004594:	1854      	adds	r4, r2, r1
 8004596:	42a3      	cmp	r3, r4
 8004598:	6011      	str	r1, [r2, #0]
 800459a:	d1dd      	bne.n	8004558 <_free_r+0x28>
 800459c:	681c      	ldr	r4, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	6053      	str	r3, [r2, #4]
 80045a2:	4421      	add	r1, r4
 80045a4:	6011      	str	r1, [r2, #0]
 80045a6:	e7d7      	b.n	8004558 <_free_r+0x28>
 80045a8:	d902      	bls.n	80045b0 <_free_r+0x80>
 80045aa:	230c      	movs	r3, #12
 80045ac:	6003      	str	r3, [r0, #0]
 80045ae:	e7d3      	b.n	8004558 <_free_r+0x28>
 80045b0:	6825      	ldr	r5, [r4, #0]
 80045b2:	1961      	adds	r1, r4, r5
 80045b4:	428b      	cmp	r3, r1
 80045b6:	bf04      	itt	eq
 80045b8:	6819      	ldreq	r1, [r3, #0]
 80045ba:	685b      	ldreq	r3, [r3, #4]
 80045bc:	6063      	str	r3, [r4, #4]
 80045be:	bf04      	itt	eq
 80045c0:	1949      	addeq	r1, r1, r5
 80045c2:	6021      	streq	r1, [r4, #0]
 80045c4:	6054      	str	r4, [r2, #4]
 80045c6:	e7c7      	b.n	8004558 <_free_r+0x28>
 80045c8:	b003      	add	sp, #12
 80045ca:	bd30      	pop	{r4, r5, pc}
 80045cc:	200001b8 	.word	0x200001b8

080045d0 <_malloc_r>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	1ccd      	adds	r5, r1, #3
 80045d4:	f025 0503 	bic.w	r5, r5, #3
 80045d8:	3508      	adds	r5, #8
 80045da:	2d0c      	cmp	r5, #12
 80045dc:	bf38      	it	cc
 80045de:	250c      	movcc	r5, #12
 80045e0:	2d00      	cmp	r5, #0
 80045e2:	4606      	mov	r6, r0
 80045e4:	db01      	blt.n	80045ea <_malloc_r+0x1a>
 80045e6:	42a9      	cmp	r1, r5
 80045e8:	d903      	bls.n	80045f2 <_malloc_r+0x22>
 80045ea:	230c      	movs	r3, #12
 80045ec:	6033      	str	r3, [r6, #0]
 80045ee:	2000      	movs	r0, #0
 80045f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f2:	f000 fcd5 	bl	8004fa0 <__malloc_lock>
 80045f6:	4921      	ldr	r1, [pc, #132]	; (800467c <_malloc_r+0xac>)
 80045f8:	680a      	ldr	r2, [r1, #0]
 80045fa:	4614      	mov	r4, r2
 80045fc:	b99c      	cbnz	r4, 8004626 <_malloc_r+0x56>
 80045fe:	4f20      	ldr	r7, [pc, #128]	; (8004680 <_malloc_r+0xb0>)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	b923      	cbnz	r3, 800460e <_malloc_r+0x3e>
 8004604:	4621      	mov	r1, r4
 8004606:	4630      	mov	r0, r6
 8004608:	f000 fb72 	bl	8004cf0 <_sbrk_r>
 800460c:	6038      	str	r0, [r7, #0]
 800460e:	4629      	mov	r1, r5
 8004610:	4630      	mov	r0, r6
 8004612:	f000 fb6d 	bl	8004cf0 <_sbrk_r>
 8004616:	1c43      	adds	r3, r0, #1
 8004618:	d123      	bne.n	8004662 <_malloc_r+0x92>
 800461a:	230c      	movs	r3, #12
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	4630      	mov	r0, r6
 8004620:	f000 fcc4 	bl	8004fac <__malloc_unlock>
 8004624:	e7e3      	b.n	80045ee <_malloc_r+0x1e>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	1b5b      	subs	r3, r3, r5
 800462a:	d417      	bmi.n	800465c <_malloc_r+0x8c>
 800462c:	2b0b      	cmp	r3, #11
 800462e:	d903      	bls.n	8004638 <_malloc_r+0x68>
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	441c      	add	r4, r3
 8004634:	6025      	str	r5, [r4, #0]
 8004636:	e004      	b.n	8004642 <_malloc_r+0x72>
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	42a2      	cmp	r2, r4
 800463c:	bf0c      	ite	eq
 800463e:	600b      	streq	r3, [r1, #0]
 8004640:	6053      	strne	r3, [r2, #4]
 8004642:	4630      	mov	r0, r6
 8004644:	f000 fcb2 	bl	8004fac <__malloc_unlock>
 8004648:	f104 000b 	add.w	r0, r4, #11
 800464c:	1d23      	adds	r3, r4, #4
 800464e:	f020 0007 	bic.w	r0, r0, #7
 8004652:	1ac2      	subs	r2, r0, r3
 8004654:	d0cc      	beq.n	80045f0 <_malloc_r+0x20>
 8004656:	1a1b      	subs	r3, r3, r0
 8004658:	50a3      	str	r3, [r4, r2]
 800465a:	e7c9      	b.n	80045f0 <_malloc_r+0x20>
 800465c:	4622      	mov	r2, r4
 800465e:	6864      	ldr	r4, [r4, #4]
 8004660:	e7cc      	b.n	80045fc <_malloc_r+0x2c>
 8004662:	1cc4      	adds	r4, r0, #3
 8004664:	f024 0403 	bic.w	r4, r4, #3
 8004668:	42a0      	cmp	r0, r4
 800466a:	d0e3      	beq.n	8004634 <_malloc_r+0x64>
 800466c:	1a21      	subs	r1, r4, r0
 800466e:	4630      	mov	r0, r6
 8004670:	f000 fb3e 	bl	8004cf0 <_sbrk_r>
 8004674:	3001      	adds	r0, #1
 8004676:	d1dd      	bne.n	8004634 <_malloc_r+0x64>
 8004678:	e7cf      	b.n	800461a <_malloc_r+0x4a>
 800467a:	bf00      	nop
 800467c:	200001b8 	.word	0x200001b8
 8004680:	200001bc 	.word	0x200001bc

08004684 <__sfputc_r>:
 8004684:	6893      	ldr	r3, [r2, #8]
 8004686:	3b01      	subs	r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	b410      	push	{r4}
 800468c:	6093      	str	r3, [r2, #8]
 800468e:	da08      	bge.n	80046a2 <__sfputc_r+0x1e>
 8004690:	6994      	ldr	r4, [r2, #24]
 8004692:	42a3      	cmp	r3, r4
 8004694:	db01      	blt.n	800469a <__sfputc_r+0x16>
 8004696:	290a      	cmp	r1, #10
 8004698:	d103      	bne.n	80046a2 <__sfputc_r+0x1e>
 800469a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800469e:	f000 bb7b 	b.w	8004d98 <__swbuf_r>
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	1c58      	adds	r0, r3, #1
 80046a6:	6010      	str	r0, [r2, #0]
 80046a8:	7019      	strb	r1, [r3, #0]
 80046aa:	4608      	mov	r0, r1
 80046ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <__sfputs_r>:
 80046b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b4:	4606      	mov	r6, r0
 80046b6:	460f      	mov	r7, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	18d5      	adds	r5, r2, r3
 80046bc:	42ac      	cmp	r4, r5
 80046be:	d101      	bne.n	80046c4 <__sfputs_r+0x12>
 80046c0:	2000      	movs	r0, #0
 80046c2:	e007      	b.n	80046d4 <__sfputs_r+0x22>
 80046c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c8:	463a      	mov	r2, r7
 80046ca:	4630      	mov	r0, r6
 80046cc:	f7ff ffda 	bl	8004684 <__sfputc_r>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d1f3      	bne.n	80046bc <__sfputs_r+0xa>
 80046d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046d8 <_vfiprintf_r>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	460d      	mov	r5, r1
 80046de:	b09d      	sub	sp, #116	; 0x74
 80046e0:	4614      	mov	r4, r2
 80046e2:	4698      	mov	r8, r3
 80046e4:	4606      	mov	r6, r0
 80046e6:	b118      	cbz	r0, 80046f0 <_vfiprintf_r+0x18>
 80046e8:	6983      	ldr	r3, [r0, #24]
 80046ea:	b90b      	cbnz	r3, 80046f0 <_vfiprintf_r+0x18>
 80046ec:	f7ff fe14 	bl	8004318 <__sinit>
 80046f0:	4b89      	ldr	r3, [pc, #548]	; (8004918 <_vfiprintf_r+0x240>)
 80046f2:	429d      	cmp	r5, r3
 80046f4:	d11b      	bne.n	800472e <_vfiprintf_r+0x56>
 80046f6:	6875      	ldr	r5, [r6, #4]
 80046f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046fa:	07d9      	lsls	r1, r3, #31
 80046fc:	d405      	bmi.n	800470a <_vfiprintf_r+0x32>
 80046fe:	89ab      	ldrh	r3, [r5, #12]
 8004700:	059a      	lsls	r2, r3, #22
 8004702:	d402      	bmi.n	800470a <_vfiprintf_r+0x32>
 8004704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004706:	f7ff fea5 	bl	8004454 <__retarget_lock_acquire_recursive>
 800470a:	89ab      	ldrh	r3, [r5, #12]
 800470c:	071b      	lsls	r3, r3, #28
 800470e:	d501      	bpl.n	8004714 <_vfiprintf_r+0x3c>
 8004710:	692b      	ldr	r3, [r5, #16]
 8004712:	b9eb      	cbnz	r3, 8004750 <_vfiprintf_r+0x78>
 8004714:	4629      	mov	r1, r5
 8004716:	4630      	mov	r0, r6
 8004718:	f000 fb90 	bl	8004e3c <__swsetup_r>
 800471c:	b1c0      	cbz	r0, 8004750 <_vfiprintf_r+0x78>
 800471e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004720:	07dc      	lsls	r4, r3, #31
 8004722:	d50e      	bpl.n	8004742 <_vfiprintf_r+0x6a>
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	b01d      	add	sp, #116	; 0x74
 800472a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472e:	4b7b      	ldr	r3, [pc, #492]	; (800491c <_vfiprintf_r+0x244>)
 8004730:	429d      	cmp	r5, r3
 8004732:	d101      	bne.n	8004738 <_vfiprintf_r+0x60>
 8004734:	68b5      	ldr	r5, [r6, #8]
 8004736:	e7df      	b.n	80046f8 <_vfiprintf_r+0x20>
 8004738:	4b79      	ldr	r3, [pc, #484]	; (8004920 <_vfiprintf_r+0x248>)
 800473a:	429d      	cmp	r5, r3
 800473c:	bf08      	it	eq
 800473e:	68f5      	ldreq	r5, [r6, #12]
 8004740:	e7da      	b.n	80046f8 <_vfiprintf_r+0x20>
 8004742:	89ab      	ldrh	r3, [r5, #12]
 8004744:	0598      	lsls	r0, r3, #22
 8004746:	d4ed      	bmi.n	8004724 <_vfiprintf_r+0x4c>
 8004748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800474a:	f7ff fe84 	bl	8004456 <__retarget_lock_release_recursive>
 800474e:	e7e9      	b.n	8004724 <_vfiprintf_r+0x4c>
 8004750:	2300      	movs	r3, #0
 8004752:	9309      	str	r3, [sp, #36]	; 0x24
 8004754:	2320      	movs	r3, #32
 8004756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800475a:	f8cd 800c 	str.w	r8, [sp, #12]
 800475e:	2330      	movs	r3, #48	; 0x30
 8004760:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004924 <_vfiprintf_r+0x24c>
 8004764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004768:	f04f 0901 	mov.w	r9, #1
 800476c:	4623      	mov	r3, r4
 800476e:	469a      	mov	sl, r3
 8004770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004774:	b10a      	cbz	r2, 800477a <_vfiprintf_r+0xa2>
 8004776:	2a25      	cmp	r2, #37	; 0x25
 8004778:	d1f9      	bne.n	800476e <_vfiprintf_r+0x96>
 800477a:	ebba 0b04 	subs.w	fp, sl, r4
 800477e:	d00b      	beq.n	8004798 <_vfiprintf_r+0xc0>
 8004780:	465b      	mov	r3, fp
 8004782:	4622      	mov	r2, r4
 8004784:	4629      	mov	r1, r5
 8004786:	4630      	mov	r0, r6
 8004788:	f7ff ff93 	bl	80046b2 <__sfputs_r>
 800478c:	3001      	adds	r0, #1
 800478e:	f000 80aa 	beq.w	80048e6 <_vfiprintf_r+0x20e>
 8004792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004794:	445a      	add	r2, fp
 8004796:	9209      	str	r2, [sp, #36]	; 0x24
 8004798:	f89a 3000 	ldrb.w	r3, [sl]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80a2 	beq.w	80048e6 <_vfiprintf_r+0x20e>
 80047a2:	2300      	movs	r3, #0
 80047a4:	f04f 32ff 	mov.w	r2, #4294967295
 80047a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ac:	f10a 0a01 	add.w	sl, sl, #1
 80047b0:	9304      	str	r3, [sp, #16]
 80047b2:	9307      	str	r3, [sp, #28]
 80047b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047b8:	931a      	str	r3, [sp, #104]	; 0x68
 80047ba:	4654      	mov	r4, sl
 80047bc:	2205      	movs	r2, #5
 80047be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c2:	4858      	ldr	r0, [pc, #352]	; (8004924 <_vfiprintf_r+0x24c>)
 80047c4:	f7fb fd04 	bl	80001d0 <memchr>
 80047c8:	9a04      	ldr	r2, [sp, #16]
 80047ca:	b9d8      	cbnz	r0, 8004804 <_vfiprintf_r+0x12c>
 80047cc:	06d1      	lsls	r1, r2, #27
 80047ce:	bf44      	itt	mi
 80047d0:	2320      	movmi	r3, #32
 80047d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047d6:	0713      	lsls	r3, r2, #28
 80047d8:	bf44      	itt	mi
 80047da:	232b      	movmi	r3, #43	; 0x2b
 80047dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047e0:	f89a 3000 	ldrb.w	r3, [sl]
 80047e4:	2b2a      	cmp	r3, #42	; 0x2a
 80047e6:	d015      	beq.n	8004814 <_vfiprintf_r+0x13c>
 80047e8:	9a07      	ldr	r2, [sp, #28]
 80047ea:	4654      	mov	r4, sl
 80047ec:	2000      	movs	r0, #0
 80047ee:	f04f 0c0a 	mov.w	ip, #10
 80047f2:	4621      	mov	r1, r4
 80047f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047f8:	3b30      	subs	r3, #48	; 0x30
 80047fa:	2b09      	cmp	r3, #9
 80047fc:	d94e      	bls.n	800489c <_vfiprintf_r+0x1c4>
 80047fe:	b1b0      	cbz	r0, 800482e <_vfiprintf_r+0x156>
 8004800:	9207      	str	r2, [sp, #28]
 8004802:	e014      	b.n	800482e <_vfiprintf_r+0x156>
 8004804:	eba0 0308 	sub.w	r3, r0, r8
 8004808:	fa09 f303 	lsl.w	r3, r9, r3
 800480c:	4313      	orrs	r3, r2
 800480e:	9304      	str	r3, [sp, #16]
 8004810:	46a2      	mov	sl, r4
 8004812:	e7d2      	b.n	80047ba <_vfiprintf_r+0xe2>
 8004814:	9b03      	ldr	r3, [sp, #12]
 8004816:	1d19      	adds	r1, r3, #4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	9103      	str	r1, [sp, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	bfbb      	ittet	lt
 8004820:	425b      	neglt	r3, r3
 8004822:	f042 0202 	orrlt.w	r2, r2, #2
 8004826:	9307      	strge	r3, [sp, #28]
 8004828:	9307      	strlt	r3, [sp, #28]
 800482a:	bfb8      	it	lt
 800482c:	9204      	strlt	r2, [sp, #16]
 800482e:	7823      	ldrb	r3, [r4, #0]
 8004830:	2b2e      	cmp	r3, #46	; 0x2e
 8004832:	d10c      	bne.n	800484e <_vfiprintf_r+0x176>
 8004834:	7863      	ldrb	r3, [r4, #1]
 8004836:	2b2a      	cmp	r3, #42	; 0x2a
 8004838:	d135      	bne.n	80048a6 <_vfiprintf_r+0x1ce>
 800483a:	9b03      	ldr	r3, [sp, #12]
 800483c:	1d1a      	adds	r2, r3, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	9203      	str	r2, [sp, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfb8      	it	lt
 8004846:	f04f 33ff 	movlt.w	r3, #4294967295
 800484a:	3402      	adds	r4, #2
 800484c:	9305      	str	r3, [sp, #20]
 800484e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004934 <_vfiprintf_r+0x25c>
 8004852:	7821      	ldrb	r1, [r4, #0]
 8004854:	2203      	movs	r2, #3
 8004856:	4650      	mov	r0, sl
 8004858:	f7fb fcba 	bl	80001d0 <memchr>
 800485c:	b140      	cbz	r0, 8004870 <_vfiprintf_r+0x198>
 800485e:	2340      	movs	r3, #64	; 0x40
 8004860:	eba0 000a 	sub.w	r0, r0, sl
 8004864:	fa03 f000 	lsl.w	r0, r3, r0
 8004868:	9b04      	ldr	r3, [sp, #16]
 800486a:	4303      	orrs	r3, r0
 800486c:	3401      	adds	r4, #1
 800486e:	9304      	str	r3, [sp, #16]
 8004870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004874:	482c      	ldr	r0, [pc, #176]	; (8004928 <_vfiprintf_r+0x250>)
 8004876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800487a:	2206      	movs	r2, #6
 800487c:	f7fb fca8 	bl	80001d0 <memchr>
 8004880:	2800      	cmp	r0, #0
 8004882:	d03f      	beq.n	8004904 <_vfiprintf_r+0x22c>
 8004884:	4b29      	ldr	r3, [pc, #164]	; (800492c <_vfiprintf_r+0x254>)
 8004886:	bb1b      	cbnz	r3, 80048d0 <_vfiprintf_r+0x1f8>
 8004888:	9b03      	ldr	r3, [sp, #12]
 800488a:	3307      	adds	r3, #7
 800488c:	f023 0307 	bic.w	r3, r3, #7
 8004890:	3308      	adds	r3, #8
 8004892:	9303      	str	r3, [sp, #12]
 8004894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004896:	443b      	add	r3, r7
 8004898:	9309      	str	r3, [sp, #36]	; 0x24
 800489a:	e767      	b.n	800476c <_vfiprintf_r+0x94>
 800489c:	fb0c 3202 	mla	r2, ip, r2, r3
 80048a0:	460c      	mov	r4, r1
 80048a2:	2001      	movs	r0, #1
 80048a4:	e7a5      	b.n	80047f2 <_vfiprintf_r+0x11a>
 80048a6:	2300      	movs	r3, #0
 80048a8:	3401      	adds	r4, #1
 80048aa:	9305      	str	r3, [sp, #20]
 80048ac:	4619      	mov	r1, r3
 80048ae:	f04f 0c0a 	mov.w	ip, #10
 80048b2:	4620      	mov	r0, r4
 80048b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048b8:	3a30      	subs	r2, #48	; 0x30
 80048ba:	2a09      	cmp	r2, #9
 80048bc:	d903      	bls.n	80048c6 <_vfiprintf_r+0x1ee>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0c5      	beq.n	800484e <_vfiprintf_r+0x176>
 80048c2:	9105      	str	r1, [sp, #20]
 80048c4:	e7c3      	b.n	800484e <_vfiprintf_r+0x176>
 80048c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80048ca:	4604      	mov	r4, r0
 80048cc:	2301      	movs	r3, #1
 80048ce:	e7f0      	b.n	80048b2 <_vfiprintf_r+0x1da>
 80048d0:	ab03      	add	r3, sp, #12
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	462a      	mov	r2, r5
 80048d6:	4b16      	ldr	r3, [pc, #88]	; (8004930 <_vfiprintf_r+0x258>)
 80048d8:	a904      	add	r1, sp, #16
 80048da:	4630      	mov	r0, r6
 80048dc:	f3af 8000 	nop.w
 80048e0:	4607      	mov	r7, r0
 80048e2:	1c78      	adds	r0, r7, #1
 80048e4:	d1d6      	bne.n	8004894 <_vfiprintf_r+0x1bc>
 80048e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048e8:	07d9      	lsls	r1, r3, #31
 80048ea:	d405      	bmi.n	80048f8 <_vfiprintf_r+0x220>
 80048ec:	89ab      	ldrh	r3, [r5, #12]
 80048ee:	059a      	lsls	r2, r3, #22
 80048f0:	d402      	bmi.n	80048f8 <_vfiprintf_r+0x220>
 80048f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048f4:	f7ff fdaf 	bl	8004456 <__retarget_lock_release_recursive>
 80048f8:	89ab      	ldrh	r3, [r5, #12]
 80048fa:	065b      	lsls	r3, r3, #25
 80048fc:	f53f af12 	bmi.w	8004724 <_vfiprintf_r+0x4c>
 8004900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004902:	e711      	b.n	8004728 <_vfiprintf_r+0x50>
 8004904:	ab03      	add	r3, sp, #12
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	462a      	mov	r2, r5
 800490a:	4b09      	ldr	r3, [pc, #36]	; (8004930 <_vfiprintf_r+0x258>)
 800490c:	a904      	add	r1, sp, #16
 800490e:	4630      	mov	r0, r6
 8004910:	f000 f880 	bl	8004a14 <_printf_i>
 8004914:	e7e4      	b.n	80048e0 <_vfiprintf_r+0x208>
 8004916:	bf00      	nop
 8004918:	080050e0 	.word	0x080050e0
 800491c:	08005100 	.word	0x08005100
 8004920:	080050c0 	.word	0x080050c0
 8004924:	08005120 	.word	0x08005120
 8004928:	0800512a 	.word	0x0800512a
 800492c:	00000000 	.word	0x00000000
 8004930:	080046b3 	.word	0x080046b3
 8004934:	08005126 	.word	0x08005126

08004938 <_printf_common>:
 8004938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800493c:	4616      	mov	r6, r2
 800493e:	4699      	mov	r9, r3
 8004940:	688a      	ldr	r2, [r1, #8]
 8004942:	690b      	ldr	r3, [r1, #16]
 8004944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004948:	4293      	cmp	r3, r2
 800494a:	bfb8      	it	lt
 800494c:	4613      	movlt	r3, r2
 800494e:	6033      	str	r3, [r6, #0]
 8004950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004954:	4607      	mov	r7, r0
 8004956:	460c      	mov	r4, r1
 8004958:	b10a      	cbz	r2, 800495e <_printf_common+0x26>
 800495a:	3301      	adds	r3, #1
 800495c:	6033      	str	r3, [r6, #0]
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	0699      	lsls	r1, r3, #26
 8004962:	bf42      	ittt	mi
 8004964:	6833      	ldrmi	r3, [r6, #0]
 8004966:	3302      	addmi	r3, #2
 8004968:	6033      	strmi	r3, [r6, #0]
 800496a:	6825      	ldr	r5, [r4, #0]
 800496c:	f015 0506 	ands.w	r5, r5, #6
 8004970:	d106      	bne.n	8004980 <_printf_common+0x48>
 8004972:	f104 0a19 	add.w	sl, r4, #25
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	6832      	ldr	r2, [r6, #0]
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	42ab      	cmp	r3, r5
 800497e:	dc26      	bgt.n	80049ce <_printf_common+0x96>
 8004980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004984:	1e13      	subs	r3, r2, #0
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	bf18      	it	ne
 800498a:	2301      	movne	r3, #1
 800498c:	0692      	lsls	r2, r2, #26
 800498e:	d42b      	bmi.n	80049e8 <_printf_common+0xb0>
 8004990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004994:	4649      	mov	r1, r9
 8004996:	4638      	mov	r0, r7
 8004998:	47c0      	blx	r8
 800499a:	3001      	adds	r0, #1
 800499c:	d01e      	beq.n	80049dc <_printf_common+0xa4>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	68e5      	ldr	r5, [r4, #12]
 80049a2:	6832      	ldr	r2, [r6, #0]
 80049a4:	f003 0306 	and.w	r3, r3, #6
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	bf08      	it	eq
 80049ac:	1aad      	subeq	r5, r5, r2
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	6922      	ldr	r2, [r4, #16]
 80049b2:	bf0c      	ite	eq
 80049b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049b8:	2500      	movne	r5, #0
 80049ba:	4293      	cmp	r3, r2
 80049bc:	bfc4      	itt	gt
 80049be:	1a9b      	subgt	r3, r3, r2
 80049c0:	18ed      	addgt	r5, r5, r3
 80049c2:	2600      	movs	r6, #0
 80049c4:	341a      	adds	r4, #26
 80049c6:	42b5      	cmp	r5, r6
 80049c8:	d11a      	bne.n	8004a00 <_printf_common+0xc8>
 80049ca:	2000      	movs	r0, #0
 80049cc:	e008      	b.n	80049e0 <_printf_common+0xa8>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4652      	mov	r2, sl
 80049d2:	4649      	mov	r1, r9
 80049d4:	4638      	mov	r0, r7
 80049d6:	47c0      	blx	r8
 80049d8:	3001      	adds	r0, #1
 80049da:	d103      	bne.n	80049e4 <_printf_common+0xac>
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295
 80049e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e4:	3501      	adds	r5, #1
 80049e6:	e7c6      	b.n	8004976 <_printf_common+0x3e>
 80049e8:	18e1      	adds	r1, r4, r3
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	2030      	movs	r0, #48	; 0x30
 80049ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f2:	4422      	add	r2, r4
 80049f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049fc:	3302      	adds	r3, #2
 80049fe:	e7c7      	b.n	8004990 <_printf_common+0x58>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4622      	mov	r2, r4
 8004a04:	4649      	mov	r1, r9
 8004a06:	4638      	mov	r0, r7
 8004a08:	47c0      	blx	r8
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d0e6      	beq.n	80049dc <_printf_common+0xa4>
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7d9      	b.n	80049c6 <_printf_common+0x8e>
	...

08004a14 <_printf_i>:
 8004a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a18:	460c      	mov	r4, r1
 8004a1a:	4691      	mov	r9, r2
 8004a1c:	7e27      	ldrb	r7, [r4, #24]
 8004a1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a20:	2f78      	cmp	r7, #120	; 0x78
 8004a22:	4680      	mov	r8, r0
 8004a24:	469a      	mov	sl, r3
 8004a26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a2a:	d807      	bhi.n	8004a3c <_printf_i+0x28>
 8004a2c:	2f62      	cmp	r7, #98	; 0x62
 8004a2e:	d80a      	bhi.n	8004a46 <_printf_i+0x32>
 8004a30:	2f00      	cmp	r7, #0
 8004a32:	f000 80d8 	beq.w	8004be6 <_printf_i+0x1d2>
 8004a36:	2f58      	cmp	r7, #88	; 0x58
 8004a38:	f000 80a3 	beq.w	8004b82 <_printf_i+0x16e>
 8004a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a44:	e03a      	b.n	8004abc <_printf_i+0xa8>
 8004a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a4a:	2b15      	cmp	r3, #21
 8004a4c:	d8f6      	bhi.n	8004a3c <_printf_i+0x28>
 8004a4e:	a001      	add	r0, pc, #4	; (adr r0, 8004a54 <_printf_i+0x40>)
 8004a50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a54:	08004aad 	.word	0x08004aad
 8004a58:	08004ac1 	.word	0x08004ac1
 8004a5c:	08004a3d 	.word	0x08004a3d
 8004a60:	08004a3d 	.word	0x08004a3d
 8004a64:	08004a3d 	.word	0x08004a3d
 8004a68:	08004a3d 	.word	0x08004a3d
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004a3d 	.word	0x08004a3d
 8004a74:	08004a3d 	.word	0x08004a3d
 8004a78:	08004a3d 	.word	0x08004a3d
 8004a7c:	08004a3d 	.word	0x08004a3d
 8004a80:	08004bcd 	.word	0x08004bcd
 8004a84:	08004af1 	.word	0x08004af1
 8004a88:	08004baf 	.word	0x08004baf
 8004a8c:	08004a3d 	.word	0x08004a3d
 8004a90:	08004a3d 	.word	0x08004a3d
 8004a94:	08004bef 	.word	0x08004bef
 8004a98:	08004a3d 	.word	0x08004a3d
 8004a9c:	08004af1 	.word	0x08004af1
 8004aa0:	08004a3d 	.word	0x08004a3d
 8004aa4:	08004a3d 	.word	0x08004a3d
 8004aa8:	08004bb7 	.word	0x08004bb7
 8004aac:	680b      	ldr	r3, [r1, #0]
 8004aae:	1d1a      	adds	r2, r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	600a      	str	r2, [r1, #0]
 8004ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0a3      	b.n	8004c08 <_printf_i+0x1f4>
 8004ac0:	6825      	ldr	r5, [r4, #0]
 8004ac2:	6808      	ldr	r0, [r1, #0]
 8004ac4:	062e      	lsls	r6, r5, #24
 8004ac6:	f100 0304 	add.w	r3, r0, #4
 8004aca:	d50a      	bpl.n	8004ae2 <_printf_i+0xce>
 8004acc:	6805      	ldr	r5, [r0, #0]
 8004ace:	600b      	str	r3, [r1, #0]
 8004ad0:	2d00      	cmp	r5, #0
 8004ad2:	da03      	bge.n	8004adc <_printf_i+0xc8>
 8004ad4:	232d      	movs	r3, #45	; 0x2d
 8004ad6:	426d      	negs	r5, r5
 8004ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004adc:	485e      	ldr	r0, [pc, #376]	; (8004c58 <_printf_i+0x244>)
 8004ade:	230a      	movs	r3, #10
 8004ae0:	e019      	b.n	8004b16 <_printf_i+0x102>
 8004ae2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ae6:	6805      	ldr	r5, [r0, #0]
 8004ae8:	600b      	str	r3, [r1, #0]
 8004aea:	bf18      	it	ne
 8004aec:	b22d      	sxthne	r5, r5
 8004aee:	e7ef      	b.n	8004ad0 <_printf_i+0xbc>
 8004af0:	680b      	ldr	r3, [r1, #0]
 8004af2:	6825      	ldr	r5, [r4, #0]
 8004af4:	1d18      	adds	r0, r3, #4
 8004af6:	6008      	str	r0, [r1, #0]
 8004af8:	0628      	lsls	r0, r5, #24
 8004afa:	d501      	bpl.n	8004b00 <_printf_i+0xec>
 8004afc:	681d      	ldr	r5, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <_printf_i+0xf2>
 8004b00:	0669      	lsls	r1, r5, #25
 8004b02:	d5fb      	bpl.n	8004afc <_printf_i+0xe8>
 8004b04:	881d      	ldrh	r5, [r3, #0]
 8004b06:	4854      	ldr	r0, [pc, #336]	; (8004c58 <_printf_i+0x244>)
 8004b08:	2f6f      	cmp	r7, #111	; 0x6f
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2308      	moveq	r3, #8
 8004b0e:	230a      	movne	r3, #10
 8004b10:	2100      	movs	r1, #0
 8004b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b16:	6866      	ldr	r6, [r4, #4]
 8004b18:	60a6      	str	r6, [r4, #8]
 8004b1a:	2e00      	cmp	r6, #0
 8004b1c:	bfa2      	ittt	ge
 8004b1e:	6821      	ldrge	r1, [r4, #0]
 8004b20:	f021 0104 	bicge.w	r1, r1, #4
 8004b24:	6021      	strge	r1, [r4, #0]
 8004b26:	b90d      	cbnz	r5, 8004b2c <_printf_i+0x118>
 8004b28:	2e00      	cmp	r6, #0
 8004b2a:	d04d      	beq.n	8004bc8 <_printf_i+0x1b4>
 8004b2c:	4616      	mov	r6, r2
 8004b2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b32:	fb03 5711 	mls	r7, r3, r1, r5
 8004b36:	5dc7      	ldrb	r7, [r0, r7]
 8004b38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b3c:	462f      	mov	r7, r5
 8004b3e:	42bb      	cmp	r3, r7
 8004b40:	460d      	mov	r5, r1
 8004b42:	d9f4      	bls.n	8004b2e <_printf_i+0x11a>
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d10b      	bne.n	8004b60 <_printf_i+0x14c>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	07df      	lsls	r7, r3, #31
 8004b4c:	d508      	bpl.n	8004b60 <_printf_i+0x14c>
 8004b4e:	6923      	ldr	r3, [r4, #16]
 8004b50:	6861      	ldr	r1, [r4, #4]
 8004b52:	4299      	cmp	r1, r3
 8004b54:	bfde      	ittt	le
 8004b56:	2330      	movle	r3, #48	; 0x30
 8004b58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b60:	1b92      	subs	r2, r2, r6
 8004b62:	6122      	str	r2, [r4, #16]
 8004b64:	f8cd a000 	str.w	sl, [sp]
 8004b68:	464b      	mov	r3, r9
 8004b6a:	aa03      	add	r2, sp, #12
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4640      	mov	r0, r8
 8004b70:	f7ff fee2 	bl	8004938 <_printf_common>
 8004b74:	3001      	adds	r0, #1
 8004b76:	d14c      	bne.n	8004c12 <_printf_i+0x1fe>
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7c:	b004      	add	sp, #16
 8004b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b82:	4835      	ldr	r0, [pc, #212]	; (8004c58 <_printf_i+0x244>)
 8004b84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	680e      	ldr	r6, [r1, #0]
 8004b8c:	061f      	lsls	r7, r3, #24
 8004b8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b92:	600e      	str	r6, [r1, #0]
 8004b94:	d514      	bpl.n	8004bc0 <_printf_i+0x1ac>
 8004b96:	07d9      	lsls	r1, r3, #31
 8004b98:	bf44      	itt	mi
 8004b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b9e:	6023      	strmi	r3, [r4, #0]
 8004ba0:	b91d      	cbnz	r5, 8004baa <_printf_i+0x196>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	f023 0320 	bic.w	r3, r3, #32
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	2310      	movs	r3, #16
 8004bac:	e7b0      	b.n	8004b10 <_printf_i+0xfc>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	f043 0320 	orr.w	r3, r3, #32
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	2378      	movs	r3, #120	; 0x78
 8004bb8:	4828      	ldr	r0, [pc, #160]	; (8004c5c <_printf_i+0x248>)
 8004bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bbe:	e7e3      	b.n	8004b88 <_printf_i+0x174>
 8004bc0:	065e      	lsls	r6, r3, #25
 8004bc2:	bf48      	it	mi
 8004bc4:	b2ad      	uxthmi	r5, r5
 8004bc6:	e7e6      	b.n	8004b96 <_printf_i+0x182>
 8004bc8:	4616      	mov	r6, r2
 8004bca:	e7bb      	b.n	8004b44 <_printf_i+0x130>
 8004bcc:	680b      	ldr	r3, [r1, #0]
 8004bce:	6826      	ldr	r6, [r4, #0]
 8004bd0:	6960      	ldr	r0, [r4, #20]
 8004bd2:	1d1d      	adds	r5, r3, #4
 8004bd4:	600d      	str	r5, [r1, #0]
 8004bd6:	0635      	lsls	r5, r6, #24
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	d501      	bpl.n	8004be0 <_printf_i+0x1cc>
 8004bdc:	6018      	str	r0, [r3, #0]
 8004bde:	e002      	b.n	8004be6 <_printf_i+0x1d2>
 8004be0:	0671      	lsls	r1, r6, #25
 8004be2:	d5fb      	bpl.n	8004bdc <_printf_i+0x1c8>
 8004be4:	8018      	strh	r0, [r3, #0]
 8004be6:	2300      	movs	r3, #0
 8004be8:	6123      	str	r3, [r4, #16]
 8004bea:	4616      	mov	r6, r2
 8004bec:	e7ba      	b.n	8004b64 <_printf_i+0x150>
 8004bee:	680b      	ldr	r3, [r1, #0]
 8004bf0:	1d1a      	adds	r2, r3, #4
 8004bf2:	600a      	str	r2, [r1, #0]
 8004bf4:	681e      	ldr	r6, [r3, #0]
 8004bf6:	6862      	ldr	r2, [r4, #4]
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f7fb fae8 	bl	80001d0 <memchr>
 8004c00:	b108      	cbz	r0, 8004c06 <_printf_i+0x1f2>
 8004c02:	1b80      	subs	r0, r0, r6
 8004c04:	6060      	str	r0, [r4, #4]
 8004c06:	6863      	ldr	r3, [r4, #4]
 8004c08:	6123      	str	r3, [r4, #16]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c10:	e7a8      	b.n	8004b64 <_printf_i+0x150>
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	4632      	mov	r2, r6
 8004c16:	4649      	mov	r1, r9
 8004c18:	4640      	mov	r0, r8
 8004c1a:	47d0      	blx	sl
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d0ab      	beq.n	8004b78 <_printf_i+0x164>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	079b      	lsls	r3, r3, #30
 8004c24:	d413      	bmi.n	8004c4e <_printf_i+0x23a>
 8004c26:	68e0      	ldr	r0, [r4, #12]
 8004c28:	9b03      	ldr	r3, [sp, #12]
 8004c2a:	4298      	cmp	r0, r3
 8004c2c:	bfb8      	it	lt
 8004c2e:	4618      	movlt	r0, r3
 8004c30:	e7a4      	b.n	8004b7c <_printf_i+0x168>
 8004c32:	2301      	movs	r3, #1
 8004c34:	4632      	mov	r2, r6
 8004c36:	4649      	mov	r1, r9
 8004c38:	4640      	mov	r0, r8
 8004c3a:	47d0      	blx	sl
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d09b      	beq.n	8004b78 <_printf_i+0x164>
 8004c40:	3501      	adds	r5, #1
 8004c42:	68e3      	ldr	r3, [r4, #12]
 8004c44:	9903      	ldr	r1, [sp, #12]
 8004c46:	1a5b      	subs	r3, r3, r1
 8004c48:	42ab      	cmp	r3, r5
 8004c4a:	dcf2      	bgt.n	8004c32 <_printf_i+0x21e>
 8004c4c:	e7eb      	b.n	8004c26 <_printf_i+0x212>
 8004c4e:	2500      	movs	r5, #0
 8004c50:	f104 0619 	add.w	r6, r4, #25
 8004c54:	e7f5      	b.n	8004c42 <_printf_i+0x22e>
 8004c56:	bf00      	nop
 8004c58:	08005131 	.word	0x08005131
 8004c5c:	08005142 	.word	0x08005142

08004c60 <_putc_r>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	460d      	mov	r5, r1
 8004c64:	4614      	mov	r4, r2
 8004c66:	4606      	mov	r6, r0
 8004c68:	b118      	cbz	r0, 8004c72 <_putc_r+0x12>
 8004c6a:	6983      	ldr	r3, [r0, #24]
 8004c6c:	b90b      	cbnz	r3, 8004c72 <_putc_r+0x12>
 8004c6e:	f7ff fb53 	bl	8004318 <__sinit>
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <_putc_r+0x84>)
 8004c74:	429c      	cmp	r4, r3
 8004c76:	d124      	bne.n	8004cc2 <_putc_r+0x62>
 8004c78:	6874      	ldr	r4, [r6, #4]
 8004c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c7c:	07d8      	lsls	r0, r3, #31
 8004c7e:	d405      	bmi.n	8004c8c <_putc_r+0x2c>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	0599      	lsls	r1, r3, #22
 8004c84:	d402      	bmi.n	8004c8c <_putc_r+0x2c>
 8004c86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c88:	f7ff fbe4 	bl	8004454 <__retarget_lock_acquire_recursive>
 8004c8c:	68a3      	ldr	r3, [r4, #8]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	60a3      	str	r3, [r4, #8]
 8004c94:	da05      	bge.n	8004ca2 <_putc_r+0x42>
 8004c96:	69a2      	ldr	r2, [r4, #24]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	db1c      	blt.n	8004cd6 <_putc_r+0x76>
 8004c9c:	b2eb      	uxtb	r3, r5
 8004c9e:	2b0a      	cmp	r3, #10
 8004ca0:	d019      	beq.n	8004cd6 <_putc_r+0x76>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	6022      	str	r2, [r4, #0]
 8004ca8:	701d      	strb	r5, [r3, #0]
 8004caa:	b2ed      	uxtb	r5, r5
 8004cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cae:	07da      	lsls	r2, r3, #31
 8004cb0:	d405      	bmi.n	8004cbe <_putc_r+0x5e>
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	059b      	lsls	r3, r3, #22
 8004cb6:	d402      	bmi.n	8004cbe <_putc_r+0x5e>
 8004cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cba:	f7ff fbcc 	bl	8004456 <__retarget_lock_release_recursive>
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	bd70      	pop	{r4, r5, r6, pc}
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <_putc_r+0x88>)
 8004cc4:	429c      	cmp	r4, r3
 8004cc6:	d101      	bne.n	8004ccc <_putc_r+0x6c>
 8004cc8:	68b4      	ldr	r4, [r6, #8]
 8004cca:	e7d6      	b.n	8004c7a <_putc_r+0x1a>
 8004ccc:	4b07      	ldr	r3, [pc, #28]	; (8004cec <_putc_r+0x8c>)
 8004cce:	429c      	cmp	r4, r3
 8004cd0:	bf08      	it	eq
 8004cd2:	68f4      	ldreq	r4, [r6, #12]
 8004cd4:	e7d1      	b.n	8004c7a <_putc_r+0x1a>
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4622      	mov	r2, r4
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f000 f85c 	bl	8004d98 <__swbuf_r>
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	e7e3      	b.n	8004cac <_putc_r+0x4c>
 8004ce4:	080050e0 	.word	0x080050e0
 8004ce8:	08005100 	.word	0x08005100
 8004cec:	080050c0 	.word	0x080050c0

08004cf0 <_sbrk_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4d06      	ldr	r5, [pc, #24]	; (8004d0c <_sbrk_r+0x1c>)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	4608      	mov	r0, r1
 8004cfa:	602b      	str	r3, [r5, #0]
 8004cfc:	f7fe fee2 	bl	8003ac4 <_sbrk>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d102      	bne.n	8004d0a <_sbrk_r+0x1a>
 8004d04:	682b      	ldr	r3, [r5, #0]
 8004d06:	b103      	cbz	r3, 8004d0a <_sbrk_r+0x1a>
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	bd38      	pop	{r3, r4, r5, pc}
 8004d0c:	200001f8 	.word	0x200001f8

08004d10 <__sread>:
 8004d10:	b510      	push	{r4, lr}
 8004d12:	460c      	mov	r4, r1
 8004d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d18:	f000 f94e 	bl	8004fb8 <_read_r>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	bfab      	itete	ge
 8004d20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d22:	89a3      	ldrhlt	r3, [r4, #12]
 8004d24:	181b      	addge	r3, r3, r0
 8004d26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d2a:	bfac      	ite	ge
 8004d2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d2e:	81a3      	strhlt	r3, [r4, #12]
 8004d30:	bd10      	pop	{r4, pc}

08004d32 <__swrite>:
 8004d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d36:	461f      	mov	r7, r3
 8004d38:	898b      	ldrh	r3, [r1, #12]
 8004d3a:	05db      	lsls	r3, r3, #23
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	4616      	mov	r6, r2
 8004d42:	d505      	bpl.n	8004d50 <__swrite+0x1e>
 8004d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d48:	2302      	movs	r3, #2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f000 f916 	bl	8004f7c <_lseek_r>
 8004d50:	89a3      	ldrh	r3, [r4, #12]
 8004d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d5a:	81a3      	strh	r3, [r4, #12]
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	463b      	mov	r3, r7
 8004d60:	4628      	mov	r0, r5
 8004d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d66:	f7fb bdb3 	b.w	80008d0 <_write_r>

08004d6a <__sseek>:
 8004d6a:	b510      	push	{r4, lr}
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d72:	f000 f903 	bl	8004f7c <_lseek_r>
 8004d76:	1c43      	adds	r3, r0, #1
 8004d78:	89a3      	ldrh	r3, [r4, #12]
 8004d7a:	bf15      	itete	ne
 8004d7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d86:	81a3      	strheq	r3, [r4, #12]
 8004d88:	bf18      	it	ne
 8004d8a:	81a3      	strhne	r3, [r4, #12]
 8004d8c:	bd10      	pop	{r4, pc}

08004d8e <__sclose>:
 8004d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d92:	f000 b8c1 	b.w	8004f18 <_close_r>
	...

08004d98 <__swbuf_r>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	460e      	mov	r6, r1
 8004d9c:	4614      	mov	r4, r2
 8004d9e:	4605      	mov	r5, r0
 8004da0:	b118      	cbz	r0, 8004daa <__swbuf_r+0x12>
 8004da2:	6983      	ldr	r3, [r0, #24]
 8004da4:	b90b      	cbnz	r3, 8004daa <__swbuf_r+0x12>
 8004da6:	f7ff fab7 	bl	8004318 <__sinit>
 8004daa:	4b21      	ldr	r3, [pc, #132]	; (8004e30 <__swbuf_r+0x98>)
 8004dac:	429c      	cmp	r4, r3
 8004dae:	d12b      	bne.n	8004e08 <__swbuf_r+0x70>
 8004db0:	686c      	ldr	r4, [r5, #4]
 8004db2:	69a3      	ldr	r3, [r4, #24]
 8004db4:	60a3      	str	r3, [r4, #8]
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	071a      	lsls	r2, r3, #28
 8004dba:	d52f      	bpl.n	8004e1c <__swbuf_r+0x84>
 8004dbc:	6923      	ldr	r3, [r4, #16]
 8004dbe:	b36b      	cbz	r3, 8004e1c <__swbuf_r+0x84>
 8004dc0:	6923      	ldr	r3, [r4, #16]
 8004dc2:	6820      	ldr	r0, [r4, #0]
 8004dc4:	1ac0      	subs	r0, r0, r3
 8004dc6:	6963      	ldr	r3, [r4, #20]
 8004dc8:	b2f6      	uxtb	r6, r6
 8004dca:	4283      	cmp	r3, r0
 8004dcc:	4637      	mov	r7, r6
 8004dce:	dc04      	bgt.n	8004dda <__swbuf_r+0x42>
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f7ff fa0c 	bl	80041f0 <_fflush_r>
 8004dd8:	bb30      	cbnz	r0, 8004e28 <__swbuf_r+0x90>
 8004dda:	68a3      	ldr	r3, [r4, #8]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	60a3      	str	r3, [r4, #8]
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	6022      	str	r2, [r4, #0]
 8004de6:	701e      	strb	r6, [r3, #0]
 8004de8:	6963      	ldr	r3, [r4, #20]
 8004dea:	3001      	adds	r0, #1
 8004dec:	4283      	cmp	r3, r0
 8004dee:	d004      	beq.n	8004dfa <__swbuf_r+0x62>
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	07db      	lsls	r3, r3, #31
 8004df4:	d506      	bpl.n	8004e04 <__swbuf_r+0x6c>
 8004df6:	2e0a      	cmp	r6, #10
 8004df8:	d104      	bne.n	8004e04 <__swbuf_r+0x6c>
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f7ff f9f7 	bl	80041f0 <_fflush_r>
 8004e02:	b988      	cbnz	r0, 8004e28 <__swbuf_r+0x90>
 8004e04:	4638      	mov	r0, r7
 8004e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <__swbuf_r+0x9c>)
 8004e0a:	429c      	cmp	r4, r3
 8004e0c:	d101      	bne.n	8004e12 <__swbuf_r+0x7a>
 8004e0e:	68ac      	ldr	r4, [r5, #8]
 8004e10:	e7cf      	b.n	8004db2 <__swbuf_r+0x1a>
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <__swbuf_r+0xa0>)
 8004e14:	429c      	cmp	r4, r3
 8004e16:	bf08      	it	eq
 8004e18:	68ec      	ldreq	r4, [r5, #12]
 8004e1a:	e7ca      	b.n	8004db2 <__swbuf_r+0x1a>
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 f80c 	bl	8004e3c <__swsetup_r>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d0cb      	beq.n	8004dc0 <__swbuf_r+0x28>
 8004e28:	f04f 37ff 	mov.w	r7, #4294967295
 8004e2c:	e7ea      	b.n	8004e04 <__swbuf_r+0x6c>
 8004e2e:	bf00      	nop
 8004e30:	080050e0 	.word	0x080050e0
 8004e34:	08005100 	.word	0x08005100
 8004e38:	080050c0 	.word	0x080050c0

08004e3c <__swsetup_r>:
 8004e3c:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <__swsetup_r+0xcc>)
 8004e3e:	b570      	push	{r4, r5, r6, lr}
 8004e40:	681d      	ldr	r5, [r3, #0]
 8004e42:	4606      	mov	r6, r0
 8004e44:	460c      	mov	r4, r1
 8004e46:	b125      	cbz	r5, 8004e52 <__swsetup_r+0x16>
 8004e48:	69ab      	ldr	r3, [r5, #24]
 8004e4a:	b913      	cbnz	r3, 8004e52 <__swsetup_r+0x16>
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f7ff fa63 	bl	8004318 <__sinit>
 8004e52:	4b2e      	ldr	r3, [pc, #184]	; (8004f0c <__swsetup_r+0xd0>)
 8004e54:	429c      	cmp	r4, r3
 8004e56:	d10f      	bne.n	8004e78 <__swsetup_r+0x3c>
 8004e58:	686c      	ldr	r4, [r5, #4]
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e60:	0719      	lsls	r1, r3, #28
 8004e62:	d42c      	bmi.n	8004ebe <__swsetup_r+0x82>
 8004e64:	06dd      	lsls	r5, r3, #27
 8004e66:	d411      	bmi.n	8004e8c <__swsetup_r+0x50>
 8004e68:	2309      	movs	r3, #9
 8004e6a:	6033      	str	r3, [r6, #0]
 8004e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e70:	81a3      	strh	r3, [r4, #12]
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295
 8004e76:	e03e      	b.n	8004ef6 <__swsetup_r+0xba>
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <__swsetup_r+0xd4>)
 8004e7a:	429c      	cmp	r4, r3
 8004e7c:	d101      	bne.n	8004e82 <__swsetup_r+0x46>
 8004e7e:	68ac      	ldr	r4, [r5, #8]
 8004e80:	e7eb      	b.n	8004e5a <__swsetup_r+0x1e>
 8004e82:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <__swsetup_r+0xd8>)
 8004e84:	429c      	cmp	r4, r3
 8004e86:	bf08      	it	eq
 8004e88:	68ec      	ldreq	r4, [r5, #12]
 8004e8a:	e7e6      	b.n	8004e5a <__swsetup_r+0x1e>
 8004e8c:	0758      	lsls	r0, r3, #29
 8004e8e:	d512      	bpl.n	8004eb6 <__swsetup_r+0x7a>
 8004e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e92:	b141      	cbz	r1, 8004ea6 <__swsetup_r+0x6a>
 8004e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	d002      	beq.n	8004ea2 <__swsetup_r+0x66>
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f7ff fb47 	bl	8004530 <_free_r>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6063      	str	r3, [r4, #4]
 8004eb2:	6923      	ldr	r3, [r4, #16]
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f043 0308 	orr.w	r3, r3, #8
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	6923      	ldr	r3, [r4, #16]
 8004ec0:	b94b      	cbnz	r3, 8004ed6 <__swsetup_r+0x9a>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ecc:	d003      	beq.n	8004ed6 <__swsetup_r+0x9a>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f7ff fae5 	bl	80044a0 <__smakebuf_r>
 8004ed6:	89a0      	ldrh	r0, [r4, #12]
 8004ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004edc:	f010 0301 	ands.w	r3, r0, #1
 8004ee0:	d00a      	beq.n	8004ef8 <__swsetup_r+0xbc>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60a3      	str	r3, [r4, #8]
 8004ee6:	6963      	ldr	r3, [r4, #20]
 8004ee8:	425b      	negs	r3, r3
 8004eea:	61a3      	str	r3, [r4, #24]
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	b943      	cbnz	r3, 8004f02 <__swsetup_r+0xc6>
 8004ef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ef4:	d1ba      	bne.n	8004e6c <__swsetup_r+0x30>
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
 8004ef8:	0781      	lsls	r1, r0, #30
 8004efa:	bf58      	it	pl
 8004efc:	6963      	ldrpl	r3, [r4, #20]
 8004efe:	60a3      	str	r3, [r4, #8]
 8004f00:	e7f4      	b.n	8004eec <__swsetup_r+0xb0>
 8004f02:	2000      	movs	r0, #0
 8004f04:	e7f7      	b.n	8004ef6 <__swsetup_r+0xba>
 8004f06:	bf00      	nop
 8004f08:	2000002c 	.word	0x2000002c
 8004f0c:	080050e0 	.word	0x080050e0
 8004f10:	08005100 	.word	0x08005100
 8004f14:	080050c0 	.word	0x080050c0

08004f18 <_close_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4d06      	ldr	r5, [pc, #24]	; (8004f34 <_close_r+0x1c>)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	f7fe fd99 	bl	8003a5a <_close>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_close_r+0x1a>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_close_r+0x1a>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	200001f8 	.word	0x200001f8

08004f38 <_fstat_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4d07      	ldr	r5, [pc, #28]	; (8004f58 <_fstat_r+0x20>)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	f7fe fd94 	bl	8003a72 <_fstat>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	d102      	bne.n	8004f54 <_fstat_r+0x1c>
 8004f4e:	682b      	ldr	r3, [r5, #0]
 8004f50:	b103      	cbz	r3, 8004f54 <_fstat_r+0x1c>
 8004f52:	6023      	str	r3, [r4, #0]
 8004f54:	bd38      	pop	{r3, r4, r5, pc}
 8004f56:	bf00      	nop
 8004f58:	200001f8 	.word	0x200001f8

08004f5c <_isatty_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4d06      	ldr	r5, [pc, #24]	; (8004f78 <_isatty_r+0x1c>)
 8004f60:	2300      	movs	r3, #0
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	f7fe fd93 	bl	8003a92 <_isatty>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_isatty_r+0x1a>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_isatty_r+0x1a>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	200001f8 	.word	0x200001f8

08004f7c <_lseek_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4d07      	ldr	r5, [pc, #28]	; (8004f9c <_lseek_r+0x20>)
 8004f80:	4604      	mov	r4, r0
 8004f82:	4608      	mov	r0, r1
 8004f84:	4611      	mov	r1, r2
 8004f86:	2200      	movs	r2, #0
 8004f88:	602a      	str	r2, [r5, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f7fe fd8c 	bl	8003aa8 <_lseek>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_lseek_r+0x1e>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_lseek_r+0x1e>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	200001f8 	.word	0x200001f8

08004fa0 <__malloc_lock>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	; (8004fa8 <__malloc_lock+0x8>)
 8004fa2:	f7ff ba57 	b.w	8004454 <__retarget_lock_acquire_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	200001f1 	.word	0x200001f1

08004fac <__malloc_unlock>:
 8004fac:	4801      	ldr	r0, [pc, #4]	; (8004fb4 <__malloc_unlock+0x8>)
 8004fae:	f7ff ba52 	b.w	8004456 <__retarget_lock_release_recursive>
 8004fb2:	bf00      	nop
 8004fb4:	200001f1 	.word	0x200001f1

08004fb8 <_read_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4d07      	ldr	r5, [pc, #28]	; (8004fd8 <_read_r+0x20>)
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	4608      	mov	r0, r1
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	602a      	str	r2, [r5, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f7fe fd2a 	bl	8003a20 <_read>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_read_r+0x1e>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_read_r+0x1e>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	200001f8 	.word	0x200001f8

08004fdc <_init>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr

08004fe8 <_fini>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr
