
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013a4  0800954c  0800954c  0001954c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8f0  0800a8f0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8f0  0800a8f0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8f0  0800a8f0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8f0  0800a8f0  0001a8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8f4  0800a8f4  0001a8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a8f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000090  0800a988  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800a988  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013559  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ea  00000000  00000000  00033619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00036808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  00037250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006159  00000000  00000000  00037b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001002c  00000000  00000000  0003dc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ade9  00000000  00000000  0004dc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a8a86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003270  00000000  00000000  000a8adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009534 	.word	0x08009534

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009534 	.word	0x08009534

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	807b      	strh	r3, [r7, #2]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000a74:	787a      	ldrb	r2, [r7, #1]
 8000a76:	887b      	ldrh	r3, [r7, #2]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000a84:	887b      	ldrh	r3, [r7, #2]
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3208      	adds	r2, #8
 8000a90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	8879      	ldrh	r1, [r7, #2]
 8000aa6:	08c9      	lsrs	r1, r1, #3
 8000aa8:	b289      	uxth	r1, r1
 8000aaa:	4608      	mov	r0, r1
 8000aac:	ea02 0103 	and.w	r1, r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f100 0208 	add.w	r2, r0, #8
 8000ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	08db      	lsrs	r3, r3, #3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3208      	adds	r2, #8
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b08b      	sub	sp, #44	; 0x2c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b18:	4b91      	ldr	r3, [pc, #580]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 030c 	and.w	r3, r3, #12
 8000b20:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	2b08      	cmp	r3, #8
 8000b26:	d011      	beq.n	8000b4c <RCC_GetClocksFreq+0x5c>
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d837      	bhi.n	8000b9e <RCC_GetClocksFreq+0xae>
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <RCC_GetClocksFreq+0x4c>
 8000b34:	6a3b      	ldr	r3, [r7, #32]
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d004      	beq.n	8000b44 <RCC_GetClocksFreq+0x54>
 8000b3a:	e030      	b.n	8000b9e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a89      	ldr	r2, [pc, #548]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000b40:	601a      	str	r2, [r3, #0]
      break;
 8000b42:	e030      	b.n	8000ba6 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a87      	ldr	r2, [pc, #540]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000b48:	601a      	str	r2, [r3, #0]
      break;
 8000b4a:	e02c      	b.n	8000ba6 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000b4c:	4b84      	ldr	r3, [pc, #528]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b54:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000b56:	4b82      	ldr	r3, [pc, #520]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	0c9b      	lsrs	r3, r3, #18
 8000b64:	3302      	adds	r3, #2
 8000b66:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	4a7d      	ldr	r2, [pc, #500]	; (8000d68 <RCC_GetClocksFreq+0x278>)
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	e00d      	b.n	8000b96 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000b7a:	4b79      	ldr	r3, [pc, #484]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3301      	adds	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000b86:	4a77      	ldr	r2, [pc, #476]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b9a:	601a      	str	r2, [r3, #0]
      break;
 8000b9c:	e003      	b.n	8000ba6 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a70      	ldr	r2, [pc, #448]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000ba2:	601a      	str	r2, [r3, #0]
      break;
 8000ba4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000ba6:	4b6e      	ldr	r3, [pc, #440]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bae:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000bb6:	4a6d      	ldr	r2, [pc, #436]	; (8000d6c <RCC_GetClocksFreq+0x27c>)
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	40da      	lsrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000bce:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bd6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000bde:	4a63      	ldr	r2, [pc, #396]	; (8000d6c <RCC_GetClocksFreq+0x27c>)
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	4413      	add	r3, r2
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	40da      	lsrs	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000bf6:	4b5a      	ldr	r3, [pc, #360]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000bfe:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	0adb      	lsrs	r3, r3, #11
 8000c04:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000c06:	4a59      	ldr	r2, [pc, #356]	; (8000d6c <RCC_GetClocksFreq+0x27c>)
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	40da      	lsrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000c1e:	4b50      	ldr	r3, [pc, #320]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000c26:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000c2e:	4a50      	ldr	r2, [pc, #320]	; (8000d70 <RCC_GetClocksFreq+0x280>)
 8000c30:	6a3b      	ldr	r3, [r7, #32]
 8000c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	e003      	b.n	8000c5a <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000c5a:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5e:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000c62:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	0a5b      	lsrs	r3, r3, #9
 8000c68:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000c6a:	4a41      	ldr	r2, [pc, #260]	; (8000d70 <RCC_GetClocksFreq+0x280>)
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	615a      	str	r2, [r3, #20]
 8000c8c:	e003      	b.n	8000c96 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000c96:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	2b10      	cmp	r3, #16
 8000ca0:	d003      	beq.n	8000caa <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	e003      	b.n	8000cb2 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	2b20      	cmp	r3, #32
 8000cbc:	d003      	beq.n	8000cc6 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000cc2:	61da      	str	r2, [r3, #28]
 8000cc4:	e003      	b.n	8000cce <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cda:	d10d      	bne.n	8000cf8 <RCC_GetClocksFreq+0x208>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d108      	bne.n	8000cf8 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d104      	bne.n	8000cf8 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	005a      	lsls	r2, r3, #1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	621a      	str	r2, [r3, #32]
 8000cf6:	e003      	b.n	8000d00 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d0c:	d10d      	bne.n	8000d2a <RCC_GetClocksFreq+0x23a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d108      	bne.n	8000d2a <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d104      	bne.n	8000d2a <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	005a      	lsls	r2, r3, #1
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	625a      	str	r2, [r3, #36]	; 0x24
 8000d28:	e003      	b.n	8000d32 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d104      	bne.n	8000d48 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28
 8000d46:	e029      	b.n	8000d9c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10f      	bne.n	8000d74 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8000d5c:	e01e      	b.n	8000d9c <RCC_GetClocksFreq+0x2ac>
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000
 8000d64:	007a1200 	.word	0x007a1200
 8000d68:	003d0900 	.word	0x003d0900
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000d74:	4b66      	ldr	r3, [pc, #408]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d104      	bne.n	8000d8a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
 8000d88:	e008      	b.n	8000d9c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000d8a:	4b61      	ldr	r3, [pc, #388]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d102      	bne.n	8000d9c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a5e      	ldr	r2, [pc, #376]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000d9c:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d104      	bne.n	8000db2 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
 8000db0:	e021      	b.n	8000df6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000db2:	4b57      	ldr	r3, [pc, #348]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dbe:	d104      	bne.n	8000dca <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc8:	e015      	b.n	8000df6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000dca:	4b51      	ldr	r3, [pc, #324]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000dd6:	d104      	bne.n	8000de2 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de0:	e009      	b.n	8000df6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000de2:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000dee:	d102      	bne.n	8000df6 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000df6:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d104      	bne.n	8000e0c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0a:	e021      	b.n	8000e50 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000e0c:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000e18:	d104      	bne.n	8000e24 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
 8000e22:	e015      	b.n	8000e50 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e30:	d104      	bne.n	8000e3c <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e38:	631a      	str	r2, [r3, #48]	; 0x30
 8000e3a:	e009      	b.n	8000e50 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000e48:	d102      	bne.n	8000e50 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a31      	ldr	r2, [pc, #196]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d104      	bne.n	8000e66 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
 8000e64:	e021      	b.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e72:	d104      	bne.n	8000e7e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7c:	e015      	b.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000e7e:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000e8a:	d104      	bne.n	8000e96 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34
 8000e94:	e009      	b.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000ea2:	d102      	bne.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d104      	bne.n	8000ec0 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000ebe:	e021      	b.n	8000f04 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ecc:	d104      	bne.n	8000ed8 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ed6:	e015      	b.n	8000f04 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ee0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000ee4:	d104      	bne.n	8000ef0 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000eee:	e009      	b.n	8000f04 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ef8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000efc:	d102      	bne.n	8000f04 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000f02:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f04:	bf00      	nop
 8000f06:	372c      	adds	r7, #44	; 0x2c
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000
 8000f14:	007a1200 	.word	0x007a1200

08000f18 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	330c      	adds	r3, #12
 8000f30:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	78fa      	ldrb	r2, [r7, #3]
 8000f36:	701a      	strb	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	891b      	ldrh	r3, [r3, #8]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e001      	b.n	8000f6e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	4613      	mov	r3, r2
 8000fac:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d103      	bne.n	8000fea <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	e005      	b.n	8000ff6 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d102      	bne.n	8000ff6 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001008:	e006      	b.n	8001018 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43da      	mvns	r2, r3
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	400a      	ands	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	3724      	adds	r7, #36	; 0x24
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69da      	ldr	r2, [r3, #28]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4013      	ands	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800103e:	2301      	movs	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e001      	b.n	8001048 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001056:	b480      	push	{r7}
 8001058:	b087      	sub	sp, #28
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b29b      	uxth	r3, r3
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	b29b      	uxth	r3, r3
 8001078:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001080:	2201      	movs	r2, #1
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d105      	bne.n	800109c <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	4013      	ands	r3, r2
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e00d      	b.n	80010b8 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d105      	bne.n	80010ae <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e004      	b.n	80010b8 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4013      	ands	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	0c1b      	lsrs	r3, r3, #16
 80010bc:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80010be:	2201      	movs	r2, #1
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <USART_GetITStatus+0x8e>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80010de:	2301      	movs	r3, #1
 80010e0:	74fb      	strb	r3, [r7, #19]
 80010e2:	e001      	b.n	80010e8 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80010e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	2201      	movs	r2, #1
 800110a:	fa02 f103 	lsl.w	r1, r2, r3
 800110e:	4a06      	ldr	r2, [pc, #24]	; (8001128 <NVIC_EnableIRQ+0x30>)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	095b      	lsrs	r3, r3, #5
 8001116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <uart_get_char+0x48>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d011      	beq.n	8001164 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <uart_get_char+0x4c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	b2d1      	uxtb	r1, r2
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <uart_get_char+0x4c>)
 800114c:	7011      	strb	r1, [r2, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <uart_get_char+0x50>)
 8001152:	5c9b      	ldrb	r3, [r3, r2]
 8001154:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <uart_get_char+0x48>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	3b01      	subs	r3, #1
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <uart_get_char+0x48>)
 8001162:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8001164:	79fb      	ldrb	r3, [r7, #7]
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200001ae 	.word	0x200001ae
 8001178:	200001ad 	.word	0x200001ad
 800117c:	200000ac 	.word	0x200000ac

08001180 <uart_put_char>:

void uart_put_char(uint8_t c) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	b29b      	uxth	r3, r3
 800118e:	4619      	mov	r1, r3
 8001190:	4807      	ldr	r0, [pc, #28]	; (80011b0 <uart_put_char+0x30>)
 8001192:	f7ff fef3 	bl	8000f7c <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001196:	bf00      	nop
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <uart_put_char+0x30>)
 800119c:	f7ff ff42 	bl	8001024 <USART_GetFlagStatus>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f8      	beq.n	8001198 <uart_put_char+0x18>
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40004400 	.word	0x40004400

080011b4 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	e012      	b.n	80011ee <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b0a      	cmp	r3, #10
 80011d2:	d102      	bne.n	80011da <_write_r+0x26>
            uart_put_char('\r');
 80011d4:	200d      	movs	r0, #13
 80011d6:	f7ff ffd3 	bl	8001180 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ffcc 	bl	8001180 <uart_put_char>
    for (n = 0; n < len; n++) {
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbe8      	blt.n	80011c8 <_write_r+0x14>
    }

    return len;
 80011f6:	683b      	ldr	r3, [r7, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001204:	4915      	ldr	r1, [pc, #84]	; (800125c <USART2_IRQHandler+0x5c>)
 8001206:	4816      	ldr	r0, [pc, #88]	; (8001260 <USART2_IRQHandler+0x60>)
 8001208:	f7ff ff25 	bl	8001056 <USART_GetITStatus>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d021      	beq.n	8001256 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <USART2_IRQHandler+0x60>)
 8001214:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001216:	b299      	uxth	r1, r3
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <USART2_IRQHandler+0x64>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	b2d0      	uxtb	r0, r2
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <USART2_IRQHandler+0x64>)
 8001224:	7010      	strb	r0, [r2, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	b2c9      	uxtb	r1, r1
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <USART2_IRQHandler+0x68>)
 800122c:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <USART2_IRQHandler+0x6c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2bff      	cmp	r3, #255	; 0xff
 8001236:	d107      	bne.n	8001248 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <USART2_IRQHandler+0x70>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	3301      	adds	r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <USART2_IRQHandler+0x70>)
 8001244:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8001246:	e006      	b.n	8001256 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <USART2_IRQHandler+0x6c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	3301      	adds	r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <USART2_IRQHandler+0x6c>)
 8001254:	701a      	strb	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	00050105 	.word	0x00050105
 8001260:	40004400 	.word	0x40004400
 8001264:	200001ac 	.word	0x200001ac
 8001268:	200000ac 	.word	0x200000ac
 800126c:	200001ae 	.word	0x200001ae
 8001270:	200001ad 	.word	0x200001ad

08001274 <uart_clear>:

void uart_clear(){
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
    UART_START_IDX = 0;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <uart_clear+0x20>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
    UART_END_IDX = 0;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <uart_clear+0x24>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    UART_COUNT = 0;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <uart_clear+0x28>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	200001ad 	.word	0x200001ad
 8001298:	200001ac 	.word	0x200001ac
 800129c:	200001ae 	.word	0x200001ae

080012a0 <uart_get_count>:

uint8_t uart_get_count(){
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
    return UART_COUNT;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <uart_get_count+0x14>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	200001ae 	.word	0x200001ae

080012b8 <uart_init>:

void uart_init(uint32_t baud) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b094      	sub	sp, #80	; 0x50
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80012c0:	4b86      	ldr	r3, [pc, #536]	; (80014dc <uart_init+0x224>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 ff25 	bl	8008118 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80012ce:	4b83      	ldr	r3, [pc, #524]	; (80014dc <uart_init+0x224>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f006 ff1e 	bl	8008118 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80012dc:	4b80      	ldr	r3, [pc, #512]	; (80014e0 <uart_init+0x228>)
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	4a7f      	ldr	r2, [pc, #508]	; (80014e0 <uart_init+0x228>)
 80012e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e6:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80012e8:	4b7d      	ldr	r3, [pc, #500]	; (80014e0 <uart_init+0x228>)
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	4a7c      	ldr	r2, [pc, #496]	; (80014e0 <uart_init+0x228>)
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f2:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80012f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001302:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800130e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001312:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001314:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800131e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001322:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001324:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800132e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001332:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001334:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800133e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001342:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001344:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800134e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001352:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001354:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001358:	889b      	ldrh	r3, [r3, #4]
 800135a:	b29b      	uxth	r3, r3
 800135c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001360:	f023 030c 	bic.w	r3, r3, #12
 8001364:	b29b      	uxth	r3, r3
 8001366:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001368:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800136c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001370:	8892      	ldrh	r2, [r2, #4]
 8001372:	b292      	uxth	r2, r2
 8001374:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001376:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001384:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001386:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001390:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001394:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001396:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013a4:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80013a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013b0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80013b4:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 80013b6:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <uart_init+0x22c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a4a      	ldr	r2, [pc, #296]	; (80014e4 <uart_init+0x22c>)
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 80013c2:	4b48      	ldr	r3, [pc, #288]	; (80014e4 <uart_init+0x22c>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4a47      	ldr	r2, [pc, #284]	; (80014e4 <uart_init+0x22c>)
 80013c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013cc:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 80013ce:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <uart_init+0x22c>)
 80013d0:	4a44      	ldr	r2, [pc, #272]	; (80014e4 <uart_init+0x22c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 80013d6:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <uart_init+0x22c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a42      	ldr	r2, [pc, #264]	; (80014e4 <uart_init+0x22c>)
 80013dc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80013e0:	f023 030c 	bic.w	r3, r3, #12
 80013e4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 80013e6:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <uart_init+0x22c>)
 80013e8:	4a3e      	ldr	r2, [pc, #248]	; (80014e4 <uart_init+0x22c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <uart_init+0x22c>)
 80013f0:	4a3c      	ldr	r2, [pc, #240]	; (80014e4 <uart_init+0x22c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <uart_init+0x22c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a3a      	ldr	r2, [pc, #232]	; (80014e4 <uart_init+0x22c>)
 80013fc:	f043 030c 	orr.w	r3, r3, #12
 8001400:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <uart_init+0x22c>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4a37      	ldr	r2, [pc, #220]	; (80014e4 <uart_init+0x22c>)
 8001408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800140c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800140e:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <uart_init+0x22c>)
 8001410:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <uart_init+0x22c>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800141a:	2300      	movs	r3, #0
 800141c:	647b      	str	r3, [r7, #68]	; 0x44
 800141e:	2300      	movs	r3, #0
 8001420:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fb62 	bl	8000af0 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001430:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <uart_init+0x22c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d010      	beq.n	800145e <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 800143c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800143e:	005a      	lsls	r2, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	fb01 f202 	mul.w	r2, r1, r2
 8001458:	1a9b      	subs	r3, r3, r2
 800145a:	64bb      	str	r3, [r7, #72]	; 0x48
 800145c:	e00d      	b.n	800147a <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800145e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	fb01 f202 	mul.w	r2, r1, r2
 8001476:	1a9b      	subs	r3, r3, r2
 8001478:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001480:	429a      	cmp	r2, r3
 8001482:	d302      	bcc.n	800148a <uart_init+0x1d2>
        divider++;
 8001484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001486:	3301      	adds	r3, #1
 8001488:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <uart_init+0x22c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80014a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014a2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80014a6:	4013      	ands	r3, r2
 80014a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014aa:	4313      	orrs	r3, r2
 80014ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <uart_init+0x22c>)
 80014b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014b2:	b292      	uxth	r2, r2
 80014b4:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <uart_init+0x22c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <uart_init+0x22c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80014c2:	2201      	movs	r2, #1
 80014c4:	4908      	ldr	r1, [pc, #32]	; (80014e8 <uart_init+0x230>)
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <uart_init+0x22c>)
 80014c8:	f7ff fd6a 	bl	8000fa0 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 80014cc:	2026      	movs	r0, #38	; 0x26
 80014ce:	f7ff fe13 	bl	80010f8 <NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3750      	adds	r7, #80	; 0x50
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000002c 	.word	0x2000002c
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40004400 	.word	0x40004400
 80014e8:	00050105 	.word	0x00050105

080014ec <lcd_transmit_byte>:

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <lcd_transmit_byte+0x5c>)
 80014f8:	8a9b      	ldrh	r3, [r3, #20]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <lcd_transmit_byte+0x5c>)
 80014fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001502:	b29b      	uxth	r3, r3
 8001504:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001506:	bf00      	nop
 8001508:	2102      	movs	r1, #2
 800150a:	4810      	ldr	r0, [pc, #64]	; (800154c <lcd_transmit_byte+0x60>)
 800150c:	f7ff fd1a 	bl	8000f44 <SPI_I2S_GetFlagStatus>
 8001510:	4603      	mov	r3, r0
 8001512:	2b01      	cmp	r3, #1
 8001514:	d1f8      	bne.n	8001508 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4619      	mov	r1, r3
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <lcd_transmit_byte+0x60>)
 800151c:	f7ff fcfc 	bl	8000f18 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001520:	bf00      	nop
 8001522:	2102      	movs	r1, #2
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <lcd_transmit_byte+0x60>)
 8001526:	f7ff fd0d 	bl	8000f44 <SPI_I2S_GetFlagStatus>
 800152a:	4603      	mov	r3, r0
 800152c:	2b01      	cmp	r3, #1
 800152e:	d1f8      	bne.n	8001522 <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <lcd_transmit_byte+0x5c>)
 8001532:	8a9b      	ldrh	r3, [r3, #20]
 8001534:	b29b      	uxth	r3, r3
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <lcd_transmit_byte+0x5c>)
 8001538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153c:	b29b      	uxth	r3, r3
 800153e:	8293      	strh	r3, [r2, #20]
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	48000400 	.word	0x48000400
 800154c:	40003800 	.word	0x40003800

08001550 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 800155c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001560:	8a9b      	ldrh	r3, [r3, #20]
 8001562:	b29b      	uxth	r3, r3
 8001564:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800156c:	b29b      	uxth	r3, r3
 800156e:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff ffbb 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001576:	2010      	movs	r0, #16
 8001578:	f7ff ffb8 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 800157c:	20b0      	movs	r0, #176	; 0xb0
 800157e:	f7ff ffb5 	bl	80014ec <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001582:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001586:	8a9b      	ldrh	r3, [r3, #20]
 8001588:	b29b      	uxth	r3, r3
 800158a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	b29b      	uxth	r3, r3
 8001594:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e009      	b.n	80015b0 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ffa1 	bl	80014ec <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3301      	adds	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b7f      	cmp	r3, #127	; 0x7f
 80015b4:	ddf2      	ble.n	800159c <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80015b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015ba:	8a9b      	ldrh	r3, [r3, #20]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff ff8e 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80015d0:	2010      	movs	r0, #16
 80015d2:	f7ff ff8b 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 80015d6:	20b1      	movs	r0, #177	; 0xb1
 80015d8:	f7ff ff88 	bl	80014ec <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80015dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015e0:	8a9b      	ldrh	r3, [r3, #20]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e009      	b.n	800160a <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff74 	bl	80014ec <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3301      	adds	r3, #1
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2bff      	cmp	r3, #255	; 0xff
 800160e:	ddf2      	ble.n	80015f6 <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001614:	8a9b      	ldrh	r3, [r3, #20]
 8001616:	b29b      	uxth	r3, r3
 8001618:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800161c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001620:	b29b      	uxth	r3, r3
 8001622:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff ff61 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 800162a:	2010      	movs	r0, #16
 800162c:	f7ff ff5e 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8001630:	20b2      	movs	r0, #178	; 0xb2
 8001632:	f7ff ff5b 	bl	80014ec <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001636:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800163a:	8a9b      	ldrh	r3, [r3, #20]
 800163c:	b29b      	uxth	r3, r3
 800163e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001646:	b29b      	uxth	r3, r3
 8001648:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e009      	b.n	8001666 <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff46 	bl	80014ec <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3301      	adds	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800166c:	dbf1      	blt.n	8001652 <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 800166e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001672:	8a9b      	ldrh	r3, [r3, #20]
 8001674:	b29b      	uxth	r3, r3
 8001676:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800167a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800167e:	b29b      	uxth	r3, r3
 8001680:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff ff32 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001688:	2010      	movs	r0, #16
 800168a:	f7ff ff2f 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 800168e:	20b3      	movs	r0, #179	; 0xb3
 8001690:	f7ff ff2c 	bl	80014ec <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001694:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001698:	8a9b      	ldrh	r3, [r3, #20]
 800169a:	b29b      	uxth	r3, r3
 800169c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 80016a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e009      	b.n	80016c4 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff17 	bl	80014ec <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3301      	adds	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ca:	dbf1      	blt.n	80016b0 <lcd_push_buffer+0x160>
    }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <lcd_reset>:

void lcd_reset()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 80016de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016e2:	8a9b      	ldrh	r3, [r3, #20]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 80016f2:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <lcd_reset+0xd8>)
 80016f4:	8a9b      	ldrh	r3, [r3, #20]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4a2d      	ldr	r2, [pc, #180]	; (80017b0 <lcd_reset+0xd8>)
 80016fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fe:	b29b      	uxth	r3, r3
 8001700:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <lcd_reset+0xd8>)
 8001704:	8a9b      	ldrh	r3, [r3, #20]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4a29      	ldr	r2, [pc, #164]	; (80017b0 <lcd_reset+0xd8>)
 800170a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800170e:	b29b      	uxth	r3, r3
 8001710:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	e003      	b.n	8001720 <lcd_reset+0x48>
 8001718:	bf00      	nop
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3301      	adds	r3, #1
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f241 2247 	movw	r2, #4679	; 0x1247
 8001726:	4293      	cmp	r3, r2
 8001728:	d9f6      	bls.n	8001718 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <lcd_reset+0xd8>)
 800172c:	8a9b      	ldrh	r3, [r3, #20]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <lcd_reset+0xd8>)
 8001732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001736:	b29b      	uxth	r3, r3
 8001738:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	e003      	b.n	8001748 <lcd_reset+0x70>
 8001740:	bf00      	nop
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <lcd_reset+0xdc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d9f7      	bls.n	8001740 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001750:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001754:	8a9b      	ldrh	r3, [r3, #20]
 8001756:	b29b      	uxth	r3, r3
 8001758:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800175c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001760:	b29b      	uxth	r3, r3
 8001762:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 8001764:	20ae      	movs	r0, #174	; 0xae
 8001766:	f7ff fec1 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 800176a:	20a2      	movs	r0, #162	; 0xa2
 800176c:	f7ff febe 	bl	80014ec <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 8001770:	20a0      	movs	r0, #160	; 0xa0
 8001772:	f7ff febb 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 8001776:	20c8      	movs	r0, #200	; 0xc8
 8001778:	f7ff feb8 	bl	80014ec <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 800177c:	2022      	movs	r0, #34	; 0x22
 800177e:	f7ff feb5 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 8001782:	202f      	movs	r0, #47	; 0x2f
 8001784:	f7ff feb2 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 8001788:	2040      	movs	r0, #64	; 0x40
 800178a:	f7ff feaf 	bl	80014ec <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 800178e:	20af      	movs	r0, #175	; 0xaf
 8001790:	f7ff feac 	bl	80014ec <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 8001794:	2081      	movs	r0, #129	; 0x81
 8001796:	f7ff fea9 	bl	80014ec <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 800179a:	2017      	movs	r0, #23
 800179c:	f7ff fea6 	bl	80014ec <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 80017a0:	20a6      	movs	r0, #166	; 0xa6
 80017a2:	f7ff fea3 	bl	80014ec <lcd_transmit_byte>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	48000400 	.word	0x48000400
 80017b4:	0005f36f 	.word	0x0005f36f

080017b8 <lcd_init>:

void lcd_init() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 80017bc:	4b9d      	ldr	r3, [pc, #628]	; (8001a34 <lcd_init+0x27c>)
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	4a9c      	ldr	r2, [pc, #624]	; (8001a34 <lcd_init+0x27c>)
 80017c2:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 80017c6:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 80017c8:	4b9a      	ldr	r3, [pc, #616]	; (8001a34 <lcd_init+0x27c>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	4a99      	ldr	r2, [pc, #612]	; (8001a34 <lcd_init+0x27c>)
 80017ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d2:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 80017d4:	4b98      	ldr	r3, [pc, #608]	; (8001a38 <lcd_init+0x280>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	4a97      	ldr	r2, [pc, #604]	; (8001a38 <lcd_init+0x280>)
 80017da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80017de:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 80017e0:	4b95      	ldr	r3, [pc, #596]	; (8001a38 <lcd_init+0x280>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	4a94      	ldr	r2, [pc, #592]	; (8001a38 <lcd_init+0x280>)
 80017e6:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80017ea:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 80017ec:	4b92      	ldr	r3, [pc, #584]	; (8001a38 <lcd_init+0x280>)
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	4a91      	ldr	r2, [pc, #580]	; (8001a38 <lcd_init+0x280>)
 80017f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80017f6:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 80017f8:	4b8f      	ldr	r3, [pc, #572]	; (8001a38 <lcd_init+0x280>)
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	4a8e      	ldr	r2, [pc, #568]	; (8001a38 <lcd_init+0x280>)
 80017fe:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8001802:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8001804:	4b8c      	ldr	r3, [pc, #560]	; (8001a38 <lcd_init+0x280>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a8b      	ldr	r2, [pc, #556]	; (8001a38 <lcd_init+0x280>)
 800180a:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 800180e:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001810:	4b89      	ldr	r3, [pc, #548]	; (8001a38 <lcd_init+0x280>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a88      	ldr	r2, [pc, #544]	; (8001a38 <lcd_init+0x280>)
 8001816:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 800181a:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 800181c:	4b86      	ldr	r3, [pc, #536]	; (8001a38 <lcd_init+0x280>)
 800181e:	889b      	ldrh	r3, [r3, #4]
 8001820:	b29a      	uxth	r2, r3
 8001822:	4985      	ldr	r1, [pc, #532]	; (8001a38 <lcd_init+0x280>)
 8001824:	f645 73ff 	movw	r3, #24575	; 0x5fff
 8001828:	4013      	ands	r3, r2
 800182a:	b29b      	uxth	r3, r3
 800182c:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 800182e:	4a82      	ldr	r2, [pc, #520]	; (8001a38 <lcd_init+0x280>)
 8001830:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <lcd_init+0x280>)
 8001832:	8892      	ldrh	r2, [r2, #4]
 8001834:	b292      	uxth	r2, r2
 8001836:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 8001838:	4b7f      	ldr	r3, [pc, #508]	; (8001a38 <lcd_init+0x280>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a7e      	ldr	r2, [pc, #504]	; (8001a38 <lcd_init+0x280>)
 800183e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8001842:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001844:	4b7c      	ldr	r3, [pc, #496]	; (8001a38 <lcd_init+0x280>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a7b      	ldr	r2, [pc, #492]	; (8001a38 <lcd_init+0x280>)
 800184a:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 800184e:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 8001850:	4b79      	ldr	r3, [pc, #484]	; (8001a38 <lcd_init+0x280>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a78      	ldr	r2, [pc, #480]	; (8001a38 <lcd_init+0x280>)
 8001856:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 800185a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800185c:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <lcd_init+0x280>)
 800185e:	4a76      	ldr	r2, [pc, #472]	; (8001a38 <lcd_init+0x280>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 8001864:	4b74      	ldr	r3, [pc, #464]	; (8001a38 <lcd_init+0x280>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4a73      	ldr	r2, [pc, #460]	; (8001a38 <lcd_init+0x280>)
 800186a:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 800186e:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001870:	4b71      	ldr	r3, [pc, #452]	; (8001a38 <lcd_init+0x280>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a70      	ldr	r2, [pc, #448]	; (8001a38 <lcd_init+0x280>)
 8001876:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 800187a:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 800187c:	4b6e      	ldr	r3, [pc, #440]	; (8001a38 <lcd_init+0x280>)
 800187e:	889b      	ldrh	r3, [r3, #4]
 8001880:	b29b      	uxth	r3, r3
 8001882:	4a6d      	ldr	r2, [pc, #436]	; (8001a38 <lcd_init+0x280>)
 8001884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800188c:	b29b      	uxth	r3, r3
 800188e:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001890:	4a69      	ldr	r2, [pc, #420]	; (8001a38 <lcd_init+0x280>)
 8001892:	4b69      	ldr	r3, [pc, #420]	; (8001a38 <lcd_init+0x280>)
 8001894:	8892      	ldrh	r2, [r2, #4]
 8001896:	b292      	uxth	r2, r2
 8001898:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 800189a:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <lcd_init+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a66      	ldr	r2, [pc, #408]	; (8001a38 <lcd_init+0x280>)
 80018a0:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80018a4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80018a6:	4b64      	ldr	r3, [pc, #400]	; (8001a38 <lcd_init+0x280>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a63      	ldr	r2, [pc, #396]	; (8001a38 <lcd_init+0x280>)
 80018ac:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 80018b0:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 80018b2:	4b61      	ldr	r3, [pc, #388]	; (8001a38 <lcd_init+0x280>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	4a60      	ldr	r2, [pc, #384]	; (8001a38 <lcd_init+0x280>)
 80018b8:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80018bc:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80018be:	4b5e      	ldr	r3, [pc, #376]	; (8001a38 <lcd_init+0x280>)
 80018c0:	4a5d      	ldr	r2, [pc, #372]	; (8001a38 <lcd_init+0x280>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 80018c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018d0:	0c9b      	lsrs	r3, r3, #18
 80018d2:	049b      	lsls	r3, r3, #18
 80018d4:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80018d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 80018e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018ea:	889b      	ldrh	r3, [r3, #4]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018f2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80018fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001902:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001906:	8892      	ldrh	r2, [r2, #4]
 8001908:	b292      	uxth	r2, r2
 800190a:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 800190c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001916:	0c9b      	lsrs	r3, r3, #18
 8001918:	049b      	lsls	r3, r3, #18
 800191a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800191c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 800192c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800193a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 800193c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001946:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800194a:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 800194c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001956:	0c9b      	lsrs	r3, r3, #18
 8001958:	049b      	lsls	r3, r3, #18
 800195a:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800195c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001960:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <lcd_init+0x280>)
 800196a:	8a9b      	ldrh	r3, [r3, #20]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4a32      	ldr	r2, [pc, #200]	; (8001a38 <lcd_init+0x280>)
 8001970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001974:	b29b      	uxth	r3, r3
 8001976:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <lcd_init+0x284>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	b29b      	uxth	r3, r3
 800197e:	4a2f      	ldr	r2, [pc, #188]	; (8001a3c <lcd_init+0x284>)
 8001980:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001984:	b29b      	uxth	r3, r3
 8001986:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 8001988:	4a2c      	ldr	r2, [pc, #176]	; (8001a3c <lcd_init+0x284>)
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <lcd_init+0x284>)
 800198c:	8812      	ldrh	r2, [r2, #0]
 800198e:	b292      	uxth	r2, r2
 8001990:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <lcd_init+0x284>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4a28      	ldr	r2, [pc, #160]	; (8001a3c <lcd_init+0x284>)
 800199a:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 800199e:	b29b      	uxth	r3, r3
 80019a0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <lcd_init+0x284>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4a24      	ldr	r2, [pc, #144]	; (8001a3c <lcd_init+0x284>)
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <lcd_init+0x284>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <lcd_init+0x284>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	b29b      	uxth	r3, r3
 80019c0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <lcd_init+0x284>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <lcd_init+0x284>)
 80019ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <lcd_init+0x284>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <lcd_init+0x284>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	b29b      	uxth	r3, r3
 80019e0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 80019e2:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <lcd_init+0x284>)
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <lcd_init+0x284>)
 80019e6:	8812      	ldrh	r2, [r2, #0]
 80019e8:	b292      	uxth	r2, r2
 80019ea:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <lcd_init+0x284>)
 80019ee:	889b      	ldrh	r3, [r3, #4]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <lcd_init+0x284>)
 80019f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <lcd_init+0x284>)
 80019fe:	889b      	ldrh	r3, [r3, #4]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <lcd_init+0x284>)
 8001a04:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <lcd_init+0x284>)
 8001a0e:	8b9b      	ldrh	r3, [r3, #28]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <lcd_init+0x284>)
 8001a14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <lcd_init+0x284>)
 8001a1e:	2207      	movs	r2, #7
 8001a20:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <lcd_init+0x284>)
 8001a24:	889b      	ldrh	r3, [r3, #4]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <lcd_init+0x284>)
 8001a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	e006      	b.n	8001a40 <lcd_init+0x288>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	48000400 	.word	0x48000400
 8001a3c:	40003800 	.word	0x40003800
 8001a40:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <lcd_init+0x2b4>)
 8001a44:	889b      	ldrh	r3, [r3, #4]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <lcd_init+0x2b4>)
 8001a4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <lcd_init+0x2b4>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <lcd_init+0x2b4>)
 8001a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 8001a62:	f7ff fe39 	bl	80016d8 <lcd_reset>
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40003800 	.word	0x40003800

08001a70 <startWindow>:
#include "ansi_S.h"
#include "joystick.h"
#include "LCD.h"
void startWindow(int x1, int y1, int x2, int y2) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]

//TOP
	gotoxy(x1, y1);
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f003 f853 	bl	8004b2c <gotoxy>
	printf("%c", 201);
 8001a86:	20c9      	movs	r0, #201	; 0xc9
 8001a88:	f006 fb30 	bl	80080ec <putchar>
	for (int i=x1+1;i<x2;i++){
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e005      	b.n	8001aa0 <startWindow+0x30>
		printf("%c",205);
 8001a94:	20cd      	movs	r0, #205	; 0xcd
 8001a96:	f006 fb29 	bl	80080ec <putchar>
	for (int i=x1+1;i<x2;i++){
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dbf5      	blt.n	8001a94 <startWindow+0x24>
	}
	printf("%c", 187);
 8001aa8:	20bb      	movs	r0, #187	; 0xbb
 8001aaa:	f006 fb1f 	bl	80080ec <putchar>

//SIDES
	for(int i = 1; i<y2-1; i++){
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	e016      	b.n	8001ae2 <startWindow+0x72>
		gotoxy(x1, y1+i);
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f003 f835 	bl	8004b2c <gotoxy>
		printf("%c", 186);
 8001ac2:	20ba      	movs	r0, #186	; 0xba
 8001ac4:	f006 fb12 	bl	80080ec <putchar>
		gotoxy(x2, y1+i);
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4413      	add	r3, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f003 f82b 	bl	8004b2c <gotoxy>
		printf("%c", 186);
 8001ad6:	20ba      	movs	r0, #186	; 0xba
 8001ad8:	f006 fb08 	bl	80080ec <putchar>
	for(int i = 1; i<y2-1; i++){
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbe3      	blt.n	8001ab4 <startWindow+0x44>
	}

//BUTTOM
	printf("%c",200);
 8001aec:	20c8      	movs	r0, #200	; 0xc8
 8001aee:	f006 fafd 	bl	80080ec <putchar>
	for (int i=x1+1;i<x2;i++){
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e005      	b.n	8001b06 <startWindow+0x96>
		printf("%c",205);
 8001afa:	20cd      	movs	r0, #205	; 0xcd
 8001afc:	f006 faf6 	bl	80080ec <putchar>
	for (int i=x1+1;i<x2;i++){
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	dbf5      	blt.n	8001afa <startWindow+0x8a>
	}
	printf("%c", 188);
 8001b0e:	20bc      	movs	r0, #188	; 0xbc
 8001b10:	f006 faec 	bl	80080ec <putchar>
}
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <spaceship>:

int ani = 0;

void spaceship(int x1, int y1, int x2, int y2) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b090      	sub	sp, #64	; 0x40
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]

	fgcolor(1);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f002 ffae 	bl	8004a8c <fgcolor>
	int ex = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
	gotoxy(x1+15, y1);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	330f      	adds	r3, #15
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fff6 	bl	8004b2c <gotoxy>
	for(int i = 0; i <9; i++) {
 8001b40:	2300      	movs	r3, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b44:	e005      	b.n	8001b52 <spaceship+0x36>
	printf("%c",219);
 8001b46:	20db      	movs	r0, #219	; 0xdb
 8001b48:	f006 fad0 	bl	80080ec <putchar>
	for(int i = 0; i <9; i++) {
 8001b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b4e:	3301      	adds	r3, #1
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	ddf6      	ble.n	8001b46 <spaceship+0x2a>
	}
	bgcolor(5);
 8001b58:	2005      	movs	r0, #5
 8001b5a:	f002 ffb3 	bl	8004ac4 <bgcolor>
	fgcolor(0);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f002 ff94 	bl	8004a8c <fgcolor>
	if (Bup == 0){
 8001b64:	4bb9      	ldr	r3, [pc, #740]	; (8001e4c <spaceship+0x330>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <spaceship+0x56>
	printf("  UP  ");
 8001b6c:	48b8      	ldr	r0, [pc, #736]	; (8001e50 <spaceship+0x334>)
 8001b6e:	f006 faa5 	bl	80080bc <iprintf>
	}
	if (Bup == 1) {
 8001b72:	4bb6      	ldr	r3, [pc, #728]	; (8001e4c <spaceship+0x330>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d108      	bne.n	8001b8c <spaceship+0x70>
		blink(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f002 ffe8 	bl	8004b50 <blink>
	printf("! ! ! ");
 8001b80:	48b4      	ldr	r0, [pc, #720]	; (8001e54 <spaceship+0x338>)
 8001b82:	f006 fa9b 	bl	80080bc <iprintf>
	blink(0);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f002 ffe2 	bl	8004b50 <blink>
	}
	bgcolor(0);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f002 ff99 	bl	8004ac4 <bgcolor>
	fgcolor(1);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f002 ff7a 	bl	8004a8c <fgcolor>
	for(int i = 0; i <20; i++) {
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b9c:	e005      	b.n	8001baa <spaceship+0x8e>
	printf("%c",219);
 8001b9e:	20db      	movs	r0, #219	; 0xdb
 8001ba0:	f006 faa4 	bl	80080ec <putchar>
	for(int i = 0; i <20; i++) {
 8001ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8001baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bac:	2b13      	cmp	r3, #19
 8001bae:	ddf6      	ble.n	8001b9e <spaceship+0x82>
	}
	bgcolor(6);
 8001bb0:	2006      	movs	r0, #6
 8001bb2:	f002 ff87 	bl	8004ac4 <bgcolor>
	fgcolor(0);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f002 ff68 	bl	8004a8c <fgcolor>
	printf("HATCH");
 8001bbc:	48a6      	ldr	r0, [pc, #664]	; (8001e58 <spaceship+0x33c>)
 8001bbe:	f006 fa7d 	bl	80080bc <iprintf>
	bgcolor(0);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f002 ff7e 	bl	8004ac4 <bgcolor>
	fgcolor(1);
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f002 ff5f 	bl	8004a8c <fgcolor>
	for(int i = 0; i <29; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd2:	e005      	b.n	8001be0 <spaceship+0xc4>
	printf("%c",219);
 8001bd4:	20db      	movs	r0, #219	; 0xdb
 8001bd6:	f006 fa89 	bl	80080ec <putchar>
	for(int i = 0; i <29; i++) {
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	3301      	adds	r3, #1
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
 8001be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be2:	2b1c      	cmp	r3, #28
 8001be4:	ddf6      	ble.n	8001bd4 <spaceship+0xb8>
	}
	gotoxy(x1+15, y1+4);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f103 020f 	add.w	r2, r3, #15
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f002 ff9a 	bl	8004b2c <gotoxy>
	for(int i = 0; i <9; i++) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfc:	e005      	b.n	8001c0a <spaceship+0xee>
	printf("%c",219);
 8001bfe:	20db      	movs	r0, #219	; 0xdb
 8001c00:	f006 fa74 	bl	80080ec <putchar>
	for(int i = 0; i <9; i++) {
 8001c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c06:	3301      	adds	r3, #1
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	ddf6      	ble.n	8001bfe <spaceship+0xe2>
	}
	bgcolor(5);
 8001c10:	2005      	movs	r0, #5
 8001c12:	f002 ff57 	bl	8004ac4 <bgcolor>
	fgcolor(0);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f002 ff38 	bl	8004a8c <fgcolor>
	printf(" DOWN ");
 8001c1c:	488f      	ldr	r0, [pc, #572]	; (8001e5c <spaceship+0x340>)
 8001c1e:	f006 fa4d 	bl	80080bc <iprintf>
	bgcolor(0);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f002 ff4e 	bl	8004ac4 <bgcolor>
	fgcolor(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f002 ff2f 	bl	8004a8c <fgcolor>
	for(int i = 0; i <20; i++) {
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c32:	e005      	b.n	8001c40 <spaceship+0x124>
	printf("%c",219);
 8001c34:	20db      	movs	r0, #219	; 0xdb
 8001c36:	f006 fa59 	bl	80080ec <putchar>
	for(int i = 0; i <20; i++) {
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	2b13      	cmp	r3, #19
 8001c44:	ddf6      	ble.n	8001c34 <spaceship+0x118>
	}
	bgcolor(6);
 8001c46:	2006      	movs	r0, #6
 8001c48:	f002 ff3c 	bl	8004ac4 <bgcolor>
	fgcolor(0);
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f002 ff1d 	bl	8004a8c <fgcolor>
	printf("HATCH");
 8001c52:	4881      	ldr	r0, [pc, #516]	; (8001e58 <spaceship+0x33c>)
 8001c54:	f006 fa32 	bl	80080bc <iprintf>
	bgcolor(0);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f002 ff33 	bl	8004ac4 <bgcolor>
	fgcolor(1);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f002 ff14 	bl	8004a8c <fgcolor>
	for(int i = 0; i <29; i++) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
 8001c68:	e005      	b.n	8001c76 <spaceship+0x15a>
	printf("%c",219);
 8001c6a:	20db      	movs	r0, #219	; 0xdb
 8001c6c:	f006 fa3e 	bl	80080ec <putchar>
	for(int i = 0; i <29; i++) {
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	3301      	adds	r3, #1
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	2b1c      	cmp	r3, #28
 8001c7a:	ddf6      	ble.n	8001c6a <spaceship+0x14e>
	}
	int a = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	e030      	b.n	8001ce8 <spaceship+0x1cc>
	for(int i = 0; i < 7; i++){
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	e024      	b.n	8001cd6 <spaceship+0x1ba>
	gotoxy(x1+9+i+a, y1-3+j);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f103 0209 	add.w	r2, r3, #9
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	441a      	add	r2, r3
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	18d0      	adds	r0, r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1eda      	subs	r2, r3, #3
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f002 ff42 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8001ca8:	20db      	movs	r0, #219	; 0xdb
 8001caa:	f006 fa1f 	bl	80080ec <putchar>
	gotoxy(x1+9+i+a, y1+7-j);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f103 0209 	add.w	r2, r3, #9
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	441a      	add	r2, r3
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	18d0      	adds	r0, r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	1dda      	adds	r2, r3, #7
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f002 ff31 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8001cca:	20db      	movs	r0, #219	; 0xdb
 8001ccc:	f006 fa0e 	bl	80080ec <putchar>
	for(int i = 0; i < 7; i++){
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b06      	cmp	r3, #6
 8001cda:	ddd7      	ble.n	8001c8c <spaceship+0x170>
	} a+=2;
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	3302      	adds	r3, #2
 8001ce0:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	ddcb      	ble.n	8001c86 <spaceship+0x16a>
	}
	for(int i = 1; i < 4; i++) {
 8001cee:	2301      	movs	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e039      	b.n	8001d68 <spaceship+0x24c>
	gotoxy(x1+15, y1+i);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f103 000f 	add.w	r0, r3, #15
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f002 ff13 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8001d06:	20db      	movs	r0, #219	; 0xdb
 8001d08:	f006 f9f0 	bl	80080ec <putchar>
	for(int j = 0; j < 6; j++){
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e024      	b.n	8001d5c <spaceship+0x240>
	gotoxy(x2-8+j, y1+i);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f1a3 0208 	sub.w	r2, r3, #8
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	18d0      	adds	r0, r2, r3
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	4413      	add	r3, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f002 ff02 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8001d28:	20db      	movs	r0, #219	; 0xdb
 8001d2a:	f006 f9df 	bl	80080ec <putchar>
	ex++;
 8001d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d30:	3301      	adds	r3, #1
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (ex < 5){
 8001d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	dc0d      	bgt.n	8001d56 <spaceship+0x23a>
	gotoxy(x2-3+j, y1+i+1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	1eda      	subs	r2, r3, #3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	18d0      	adds	r0, r2, r3
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	4413      	add	r3, r2
 8001d48:	3301      	adds	r3, #1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f002 feee 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8001d50:	20db      	movs	r0, #219	; 0xdb
 8001d52:	f006 f9cb 	bl	80080ec <putchar>
	for(int j = 0; j < 6; j++){
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	ddd7      	ble.n	8001d12 <spaceship+0x1f6>
	for(int i = 1; i < 4; i++) {
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	ddc2      	ble.n	8001cf4 <spaceship+0x1d8>
	}
	}
	}
	gotoxy(83,y1+2);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	3302      	adds	r3, #2
 8001d72:	4619      	mov	r1, r3
 8001d74:	2053      	movs	r0, #83	; 0x53
 8001d76:	f002 fed9 	bl	8004b2c <gotoxy>
	fgcolor(0);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f002 fe86 	bl	8004a8c <fgcolor>
	bgcolor(7);
 8001d80:	2007      	movs	r0, #7
 8001d82:	f002 fe9f 	bl	8004ac4 <bgcolor>
	if(Bcanon == 0){
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <spaceship+0x344>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <spaceship+0x278>
	printf(" CANON   ");
 8001d8e:	4835      	ldr	r0, [pc, #212]	; (8001e64 <spaceship+0x348>)
 8001d90:	f006 f994 	bl	80080bc <iprintf>
	}
	if(Bcanon == 1){
 8001d94:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <spaceship+0x344>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d108      	bne.n	8001dae <spaceship+0x292>
		blink(1);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f002 fed7 	bl	8004b50 <blink>
		printf("! ! !    ");
 8001da2:	4831      	ldr	r0, [pc, #196]	; (8001e68 <spaceship+0x34c>)
 8001da4:	f006 f98a 	bl	80080bc <iprintf>
		blink(0);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f002 fed1 	bl	8004b50 <blink>
	}
	if(Bship1 == 1){
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <spaceship+0x350>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d111      	bne.n	8001dda <spaceship+0x2be>
		bgcolor(1);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f002 fe84 	bl	8004ac4 <bgcolor>
		gotoxy(x1+55,y1);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3337      	adds	r3, #55	; 0x37
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 feb2 	bl	8004b2c <gotoxy>
		blink(1);
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f002 fec1 	bl	8004b50 <blink>
		printf("! ! ! ");
 8001dce:	4821      	ldr	r0, [pc, #132]	; (8001e54 <spaceship+0x338>)
 8001dd0:	f006 f974 	bl	80080bc <iprintf>
		blink(0);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f002 febb 	bl	8004b50 <blink>
	}
	if(Bship2 == 1){
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <spaceship+0x354>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d114      	bne.n	8001e0c <spaceship+0x2f0>
		bgcolor(1);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f002 fe6e 	bl	8004ac4 <bgcolor>
		gotoxy(x1+44,y1+4);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3304      	adds	r3, #4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4610      	mov	r0, r2
 8001df6:	f002 fe99 	bl	8004b2c <gotoxy>
		blink(1);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f002 fea8 	bl	8004b50 <blink>
		printf("! ! ! ");
 8001e00:	4814      	ldr	r0, [pc, #80]	; (8001e54 <spaceship+0x338>)
 8001e02:	f006 f95b 	bl	80080bc <iprintf>
		blink(0);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f002 fea2 	bl	8004b50 <blink>
	}
	if(Bship3 == 1){
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <spaceship+0x358>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d114      	bne.n	8001e3e <spaceship+0x322>
		bgcolor(1);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f002 fe55 	bl	8004ac4 <bgcolor>
		gotoxy(x1+74,y1+4);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3304      	adds	r3, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f002 fe80 	bl	8004b2c <gotoxy>
		blink(1);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f002 fe8f 	bl	8004b50 <blink>
		printf("! ! ! ");
 8001e32:	4808      	ldr	r0, [pc, #32]	; (8001e54 <spaceship+0x338>)
 8001e34:	f006 f942 	bl	80080bc <iprintf>
		blink(0);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f002 fe89 	bl	8004b50 <blink>
	}
	resetbgcolor();
 8001e3e:	f002 fe53 	bl	8004ae8 <resetbgcolor>
}
 8001e42:	bf00      	nop
 8001e44:	3740      	adds	r7, #64	; 0x40
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200001d0 	.word	0x200001d0
 8001e50:	0800954c 	.word	0x0800954c
 8001e54:	08009554 	.word	0x08009554
 8001e58:	0800955c 	.word	0x0800955c
 8001e5c:	08009564 	.word	0x08009564
 8001e60:	200001d8 	.word	0x200001d8
 8001e64:	0800956c 	.word	0x0800956c
 8001e68:	08009578 	.word	0x08009578
 8001e6c:	200001cc 	.word	0x200001cc
 8001e70:	200001ec 	.word	0x200001ec
 8001e74:	200001d4 	.word	0x200001d4

08001e78 <spaceshipDelete>:

void spaceshipDelete(int x1, int y1, int x2, int y2) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]

	int ex = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	gotoxy(x1+15, y1);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	330f      	adds	r3, #15
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 fe4b 	bl	8004b2c <gotoxy>
	for(int i = 0; i <69; i++) {
 8001e96:	2300      	movs	r3, #0
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9a:	e005      	b.n	8001ea8 <spaceshipDelete+0x30>
	printf("%c",32);
 8001e9c:	2020      	movs	r0, #32
 8001e9e:	f006 f925 	bl	80080ec <putchar>
	for(int i = 0; i <69; i++) {
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	2b44      	cmp	r3, #68	; 0x44
 8001eac:	ddf6      	ble.n	8001e9c <spaceshipDelete+0x24>
	}
	gotoxy(x1+15, y1+4);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f103 020f 	add.w	r2, r3, #15
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f002 fe36 	bl	8004b2c <gotoxy>
	for(int i = 0; i <69; i++) {
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec4:	e005      	b.n	8001ed2 <spaceshipDelete+0x5a>
	printf("%c",32);
 8001ec6:	2020      	movs	r0, #32
 8001ec8:	f006 f910 	bl	80080ec <putchar>
	for(int i = 0; i <69; i++) {
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	3301      	adds	r3, #1
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	2b44      	cmp	r3, #68	; 0x44
 8001ed6:	ddf6      	ble.n	8001ec6 <spaceshipDelete+0x4e>
	}
	int a = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	e030      	b.n	8001f44 <spaceshipDelete+0xcc>
	for(int i = 0; i < 7; i++){
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	e024      	b.n	8001f32 <spaceshipDelete+0xba>
	gotoxy(x1+9+i+a, y1-3+j);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f103 0209 	add.w	r2, r3, #9
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	441a      	add	r2, r3
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	18d0      	adds	r0, r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1eda      	subs	r2, r3, #3
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	4413      	add	r3, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f002 fe14 	bl	8004b2c <gotoxy>
	printf("%c",32);
 8001f04:	2020      	movs	r0, #32
 8001f06:	f006 f8f1 	bl	80080ec <putchar>
	gotoxy(x1+9+i+a, y1+7-j);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f103 0209 	add.w	r2, r3, #9
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	441a      	add	r2, r3
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	18d0      	adds	r0, r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	1dda      	adds	r2, r3, #7
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	4619      	mov	r1, r3
 8001f22:	f002 fe03 	bl	8004b2c <gotoxy>
	printf("%c",32);
 8001f26:	2020      	movs	r0, #32
 8001f28:	f006 f8e0 	bl	80080ec <putchar>
	for(int i = 0; i < 7; i++){
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b06      	cmp	r3, #6
 8001f36:	ddd7      	ble.n	8001ee8 <spaceshipDelete+0x70>
	} a+=2;
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3301      	adds	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	ddcb      	ble.n	8001ee2 <spaceshipDelete+0x6a>
	}
	for(int i = 1; i < 4; i++) {
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e039      	b.n	8001fc4 <spaceshipDelete+0x14c>
	gotoxy(x1+15, y1+i);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f103 000f 	add.w	r0, r3, #15
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f002 fde5 	bl	8004b2c <gotoxy>
	printf("%c",32);
 8001f62:	2020      	movs	r0, #32
 8001f64:	f006 f8c2 	bl	80080ec <putchar>
	for(int j = 0; j < 6; j++){
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e024      	b.n	8001fb8 <spaceshipDelete+0x140>
	gotoxy(x2-8+j, y1+i);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f1a3 0208 	sub.w	r2, r3, #8
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	18d0      	adds	r0, r2, r3
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f002 fdd4 	bl	8004b2c <gotoxy>
	printf("%c",32);
 8001f84:	2020      	movs	r0, #32
 8001f86:	f006 f8b1 	bl	80080ec <putchar>
	ex++;
 8001f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (ex < 5){
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	dc0d      	bgt.n	8001fb2 <spaceshipDelete+0x13a>
	gotoxy(x2-3+j, y1+i+1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	1eda      	subs	r2, r3, #3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	18d0      	adds	r0, r2, r3
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f002 fdc0 	bl	8004b2c <gotoxy>
	printf("%c",32);
 8001fac:	2020      	movs	r0, #32
 8001fae:	f006 f89d 	bl	80080ec <putchar>
	for(int j = 0; j < 6; j++){
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	ddd7      	ble.n	8001f6e <spaceshipDelete+0xf6>
	for(int i = 1; i < 4; i++) {
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	ddc2      	ble.n	8001f50 <spaceshipDelete+0xd8>
	}
	}
	}
}
 8001fca:	bf00      	nop
 8001fcc:	bf00      	nop
 8001fce:	3730      	adds	r7, #48	; 0x30
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <fire>:

void fire(int x1, int y1, int x2, int y2) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
	int s = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (ani < 2) {
 8001fe6:	4ba1      	ldr	r3, [pc, #644]	; (800226c <fire+0x298>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	f300 8101 	bgt.w	80021f2 <fire+0x21e>
	for (int i = 0; i <= 8; i++){
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff4:	e044      	b.n	8002080 <fire+0xac>
	if (s == 0){
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d114      	bne.n	8002026 <fire+0x52>
	fgcolor(0);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f002 fd45 	bl	8004a8c <fgcolor>
	gotoxy(7+i,y1);
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	3307      	adds	r3, #7
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fd8f 	bl	8004b2c <gotoxy>
	printf("%c",219);
 800200e:	20db      	movs	r0, #219	; 0xdb
 8002010:	f006 f86c 	bl	80080ec <putchar>
	gotoxy(7+i,y2);
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002016:	3307      	adds	r3, #7
 8002018:	6839      	ldr	r1, [r7, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f002 fd86 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8002020:	20db      	movs	r0, #219	; 0xdb
 8002022:	f006 f863 	bl	80080ec <putchar>
	}
	if (s < 3){
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	2b02      	cmp	r3, #2
 800202a:	dc02      	bgt.n	8002032 <fire+0x5e>
	fgcolor(1);
 800202c:	2001      	movs	r0, #1
 800202e:	f002 fd2d 	bl	8004a8c <fgcolor>
	}
	if (s < 6 && s >= 3){
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	2b05      	cmp	r3, #5
 8002036:	dc05      	bgt.n	8002044 <fire+0x70>
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	2b02      	cmp	r3, #2
 800203c:	dd02      	ble.n	8002044 <fire+0x70>
	fgcolor(9);
 800203e:	2009      	movs	r0, #9
 8002040:	f002 fd24 	bl	8004a8c <fgcolor>
	}
	if (s >= 6){
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002046:	2b05      	cmp	r3, #5
 8002048:	dd02      	ble.n	8002050 <fire+0x7c>
	fgcolor(11);
 800204a:	200b      	movs	r0, #11
 800204c:	f002 fd1e 	bl	8004a8c <fgcolor>
	}
	gotoxy(8+i,y1);
 8002050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002052:	3308      	adds	r3, #8
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	4618      	mov	r0, r3
 8002058:	f002 fd68 	bl	8004b2c <gotoxy>
	printf("%c",219);
 800205c:	20db      	movs	r0, #219	; 0xdb
 800205e:	f006 f845 	bl	80080ec <putchar>
	gotoxy(8+i,y2);
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	3308      	adds	r3, #8
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f002 fd5f 	bl	8004b2c <gotoxy>
	printf("%c",219);
 800206e:	20db      	movs	r0, #219	; 0xdb
 8002070:	f006 f83c 	bl	80080ec <putchar>
	s++;
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	3301      	adds	r3, #1
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 8; i++){
 800207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207c:	3301      	adds	r3, #1
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	2b08      	cmp	r3, #8
 8002084:	ddb7      	ble.n	8001ff6 <fire+0x22>
	} s = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 11; i++){
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
 800208e:	e055      	b.n	800213c <fire+0x168>
	if (s == 0){
 8002090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d118      	bne.n	80020c8 <fire+0xf4>
	fgcolor(0);
 8002096:	2000      	movs	r0, #0
 8002098:	f002 fcf8 	bl	8004a8c <fgcolor>
	gotoxy(4+i,y1+1);
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	1d1a      	adds	r2, r3, #4
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3301      	adds	r3, #1
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f002 fd40 	bl	8004b2c <gotoxy>
	printf("%c",219);
 80020ac:	20db      	movs	r0, #219	; 0xdb
 80020ae:	f006 f81d 	bl	80080ec <putchar>
	gotoxy(4+i,y2-1);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	1d1a      	adds	r2, r3, #4
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	4619      	mov	r1, r3
 80020bc:	4610      	mov	r0, r2
 80020be:	f002 fd35 	bl	8004b2c <gotoxy>
	printf("%c",219);
 80020c2:	20db      	movs	r0, #219	; 0xdb
 80020c4:	f006 f812 	bl	80080ec <putchar>
	}
	if (s < 4){
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	dc02      	bgt.n	80020d4 <fire+0x100>
	fgcolor(1);
 80020ce:	2001      	movs	r0, #1
 80020d0:	f002 fcdc 	bl	8004a8c <fgcolor>
	}
	if (s < 7 && s >= 4){
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	dc05      	bgt.n	80020e6 <fire+0x112>
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	2b03      	cmp	r3, #3
 80020de:	dd02      	ble.n	80020e6 <fire+0x112>
	fgcolor(9);
 80020e0:	2009      	movs	r0, #9
 80020e2:	f002 fcd3 	bl	8004a8c <fgcolor>
	}
	if (s < 10 && s >= 7){
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	2b09      	cmp	r3, #9
 80020ea:	dc05      	bgt.n	80020f8 <fire+0x124>
 80020ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	dd02      	ble.n	80020f8 <fire+0x124>
	fgcolor(11);
 80020f2:	200b      	movs	r0, #11
 80020f4:	f002 fcca 	bl	8004a8c <fgcolor>
	}
	if (s >= 10){
 80020f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fa:	2b09      	cmp	r3, #9
 80020fc:	dd02      	ble.n	8002104 <fire+0x130>
	fgcolor(15);
 80020fe:	200f      	movs	r0, #15
 8002100:	f002 fcc4 	bl	8004a8c <fgcolor>
	}
	gotoxy(5+i,y1+1);
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	1d5a      	adds	r2, r3, #5
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	3301      	adds	r3, #1
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f002 fd0c 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8002114:	20db      	movs	r0, #219	; 0xdb
 8002116:	f005 ffe9 	bl	80080ec <putchar>
	gotoxy(5+i,y2-1);
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	1d5a      	adds	r2, r3, #5
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	3b01      	subs	r3, #1
 8002122:	4619      	mov	r1, r3
 8002124:	4610      	mov	r0, r2
 8002126:	f002 fd01 	bl	8004b2c <gotoxy>
	printf("%c",219);
 800212a:	20db      	movs	r0, #219	; 0xdb
 800212c:	f005 ffde 	bl	80080ec <putchar>
	s++;
 8002130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002132:	3301      	adds	r3, #1
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 11; i++){
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	3301      	adds	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	2b0b      	cmp	r3, #11
 8002140:	dda6      	ble.n	8002090 <fire+0xbc>
	} s = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 13; i++){
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
 800214a:	e048      	b.n	80021de <fire+0x20a>
	if (s == 0){
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10d      	bne.n	800216e <fire+0x19a>
	fgcolor(0);
 8002152:	2000      	movs	r0, #0
 8002154:	f002 fc9a 	bl	8004a8c <fgcolor>
	gotoxy(2+i,y1+2);
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	1c9a      	adds	r2, r3, #2
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3302      	adds	r3, #2
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f002 fce2 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8002168:	20db      	movs	r0, #219	; 0xdb
 800216a:	f005 ffbf 	bl	80080ec <putchar>
	}
	if(s < 3) {
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	2b02      	cmp	r3, #2
 8002172:	dc02      	bgt.n	800217a <fire+0x1a6>
	fgcolor(1);
 8002174:	2001      	movs	r0, #1
 8002176:	f002 fc89 	bl	8004a8c <fgcolor>
	}
	if (s < 7 && s >= 3){
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	2b06      	cmp	r3, #6
 800217e:	dc05      	bgt.n	800218c <fire+0x1b8>
 8002180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002182:	2b02      	cmp	r3, #2
 8002184:	dd02      	ble.n	800218c <fire+0x1b8>
	fgcolor(9);
 8002186:	2009      	movs	r0, #9
 8002188:	f002 fc80 	bl	8004a8c <fgcolor>
	}
	if (s < 10 && s >=7){
 800218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218e:	2b09      	cmp	r3, #9
 8002190:	dc05      	bgt.n	800219e <fire+0x1ca>
 8002192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002194:	2b06      	cmp	r3, #6
 8002196:	dd02      	ble.n	800219e <fire+0x1ca>
	fgcolor(11);
 8002198:	200b      	movs	r0, #11
 800219a:	f002 fc77 	bl	8004a8c <fgcolor>
	}
	if (s < 13 && s >= 10){
 800219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	dc05      	bgt.n	80021b0 <fire+0x1dc>
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a6:	2b09      	cmp	r3, #9
 80021a8:	dd02      	ble.n	80021b0 <fire+0x1dc>
	fgcolor(15);
 80021aa:	200f      	movs	r0, #15
 80021ac:	f002 fc6e 	bl	8004a8c <fgcolor>
	}
	if (s >= 13) {
 80021b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	dd02      	ble.n	80021bc <fire+0x1e8>
	fgcolor(12);
 80021b6:	200c      	movs	r0, #12
 80021b8:	f002 fc68 	bl	8004a8c <fgcolor>
	}
	gotoxy(3+i,y1+2);
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	1cda      	adds	r2, r3, #3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	3302      	adds	r3, #2
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f002 fcb0 	bl	8004b2c <gotoxy>
	printf("%c",219);
 80021cc:	20db      	movs	r0, #219	; 0xdb
 80021ce:	f005 ff8d 	bl	80080ec <putchar>
	s++;
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	3301      	adds	r3, #1
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 13; i++){
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	3301      	adds	r3, #1
 80021dc:	623b      	str	r3, [r7, #32]
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	2b0d      	cmp	r3, #13
 80021e2:	ddb3      	ble.n	800214c <fire+0x178>
	} s = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	ani++;
 80021e8:	4b20      	ldr	r3, [pc, #128]	; (800226c <fire+0x298>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a1f      	ldr	r2, [pc, #124]	; (800226c <fire+0x298>)
 80021f0:	6013      	str	r3, [r2, #0]
	}

	if (ani >= 2) {
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <fire+0x298>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	f340 80c5 	ble.w	8002386 <fire+0x3b2>
	for (int i = 0; i <= 9; i++){
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	e02c      	b.n	800225c <fire+0x288>
	if (s < 3){
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	2b02      	cmp	r3, #2
 8002206:	dc02      	bgt.n	800220e <fire+0x23a>
	fgcolor(9);
 8002208:	2009      	movs	r0, #9
 800220a:	f002 fc3f 	bl	8004a8c <fgcolor>
	}
	if (s < 6 && s >= 3){
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	2b05      	cmp	r3, #5
 8002212:	dc05      	bgt.n	8002220 <fire+0x24c>
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	2b02      	cmp	r3, #2
 8002218:	dd02      	ble.n	8002220 <fire+0x24c>
	fgcolor(11);
 800221a:	200b      	movs	r0, #11
 800221c:	f002 fc36 	bl	8004a8c <fgcolor>
	}
	if (s >= 6){
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	2b05      	cmp	r3, #5
 8002224:	dd02      	ble.n	800222c <fire+0x258>
	fgcolor(15);
 8002226:	200f      	movs	r0, #15
 8002228:	f002 fc30 	bl	8004a8c <fgcolor>
	}
	gotoxy(7+i,y1);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	3307      	adds	r3, #7
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	4618      	mov	r0, r3
 8002234:	f002 fc7a 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8002238:	20db      	movs	r0, #219	; 0xdb
 800223a:	f005 ff57 	bl	80080ec <putchar>
	gotoxy(7+i,y2);
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3307      	adds	r3, #7
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f002 fc71 	bl	8004b2c <gotoxy>
	printf("%c",219);
 800224a:	20db      	movs	r0, #219	; 0xdb
 800224c:	f005 ff4e 	bl	80080ec <putchar>
	s++;
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	3301      	adds	r3, #1
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 9; i++){
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3301      	adds	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b09      	cmp	r3, #9
 8002260:	ddcf      	ble.n	8002202 <fire+0x22e>
	} s = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 12; i++){
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	e03b      	b.n	80022e4 <fire+0x310>
 800226c:	200001b0 	.word	0x200001b0
	if (s < 4){
 8002270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002272:	2b03      	cmp	r3, #3
 8002274:	dc02      	bgt.n	800227c <fire+0x2a8>
	fgcolor(9);
 8002276:	2009      	movs	r0, #9
 8002278:	f002 fc08 	bl	8004a8c <fgcolor>
	}
	if (s < 7 && s >= 4){
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	2b06      	cmp	r3, #6
 8002280:	dc05      	bgt.n	800228e <fire+0x2ba>
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	2b03      	cmp	r3, #3
 8002286:	dd02      	ble.n	800228e <fire+0x2ba>
	fgcolor(11);
 8002288:	200b      	movs	r0, #11
 800228a:	f002 fbff 	bl	8004a8c <fgcolor>
	}
	if (s < 10 && s >= 7){
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	2b09      	cmp	r3, #9
 8002292:	dc05      	bgt.n	80022a0 <fire+0x2cc>
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	2b06      	cmp	r3, #6
 8002298:	dd02      	ble.n	80022a0 <fire+0x2cc>
	fgcolor(15);
 800229a:	200f      	movs	r0, #15
 800229c:	f002 fbf6 	bl	8004a8c <fgcolor>
	}
	if (s >= 10){
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	2b09      	cmp	r3, #9
 80022a4:	dd02      	ble.n	80022ac <fire+0x2d8>
	fgcolor(12);
 80022a6:	200c      	movs	r0, #12
 80022a8:	f002 fbf0 	bl	8004a8c <fgcolor>
	}
	gotoxy(4+i,y1+1);
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	1d1a      	adds	r2, r3, #4
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	3301      	adds	r3, #1
 80022b4:	4619      	mov	r1, r3
 80022b6:	4610      	mov	r0, r2
 80022b8:	f002 fc38 	bl	8004b2c <gotoxy>
	printf("%c",219);
 80022bc:	20db      	movs	r0, #219	; 0xdb
 80022be:	f005 ff15 	bl	80080ec <putchar>
	gotoxy(4+i,y2-1);
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	1d1a      	adds	r2, r3, #4
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	4619      	mov	r1, r3
 80022cc:	4610      	mov	r0, r2
 80022ce:	f002 fc2d 	bl	8004b2c <gotoxy>
	printf("%c",219);
 80022d2:	20db      	movs	r0, #219	; 0xdb
 80022d4:	f005 ff0a 	bl	80080ec <putchar>
	s++;
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	3301      	adds	r3, #1
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 12; i++){
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	3301      	adds	r3, #1
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	ddc2      	ble.n	8002270 <fire+0x29c>
	} s = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 14; i++){
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e037      	b.n	8002364 <fire+0x390>
	if(s < 3) {
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	dc02      	bgt.n	8002300 <fire+0x32c>
	fgcolor(9);
 80022fa:	2009      	movs	r0, #9
 80022fc:	f002 fbc6 	bl	8004a8c <fgcolor>
	}
	if (s < 7 && s >= 3){
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	2b06      	cmp	r3, #6
 8002304:	dc05      	bgt.n	8002312 <fire+0x33e>
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	2b02      	cmp	r3, #2
 800230a:	dd02      	ble.n	8002312 <fire+0x33e>
	fgcolor(11);
 800230c:	200b      	movs	r0, #11
 800230e:	f002 fbbd 	bl	8004a8c <fgcolor>
	}
	if (s < 10 && s >=7){
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	2b09      	cmp	r3, #9
 8002316:	dc05      	bgt.n	8002324 <fire+0x350>
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	2b06      	cmp	r3, #6
 800231c:	dd02      	ble.n	8002324 <fire+0x350>
	fgcolor(15);
 800231e:	200f      	movs	r0, #15
 8002320:	f002 fbb4 	bl	8004a8c <fgcolor>
	}
	if (s < 13 && s >= 10){
 8002324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002326:	2b0c      	cmp	r3, #12
 8002328:	dc05      	bgt.n	8002336 <fire+0x362>
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	2b09      	cmp	r3, #9
 800232e:	dd02      	ble.n	8002336 <fire+0x362>
	fgcolor(12);
 8002330:	200c      	movs	r0, #12
 8002332:	f002 fbab 	bl	8004a8c <fgcolor>
	}
	if (s >= 13) {
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	2b0c      	cmp	r3, #12
 800233a:	dd02      	ble.n	8002342 <fire+0x36e>
	fgcolor(4);
 800233c:	2004      	movs	r0, #4
 800233e:	f002 fba5 	bl	8004a8c <fgcolor>
	}
	gotoxy(2+i,y1+2);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	1c9a      	adds	r2, r3, #2
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	3302      	adds	r3, #2
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f002 fbed 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8002352:	20db      	movs	r0, #219	; 0xdb
 8002354:	f005 feca 	bl	80080ec <putchar>
	s++;
 8002358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235a:	3301      	adds	r3, #1
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 14; i++){
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b0e      	cmp	r3, #14
 8002368:	ddc4      	ble.n	80022f4 <fire+0x320>
	} s = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
	ani++;
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <fire+0x3c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <fire+0x3c0>)
 8002376:	6013      	str	r3, [r2, #0]
	if (ani == 3) {
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <fire+0x3c0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d102      	bne.n	8002386 <fire+0x3b2>
		ani = 0;
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <fire+0x3c0>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
	}
	}
	resetbgcolor();
 8002386:	f002 fbaf 	bl	8004ae8 <resetbgcolor>
}
 800238a:	bf00      	nop
 800238c:	3730      	adds	r7, #48	; 0x30
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200001b0 	.word	0x200001b0

08002398 <fireDelete>:

void fireDelete(int x1, int y1, int x2, int y2) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
	gotoxy(7,y1);
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	2007      	movs	r0, #7
 80023aa:	f002 fbbf 	bl	8004b2c <gotoxy>
	for (int i = 0; i <= 9; i++){
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	e005      	b.n	80023c0 <fireDelete+0x28>
	printf("%c",32);
 80023b4:	2020      	movs	r0, #32
 80023b6:	f005 fe99 	bl	80080ec <putchar>
	for (int i = 0; i <= 9; i++){
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	3301      	adds	r3, #1
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	2b09      	cmp	r3, #9
 80023c4:	ddf6      	ble.n	80023b4 <fireDelete+0x1c>
	}
	gotoxy(7,y2);
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	2007      	movs	r0, #7
 80023ca:	f002 fbaf 	bl	8004b2c <gotoxy>
	for (int i = 0; i <= 9; i++){
 80023ce:	2300      	movs	r3, #0
 80023d0:	623b      	str	r3, [r7, #32]
 80023d2:	e005      	b.n	80023e0 <fireDelete+0x48>
	printf("%c",32);
 80023d4:	2020      	movs	r0, #32
 80023d6:	f005 fe89 	bl	80080ec <putchar>
	for (int i = 0; i <= 9; i++){
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	3301      	adds	r3, #1
 80023de:	623b      	str	r3, [r7, #32]
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	2b09      	cmp	r3, #9
 80023e4:	ddf6      	ble.n	80023d4 <fireDelete+0x3c>
	}
	gotoxy(4,y1+1);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3301      	adds	r3, #1
 80023ea:	4619      	mov	r1, r3
 80023ec:	2004      	movs	r0, #4
 80023ee:	f002 fb9d 	bl	8004b2c <gotoxy>
	for (int i = 0; i <= 12; i++){
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	e005      	b.n	8002404 <fireDelete+0x6c>
	printf("%c",32);
 80023f8:	2020      	movs	r0, #32
 80023fa:	f005 fe77 	bl	80080ec <putchar>
	for (int i = 0; i <= 12; i++){
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3301      	adds	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	ddf6      	ble.n	80023f8 <fireDelete+0x60>
	}
	gotoxy(4,y2-1);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	3b01      	subs	r3, #1
 800240e:	4619      	mov	r1, r3
 8002410:	2004      	movs	r0, #4
 8002412:	f002 fb8b 	bl	8004b2c <gotoxy>
	for (int i = 0; i <= 12; i++){
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	e005      	b.n	8002428 <fireDelete+0x90>
	printf("%c",32);
 800241c:	2020      	movs	r0, #32
 800241e:	f005 fe65 	bl	80080ec <putchar>
	for (int i = 0; i <= 12; i++){
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	3301      	adds	r3, #1
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	ddf6      	ble.n	800241c <fireDelete+0x84>
	}
	gotoxy(2,y1+2);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3302      	adds	r3, #2
 8002432:	4619      	mov	r1, r3
 8002434:	2002      	movs	r0, #2
 8002436:	f002 fb79 	bl	8004b2c <gotoxy>
	for (int i = 0; i <= 14; i++){
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e005      	b.n	800244c <fireDelete+0xb4>
	printf("%c",32);
 8002440:	2020      	movs	r0, #32
 8002442:	f005 fe53 	bl	80080ec <putchar>
	for (int i = 0; i <= 14; i++){
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3301      	adds	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b0e      	cmp	r3, #14
 8002450:	ddf6      	ble.n	8002440 <fireDelete+0xa8>
	}
	}
 8002452:	bf00      	nop
 8002454:	bf00      	nop
 8002456:	3728      	adds	r7, #40	; 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <playerInShipR>:


void playerInShipR(int p,int x, int y){
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d140      	bne.n	80024f0 <playerInShipR+0x94>
	fgcolor(15);
 800246e:	200f      	movs	r0, #15
 8002470:	f002 fb0c 	bl	8004a8c <fgcolor>
	gotoxy(x+2,y);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3302      	adds	r3, #2
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4618      	mov	r0, r3
 800247c:	f002 fb56 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 8002480:	20fe      	movs	r0, #254	; 0xfe
 8002482:	f005 fe33 	bl	80080ec <putchar>

	gotoxy(x,y+1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3301      	adds	r3, #1
 800248a:	4619      	mov	r1, r3
 800248c:	68b8      	ldr	r0, [r7, #8]
 800248e:	f002 fb4d 	bl	8004b2c <gotoxy>
	printf("%c",223);
 8002492:	20df      	movs	r0, #223	; 0xdf
 8002494:	f005 fe2a 	bl	80080ec <putchar>
	printf("%c",219);
 8002498:	20db      	movs	r0, #219	; 0xdb
 800249a:	f005 fe27 	bl	80080ec <putchar>
	printf("%c",219);
 800249e:	20db      	movs	r0, #219	; 0xdb
 80024a0:	f005 fe24 	bl	80080ec <putchar>

	fgcolor(9);
 80024a4:	2009      	movs	r0, #9
 80024a6:	f002 faf1 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y+2);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3302      	adds	r3, #2
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f002 fb39 	bl	8004b2c <gotoxy>
	printf("%c",192);
 80024ba:	20c0      	movs	r0, #192	; 0xc0
 80024bc:	f005 fe16 	bl	80080ec <putchar>
	printf("%c",192);
 80024c0:	20c0      	movs	r0, #192	; 0xc0
 80024c2:	f005 fe13 	bl	80080ec <putchar>

	fat(1);
 80024c6:	2001      	movs	r0, #1
 80024c8:	f001 fb42 	bl	8003b50 <fat>
	fgcolor(9);
 80024cc:	2009      	movs	r0, #9
 80024ce:	f002 fadd 	bl	8004a8c <fgcolor>
	gotoxy(x+3,y);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3303      	adds	r3, #3
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 fb27 	bl	8004b2c <gotoxy>
	printf("%c",60);
 80024de:	203c      	movs	r0, #60	; 0x3c
 80024e0:	f005 fe04 	bl	80080ec <putchar>
	fgcolor(2);
 80024e4:	2002      	movs	r0, #2
 80024e6:	f002 fad1 	bl	8004a8c <fgcolor>
	fat(0);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f001 fb30 	bl	8003b50 <fat>
	}

	if (p == 2) {
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d140      	bne.n	8002578 <playerInShipR+0x11c>
	fgcolor(11);
 80024f6:	200b      	movs	r0, #11
 80024f8:	f002 fac8 	bl	8004a8c <fgcolor>
	gotoxy(x+2,y);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	3302      	adds	r3, #2
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fb12 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 8002508:	20fe      	movs	r0, #254	; 0xfe
 800250a:	f005 fdef 	bl	80080ec <putchar>

	gotoxy(x,y+1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3301      	adds	r3, #1
 8002512:	4619      	mov	r1, r3
 8002514:	68b8      	ldr	r0, [r7, #8]
 8002516:	f002 fb09 	bl	8004b2c <gotoxy>
	printf("%c",223);
 800251a:	20df      	movs	r0, #223	; 0xdf
 800251c:	f005 fde6 	bl	80080ec <putchar>
	printf("%c",219);
 8002520:	20db      	movs	r0, #219	; 0xdb
 8002522:	f005 fde3 	bl	80080ec <putchar>
	printf("%c",219);
 8002526:	20db      	movs	r0, #219	; 0xdb
 8002528:	f005 fde0 	bl	80080ec <putchar>

	fgcolor(9);
 800252c:	2009      	movs	r0, #9
 800252e:	f002 faad 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y+2);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3302      	adds	r3, #2
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f002 faf5 	bl	8004b2c <gotoxy>
	printf("%c",192);
 8002542:	20c0      	movs	r0, #192	; 0xc0
 8002544:	f005 fdd2 	bl	80080ec <putchar>
	printf("%c",192);
 8002548:	20c0      	movs	r0, #192	; 0xc0
 800254a:	f005 fdcf 	bl	80080ec <putchar>

	fat(1);
 800254e:	2001      	movs	r0, #1
 8002550:	f001 fafe 	bl	8003b50 <fat>
	fgcolor(9);
 8002554:	2009      	movs	r0, #9
 8002556:	f002 fa99 	bl	8004a8c <fgcolor>
	gotoxy(x+3,y);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3303      	adds	r3, #3
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	f002 fae3 	bl	8004b2c <gotoxy>
	printf("%c",60);
 8002566:	203c      	movs	r0, #60	; 0x3c
 8002568:	f005 fdc0 	bl	80080ec <putchar>
	fgcolor(2);
 800256c:	2002      	movs	r0, #2
 800256e:	f002 fa8d 	bl	8004a8c <fgcolor>
	fat(0);
 8002572:	2000      	movs	r0, #0
 8002574:	f001 faec 	bl	8003b50 <fat>
	}
	resetbgcolor();
 8002578:	f002 fab6 	bl	8004ae8 <resetbgcolor>
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <playerInShipL>:

void playerInShipL(int p,int x, int y){
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d140      	bne.n	8002618 <playerInShipL+0x94>
	fgcolor(15);
 8002596:	200f      	movs	r0, #15
 8002598:	f002 fa78 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	3301      	adds	r3, #1
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 fac2 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 80025a8:	20fe      	movs	r0, #254	; 0xfe
 80025aa:	f005 fd9f 	bl	80080ec <putchar>

	gotoxy(x+1,y+1);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3301      	adds	r3, #1
 80025b6:	4619      	mov	r1, r3
 80025b8:	4610      	mov	r0, r2
 80025ba:	f002 fab7 	bl	8004b2c <gotoxy>
	printf("%c",219);
 80025be:	20db      	movs	r0, #219	; 0xdb
 80025c0:	f005 fd94 	bl	80080ec <putchar>
	printf("%c",219);
 80025c4:	20db      	movs	r0, #219	; 0xdb
 80025c6:	f005 fd91 	bl	80080ec <putchar>
	printf("%c",223);
 80025ca:	20df      	movs	r0, #223	; 0xdf
 80025cc:	f005 fd8e 	bl	80080ec <putchar>

	fgcolor(9);
 80025d0:	2009      	movs	r0, #9
 80025d2:	f002 fa5b 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y+2);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3302      	adds	r3, #2
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f002 faa3 	bl	8004b2c <gotoxy>
	printf("%c",217);
 80025e6:	20d9      	movs	r0, #217	; 0xd9
 80025e8:	f005 fd80 	bl	80080ec <putchar>
	printf("%c",217);
 80025ec:	20d9      	movs	r0, #217	; 0xd9
 80025ee:	f005 fd7d 	bl	80080ec <putchar>

	fat(1);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f001 faac 	bl	8003b50 <fat>
	fgcolor(9);
 80025f8:	2009      	movs	r0, #9
 80025fa:	f002 fa47 	bl	8004a8c <fgcolor>
	gotoxy(x,y);
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	68b8      	ldr	r0, [r7, #8]
 8002602:	f002 fa93 	bl	8004b2c <gotoxy>
	printf("%c",62);
 8002606:	203e      	movs	r0, #62	; 0x3e
 8002608:	f005 fd70 	bl	80080ec <putchar>
	fgcolor(2);
 800260c:	2002      	movs	r0, #2
 800260e:	f002 fa3d 	bl	8004a8c <fgcolor>
	fat(0);
 8002612:	2000      	movs	r0, #0
 8002614:	f001 fa9c 	bl	8003b50 <fat>
	}

	if (p == 2) {
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d140      	bne.n	80026a0 <playerInShipL+0x11c>
	fgcolor(11);
 800261e:	200b      	movs	r0, #11
 8002620:	f002 fa34 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y);
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	3301      	adds	r3, #1
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4618      	mov	r0, r3
 800262c:	f002 fa7e 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 8002630:	20fe      	movs	r0, #254	; 0xfe
 8002632:	f005 fd5b 	bl	80080ec <putchar>

	gotoxy(x+1,y+1);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3301      	adds	r3, #1
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f002 fa73 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8002646:	20db      	movs	r0, #219	; 0xdb
 8002648:	f005 fd50 	bl	80080ec <putchar>
	printf("%c",219);
 800264c:	20db      	movs	r0, #219	; 0xdb
 800264e:	f005 fd4d 	bl	80080ec <putchar>
	printf("%c",223);
 8002652:	20df      	movs	r0, #223	; 0xdf
 8002654:	f005 fd4a 	bl	80080ec <putchar>

	fgcolor(9);
 8002658:	2009      	movs	r0, #9
 800265a:	f002 fa17 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y+2);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3302      	adds	r3, #2
 8002666:	4619      	mov	r1, r3
 8002668:	4610      	mov	r0, r2
 800266a:	f002 fa5f 	bl	8004b2c <gotoxy>
	printf("%c",217);
 800266e:	20d9      	movs	r0, #217	; 0xd9
 8002670:	f005 fd3c 	bl	80080ec <putchar>
	printf("%c",217);
 8002674:	20d9      	movs	r0, #217	; 0xd9
 8002676:	f005 fd39 	bl	80080ec <putchar>

	fat(1);
 800267a:	2001      	movs	r0, #1
 800267c:	f001 fa68 	bl	8003b50 <fat>
	fgcolor(9);
 8002680:	2009      	movs	r0, #9
 8002682:	f002 fa03 	bl	8004a8c <fgcolor>
	gotoxy(x,y);
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	68b8      	ldr	r0, [r7, #8]
 800268a:	f002 fa4f 	bl	8004b2c <gotoxy>
	printf("%c",62);
 800268e:	203e      	movs	r0, #62	; 0x3e
 8002690:	f005 fd2c 	bl	80080ec <putchar>
	fgcolor(2);
 8002694:	2002      	movs	r0, #2
 8002696:	f002 f9f9 	bl	8004a8c <fgcolor>
	fat(0);
 800269a:	2000      	movs	r0, #0
 800269c:	f001 fa58 	bl	8003b50 <fat>
	}
	resetbgcolor();
 80026a0:	f002 fa22 	bl	8004ae8 <resetbgcolor>
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <playerInSpaceR>:

void playerInSpaceR(int p, int x, int y){   //duck
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d14c      	bne.n	8002758 <playerInSpaceR+0xac>
	fgcolor(15);
 80026be:	200f      	movs	r0, #15
 80026c0:	f002 f9e4 	bl	8004a8c <fgcolor>
	bgcolor(7);
 80026c4:	2007      	movs	r0, #7
 80026c6:	f002 f9fd 	bl	8004ac4 <bgcolor>
	gotoxy(x+2,y);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3302      	adds	r3, #2
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f002 fa2b 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 80026d6:	20fe      	movs	r0, #254	; 0xfe
 80026d8:	f005 fd08 	bl	80080ec <putchar>
	bgcolor(0);
 80026dc:	2000      	movs	r0, #0
 80026de:	f002 f9f1 	bl	8004ac4 <bgcolor>

	gotoxy(x,y+1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3301      	adds	r3, #1
 80026e6:	4619      	mov	r1, r3
 80026e8:	68b8      	ldr	r0, [r7, #8]
 80026ea:	f002 fa1f 	bl	8004b2c <gotoxy>
	printf("%c",223);
 80026ee:	20df      	movs	r0, #223	; 0xdf
 80026f0:	f005 fcfc 	bl	80080ec <putchar>
	printf("%c",219);
 80026f4:	20db      	movs	r0, #219	; 0xdb
 80026f6:	f005 fcf9 	bl	80080ec <putchar>
	printf("%c",219);
 80026fa:	20db      	movs	r0, #219	; 0xdb
 80026fc:	f005 fcf6 	bl	80080ec <putchar>

	fgcolor(9);
 8002700:	2009      	movs	r0, #9
 8002702:	f002 f9c3 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y+2);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3302      	adds	r3, #2
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f002 fa0b 	bl	8004b2c <gotoxy>
	printf("%c",192);
 8002716:	20c0      	movs	r0, #192	; 0xc0
 8002718:	f005 fce8 	bl	80080ec <putchar>
	printf("%c",192);
 800271c:	20c0      	movs	r0, #192	; 0xc0
 800271e:	f005 fce5 	bl	80080ec <putchar>

	fat(1);
 8002722:	2001      	movs	r0, #1
 8002724:	f001 fa14 	bl	8003b50 <fat>
	fgcolor(9);
 8002728:	2009      	movs	r0, #9
 800272a:	f002 f9af 	bl	8004a8c <fgcolor>
	bgcolor(7);
 800272e:	2007      	movs	r0, #7
 8002730:	f002 f9c8 	bl	8004ac4 <bgcolor>
	gotoxy(x+3,y);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	3303      	adds	r3, #3
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	f002 f9f6 	bl	8004b2c <gotoxy>
	printf("%c",60);
 8002740:	203c      	movs	r0, #60	; 0x3c
 8002742:	f005 fcd3 	bl	80080ec <putchar>
	bgcolor(0);
 8002746:	2000      	movs	r0, #0
 8002748:	f002 f9bc 	bl	8004ac4 <bgcolor>
	fgcolor(2);
 800274c:	2002      	movs	r0, #2
 800274e:	f002 f99d 	bl	8004a8c <fgcolor>
	fat(0);
 8002752:	2000      	movs	r0, #0
 8002754:	f001 f9fc 	bl	8003b50 <fat>
	}

	if (p == 2) {
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d14c      	bne.n	80027f8 <playerInSpaceR+0x14c>
	fgcolor(11);
 800275e:	200b      	movs	r0, #11
 8002760:	f002 f994 	bl	8004a8c <fgcolor>
	bgcolor(7);
 8002764:	2007      	movs	r0, #7
 8002766:	f002 f9ad 	bl	8004ac4 <bgcolor>
	gotoxy(x+2,y);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	3302      	adds	r3, #2
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	f002 f9db 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 8002776:	20fe      	movs	r0, #254	; 0xfe
 8002778:	f005 fcb8 	bl	80080ec <putchar>
	bgcolor(0);
 800277c:	2000      	movs	r0, #0
 800277e:	f002 f9a1 	bl	8004ac4 <bgcolor>

	gotoxy(x,y+1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3301      	adds	r3, #1
 8002786:	4619      	mov	r1, r3
 8002788:	68b8      	ldr	r0, [r7, #8]
 800278a:	f002 f9cf 	bl	8004b2c <gotoxy>
	printf("%c",223);
 800278e:	20df      	movs	r0, #223	; 0xdf
 8002790:	f005 fcac 	bl	80080ec <putchar>
	printf("%c",219);
 8002794:	20db      	movs	r0, #219	; 0xdb
 8002796:	f005 fca9 	bl	80080ec <putchar>
	printf("%c",219);
 800279a:	20db      	movs	r0, #219	; 0xdb
 800279c:	f005 fca6 	bl	80080ec <putchar>

	fgcolor(9);
 80027a0:	2009      	movs	r0, #9
 80027a2:	f002 f973 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y+2);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3302      	adds	r3, #2
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f002 f9bb 	bl	8004b2c <gotoxy>
	printf("%c",192);
 80027b6:	20c0      	movs	r0, #192	; 0xc0
 80027b8:	f005 fc98 	bl	80080ec <putchar>
	printf("%c",192);
 80027bc:	20c0      	movs	r0, #192	; 0xc0
 80027be:	f005 fc95 	bl	80080ec <putchar>

	fat(1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f001 f9c4 	bl	8003b50 <fat>
	fgcolor(9);
 80027c8:	2009      	movs	r0, #9
 80027ca:	f002 f95f 	bl	8004a8c <fgcolor>
	bgcolor(7);
 80027ce:	2007      	movs	r0, #7
 80027d0:	f002 f978 	bl	8004ac4 <bgcolor>
	gotoxy(x+3,y);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	3303      	adds	r3, #3
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 f9a6 	bl	8004b2c <gotoxy>
	printf("%c",60);
 80027e0:	203c      	movs	r0, #60	; 0x3c
 80027e2:	f005 fc83 	bl	80080ec <putchar>
	bgcolor(0);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f002 f96c 	bl	8004ac4 <bgcolor>
	fgcolor(2);
 80027ec:	2002      	movs	r0, #2
 80027ee:	f002 f94d 	bl	8004a8c <fgcolor>
	fat(0);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f001 f9ac 	bl	8003b50 <fat>
	}
	resetbgcolor();
 80027f8:	f002 f976 	bl	8004ae8 <resetbgcolor>
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <playerInSpaceL>:

void playerInSpaceL(int p, int x, int y){
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d14c      	bne.n	80028b0 <playerInSpaceL+0xac>
	fgcolor(15);
 8002816:	200f      	movs	r0, #15
 8002818:	f002 f938 	bl	8004a8c <fgcolor>
	bgcolor(7);
 800281c:	2007      	movs	r0, #7
 800281e:	f002 f951 	bl	8004ac4 <bgcolor>
	gotoxy(x+1,y);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3301      	adds	r3, #1
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4618      	mov	r0, r3
 800282a:	f002 f97f 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 800282e:	20fe      	movs	r0, #254	; 0xfe
 8002830:	f005 fc5c 	bl	80080ec <putchar>
	bgcolor(0);
 8002834:	2000      	movs	r0, #0
 8002836:	f002 f945 	bl	8004ac4 <bgcolor>

	gotoxy(x+1,y+1);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3301      	adds	r3, #1
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f002 f971 	bl	8004b2c <gotoxy>
	printf("%c",219);
 800284a:	20db      	movs	r0, #219	; 0xdb
 800284c:	f005 fc4e 	bl	80080ec <putchar>
	printf("%c",219);
 8002850:	20db      	movs	r0, #219	; 0xdb
 8002852:	f005 fc4b 	bl	80080ec <putchar>
	printf("%c",223);
 8002856:	20df      	movs	r0, #223	; 0xdf
 8002858:	f005 fc48 	bl	80080ec <putchar>

	fgcolor(9);
 800285c:	2009      	movs	r0, #9
 800285e:	f002 f915 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y+2);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3302      	adds	r3, #2
 800286a:	4619      	mov	r1, r3
 800286c:	4610      	mov	r0, r2
 800286e:	f002 f95d 	bl	8004b2c <gotoxy>
	printf("%c",217);
 8002872:	20d9      	movs	r0, #217	; 0xd9
 8002874:	f005 fc3a 	bl	80080ec <putchar>
	printf("%c",217);
 8002878:	20d9      	movs	r0, #217	; 0xd9
 800287a:	f005 fc37 	bl	80080ec <putchar>

	fat(1);
 800287e:	2001      	movs	r0, #1
 8002880:	f001 f966 	bl	8003b50 <fat>
	fgcolor(9);
 8002884:	2009      	movs	r0, #9
 8002886:	f002 f901 	bl	8004a8c <fgcolor>
	bgcolor(7);
 800288a:	2007      	movs	r0, #7
 800288c:	f002 f91a 	bl	8004ac4 <bgcolor>
	gotoxy(x,y);
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	68b8      	ldr	r0, [r7, #8]
 8002894:	f002 f94a 	bl	8004b2c <gotoxy>
	printf("%c",62);
 8002898:	203e      	movs	r0, #62	; 0x3e
 800289a:	f005 fc27 	bl	80080ec <putchar>
	bgcolor(0);
 800289e:	2000      	movs	r0, #0
 80028a0:	f002 f910 	bl	8004ac4 <bgcolor>
	fgcolor(2);
 80028a4:	2002      	movs	r0, #2
 80028a6:	f002 f8f1 	bl	8004a8c <fgcolor>
	fat(0);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f001 f950 	bl	8003b50 <fat>
	}

	if (p == 2) {
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d14c      	bne.n	8002950 <playerInSpaceL+0x14c>
	fgcolor(11);
 80028b6:	200b      	movs	r0, #11
 80028b8:	f002 f8e8 	bl	8004a8c <fgcolor>
	bgcolor(7);
 80028bc:	2007      	movs	r0, #7
 80028be:	f002 f901 	bl	8004ac4 <bgcolor>
	gotoxy(x+1,y);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3301      	adds	r3, #1
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f002 f92f 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 80028ce:	20fe      	movs	r0, #254	; 0xfe
 80028d0:	f005 fc0c 	bl	80080ec <putchar>
	bgcolor(0);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f002 f8f5 	bl	8004ac4 <bgcolor>

	gotoxy(x+1,y+1);
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3301      	adds	r3, #1
 80028e2:	4619      	mov	r1, r3
 80028e4:	4610      	mov	r0, r2
 80028e6:	f002 f921 	bl	8004b2c <gotoxy>
	printf("%c",219);
 80028ea:	20db      	movs	r0, #219	; 0xdb
 80028ec:	f005 fbfe 	bl	80080ec <putchar>
	printf("%c",219);
 80028f0:	20db      	movs	r0, #219	; 0xdb
 80028f2:	f005 fbfb 	bl	80080ec <putchar>
	printf("%c",223);
 80028f6:	20df      	movs	r0, #223	; 0xdf
 80028f8:	f005 fbf8 	bl	80080ec <putchar>

	fgcolor(9);
 80028fc:	2009      	movs	r0, #9
 80028fe:	f002 f8c5 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y+2);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3302      	adds	r3, #2
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f002 f90d 	bl	8004b2c <gotoxy>
	printf("%c",217);
 8002912:	20d9      	movs	r0, #217	; 0xd9
 8002914:	f005 fbea 	bl	80080ec <putchar>
	printf("%c",217);
 8002918:	20d9      	movs	r0, #217	; 0xd9
 800291a:	f005 fbe7 	bl	80080ec <putchar>

	fat(1);
 800291e:	2001      	movs	r0, #1
 8002920:	f001 f916 	bl	8003b50 <fat>
	fgcolor(9);
 8002924:	2009      	movs	r0, #9
 8002926:	f002 f8b1 	bl	8004a8c <fgcolor>
	bgcolor(7);
 800292a:	2007      	movs	r0, #7
 800292c:	f002 f8ca 	bl	8004ac4 <bgcolor>
	gotoxy(x,y);
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	68b8      	ldr	r0, [r7, #8]
 8002934:	f002 f8fa 	bl	8004b2c <gotoxy>
	printf("%c",62);
 8002938:	203e      	movs	r0, #62	; 0x3e
 800293a:	f005 fbd7 	bl	80080ec <putchar>
	bgcolor(0);
 800293e:	2000      	movs	r0, #0
 8002940:	f002 f8c0 	bl	8004ac4 <bgcolor>
	fgcolor(2);
 8002944:	2002      	movs	r0, #2
 8002946:	f002 f8a1 	bl	8004a8c <fgcolor>
	fat(0);
 800294a:	2000      	movs	r0, #0
 800294c:	f001 f900 	bl	8003b50 <fat>
	}
	resetbgcolor();
 8002950:	f002 f8ca 	bl	8004ae8 <resetbgcolor>
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <playerInSpaceUSDL>:

void playerInSpaceUSDL(int p, int x, int y){
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d14e      	bne.n	8002a0c <playerInSpaceUSDL+0xb0>
	fgcolor(15);
 800296e:	200f      	movs	r0, #15
 8002970:	f002 f88c 	bl	8004a8c <fgcolor>
	bgcolor(7);
 8002974:	2007      	movs	r0, #7
 8002976:	f002 f8a5 	bl	8004ac4 <bgcolor>
	gotoxy(x+1,y+2);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3302      	adds	r3, #2
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f002 f8d1 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 800298a:	20fe      	movs	r0, #254	; 0xfe
 800298c:	f005 fbae 	bl	80080ec <putchar>
	bgcolor(0);
 8002990:	2000      	movs	r0, #0
 8002992:	f002 f897 	bl	8004ac4 <bgcolor>

	gotoxy(x+1,y+1);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3301      	adds	r3, #1
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f002 f8c3 	bl	8004b2c <gotoxy>
	printf("%c",219);
 80029a6:	20db      	movs	r0, #219	; 0xdb
 80029a8:	f005 fba0 	bl	80080ec <putchar>
	printf("%c",219);
 80029ac:	20db      	movs	r0, #219	; 0xdb
 80029ae:	f005 fb9d 	bl	80080ec <putchar>
	printf("%c",220);
 80029b2:	20dc      	movs	r0, #220	; 0xdc
 80029b4:	f005 fb9a 	bl	80080ec <putchar>

	fgcolor(9);
 80029b8:	2009      	movs	r0, #9
 80029ba:	f002 f867 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3301      	adds	r3, #1
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f002 f8b1 	bl	8004b2c <gotoxy>
	printf("%c",191);
 80029ca:	20bf      	movs	r0, #191	; 0xbf
 80029cc:	f005 fb8e 	bl	80080ec <putchar>
	printf("%c",191);
 80029d0:	20bf      	movs	r0, #191	; 0xbf
 80029d2:	f005 fb8b 	bl	80080ec <putchar>

	fat(1);
 80029d6:	2001      	movs	r0, #1
 80029d8:	f001 f8ba 	bl	8003b50 <fat>
	fgcolor(9);
 80029dc:	2009      	movs	r0, #9
 80029de:	f002 f855 	bl	8004a8c <fgcolor>
	bgcolor(7);
 80029e2:	2007      	movs	r0, #7
 80029e4:	f002 f86e 	bl	8004ac4 <bgcolor>
	gotoxy(x,y+2);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3302      	adds	r3, #2
 80029ec:	4619      	mov	r1, r3
 80029ee:	68b8      	ldr	r0, [r7, #8]
 80029f0:	f002 f89c 	bl	8004b2c <gotoxy>
	printf("%c",62);
 80029f4:	203e      	movs	r0, #62	; 0x3e
 80029f6:	f005 fb79 	bl	80080ec <putchar>
	bgcolor(0);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f002 f862 	bl	8004ac4 <bgcolor>
	fgcolor(2);
 8002a00:	2002      	movs	r0, #2
 8002a02:	f002 f843 	bl	8004a8c <fgcolor>
	fat(0);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f001 f8a2 	bl	8003b50 <fat>
	}

	if (p == 2) {
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d14e      	bne.n	8002ab0 <playerInSpaceUSDL+0x154>
	fgcolor(11);
 8002a12:	200b      	movs	r0, #11
 8002a14:	f002 f83a 	bl	8004a8c <fgcolor>
	bgcolor(7);
 8002a18:	2007      	movs	r0, #7
 8002a1a:	f002 f853 	bl	8004ac4 <bgcolor>
	gotoxy(x+1,y+2);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3302      	adds	r3, #2
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f002 f87f 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 8002a2e:	20fe      	movs	r0, #254	; 0xfe
 8002a30:	f005 fb5c 	bl	80080ec <putchar>
	bgcolor(0);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f002 f845 	bl	8004ac4 <bgcolor>

	gotoxy(x+1,y+1);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3301      	adds	r3, #1
 8002a42:	4619      	mov	r1, r3
 8002a44:	4610      	mov	r0, r2
 8002a46:	f002 f871 	bl	8004b2c <gotoxy>
	printf("%c",219);
 8002a4a:	20db      	movs	r0, #219	; 0xdb
 8002a4c:	f005 fb4e 	bl	80080ec <putchar>
	printf("%c",219);
 8002a50:	20db      	movs	r0, #219	; 0xdb
 8002a52:	f005 fb4b 	bl	80080ec <putchar>
	printf("%c",220);
 8002a56:	20dc      	movs	r0, #220	; 0xdc
 8002a58:	f005 fb48 	bl	80080ec <putchar>

	fgcolor(9);
 8002a5c:	2009      	movs	r0, #9
 8002a5e:	f002 f815 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3301      	adds	r3, #1
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f002 f85f 	bl	8004b2c <gotoxy>
	printf("%c",191);
 8002a6e:	20bf      	movs	r0, #191	; 0xbf
 8002a70:	f005 fb3c 	bl	80080ec <putchar>
	printf("%c",191);
 8002a74:	20bf      	movs	r0, #191	; 0xbf
 8002a76:	f005 fb39 	bl	80080ec <putchar>

	fat(1);
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f001 f868 	bl	8003b50 <fat>
	fgcolor(9);
 8002a80:	2009      	movs	r0, #9
 8002a82:	f002 f803 	bl	8004a8c <fgcolor>
	bgcolor(7);
 8002a86:	2007      	movs	r0, #7
 8002a88:	f002 f81c 	bl	8004ac4 <bgcolor>
	gotoxy(x,y+2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3302      	adds	r3, #2
 8002a90:	4619      	mov	r1, r3
 8002a92:	68b8      	ldr	r0, [r7, #8]
 8002a94:	f002 f84a 	bl	8004b2c <gotoxy>
	printf("%c",62);
 8002a98:	203e      	movs	r0, #62	; 0x3e
 8002a9a:	f005 fb27 	bl	80080ec <putchar>
	bgcolor(0);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f002 f810 	bl	8004ac4 <bgcolor>
	fgcolor(2);
 8002aa4:	2002      	movs	r0, #2
 8002aa6:	f001 fff1 	bl	8004a8c <fgcolor>
	fat(0);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f001 f850 	bl	8003b50 <fat>
	}
	resetbgcolor();
 8002ab0:	f002 f81a 	bl	8004ae8 <resetbgcolor>
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <playerInSpaceUSDR>:

void playerInSpaceUSDR(int p, int x, int y){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d14e      	bne.n	8002b6c <playerInSpaceUSDR+0xb0>
	fgcolor(15);
 8002ace:	200f      	movs	r0, #15
 8002ad0:	f001 ffdc 	bl	8004a8c <fgcolor>
	bgcolor(7);
 8002ad4:	2007      	movs	r0, #7
 8002ad6:	f001 fff5 	bl	8004ac4 <bgcolor>
	gotoxy(x+2,y+2);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1c9a      	adds	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	f002 f821 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 8002aea:	20fe      	movs	r0, #254	; 0xfe
 8002aec:	f005 fafe 	bl	80080ec <putchar>
	bgcolor(0);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f001 ffe7 	bl	8004ac4 <bgcolor>

	gotoxy(x,y+1);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4619      	mov	r1, r3
 8002afc:	68b8      	ldr	r0, [r7, #8]
 8002afe:	f002 f815 	bl	8004b2c <gotoxy>
	printf("%c",220);
 8002b02:	20dc      	movs	r0, #220	; 0xdc
 8002b04:	f005 faf2 	bl	80080ec <putchar>
	printf("%c",219);
 8002b08:	20db      	movs	r0, #219	; 0xdb
 8002b0a:	f005 faef 	bl	80080ec <putchar>
	printf("%c",219);
 8002b0e:	20db      	movs	r0, #219	; 0xdb
 8002b10:	f005 faec 	bl	80080ec <putchar>

	fgcolor(9);
 8002b14:	2009      	movs	r0, #9
 8002b16:	f001 ffb9 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y);
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 f803 	bl	8004b2c <gotoxy>
	printf("%c",218);
 8002b26:	20da      	movs	r0, #218	; 0xda
 8002b28:	f005 fae0 	bl	80080ec <putchar>
	printf("%c",218);
 8002b2c:	20da      	movs	r0, #218	; 0xda
 8002b2e:	f005 fadd 	bl	80080ec <putchar>

	fat(1);
 8002b32:	2001      	movs	r0, #1
 8002b34:	f001 f80c 	bl	8003b50 <fat>
	fgcolor(9);
 8002b38:	2009      	movs	r0, #9
 8002b3a:	f001 ffa7 	bl	8004a8c <fgcolor>
	bgcolor(7);
 8002b3e:	2007      	movs	r0, #7
 8002b40:	f001 ffc0 	bl	8004ac4 <bgcolor>
	gotoxy(x+3,y+2);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1cda      	adds	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f001 ffec 	bl	8004b2c <gotoxy>
	printf("%c",60);
 8002b54:	203c      	movs	r0, #60	; 0x3c
 8002b56:	f005 fac9 	bl	80080ec <putchar>
	bgcolor(0);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f001 ffb2 	bl	8004ac4 <bgcolor>
	fgcolor(2);
 8002b60:	2002      	movs	r0, #2
 8002b62:	f001 ff93 	bl	8004a8c <fgcolor>
	fat(0);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f000 fff2 	bl	8003b50 <fat>
	}

	if (p == 2) {
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d14e      	bne.n	8002c10 <playerInSpaceUSDR+0x154>
	fgcolor(11);
 8002b72:	200b      	movs	r0, #11
 8002b74:	f001 ff8a 	bl	8004a8c <fgcolor>
	bgcolor(7);
 8002b78:	2007      	movs	r0, #7
 8002b7a:	f001 ffa3 	bl	8004ac4 <bgcolor>
	gotoxy(x+2,y+2);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1c9a      	adds	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3302      	adds	r3, #2
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f001 ffcf 	bl	8004b2c <gotoxy>
	printf("%c",254	);
 8002b8e:	20fe      	movs	r0, #254	; 0xfe
 8002b90:	f005 faac 	bl	80080ec <putchar>
	bgcolor(0);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f001 ff95 	bl	8004ac4 <bgcolor>

	gotoxy(x,y+1);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	68b8      	ldr	r0, [r7, #8]
 8002ba2:	f001 ffc3 	bl	8004b2c <gotoxy>
	printf("%c",220);
 8002ba6:	20dc      	movs	r0, #220	; 0xdc
 8002ba8:	f005 faa0 	bl	80080ec <putchar>
	printf("%c",219);
 8002bac:	20db      	movs	r0, #219	; 0xdb
 8002bae:	f005 fa9d 	bl	80080ec <putchar>
	printf("%c",219);
 8002bb2:	20db      	movs	r0, #219	; 0xdb
 8002bb4:	f005 fa9a 	bl	80080ec <putchar>

	fgcolor(9);
 8002bb8:	2009      	movs	r0, #9
 8002bba:	f001 ff67 	bl	8004a8c <fgcolor>
	gotoxy(x+1,y);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 ffb1 	bl	8004b2c <gotoxy>
	printf("%c",218);
 8002bca:	20da      	movs	r0, #218	; 0xda
 8002bcc:	f005 fa8e 	bl	80080ec <putchar>
	printf("%c",218);
 8002bd0:	20da      	movs	r0, #218	; 0xda
 8002bd2:	f005 fa8b 	bl	80080ec <putchar>

	fat(1);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f000 ffba 	bl	8003b50 <fat>
	fgcolor(9);
 8002bdc:	2009      	movs	r0, #9
 8002bde:	f001 ff55 	bl	8004a8c <fgcolor>
	bgcolor(7);
 8002be2:	2007      	movs	r0, #7
 8002be4:	f001 ff6e 	bl	8004ac4 <bgcolor>
	gotoxy(x+3,y+2);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1cda      	adds	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3302      	adds	r3, #2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	f001 ff9a 	bl	8004b2c <gotoxy>
	printf("%c",60);
 8002bf8:	203c      	movs	r0, #60	; 0x3c
 8002bfa:	f005 fa77 	bl	80080ec <putchar>
	bgcolor(0);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f001 ff60 	bl	8004ac4 <bgcolor>
	fgcolor(2);
 8002c04:	2002      	movs	r0, #2
 8002c06:	f001 ff41 	bl	8004a8c <fgcolor>
	fat(0);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f000 ffa0 	bl	8003b50 <fat>
	}
	resetbgcolor();
 8002c10:	f001 ff6a 	bl	8004ae8 <resetbgcolor>
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <goDuckUP1>:

void goDuckUP1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->ud >-21){
 8002c2a:	4b7d      	ldr	r3, [pc, #500]	; (8002e20 <goDuckUP1+0x204>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d034      	beq.n	8002c9e <goDuckUP1+0x82>
 8002c34:	4b7b      	ldr	r3, [pc, #492]	; (8002e24 <goDuckUP1+0x208>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d12f      	bne.n	8002c9e <goDuckUP1+0x82>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f993 3000 	ldrsb.w	r3, [r3]
 8002c44:	f113 0f14 	cmn.w	r3, #20
 8002c48:	db29      	blt.n	8002c9e <goDuckUP1+0x82>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	18d1      	adds	r1, r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f7ff fd25 	bl	80026ac <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	18d1      	adds	r1, r2, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	461a      	mov	r2, r3
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 ff85 	bl	8003b84 <playerDelete>
	(*ud)--;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	1e5a      	subs	r2, r3, #1
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	18d1      	adds	r1, r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	461a      	mov	r2, r3
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff fd07 	bl	80026ac <playerInSpaceR>
	}
	if (joy.left && !CJoy.left && D->rl >0){
 8002c9e:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <goDuckUP1+0x204>)
 8002ca0:	789b      	ldrb	r3, [r3, #2]
 8002ca2:	b25b      	sxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d033      	beq.n	8002d10 <goDuckUP1+0xf4>
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <goDuckUP1+0x208>)
 8002caa:	789b      	ldrb	r3, [r3, #2]
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d12e      	bne.n	8002d10 <goDuckUP1+0xf4>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	dd29      	ble.n	8002d10 <goDuckUP1+0xf4>
	playerInSpaceL(play,x+*rl,y+*ud);
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	18d1      	adds	r1, r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff fd98 	bl	8002804 <playerInSpaceL>
	playerDelete(play,x+*rl,y+*ud);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	18d1      	adds	r1, r2, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 ff4c 	bl	8003b84 <playerDelete>
	(*rl)-=5;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1f5a      	subs	r2, r3, #5
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	601a      	str	r2, [r3, #0]
	playerInSpaceL(play,x+1+*rl,y+*ud);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	18d1      	adds	r1, r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f7ff fd7a 	bl	8002804 <playerInSpaceL>
	}
	if (joy.right && !CJoy.right && D->rl <65){
 8002d10:	4b43      	ldr	r3, [pc, #268]	; (8002e20 <goDuckUP1+0x204>)
 8002d12:	78db      	ldrb	r3, [r3, #3]
 8002d14:	b25b      	sxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d033      	beq.n	8002d82 <goDuckUP1+0x166>
 8002d1a:	4b42      	ldr	r3, [pc, #264]	; (8002e24 <goDuckUP1+0x208>)
 8002d1c:	78db      	ldrb	r3, [r3, #3]
 8002d1e:	b25b      	sxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d12e      	bne.n	8002d82 <goDuckUP1+0x166>
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	dc29      	bgt.n	8002d82 <goDuckUP1+0x166>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	18d1      	adds	r1, r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fcb3 	bl	80026ac <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	18d1      	adds	r1, r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	461a      	mov	r2, r3
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 ff13 	bl	8003b84 <playerDelete>
	(*rl)+=5;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1d5a      	adds	r2, r3, #5
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	18d1      	adds	r1, r2, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff fc95 	bl	80026ac <playerInSpaceR>
	}
	if (joy.center && !CJoy.center && D->rl == 30){
 8002d82:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <goDuckUP1+0x204>)
 8002d84:	791b      	ldrb	r3, [r3, #4]
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d033      	beq.n	8002df4 <goDuckUP1+0x1d8>
 8002d8c:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <goDuckUP1+0x208>)
 8002d8e:	791b      	ldrb	r3, [r3, #4]
 8002d90:	b25b      	sxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d12e      	bne.n	8002df4 <goDuckUP1+0x1d8>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002d9c:	2b1e      	cmp	r3, #30
 8002d9e:	d129      	bne.n	8002df4 <goDuckUP1+0x1d8>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	18d1      	adds	r1, r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f7ff fc7a 	bl	80026ac <playerInSpaceR>
	playerDelete(1,x+*rl,y+*ud);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	18d1      	adds	r1, r2, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f000 feda 	bl	8003b84 <playerDelete>
	(*ud)+=4;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	1d1a      	adds	r2, r3, #4
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	18d1      	adds	r1, r2, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	461a      	mov	r2, r3
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f7ff fb34 	bl	800245c <playerInShipR>
	}
	D->ud = *ud;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b25a      	sxtb	r2, r3
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3b16      	subs	r3, #22
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	b25a      	sxtb	r2, r3
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	705a      	strb	r2, [r3, #1]
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000204 	.word	0x20000204
 8002e24:	2000020c 	.word	0x2000020c

08002e28 <goDuckUPMove1>:

void goDuckUPMove1(int play,int x, int y, int *ud, int *rl,duck_t * D) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
	if (joy.up){
 8002e36:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <goDuckUPMove1+0xdc>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d029      	beq.n	8002e94 <goDuckUPMove1+0x6c>
		playerInSpaceR(play,x+*rl,y+*ud);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	18d1      	adds	r1, r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f7ff fc2a 	bl	80026ac <playerInSpaceR>
		playerDelete(play,x+*rl,y+*ud);
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	18d1      	adds	r1, r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fe8a 	bl	8003b84 <playerDelete>
		(*ud)--;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	1e5a      	subs	r2, r3, #1
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	601a      	str	r2, [r3, #0]
		playerInSpaceR(play,x+1+*rl,y+*ud);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	18d1      	adds	r1, r2, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7ff fc0c 	bl	80026ac <playerInSpaceR>
		}
	if (joy.down){
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <goDuckUPMove1+0xdc>)
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d029      	beq.n	8002ef2 <goDuckUPMove1+0xca>
		playerInSpaceR(play,x+*rl,y+*ud);
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	18d1      	adds	r1, r2, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fbfb 	bl	80026ac <playerInSpaceR>
		playerDelete(play,x+*rl,y+*ud);
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	18d1      	adds	r1, r2, r3
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fe5b 	bl	8003b84 <playerDelete>
		(*ud)++;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	601a      	str	r2, [r3, #0]
		playerInSpaceR(play,x+1+*rl,y+*ud);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	18d1      	adds	r1, r2, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	461a      	mov	r2, r3
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7ff fbdd 	bl	80026ac <playerInSpaceR>
		}
	D->ud = *ud;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b25a      	sxtb	r2, r3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	701a      	strb	r2, [r3, #0]
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000204 	.word	0x20000204

08002f08 <goDuckUP2>:


void goDuckUP2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]

	if (key.up && D->ud >-21){
 8002f16:	4b73      	ldr	r3, [pc, #460]	; (80030e4 <goDuckUP2+0x1dc>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b25b      	sxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02f      	beq.n	8002f80 <goDuckUP2+0x78>
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f993 3000 	ldrsb.w	r3, [r3]
 8002f26:	f113 0f14 	cmn.w	r3, #20
 8002f2a:	db29      	blt.n	8002f80 <goDuckUP2+0x78>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	18d1      	adds	r1, r2, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7ff fbb4 	bl	80026ac <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	18d1      	adds	r1, r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	461a      	mov	r2, r3
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fe14 	bl	8003b84 <playerDelete>
	(*ud)--;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	1e5a      	subs	r2, r3, #1
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	18d1      	adds	r1, r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff fb96 	bl	80026ac <playerInSpaceR>
	}
	if (key.left && D->rl >0){
 8002f80:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <goDuckUP2+0x1dc>)
 8002f82:	789b      	ldrb	r3, [r3, #2]
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02e      	beq.n	8002fe8 <goDuckUP2+0xe0>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	dd29      	ble.n	8002fe8 <goDuckUP2+0xe0>
	playerInSpaceL(play,x+*rl,y+*ud);
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	18d1      	adds	r1, r2, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff fc2c 	bl	8002804 <playerInSpaceL>
	playerDelete(play,x+*rl,y+*ud);
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	18d1      	adds	r1, r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4413      	add	r3, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fde0 	bl	8003b84 <playerDelete>
	(*rl)-=5;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	1f5a      	subs	r2, r3, #5
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	601a      	str	r2, [r3, #0]
	playerInSpaceL(play,x+1+*rl,y+*ud);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	18d1      	adds	r1, r2, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f7ff fc0e 	bl	8002804 <playerInSpaceL>
	}
	if (key.right && D->rl <65){
 8002fe8:	4b3e      	ldr	r3, [pc, #248]	; (80030e4 <goDuckUP2+0x1dc>)
 8002fea:	78db      	ldrb	r3, [r3, #3]
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d02e      	beq.n	8003050 <goDuckUP2+0x148>
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	dc29      	bgt.n	8003050 <goDuckUP2+0x148>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	18d1      	adds	r1, r2, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	461a      	mov	r2, r3
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff fb4c 	bl	80026ac <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	18d1      	adds	r1, r2, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	461a      	mov	r2, r3
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fdac 	bl	8003b84 <playerDelete>
	(*rl)+=5;
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	1d5a      	adds	r2, r3, #5
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	18d1      	adds	r1, r2, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	461a      	mov	r2, r3
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f7ff fb2e 	bl	80026ac <playerInSpaceR>
	}
	if (key.center && D->rl == 30){
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <goDuckUP2+0x1dc>)
 8003052:	791b      	ldrb	r3, [r3, #4]
 8003054:	b25b      	sxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d02e      	beq.n	80030b8 <goDuckUP2+0x1b0>
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003060:	2b1e      	cmp	r3, #30
 8003062:	d129      	bne.n	80030b8 <goDuckUP2+0x1b0>
	playerInSpaceR(play,x+*rl,y+*ud);
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	18d1      	adds	r1, r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	461a      	mov	r2, r3
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff fb18 	bl	80026ac <playerInSpaceR>
	playerDelete(1,x+*rl,y+*ud);
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	18d1      	adds	r1, r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	461a      	mov	r2, r3
 800308e:	2001      	movs	r0, #1
 8003090:	f000 fd78 	bl	8003b84 <playerDelete>
	(*ud)+=4;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	1d1a      	adds	r2, r3, #4
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	18d1      	adds	r1, r2, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7ff f9d2 	bl	800245c <playerInShipR>
	}
	D->ud = *ud;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b25a      	sxtb	r2, r3
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3b16      	subs	r3, #22
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	b25a      	sxtb	r2, r3
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	705a      	strb	r2, [r3, #1]
}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200001f8 	.word	0x200001f8

080030e8 <goDuckUPMove2>:
void goDuckUPMove2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
	if (key.down || joy.down){
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <goDuckUPMove2+0x88>)
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	b25b      	sxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <goDuckUPMove2+0x22>
 8003100:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <goDuckUPMove2+0x8c>)
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	b25b      	sxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d029      	beq.n	800315e <goDuckUPMove2+0x76>
	playerInSpaceR(play,x+*rl,y+*ud);
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	18d1      	adds	r1, r2, r3
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	461a      	mov	r2, r3
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff fac5 	bl	80026ac <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	18d1      	adds	r1, r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	461a      	mov	r2, r3
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fd25 	bl	8003b84 <playerDelete>
	(*ud)++;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	18d1      	adds	r1, r2, r3
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	461a      	mov	r2, r3
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7ff faa7 	bl	80026ac <playerInSpaceR>
	}
	D->ud = *ud;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	b25a      	sxtb	r2, r3
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	701a      	strb	r2, [r3, #0]
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	200001f8 	.word	0x200001f8
 8003174:	20000204 	.word	0x20000204

08003178 <goDuckMID1>:

void goDuckMID1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->rl == 30){
 8003186:	4b7c      	ldr	r3, [pc, #496]	; (8003378 <goDuckMID1+0x200>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	b25b      	sxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d033      	beq.n	80031f8 <goDuckMID1+0x80>
 8003190:	4b7a      	ldr	r3, [pc, #488]	; (800337c <goDuckMID1+0x204>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b25b      	sxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d12e      	bne.n	80031f8 <goDuckMID1+0x80>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80031a0:	2b1e      	cmp	r3, #30
 80031a2:	d129      	bne.n	80031f8 <goDuckMID1+0x80>
	playerInShipR(play,x+*rl,y+*ud);
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	18d1      	adds	r1, r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff f950 	bl	800245c <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	18d1      	adds	r1, r2, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fcd8 	bl	8003b84 <playerDelete>
	(*ud)-= 4;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	1f1a      	subs	r2, r3, #4
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	18d1      	adds	r1, r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	461a      	mov	r2, r3
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f7ff fa5a 	bl	80026ac <playerInSpaceR>
	}
	if (joy.down && !CJoy.down  && D->rl == 30){
 80031f8:	4b5f      	ldr	r3, [pc, #380]	; (8003378 <goDuckMID1+0x200>)
 80031fa:	785b      	ldrb	r3, [r3, #1]
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d033      	beq.n	800326a <goDuckMID1+0xf2>
 8003202:	4b5e      	ldr	r3, [pc, #376]	; (800337c <goDuckMID1+0x204>)
 8003204:	785b      	ldrb	r3, [r3, #1]
 8003206:	b25b      	sxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d12e      	bne.n	800326a <goDuckMID1+0xf2>
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003212:	2b1e      	cmp	r3, #30
 8003214:	d129      	bne.n	800326a <goDuckMID1+0xf2>
	playerInShipR(play,x+*rl,y+*ud);
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	18d1      	adds	r1, r2, r3
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	461a      	mov	r2, r3
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f7ff f917 	bl	800245c <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	18d1      	adds	r1, r2, r3
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	461a      	mov	r2, r3
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 fc9f 	bl	8003b84 <playerDelete>
	(*ud)+= 4;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	1d1a      	adds	r2, r3, #4
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	18d1      	adds	r1, r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	461a      	mov	r2, r3
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff fc29 	bl	8002abc <playerInSpaceUSDR>
	}
	if (joy.left && !CJoy.left && D->rl >0){
 800326a:	4b43      	ldr	r3, [pc, #268]	; (8003378 <goDuckMID1+0x200>)
 800326c:	789b      	ldrb	r3, [r3, #2]
 800326e:	b25b      	sxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d033      	beq.n	80032dc <goDuckMID1+0x164>
 8003274:	4b41      	ldr	r3, [pc, #260]	; (800337c <goDuckMID1+0x204>)
 8003276:	789b      	ldrb	r3, [r3, #2]
 8003278:	b25b      	sxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d12e      	bne.n	80032dc <goDuckMID1+0x164>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003284:	2b00      	cmp	r3, #0
 8003286:	dd29      	ble.n	80032dc <goDuckMID1+0x164>
	playerInShipL(play,x+*rl,y+*ud);
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	18d1      	adds	r1, r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	461a      	mov	r2, r3
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f7ff f972 	bl	8002584 <playerInShipL>
	playerDelete(play,x+*rl,y+*ud);
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	18d1      	adds	r1, r2, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	461a      	mov	r2, r3
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fc66 	bl	8003b84 <playerDelete>
	(*rl)-=5;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	1f5a      	subs	r2, r3, #5
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	601a      	str	r2, [r3, #0]
	playerInShipL(play,x+1+*rl,y+*ud);
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	18d1      	adds	r1, r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff f954 	bl	8002584 <playerInShipL>
	}
	if (joy.right && !CJoy.right && D->rl <55){
 80032dc:	4b26      	ldr	r3, [pc, #152]	; (8003378 <goDuckMID1+0x200>)
 80032de:	78db      	ldrb	r3, [r3, #3]
 80032e0:	b25b      	sxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d033      	beq.n	800334e <goDuckMID1+0x1d6>
 80032e6:	4b25      	ldr	r3, [pc, #148]	; (800337c <goDuckMID1+0x204>)
 80032e8:	78db      	ldrb	r3, [r3, #3]
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d12e      	bne.n	800334e <goDuckMID1+0x1d6>
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80032f6:	2b36      	cmp	r3, #54	; 0x36
 80032f8:	dc29      	bgt.n	800334e <goDuckMID1+0x1d6>
	playerInShipR(play,x+*rl,y+*ud);
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	18d1      	adds	r1, r2, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	461a      	mov	r2, r3
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff f8a5 	bl	800245c <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	18d1      	adds	r1, r2, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	461a      	mov	r2, r3
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fc2d 	bl	8003b84 <playerDelete>
	(*rl)+=5;
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	1d5a      	adds	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	18d1      	adds	r1, r2, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	461a      	mov	r2, r3
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff f887 	bl	800245c <playerInShipR>
	}
	D->ud = *ud;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	b25a      	sxtb	r2, r3
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	4413      	add	r3, r2
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3b16      	subs	r3, #22
 8003368:	b2db      	uxtb	r3, r3
 800336a:	b25a      	sxtb	r2, r3
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	705a      	strb	r2, [r3, #1]
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000204 	.word	0x20000204
 800337c:	2000020c 	.word	0x2000020c

08003380 <goDuckMID2>:

void goDuckMID2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]

	if (key.up && D->rl == 30){
 800338e:	4b72      	ldr	r3, [pc, #456]	; (8003558 <goDuckMID2+0x1d8>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b25b      	sxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d02e      	beq.n	80033f6 <goDuckMID2+0x76>
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800339e:	2b1e      	cmp	r3, #30
 80033a0:	d129      	bne.n	80033f6 <goDuckMID2+0x76>
	playerInShipR(play,x+*rl,y+*ud);
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	18d1      	adds	r1, r2, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	461a      	mov	r2, r3
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f7ff f851 	bl	800245c <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	18d1      	adds	r1, r2, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	461a      	mov	r2, r3
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fbd9 	bl	8003b84 <playerDelete>
	(*ud)-= 4;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1f1a      	subs	r2, r3, #4
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	18d1      	adds	r1, r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	461a      	mov	r2, r3
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7ff f95b 	bl	80026ac <playerInSpaceR>
	}
	if (key.down && D->rl == 30){
 80033f6:	4b58      	ldr	r3, [pc, #352]	; (8003558 <goDuckMID2+0x1d8>)
 80033f8:	785b      	ldrb	r3, [r3, #1]
 80033fa:	b25b      	sxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02e      	beq.n	800345e <goDuckMID2+0xde>
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003406:	2b1e      	cmp	r3, #30
 8003408:	d129      	bne.n	800345e <goDuckMID2+0xde>
	playerInShipR(play,x+*rl,y+*ud);
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	18d1      	adds	r1, r2, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	461a      	mov	r2, r3
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff f81d 	bl	800245c <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	18d1      	adds	r1, r2, r3
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	461a      	mov	r2, r3
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fba5 	bl	8003b84 <playerDelete>
	(*ud)+= 4;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	1d1a      	adds	r2, r3, #4
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	18d1      	adds	r1, r2, r3
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	461a      	mov	r2, r3
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff fb2f 	bl	8002abc <playerInSpaceUSDR>
	}
	if (key.left && D->rl >0){
 800345e:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <goDuckMID2+0x1d8>)
 8003460:	789b      	ldrb	r3, [r3, #2]
 8003462:	b25b      	sxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02e      	beq.n	80034c6 <goDuckMID2+0x146>
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	dd29      	ble.n	80034c6 <goDuckMID2+0x146>
	playerInShipL(play,x+*rl,y+*ud);
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	18d1      	adds	r1, r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	461a      	mov	r2, r3
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff f87d 	bl	8002584 <playerInShipL>
	playerDelete(play,x+*rl,y+*ud);
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	18d1      	adds	r1, r2, r3
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	461a      	mov	r2, r3
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fb71 	bl	8003b84 <playerDelete>
	(*rl)-=5;
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	1f5a      	subs	r2, r3, #5
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	601a      	str	r2, [r3, #0]
	playerInShipL(play,x+1+*rl,y+*ud);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	18d1      	adds	r1, r2, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	461a      	mov	r2, r3
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff f85f 	bl	8002584 <playerInShipL>
	}
	if (key.right && D->rl <55){
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <goDuckMID2+0x1d8>)
 80034c8:	78db      	ldrb	r3, [r3, #3]
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d02e      	beq.n	800352e <goDuckMID2+0x1ae>
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80034d6:	2b36      	cmp	r3, #54	; 0x36
 80034d8:	dc29      	bgt.n	800352e <goDuckMID2+0x1ae>
	playerInShipR(play,x+*rl,y+*ud);
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	18d1      	adds	r1, r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	461a      	mov	r2, r3
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7fe ffb5 	bl	800245c <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	18d1      	adds	r1, r2, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	461a      	mov	r2, r3
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fb3d 	bl	8003b84 <playerDelete>
	(*rl)+=5;
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	1d5a      	adds	r2, r3, #5
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	18d1      	adds	r1, r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	461a      	mov	r2, r3
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7fe ff97 	bl	800245c <playerInShipR>
	}
	D->ud = *ud;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b25a      	sxtb	r2, r3
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	4413      	add	r3, r2
 8003544:	b2db      	uxtb	r3, r3
 8003546:	3b16      	subs	r3, #22
 8003548:	b2db      	uxtb	r3, r3
 800354a:	b25a      	sxtb	r2, r3
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	705a      	strb	r2, [r3, #1]
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	200001f8 	.word	0x200001f8

0800355c <goDuckMIDMove2>:
void goDuckMIDMove2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
	if (key.up && !(key.down || joy.down)){
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <goDuckMIDMove2+0xfc>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b25b      	sxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d033      	beq.n	80035dc <goDuckMIDMove2+0x80>
 8003574:	4b38      	ldr	r3, [pc, #224]	; (8003658 <goDuckMIDMove2+0xfc>)
 8003576:	785b      	ldrb	r3, [r3, #1]
 8003578:	b25b      	sxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d12e      	bne.n	80035dc <goDuckMIDMove2+0x80>
 800357e:	4b37      	ldr	r3, [pc, #220]	; (800365c <goDuckMIDMove2+0x100>)
 8003580:	785b      	ldrb	r3, [r3, #1]
 8003582:	b25b      	sxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d129      	bne.n	80035dc <goDuckMIDMove2+0x80>
	playerInShipR(play,x+*rl,y+*ud);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	18d1      	adds	r1, r2, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	461a      	mov	r2, r3
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7fe ff5e 	bl	800245c <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	18d1      	adds	r1, r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4413      	add	r3, r2
 80035b0:	461a      	mov	r2, r3
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fae6 	bl	8003b84 <playerDelete>
	(*ud)--;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	1e5a      	subs	r2, r3, #1
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	18d1      	adds	r1, r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	461a      	mov	r2, r3
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7fe ff40 	bl	800245c <playerInShipR>
	}
	if (key.down || joy.down){
 80035dc:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <goDuckMIDMove2+0xfc>)
 80035de:	785b      	ldrb	r3, [r3, #1]
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d104      	bne.n	80035f0 <goDuckMIDMove2+0x94>
 80035e6:	4b1d      	ldr	r3, [pc, #116]	; (800365c <goDuckMIDMove2+0x100>)
 80035e8:	785b      	ldrb	r3, [r3, #1]
 80035ea:	b25b      	sxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d029      	beq.n	8003644 <goDuckMIDMove2+0xe8>
	playerInShipR(play,x+*rl,y+*ud);
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	18d1      	adds	r1, r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4413      	add	r3, r2
 8003600:	461a      	mov	r2, r3
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7fe ff2a 	bl	800245c <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	18d1      	adds	r1, r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	461a      	mov	r2, r3
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fab2 	bl	8003b84 <playerDelete>
	(*ud)++;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	18d1      	adds	r1, r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4413      	add	r3, r2
 800363c:	461a      	mov	r2, r3
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7fe ff0c 	bl	800245c <playerInShipR>
	}
	D->ud = *ud;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b25a      	sxtb	r2, r3
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	701a      	strb	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200001f8 	.word	0x200001f8
 800365c:	20000204 	.word	0x20000204

08003660 <goDuckUSD1>:

void goDuckUSD1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->ud <30){
 800366e:	4b7c      	ldr	r3, [pc, #496]	; (8003860 <goDuckUSD1+0x200>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b25b      	sxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d033      	beq.n	80036e0 <goDuckUSD1+0x80>
 8003678:	4b7a      	ldr	r3, [pc, #488]	; (8003864 <goDuckUSD1+0x204>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b25b      	sxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d12e      	bne.n	80036e0 <goDuckUSD1+0x80>
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f993 3000 	ldrsb.w	r3, [r3]
 8003688:	2b1d      	cmp	r3, #29
 800368a:	dc29      	bgt.n	80036e0 <goDuckUSD1+0x80>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	18d1      	adds	r1, r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	461a      	mov	r2, r3
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff fa0c 	bl	8002abc <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	18d1      	adds	r1, r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fa64 	bl	8003b84 <playerDelete>
	(*ud)++;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	18d1      	adds	r1, r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff f9ee 	bl	8002abc <playerInSpaceUSDR>
	}
	if (joy.right && !CJoy.right && D->rl >0){
 80036e0:	4b5f      	ldr	r3, [pc, #380]	; (8003860 <goDuckUSD1+0x200>)
 80036e2:	78db      	ldrb	r3, [r3, #3]
 80036e4:	b25b      	sxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d033      	beq.n	8003752 <goDuckUSD1+0xf2>
 80036ea:	4b5e      	ldr	r3, [pc, #376]	; (8003864 <goDuckUSD1+0x204>)
 80036ec:	78db      	ldrb	r3, [r3, #3]
 80036ee:	b25b      	sxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d12e      	bne.n	8003752 <goDuckUSD1+0xf2>
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	dd29      	ble.n	8003752 <goDuckUSD1+0xf2>
	playerInSpaceUSDL(play,x+*rl,y+*ud);
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	18d1      	adds	r1, r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	461a      	mov	r2, r3
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7ff f923 	bl	800295c <playerInSpaceUSDL>
	playerDelete(play,x+*rl,y+*ud);
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	18d1      	adds	r1, r2, r3
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	461a      	mov	r2, r3
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fa2b 	bl	8003b84 <playerDelete>
	(*rl)-=5;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	1f5a      	subs	r2, r3, #5
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDL(play,x+1+*rl,y+*ud);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	18d1      	adds	r1, r2, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	461a      	mov	r2, r3
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff f905 	bl	800295c <playerInSpaceUSDL>
	}
	if (joy.left && !CJoy.left && D->rl <65){
 8003752:	4b43      	ldr	r3, [pc, #268]	; (8003860 <goDuckUSD1+0x200>)
 8003754:	789b      	ldrb	r3, [r3, #2]
 8003756:	b25b      	sxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d033      	beq.n	80037c4 <goDuckUSD1+0x164>
 800375c:	4b41      	ldr	r3, [pc, #260]	; (8003864 <goDuckUSD1+0x204>)
 800375e:	789b      	ldrb	r3, [r3, #2]
 8003760:	b25b      	sxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d12e      	bne.n	80037c4 <goDuckUSD1+0x164>
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	dc29      	bgt.n	80037c4 <goDuckUSD1+0x164>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	18d1      	adds	r1, r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	461a      	mov	r2, r3
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff f99a 	bl	8002abc <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	18d1      	adds	r1, r2, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4413      	add	r3, r2
 8003798:	461a      	mov	r2, r3
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f9f2 	bl	8003b84 <playerDelete>
	(*rl)+=5;
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	1d5a      	adds	r2, r3, #5
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	18d1      	adds	r1, r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	461a      	mov	r2, r3
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff f97c 	bl	8002abc <playerInSpaceUSDR>
	}
	if (joy.center && !CJoy.center && D->rl == 30){
 80037c4:	4b26      	ldr	r3, [pc, #152]	; (8003860 <goDuckUSD1+0x200>)
 80037c6:	791b      	ldrb	r3, [r3, #4]
 80037c8:	b25b      	sxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d033      	beq.n	8003836 <goDuckUSD1+0x1d6>
 80037ce:	4b25      	ldr	r3, [pc, #148]	; (8003864 <goDuckUSD1+0x204>)
 80037d0:	791b      	ldrb	r3, [r3, #4]
 80037d2:	b25b      	sxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d12e      	bne.n	8003836 <goDuckUSD1+0x1d6>
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80037de:	2b1e      	cmp	r3, #30
 80037e0:	d129      	bne.n	8003836 <goDuckUSD1+0x1d6>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	18d1      	adds	r1, r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	461a      	mov	r2, r3
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff f961 	bl	8002abc <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	18d1      	adds	r1, r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	461a      	mov	r2, r3
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f9b9 	bl	8003b84 <playerDelete>
	(*ud)-=4;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	1f1a      	subs	r2, r3, #4
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d1      	adds	r1, r2, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	461a      	mov	r2, r3
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f7fe fe13 	bl	800245c <playerInShipR>
	}
	D->ud = *ud;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	b25a      	sxtb	r2, r3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	b2da      	uxtb	r2, r3
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	4413      	add	r3, r2
 800384c:	b2db      	uxtb	r3, r3
 800384e:	3b16      	subs	r3, #22
 8003850:	b2db      	uxtb	r3, r3
 8003852:	b25a      	sxtb	r2, r3
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	705a      	strb	r2, [r3, #1]
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000204 	.word	0x20000204
 8003864:	2000020c 	.word	0x2000020c

08003868 <goDuckUSD2>:

void goDuckUSD2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]

	if (key.up && D->ud <30){
 8003876:	4b72      	ldr	r3, [pc, #456]	; (8003a40 <goDuckUSD2+0x1d8>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b25b      	sxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d02e      	beq.n	80038de <goDuckUSD2+0x76>
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f993 3000 	ldrsb.w	r3, [r3]
 8003886:	2b1d      	cmp	r3, #29
 8003888:	dc29      	bgt.n	80038de <goDuckUSD2+0x76>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	18d1      	adds	r1, r2, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	461a      	mov	r2, r3
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7ff f90d 	bl	8002abc <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	18d1      	adds	r1, r2, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	461a      	mov	r2, r3
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f965 	bl	8003b84 <playerDelete>
	(*ud)++;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	18d1      	adds	r1, r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	461a      	mov	r2, r3
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff f8ef 	bl	8002abc <playerInSpaceUSDR>
	}
	if (key.right && D->rl >0){
 80038de:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <goDuckUSD2+0x1d8>)
 80038e0:	78db      	ldrb	r3, [r3, #3]
 80038e2:	b25b      	sxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02e      	beq.n	8003946 <goDuckUSD2+0xde>
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	dd29      	ble.n	8003946 <goDuckUSD2+0xde>
	playerInSpaceUSDL(play,x+*rl,y+*ud);
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	18d1      	adds	r1, r2, r3
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	461a      	mov	r2, r3
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff f829 	bl	800295c <playerInSpaceUSDL>
	playerDelete(play,x+*rl,y+*ud);
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	18d1      	adds	r1, r2, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	461a      	mov	r2, r3
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f931 	bl	8003b84 <playerDelete>
	(*rl)-=5;
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	1f5a      	subs	r2, r3, #5
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDL(play,x+1+*rl,y+*ud);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	18d1      	adds	r1, r2, r3
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	461a      	mov	r2, r3
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff f80b 	bl	800295c <playerInSpaceUSDL>
	}
	if (key.left && D->rl <65){
 8003946:	4b3e      	ldr	r3, [pc, #248]	; (8003a40 <goDuckUSD2+0x1d8>)
 8003948:	789b      	ldrb	r3, [r3, #2]
 800394a:	b25b      	sxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d02e      	beq.n	80039ae <goDuckUSD2+0x146>
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	dc29      	bgt.n	80039ae <goDuckUSD2+0x146>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	18d1      	adds	r1, r2, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	461a      	mov	r2, r3
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7ff f8a5 	bl	8002abc <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	18d1      	adds	r1, r2, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	461a      	mov	r2, r3
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f8fd 	bl	8003b84 <playerDelete>
	(*rl)+=5;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	1d5a      	adds	r2, r3, #5
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	18d1      	adds	r1, r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	461a      	mov	r2, r3
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff f887 	bl	8002abc <playerInSpaceUSDR>
	}
	if (key.center && D->rl == 30){
 80039ae:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <goDuckUSD2+0x1d8>)
 80039b0:	791b      	ldrb	r3, [r3, #4]
 80039b2:	b25b      	sxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d02e      	beq.n	8003a16 <goDuckUSD2+0x1ae>
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80039be:	2b1e      	cmp	r3, #30
 80039c0:	d129      	bne.n	8003a16 <goDuckUSD2+0x1ae>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	18d1      	adds	r1, r2, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	461a      	mov	r2, r3
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff f871 	bl	8002abc <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	18d1      	adds	r1, r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	461a      	mov	r2, r3
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f8c9 	bl	8003b84 <playerDelete>
	(*ud)-=4;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	1f1a      	subs	r2, r3, #4
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	18d1      	adds	r1, r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7fe fd23 	bl	800245c <playerInShipR>
	}
	D->ud = *ud;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	b25a      	sxtb	r2, r3
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	3b16      	subs	r3, #22
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	b25a      	sxtb	r2, r3
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	705a      	strb	r2, [r3, #1]
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	200001f8 	.word	0x200001f8

08003a44 <goDuckUSDMove2>:
void goDuckUSDMove2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
	if ((key.up || joy.up) && !(key.down || joy.down)){
 8003a52:	4b3d      	ldr	r3, [pc, #244]	; (8003b48 <goDuckUSDMove2+0x104>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <goDuckUSDMove2+0x22>
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <goDuckUSDMove2+0x108>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b25b      	sxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d033      	beq.n	8003ace <goDuckUSDMove2+0x8a>
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <goDuckUSDMove2+0x104>)
 8003a68:	785b      	ldrb	r3, [r3, #1]
 8003a6a:	b25b      	sxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d12e      	bne.n	8003ace <goDuckUSDMove2+0x8a>
 8003a70:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <goDuckUSDMove2+0x108>)
 8003a72:	785b      	ldrb	r3, [r3, #1]
 8003a74:	b25b      	sxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d129      	bne.n	8003ace <goDuckUSDMove2+0x8a>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	18d1      	adds	r1, r2, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff f815 	bl	8002abc <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	18d1      	adds	r1, r2, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f86d 	bl	8003b84 <playerDelete>
	(*ud)--;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	1e5a      	subs	r2, r3, #1
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	18d1      	adds	r1, r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f7fe fff7 	bl	8002abc <playerInSpaceUSDR>
	}
	if (key.down || joy.down){
 8003ace:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <goDuckUSDMove2+0x104>)
 8003ad0:	785b      	ldrb	r3, [r3, #1]
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d104      	bne.n	8003ae2 <goDuckUSDMove2+0x9e>
 8003ad8:	4b1c      	ldr	r3, [pc, #112]	; (8003b4c <goDuckUSDMove2+0x108>)
 8003ada:	785b      	ldrb	r3, [r3, #1]
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d029      	beq.n	8003b36 <goDuckUSDMove2+0xf2>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	18d1      	adds	r1, r2, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	461a      	mov	r2, r3
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7fe ffe1 	bl	8002abc <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	18d1      	adds	r1, r2, r3
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f839 	bl	8003b84 <playerDelete>
	(*ud)++;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	18d1      	adds	r1, r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7fe ffc3 	bl	8002abc <playerInSpaceUSDR>
	}
	D->ud = *ud;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b25a      	sxtb	r2, r3
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	701a      	strb	r2, [r3, #0]
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200001f8 	.word	0x200001f8
 8003b4c:	20000204 	.word	0x20000204

08003b50 <fat>:

void fat(int state) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	if (state) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <fat+0x1c>
		printf("%c[%d%c", ESC, 01, 'm');
 8003b5e:	236d      	movs	r3, #109	; 0x6d
 8003b60:	2201      	movs	r2, #1
 8003b62:	211b      	movs	r1, #27
 8003b64:	4806      	ldr	r0, [pc, #24]	; (8003b80 <fat+0x30>)
 8003b66:	f004 faa9 	bl	80080bc <iprintf>
	} else {
		printf("%c[%d%c", ESC, 22, 'm');
	}
}
 8003b6a:	e005      	b.n	8003b78 <fat+0x28>
		printf("%c[%d%c", ESC, 22, 'm');
 8003b6c:	236d      	movs	r3, #109	; 0x6d
 8003b6e:	2216      	movs	r2, #22
 8003b70:	211b      	movs	r1, #27
 8003b72:	4803      	ldr	r0, [pc, #12]	; (8003b80 <fat+0x30>)
 8003b74:	f004 faa2 	bl	80080bc <iprintf>
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	08009584 	.word	0x08009584

08003b84 <playerDelete>:


void playerDelete(int p,int x, int y){
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]

	gotoxy(x,y);
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	68b8      	ldr	r0, [r7, #8]
 8003b94:	f000 ffca 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 5; i++){
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	e005      	b.n	8003baa <playerDelete+0x26>
		printf("%c",32);
 8003b9e:	2020      	movs	r0, #32
 8003ba0:	f004 faa4 	bl	80080ec <putchar>
	for (int i = 0; i < 5; i++){
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	ddf6      	ble.n	8003b9e <playerDelete+0x1a>
	}
	gotoxy(x,y+1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	68b8      	ldr	r0, [r7, #8]
 8003bb8:	f000 ffb8 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 5; i++){
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	e005      	b.n	8003bce <playerDelete+0x4a>
		printf("%c",32);
 8003bc2:	2020      	movs	r0, #32
 8003bc4:	f004 fa92 	bl	80080ec <putchar>
	for (int i = 0; i < 5; i++){
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	ddf6      	ble.n	8003bc2 <playerDelete+0x3e>
	}
	gotoxy(x,y+2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	68b8      	ldr	r0, [r7, #8]
 8003bdc:	f000 ffa6 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 5; i++){
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	e005      	b.n	8003bf2 <playerDelete+0x6e>
		printf("%c",32);
 8003be6:	2020      	movs	r0, #32
 8003be8:	f004 fa80 	bl	80080ec <putchar>
	for (int i = 0; i < 5; i++){
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	ddf6      	ble.n	8003be6 <playerDelete+0x62>
	}
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <Broken>:
}
resetbgcolor();
}


void Broken(int rand_UP,int rand_OBJ, int x1, int y1){
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
	fat(1);
 8003c12:	2001      	movs	r0, #1
 8003c14:	f7ff ff9c 	bl	8003b50 <fat>
	blink(1);
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f000 ff99 	bl	8004b50 <blink>

	if (rand_OBJ == 1){
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d10b      	bne.n	8003c3c <Broken+0x38>
	bgcolor(5);
 8003c24:	2005      	movs	r0, #5
 8003c26:	f000 ff4d 	bl	8004ac4 <bgcolor>
	gotoxy(x1+24,y1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3318      	adds	r3, #24
 8003c2e:	6839      	ldr	r1, [r7, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 ff7b 	bl	8004b2c <gotoxy>
	Bup = 1;
 8003c36:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <Broken+0x14c>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
	}
	if (rand_OBJ == 2){
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d10e      	bne.n	8003c60 <Broken+0x5c>
	bgcolor(5);
 8003c42:	2005      	movs	r0, #5
 8003c44:	f000 ff3e 	bl	8004ac4 <bgcolor>
	gotoxy(x1+24,y1+4);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f103 0218 	add.w	r2, r3, #24
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f000 ff69 	bl	8004b2c <gotoxy>
	Bdown= 1;
 8003c5a:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <Broken+0x150>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
	}
	if (rand_OBJ == 3) {
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d10e      	bne.n	8003c84 <Broken+0x80>
	bgcolor(7);
 8003c66:	2007      	movs	r0, #7
 8003c68:	f000 ff2c 	bl	8004ac4 <bgcolor>
	gotoxy(x1+81,y1+2);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f103 0251 	add.w	r2, r3, #81	; 0x51
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	3302      	adds	r3, #2
 8003c76:	4619      	mov	r1, r3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	f000 ff57 	bl	8004b2c <gotoxy>
	Bcanon = 1;
 8003c7e:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <Broken+0x154>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
	}
	if (rand_OBJ == 4) {
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d10b      	bne.n	8003ca2 <Broken+0x9e>
	bgcolor(1);
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	f000 ff1a 	bl	8004ac4 <bgcolor>
	gotoxy(x1+55,y1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3337      	adds	r3, #55	; 0x37
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 ff48 	bl	8004b2c <gotoxy>
	Bship1 = 1;
 8003c9c:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <Broken+0x158>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
	}
	if (rand_OBJ == 5) {
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b05      	cmp	r3, #5
 8003ca6:	d10e      	bne.n	8003cc6 <Broken+0xc2>
	bgcolor(1);
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f000 ff0b 	bl	8004ac4 <bgcolor>
	gotoxy(x1+44,y1+4);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 ff36 	bl	8004b2c <gotoxy>
	Bship2 = 1;
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <Broken+0x15c>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
	}
	if (rand_OBJ == 6) {
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b06      	cmp	r3, #6
 8003cca:	d10e      	bne.n	8003cea <Broken+0xe6>
	bgcolor(1);
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f000 fef9 	bl	8004ac4 <bgcolor>
	gotoxy(x1+74,y1+4);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f000 ff24 	bl	8004b2c <gotoxy>
	Bship3 = 1;
 8003ce4:	4b1f      	ldr	r3, [pc, #124]	; (8003d64 <Broken+0x160>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
	}


	if (rand_UP == 1) {
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d10f      	bne.n	8003d10 <Broken+0x10c>
	fgcolor(0);
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f000 fecb 	bl	8004a8c <fgcolor>
	for(int i = 0; i<3; i++) {
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	e006      	b.n	8003d0a <Broken+0x106>
	printf("%c ",33);
 8003cfc:	2121      	movs	r1, #33	; 0x21
 8003cfe:	481a      	ldr	r0, [pc, #104]	; (8003d68 <Broken+0x164>)
 8003d00:	f004 f9dc 	bl	80080bc <iprintf>
	for(int i = 0; i<3; i++) {
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	3301      	adds	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	ddf5      	ble.n	8003cfc <Broken+0xf8>
	}
	}
	if (rand_UP == 2) {
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d10f      	bne.n	8003d36 <Broken+0x132>
	fgcolor(11);
 8003d16:	200b      	movs	r0, #11
 8003d18:	f000 feb8 	bl	8004a8c <fgcolor>
	for(int i = 0; i<3; i++) {
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	e006      	b.n	8003d30 <Broken+0x12c>
	printf("%c ",33);
 8003d22:	2121      	movs	r1, #33	; 0x21
 8003d24:	4810      	ldr	r0, [pc, #64]	; (8003d68 <Broken+0x164>)
 8003d26:	f004 f9c9 	bl	80080bc <iprintf>
	for(int i = 0; i<3; i++) {
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	ddf5      	ble.n	8003d22 <Broken+0x11e>





	fat(0);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f7ff ff0a 	bl	8003b50 <fat>
	blink(0);
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f000 ff07 	bl	8004b50 <blink>
	resetbgcolor();
 8003d42:	f000 fed1 	bl	8004ae8 <resetbgcolor>
	}
 8003d46:	bf00      	nop
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	200001d0 	.word	0x200001d0
 8003d54:	200001f4 	.word	0x200001f4
 8003d58:	200001d8 	.word	0x200001d8
 8003d5c:	200001cc 	.word	0x200001cc
 8003d60:	200001ec 	.word	0x200001ec
 8003d64:	200001d4 	.word	0x200001d4
 8003d68:	0800958c 	.word	0x0800958c

08003d6c <duckExplotion>:

void duckExplotion(int x, int y, int *ud, int *rl){
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b096      	sub	sp, #88	; 0x58
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]

//1
	fgcolor(15);
 8003d7a:	200f      	movs	r0, #15
 8003d7c:	f000 fe86 	bl	8004a8c <fgcolor>
	gotoxy(x+2+*rl,y+1+*ud);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1c9a      	adds	r2, r3, #2
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	18d0      	adds	r0, r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4413      	add	r3, r2
 8003d94:	4619      	mov	r1, r3
 8003d96:	f000 fec9 	bl	8004b2c <gotoxy>
		printf("%c",219);
 8003d9a:	20db      	movs	r0, #219	; 0xdb
 8003d9c:	f004 f9a6 	bl	80080ec <putchar>
//2

	fgcolor(11);
 8003da0:	200b      	movs	r0, #11
 8003da2:	f000 fe73 	bl	8004a8c <fgcolor>
	gotoxy(x+1+*rl,y+*ud);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	18d0      	adds	r0, r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4413      	add	r3, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	f000 feb7 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 3; i++){
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8003dc2:	e005      	b.n	8003dd0 <duckExplotion+0x64>
		printf("%c",219);
 8003dc4:	20db      	movs	r0, #219	; 0xdb
 8003dc6:	f004 f991 	bl	80080ec <putchar>
	for (int i = 0; i < 3; i++){
 8003dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dcc:	3301      	adds	r3, #1
 8003dce:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	ddf6      	ble.n	8003dc4 <duckExplotion+0x58>
	}
	gotoxy(x+1+*rl,y+1+*ud);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	18d0      	adds	r0, r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4413      	add	r3, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	f000 fe9e 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 3; i++){
 8003df0:	2300      	movs	r3, #0
 8003df2:	653b      	str	r3, [r7, #80]	; 0x50
 8003df4:	e005      	b.n	8003e02 <duckExplotion+0x96>
		printf("%c",219);
 8003df6:	20db      	movs	r0, #219	; 0xdb
 8003df8:	f004 f978 	bl	80080ec <putchar>
	for (int i = 0; i < 3; i++){
 8003dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dfe:	3301      	adds	r3, #1
 8003e00:	653b      	str	r3, [r7, #80]	; 0x50
 8003e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	ddf6      	ble.n	8003df6 <duckExplotion+0x8a>
	}
	gotoxy(x+1+*rl,y+2+*ud);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	18d0      	adds	r0, r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f000 fe85 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 3; i++){
 8003e22:	2300      	movs	r3, #0
 8003e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e26:	e005      	b.n	8003e34 <duckExplotion+0xc8>
		printf("%c",219);
 8003e28:	20db      	movs	r0, #219	; 0xdb
 8003e2a:	f004 f95f 	bl	80080ec <putchar>
	for (int i = 0; i < 3; i++){
 8003e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e30:	3301      	adds	r3, #1
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	ddf6      	ble.n	8003e28 <duckExplotion+0xbc>
	}



//3
	fgcolor(9);
 8003e3a:	2009      	movs	r0, #9
 8003e3c:	f000 fe26 	bl	8004a8c <fgcolor>
	gotoxy(x+1+*rl,y-1+*ud);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	18d0      	adds	r0, r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1e5a      	subs	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4413      	add	r3, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	f000 fe69 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 3; i++){
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e5e:	e005      	b.n	8003e6c <duckExplotion+0x100>
	printf("%c",219);
 8003e60:	20db      	movs	r0, #219	; 0xdb
 8003e62:	f004 f943 	bl	80080ec <putchar>
	for (int i = 0; i < 3; i++){
 8003e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e68:	3301      	adds	r3, #1
 8003e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	ddf6      	ble.n	8003e60 <duckExplotion+0xf4>
	}
	gotoxy(x+*rl,y+*ud);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	18d0      	adds	r0, r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4413      	add	r3, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	f000 fe52 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 5; i++){
 8003e88:	2300      	movs	r3, #0
 8003e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8c:	e005      	b.n	8003e9a <duckExplotion+0x12e>
		printf("%c",219);
 8003e8e:	20db      	movs	r0, #219	; 0xdb
 8003e90:	f004 f92c 	bl	80080ec <putchar>
	for (int i = 0; i < 5; i++){
 8003e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e96:	3301      	adds	r3, #1
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	ddf6      	ble.n	8003e8e <duckExplotion+0x122>
	}
	gotoxy(x+*rl,y+1+*ud);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	18d0      	adds	r0, r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f000 fe3a 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 5; i++){
 8003eb8:	2300      	movs	r3, #0
 8003eba:	643b      	str	r3, [r7, #64]	; 0x40
 8003ebc:	e005      	b.n	8003eca <duckExplotion+0x15e>
		printf("%c",219);
 8003ebe:	20db      	movs	r0, #219	; 0xdb
 8003ec0:	f004 f914 	bl	80080ec <putchar>
	for (int i = 0; i < 5; i++){
 8003ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	ddf6      	ble.n	8003ebe <duckExplotion+0x152>
	}
	gotoxy(x+*rl,y+2+*ud);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	18d0      	adds	r0, r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f000 fe22 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 5; i++){
 8003ee8:	2300      	movs	r3, #0
 8003eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eec:	e005      	b.n	8003efa <duckExplotion+0x18e>
		printf("%c",219);
 8003eee:	20db      	movs	r0, #219	; 0xdb
 8003ef0:	f004 f8fc 	bl	80080ec <putchar>
	for (int i = 0; i < 5; i++){
 8003ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	ddf6      	ble.n	8003eee <duckExplotion+0x182>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	18d0      	adds	r0, r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1cda      	adds	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4413      	add	r3, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	f000 fe09 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 3; i++){
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f1e:	e005      	b.n	8003f2c <duckExplotion+0x1c0>
	printf("%c",219);
 8003f20:	20db      	movs	r0, #219	; 0xdb
 8003f22:	f004 f8e3 	bl	80080ec <putchar>
	for (int i = 0; i < 3; i++){
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	3301      	adds	r3, #1
 8003f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	ddf6      	ble.n	8003f20 <duckExplotion+0x1b4>
	}


//4
	fgcolor(1);
 8003f32:	2001      	movs	r0, #1
 8003f34:	f000 fdaa 	bl	8004a8c <fgcolor>
	gotoxy(x+1+*rl,y-1+*ud);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	18d0      	adds	r0, r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	1e5a      	subs	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f000 fded 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 3; i++){
 8003f52:	2300      	movs	r3, #0
 8003f54:	637b      	str	r3, [r7, #52]	; 0x34
 8003f56:	e005      	b.n	8003f64 <duckExplotion+0x1f8>
	printf("%c",219);
 8003f58:	20db      	movs	r0, #219	; 0xdb
 8003f5a:	f004 f8c7 	bl	80080ec <putchar>
	for (int i = 0; i < 3; i++){
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f60:	3301      	adds	r3, #1
 8003f62:	637b      	str	r3, [r7, #52]	; 0x34
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	ddf6      	ble.n	8003f58 <duckExplotion+0x1ec>
	}
	gotoxy(x+*rl,y+*ud);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	18d0      	adds	r0, r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4413      	add	r3, r2
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f000 fdd6 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 5; i++){
 8003f80:	2300      	movs	r3, #0
 8003f82:	633b      	str	r3, [r7, #48]	; 0x30
 8003f84:	e005      	b.n	8003f92 <duckExplotion+0x226>
	printf("%c",219);
 8003f86:	20db      	movs	r0, #219	; 0xdb
 8003f88:	f004 f8b0 	bl	80080ec <putchar>
	for (int i = 0; i < 5; i++){
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	3301      	adds	r3, #1
 8003f90:	633b      	str	r3, [r7, #48]	; 0x30
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	ddf6      	ble.n	8003f86 <duckExplotion+0x21a>
	}
	gotoxy(x-1+*rl,y+1+*ud);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1e5a      	subs	r2, r3, #1
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	18d0      	adds	r0, r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4413      	add	r3, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	f000 fdbd 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 7; i++){
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb6:	e005      	b.n	8003fc4 <duckExplotion+0x258>
	printf("%c",219);
 8003fb8:	20db      	movs	r0, #219	; 0xdb
 8003fba:	f004 f897 	bl	80080ec <putchar>
	for (int i = 0; i < 7; i++){
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	2b06      	cmp	r3, #6
 8003fc8:	ddf6      	ble.n	8003fb8 <duckExplotion+0x24c>
	}
	gotoxy(x+*rl,y+2+*ud);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	18d0      	adds	r0, r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	1c9a      	adds	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4413      	add	r3, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f000 fda5 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 5; i++){
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe6:	e005      	b.n	8003ff4 <duckExplotion+0x288>
	printf("%c",219);
 8003fe8:	20db      	movs	r0, #219	; 0xdb
 8003fea:	f004 f87f 	bl	80080ec <putchar>
	for (int i = 0; i < 5; i++){
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	ddf6      	ble.n	8003fe8 <duckExplotion+0x27c>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	18d0      	adds	r0, r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	1cda      	adds	r2, r3, #3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4413      	add	r3, r2
 800400e:	4619      	mov	r1, r3
 8004010:	f000 fd8c 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 3; i++){
 8004014:	2300      	movs	r3, #0
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	e005      	b.n	8004026 <duckExplotion+0x2ba>
	printf("%c",219);
 800401a:	20db      	movs	r0, #219	; 0xdb
 800401c:	f004 f866 	bl	80080ec <putchar>
	for (int i = 0; i < 3; i++){
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	3301      	adds	r3, #1
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	2b02      	cmp	r3, #2
 800402a:	ddf6      	ble.n	800401a <duckExplotion+0x2ae>
	}



//DELETE
	gotoxy(x+1+*rl,y-1+*ud);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	18d0      	adds	r0, r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4413      	add	r3, r2
 8004040:	4619      	mov	r1, r3
 8004042:	f000 fd73 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 3; i++){
 8004046:	2300      	movs	r3, #0
 8004048:	623b      	str	r3, [r7, #32]
 800404a:	e005      	b.n	8004058 <duckExplotion+0x2ec>
	printf("%c",32);
 800404c:	2020      	movs	r0, #32
 800404e:	f004 f84d 	bl	80080ec <putchar>
	for (int i = 0; i < 3; i++){
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	3301      	adds	r3, #1
 8004056:	623b      	str	r3, [r7, #32]
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	2b02      	cmp	r3, #2
 800405c:	ddf6      	ble.n	800404c <duckExplotion+0x2e0>
	}
	gotoxy(x+*rl,y+*ud);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	18d0      	adds	r0, r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4413      	add	r3, r2
 800406e:	4619      	mov	r1, r3
 8004070:	f000 fd5c 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 5; i++){
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e005      	b.n	8004086 <duckExplotion+0x31a>
	printf("%c",32);
 800407a:	2020      	movs	r0, #32
 800407c:	f004 f836 	bl	80080ec <putchar>
	for (int i = 0; i < 5; i++){
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	3301      	adds	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2b04      	cmp	r3, #4
 800408a:	ddf6      	ble.n	800407a <duckExplotion+0x30e>
	}
	gotoxy(x-1+*rl,y+1+*ud);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1e5a      	subs	r2, r3, #1
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	18d0      	adds	r0, r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4413      	add	r3, r2
 80040a0:	4619      	mov	r1, r3
 80040a2:	f000 fd43 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 7; i++){
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e005      	b.n	80040b8 <duckExplotion+0x34c>
	printf("%c",32);
 80040ac:	2020      	movs	r0, #32
 80040ae:	f004 f81d 	bl	80080ec <putchar>
	for (int i = 0; i < 7; i++){
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	3301      	adds	r3, #1
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b06      	cmp	r3, #6
 80040bc:	ddf6      	ble.n	80040ac <duckExplotion+0x340>
	}
	gotoxy(x+*rl,y+2+*ud);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	18d0      	adds	r0, r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	1c9a      	adds	r2, r3, #2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4413      	add	r3, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	f000 fd2b 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 5; i++){
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	e005      	b.n	80040e8 <duckExplotion+0x37c>
	printf("%c",32);
 80040dc:	2020      	movs	r0, #32
 80040de:	f004 f805 	bl	80080ec <putchar>
	for (int i = 0; i < 5; i++){
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	3301      	adds	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	ddf6      	ble.n	80040dc <duckExplotion+0x370>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	18d0      	adds	r0, r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	1cda      	adds	r2, r3, #3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4413      	add	r3, r2
 8004102:	4619      	mov	r1, r3
 8004104:	f000 fd12 	bl	8004b2c <gotoxy>
	for (int i = 0; i < 3; i++){
 8004108:	2300      	movs	r3, #0
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	e005      	b.n	800411a <duckExplotion+0x3ae>
	printf("%c",32);
 800410e:	2020      	movs	r0, #32
 8004110:	f003 ffec 	bl	80080ec <putchar>
	for (int i = 0; i < 3; i++){
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	3301      	adds	r3, #1
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b02      	cmp	r3, #2
 800411e:	ddf6      	ble.n	800410e <duckExplotion+0x3a2>
	}
	resetbgcolor();
 8004120:	f000 fce2 	bl	8004ae8 <resetbgcolor>
	score -= 50;
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <duckExplotion+0x3d0>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b32      	subs	r3, #50	; 0x32
 800412c:	b29a      	uxth	r2, r3
 800412e:	4b03      	ldr	r3, [pc, #12]	; (800413c <duckExplotion+0x3d0>)
 8004130:	801a      	strh	r2, [r3, #0]
	}
 8004132:	bf00      	nop
 8004134:	3758      	adds	r7, #88	; 0x58
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	200001dc 	.word	0x200001dc

08004140 <intiJoystick>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi_S.h"
#include "joystick.h"

void intiJoystick(){
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8004144:	4b46      	ldr	r3, [pc, #280]	; (8004260 <intiJoystick+0x120>)
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	4a45      	ldr	r2, [pc, #276]	; (8004260 <intiJoystick+0x120>)
 800414a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414e:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
 8004150:	4b43      	ldr	r3, [pc, #268]	; (8004260 <intiJoystick+0x120>)
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	4a42      	ldr	r2, [pc, #264]	; (8004260 <intiJoystick+0x120>)
 8004156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800415a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 800415c:	4b40      	ldr	r3, [pc, #256]	; (8004260 <intiJoystick+0x120>)
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	4a3f      	ldr	r2, [pc, #252]	; (8004260 <intiJoystick+0x120>)
 8004162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004166:	6153      	str	r3, [r2, #20]

	// Set pin PC0 to input
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8004168:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <intiJoystick+0x124>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a3d      	ldr	r2, [pc, #244]	; (8004264 <intiJoystick+0x124>)
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (0 * 2));	// Set mode register
 8004174:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <intiJoystick+0x124>)
 8004176:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <intiJoystick+0x124>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 800417c:	4b39      	ldr	r3, [pc, #228]	; (8004264 <intiJoystick+0x124>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4a38      	ldr	r2, [pc, #224]	; (8004264 <intiJoystick+0x124>)
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (0 * 2));// Set push/pull register
 8004188:	4b36      	ldr	r3, [pc, #216]	; (8004264 <intiJoystick+0x124>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4a35      	ldr	r2, [pc, #212]	; (8004264 <intiJoystick+0x124>)
 800418e:	f043 0302 	orr.w	r3, r3, #2
 8004192:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PA4 to input
	GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8004194:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800419e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x00000000 << (4 * 2)); // Set mode register
 80041a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041a8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOA->PUPDR &= ~(0x00000003 << (4 * 2)); // Clear push/pull register
 80041b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80041ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041be:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x00000002 << (4 * 2)); // Set push/pull register
 80041c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80041ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ce:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB5 to input
	GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <intiJoystick+0x128>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a24      	ldr	r2, [pc, #144]	; (8004268 <intiJoystick+0x128>)
 80041d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041da:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (5 * 2)); // Set mode register
 80041dc:	4b22      	ldr	r3, [pc, #136]	; (8004268 <intiJoystick+0x128>)
 80041de:	4a22      	ldr	r2, [pc, #136]	; (8004268 <intiJoystick+0x128>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIOB->PUPDR &= ~(0x00000003 << (5 * 2)); // Clear push/pull register
 80041e4:	4b20      	ldr	r3, [pc, #128]	; (8004268 <intiJoystick+0x128>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <intiJoystick+0x128>)
 80041ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041ee:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (5 * 2)); // Set push/pull register
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <intiJoystick+0x128>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <intiJoystick+0x128>)
 80041f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041fa:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PC1 to input
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <intiJoystick+0x124>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a18      	ldr	r2, [pc, #96]	; (8004264 <intiJoystick+0x124>)
 8004202:	f023 030c 	bic.w	r3, r3, #12
 8004206:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (1 * 2)); // Set mode register
 8004208:	4b16      	ldr	r3, [pc, #88]	; (8004264 <intiJoystick+0x124>)
 800420a:	4a16      	ldr	r2, [pc, #88]	; (8004264 <intiJoystick+0x124>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); // Clear push/pull register
 8004210:	4b14      	ldr	r3, [pc, #80]	; (8004264 <intiJoystick+0x124>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a13      	ldr	r2, [pc, #76]	; (8004264 <intiJoystick+0x124>)
 8004216:	f023 030c 	bic.w	r3, r3, #12
 800421a:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (1 * 2)); // Set push/pull register
 800421c:	4b11      	ldr	r3, [pc, #68]	; (8004264 <intiJoystick+0x124>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a10      	ldr	r2, [pc, #64]	; (8004264 <intiJoystick+0x124>)
 8004222:	f043 0308 	orr.w	r3, r3, #8
 8004226:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB0 to input
	GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <intiJoystick+0x128>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a0e      	ldr	r2, [pc, #56]	; (8004268 <intiJoystick+0x128>)
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (0 * 2)); // Set mode register
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <intiJoystick+0x128>)
 8004236:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <intiJoystick+0x128>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <intiJoystick+0x128>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a09      	ldr	r2, [pc, #36]	; (8004268 <intiJoystick+0x128>)
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (0 * 2)); // Set push/pull register
 8004248:	4b07      	ldr	r3, [pc, #28]	; (8004268 <intiJoystick+0x128>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a06      	ldr	r2, [pc, #24]	; (8004268 <intiJoystick+0x128>)
 800424e:	f043 0302 	orr.w	r3, r3, #2
 8004252:	60d3      	str	r3, [r2, #12]
	// 0x00 - No pull
	// 0x01 - Pull-up
	// 0x02 - Pull-down

}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000
 8004264:	48000800 	.word	0x48000800
 8004268:	48000400 	.word	0x48000400

0800426c <readJoystick>:


void readJoystick(){
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
	int32_t a = GPIOC->IDR & (0x0001 << 0); //Read from pin PCx - right
 8004272:	4b26      	ldr	r3, [pc, #152]	; (800430c <readJoystick+0xa0>)
 8004274:	8a1b      	ldrh	r3, [r3, #16]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	607b      	str	r3, [r7, #4]
	int32_t b = GPIOA->IDR & (0x0001 << 4); //Read from pin PCx - up
 800427e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004282:	8a1b      	ldrh	r3, [r3, #16]
 8004284:	b29b      	uxth	r3, r3
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	617b      	str	r3, [r7, #20]
	int32_t c = GPIOB->IDR & (0x0001 << 5); //Read from pin PCx - center
 800428c:	4b20      	ldr	r3, [pc, #128]	; (8004310 <readJoystick+0xa4>)
 800428e:	8a1b      	ldrh	r3, [r3, #16]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	613b      	str	r3, [r7, #16]
	int32_t d = GPIOC->IDR & (0x0001 << 1); //Read from pin PCx - left
 8004298:	4b1c      	ldr	r3, [pc, #112]	; (800430c <readJoystick+0xa0>)
 800429a:	8a1b      	ldrh	r3, [r3, #16]
 800429c:	b29b      	uxth	r3, r3
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	60fb      	str	r3, [r7, #12]
	int32_t e = GPIOB->IDR & (0x0001 << 0); //Read from pin PCx - down
 80042a4:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <readJoystick+0xa4>)
 80042a6:	8a1b      	ldrh	r3, [r3, #16]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	60bb      	str	r3, [r7, #8]

	if(b){b = 1;}
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <readJoystick+0x4e>
 80042b6:	2301      	movs	r3, #1
 80042b8:	617b      	str	r3, [r7, #20]
	if(c){c = 1;}
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <readJoystick+0x58>
 80042c0:	2301      	movs	r3, #1
 80042c2:	613b      	str	r3, [r7, #16]
	if(d){d = 1;}
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <readJoystick+0x62>
 80042ca:	2301      	movs	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
	if(e){e = 1;}
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <readJoystick+0x6c>
 80042d4:	2301      	movs	r3, #1
 80042d6:	60bb      	str	r3, [r7, #8]

	joy.right 	= a;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	b25a      	sxtb	r2, r3
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <readJoystick+0xa8>)
 80042de:	70da      	strb	r2, [r3, #3]
	joy.up 		= b;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	b25a      	sxtb	r2, r3
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <readJoystick+0xa8>)
 80042e6:	701a      	strb	r2, [r3, #0]
	joy.center	= c;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	b25a      	sxtb	r2, r3
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <readJoystick+0xa8>)
 80042ee:	711a      	strb	r2, [r3, #4]
	joy.left	= d;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	b25a      	sxtb	r2, r3
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <readJoystick+0xa8>)
 80042f6:	709a      	strb	r2, [r3, #2]
	joy.down 	= e;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	b25a      	sxtb	r2, r3
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <readJoystick+0xa8>)
 80042fe:	705a      	strb	r2, [r3, #1]

}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	48000800 	.word	0x48000800
 8004310:	48000400 	.word	0x48000400
 8004314:	20000204 	.word	0x20000204

08004318 <copyJoystick>:

void copyJoystick() {
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
	CJoy.up = joy.up;
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <copyJoystick+0x40>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b25a      	sxtb	r2, r3
 8004322:	4b0e      	ldr	r3, [pc, #56]	; (800435c <copyJoystick+0x44>)
 8004324:	701a      	strb	r2, [r3, #0]
	CJoy.down = joy.down;
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <copyJoystick+0x40>)
 8004328:	785b      	ldrb	r3, [r3, #1]
 800432a:	b25a      	sxtb	r2, r3
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <copyJoystick+0x44>)
 800432e:	705a      	strb	r2, [r3, #1]
	CJoy.left = joy.left;
 8004330:	4b09      	ldr	r3, [pc, #36]	; (8004358 <copyJoystick+0x40>)
 8004332:	789b      	ldrb	r3, [r3, #2]
 8004334:	b25a      	sxtb	r2, r3
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <copyJoystick+0x44>)
 8004338:	709a      	strb	r2, [r3, #2]
	CJoy.right = joy.right;
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <copyJoystick+0x40>)
 800433c:	78db      	ldrb	r3, [r3, #3]
 800433e:	b25a      	sxtb	r2, r3
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <copyJoystick+0x44>)
 8004342:	70da      	strb	r2, [r3, #3]
	CJoy.center = joy.center;
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <copyJoystick+0x40>)
 8004346:	791b      	ldrb	r3, [r3, #4]
 8004348:	b25a      	sxtb	r2, r3
 800434a:	4b04      	ldr	r3, [pc, #16]	; (800435c <copyJoystick+0x44>)
 800434c:	711a      	strb	r2, [r3, #4]
}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	20000204 	.word	0x20000204
 800435c:	2000020c 	.word	0x2000020c

08004360 <lcd_write_string>:
#include "ansi_S.h"
#include "LCD.h"

uint8_t buffer[512];

void lcd_write_string(char slice[], uint32_t line, uint32_t place) {
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
	for (int j = 0; j < strlen(slice); j++) {
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	e076      	b.n	8004460 <lcd_write_string+0x100>
		int x = slice[j];
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 5; i++) {
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
 8004380:	e068      	b.n	8004454 <lcd_write_string+0xf4>
			if (line == 1) {
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d114      	bne.n	80043b2 <lcd_write_string+0x52>
				buffer[i + place + j * 5] = character_data[x - 32][i];
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f1a3 0220 	sub.w	r2, r3, #32
 800438e:	69b9      	ldr	r1, [r7, #24]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	18c8      	adds	r0, r1, r3
 8004394:	69f9      	ldr	r1, [r7, #28]
 8004396:	460b      	mov	r3, r1
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	18c1      	adds	r1, r0, r3
 800439e:	4837      	ldr	r0, [pc, #220]	; (800447c <lcd_write_string+0x11c>)
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	18c2      	adds	r2, r0, r3
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	4413      	add	r3, r2
 80043ac:	781a      	ldrb	r2, [r3, #0]
 80043ae:	4b34      	ldr	r3, [pc, #208]	; (8004480 <lcd_write_string+0x120>)
 80043b0:	545a      	strb	r2, [r3, r1]
			}
			if (line == 2) {
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d116      	bne.n	80043e6 <lcd_write_string+0x86>
				buffer[128 + i + place + j * 5] = character_data[x - 32][i];
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f1a3 0220 	sub.w	r2, r3, #32
 80043be:	69b9      	ldr	r1, [r7, #24]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	18c8      	adds	r0, r1, r3
 80043c4:	69f9      	ldr	r1, [r7, #28]
 80043c6:	460b      	mov	r3, r1
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	4403      	add	r3, r0
 80043ce:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80043d2:	482a      	ldr	r0, [pc, #168]	; (800447c <lcd_write_string+0x11c>)
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	18c2      	adds	r2, r0, r3
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	4413      	add	r3, r2
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	4b27      	ldr	r3, [pc, #156]	; (8004480 <lcd_write_string+0x120>)
 80043e4:	545a      	strb	r2, [r3, r1]
			}
			if (line == 3) {
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d116      	bne.n	800441a <lcd_write_string+0xba>
				buffer[256 + i + place + j * 5] = character_data[x - 32][i];
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f1a3 0220 	sub.w	r2, r3, #32
 80043f2:	69b9      	ldr	r1, [r7, #24]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	18c8      	adds	r0, r1, r3
 80043f8:	69f9      	ldr	r1, [r7, #28]
 80043fa:	460b      	mov	r3, r1
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	4403      	add	r3, r0
 8004402:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8004406:	481d      	ldr	r0, [pc, #116]	; (800447c <lcd_write_string+0x11c>)
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	18c2      	adds	r2, r0, r3
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	4413      	add	r3, r2
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <lcd_write_string+0x120>)
 8004418:	545a      	strb	r2, [r3, r1]
			}
			if (line == 4) {
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d116      	bne.n	800444e <lcd_write_string+0xee>
				buffer[384 + i + place + j * 5] = character_data[x - 32][i];
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f1a3 0220 	sub.w	r2, r3, #32
 8004426:	69b9      	ldr	r1, [r7, #24]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	18c8      	adds	r0, r1, r3
 800442c:	69f9      	ldr	r1, [r7, #28]
 800442e:	460b      	mov	r3, r1
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	4403      	add	r3, r0
 8004436:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 800443a:	4810      	ldr	r0, [pc, #64]	; (800447c <lcd_write_string+0x11c>)
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	18c2      	adds	r2, r0, r3
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	4413      	add	r3, r2
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <lcd_write_string+0x120>)
 800444c:	545a      	strb	r2, [r3, r1]
		for (int i = 0; i < 5; i++) {
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	3301      	adds	r3, #1
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b04      	cmp	r3, #4
 8004458:	dd93      	ble.n	8004382 <lcd_write_string+0x22>
	for (int j = 0; j < strlen(slice); j++) {
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	3301      	adds	r3, #1
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f7fb feb5 	bl	80001d0 <strlen>
 8004466:	4602      	mov	r2, r0
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	429a      	cmp	r2, r3
 800446c:	d881      	bhi.n	8004372 <lcd_write_string+0x12>
			}
		}
	}
	lcd_push_buffer(buffer);
 800446e:	4804      	ldr	r0, [pc, #16]	; (8004480 <lcd_write_string+0x120>)
 8004470:	f7fd f86e 	bl	8001550 <lcd_push_buffer>
}
 8004474:	bf00      	nop
 8004476:	3720      	adds	r7, #32
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	0800a644 	.word	0x0800a644
 8004480:	20000214 	.word	0x20000214

08004484 <lcd_write_string_no_push>:

void lcd_write_string_no_push(char slice[], uint32_t line, uint32_t place) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
	for (int j = 0; j < strlen(slice); j++) {
 8004490:	2300      	movs	r3, #0
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	e076      	b.n	8004584 <lcd_write_string_no_push+0x100>
		int x = slice[j];
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 5; i++) {
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	e068      	b.n	8004578 <lcd_write_string_no_push+0xf4>
			if (line == 1) {
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d114      	bne.n	80044d6 <lcd_write_string_no_push+0x52>
				buffer[i + place + j * 5] = character_data[x - 32][i];
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f1a3 0220 	sub.w	r2, r3, #32
 80044b2:	69b9      	ldr	r1, [r7, #24]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	18c8      	adds	r0, r1, r3
 80044b8:	69f9      	ldr	r1, [r7, #28]
 80044ba:	460b      	mov	r3, r1
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	18c1      	adds	r1, r0, r3
 80044c2:	4836      	ldr	r0, [pc, #216]	; (800459c <lcd_write_string_no_push+0x118>)
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	18c2      	adds	r2, r0, r3
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	4413      	add	r3, r2
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <lcd_write_string_no_push+0x11c>)
 80044d4:	545a      	strb	r2, [r3, r1]
			}
			if (line == 2) {
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d116      	bne.n	800450a <lcd_write_string_no_push+0x86>
				buffer[128 + i + place + j * 5] = character_data[x - 32][i];
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f1a3 0220 	sub.w	r2, r3, #32
 80044e2:	69b9      	ldr	r1, [r7, #24]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	18c8      	adds	r0, r1, r3
 80044e8:	69f9      	ldr	r1, [r7, #28]
 80044ea:	460b      	mov	r3, r1
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	4403      	add	r3, r0
 80044f2:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80044f6:	4829      	ldr	r0, [pc, #164]	; (800459c <lcd_write_string_no_push+0x118>)
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	18c2      	adds	r2, r0, r3
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	4413      	add	r3, r2
 8004504:	781a      	ldrb	r2, [r3, #0]
 8004506:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <lcd_write_string_no_push+0x11c>)
 8004508:	545a      	strb	r2, [r3, r1]
			}
			if (line == 3) {
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b03      	cmp	r3, #3
 800450e:	d116      	bne.n	800453e <lcd_write_string_no_push+0xba>
				buffer[256 + i + place + j * 5] = character_data[x - 32][i];
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f1a3 0220 	sub.w	r2, r3, #32
 8004516:	69b9      	ldr	r1, [r7, #24]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	18c8      	adds	r0, r1, r3
 800451c:	69f9      	ldr	r1, [r7, #28]
 800451e:	460b      	mov	r3, r1
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	4403      	add	r3, r0
 8004526:	f503 7180 	add.w	r1, r3, #256	; 0x100
 800452a:	481c      	ldr	r0, [pc, #112]	; (800459c <lcd_write_string_no_push+0x118>)
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	18c2      	adds	r2, r0, r3
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	4413      	add	r3, r2
 8004538:	781a      	ldrb	r2, [r3, #0]
 800453a:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <lcd_write_string_no_push+0x11c>)
 800453c:	545a      	strb	r2, [r3, r1]
			}
			if (line == 4) {
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b04      	cmp	r3, #4
 8004542:	d116      	bne.n	8004572 <lcd_write_string_no_push+0xee>
				buffer[384 + i + place + j * 5] = character_data[x - 32][i];
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f1a3 0220 	sub.w	r2, r3, #32
 800454a:	69b9      	ldr	r1, [r7, #24]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	18c8      	adds	r0, r1, r3
 8004550:	69f9      	ldr	r1, [r7, #28]
 8004552:	460b      	mov	r3, r1
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	4403      	add	r3, r0
 800455a:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 800455e:	480f      	ldr	r0, [pc, #60]	; (800459c <lcd_write_string_no_push+0x118>)
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	18c2      	adds	r2, r0, r3
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	4413      	add	r3, r2
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <lcd_write_string_no_push+0x11c>)
 8004570:	545a      	strb	r2, [r3, r1]
		for (int i = 0; i < 5; i++) {
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	3301      	adds	r3, #1
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2b04      	cmp	r3, #4
 800457c:	dd93      	ble.n	80044a6 <lcd_write_string_no_push+0x22>
	for (int j = 0; j < strlen(slice); j++) {
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3301      	adds	r3, #1
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7fb fe23 	bl	80001d0 <strlen>
 800458a:	4602      	mov	r2, r0
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	429a      	cmp	r2, r3
 8004590:	d881      	bhi.n	8004496 <lcd_write_string_no_push+0x12>
			}
		}
	}
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	3720      	adds	r7, #32
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	0800a644 	.word	0x0800a644
 80045a0:	20000214 	.word	0x20000214

080045a4 <lcd_write_string_custom>:

void lcd_write_string_custom(int character, int amount, uint32_t line, uint32_t place) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
	for (int j = 0; j < amount; j++) {
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e06d      	b.n	8004694 <lcd_write_string_custom+0xf0>
		for (int i = 0; i < 5; i++) {
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	e064      	b.n	8004688 <lcd_write_string_custom+0xe4>
			if (line == 1) {
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d113      	bne.n	80045ec <lcd_write_string_custom+0x48>
				buffer[i + place + j * 5] = custom_character_data[character - 1][i];
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1e5a      	subs	r2, r3, #1
 80045c8:	6939      	ldr	r1, [r7, #16]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	18c8      	adds	r0, r1, r3
 80045ce:	6979      	ldr	r1, [r7, #20]
 80045d0:	460b      	mov	r3, r1
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	18c1      	adds	r1, r0, r3
 80045d8:	4834      	ldr	r0, [pc, #208]	; (80046ac <lcd_write_string_custom+0x108>)
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	18c2      	adds	r2, r0, r3
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4413      	add	r3, r2
 80045e6:	781a      	ldrb	r2, [r3, #0]
 80045e8:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <lcd_write_string_custom+0x10c>)
 80045ea:	545a      	strb	r2, [r3, r1]
			}
			if (line == 2) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d115      	bne.n	800461e <lcd_write_string_custom+0x7a>
				buffer[128 + i + place + j * 5] = custom_character_data[character - 1][i];
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e5a      	subs	r2, r3, #1
 80045f6:	6939      	ldr	r1, [r7, #16]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	18c8      	adds	r0, r1, r3
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	460b      	mov	r3, r1
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	4403      	add	r3, r0
 8004606:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800460a:	4828      	ldr	r0, [pc, #160]	; (80046ac <lcd_write_string_custom+0x108>)
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	18c2      	adds	r2, r0, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4413      	add	r3, r2
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <lcd_write_string_custom+0x10c>)
 800461c:	545a      	strb	r2, [r3, r1]
			}
			if (line == 3) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d115      	bne.n	8004650 <lcd_write_string_custom+0xac>
				buffer[256 + i + place + j * 5] = custom_character_data[character - 1][i];
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e5a      	subs	r2, r3, #1
 8004628:	6939      	ldr	r1, [r7, #16]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	18c8      	adds	r0, r1, r3
 800462e:	6979      	ldr	r1, [r7, #20]
 8004630:	460b      	mov	r3, r1
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	4403      	add	r3, r0
 8004638:	f503 7180 	add.w	r1, r3, #256	; 0x100
 800463c:	481b      	ldr	r0, [pc, #108]	; (80046ac <lcd_write_string_custom+0x108>)
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	18c2      	adds	r2, r0, r3
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <lcd_write_string_custom+0x10c>)
 800464e:	545a      	strb	r2, [r3, r1]
			}
			if (line == 4) {
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b04      	cmp	r3, #4
 8004654:	d115      	bne.n	8004682 <lcd_write_string_custom+0xde>
				buffer[384 + i + place + j * 5] = custom_character_data[character - 1][i];
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1e5a      	subs	r2, r3, #1
 800465a:	6939      	ldr	r1, [r7, #16]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	18c8      	adds	r0, r1, r3
 8004660:	6979      	ldr	r1, [r7, #20]
 8004662:	460b      	mov	r3, r1
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	4403      	add	r3, r0
 800466a:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 800466e:	480f      	ldr	r0, [pc, #60]	; (80046ac <lcd_write_string_custom+0x108>)
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	18c2      	adds	r2, r0, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4413      	add	r3, r2
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <lcd_write_string_custom+0x10c>)
 8004680:	545a      	strb	r2, [r3, r1]
		for (int i = 0; i < 5; i++) {
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	3301      	adds	r3, #1
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b04      	cmp	r3, #4
 800468c:	dd97      	ble.n	80045be <lcd_write_string_custom+0x1a>
	for (int j = 0; j < amount; j++) {
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	3301      	adds	r3, #1
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	429a      	cmp	r2, r3
 800469a:	db8d      	blt.n	80045b8 <lcd_write_string_custom+0x14>
			}
		}
	}
	lcd_push_buffer(buffer);
 800469c:	4804      	ldr	r0, [pc, #16]	; (80046b0 <lcd_write_string_custom+0x10c>)
 800469e:	f7fc ff57 	bl	8001550 <lcd_push_buffer>
}
 80046a2:	bf00      	nop
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	0800a820 	.word	0x0800a820
 80046b0:	20000214 	.word	0x20000214

080046b4 <draw_gameplay_start>:
		}
	}

}

void draw_gameplay_start() {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
	lcd_write_string("Score:", 1, 36);
 80046ba:	2224      	movs	r2, #36	; 0x24
 80046bc:	2101      	movs	r1, #1
 80046be:	480b      	ldr	r0, [pc, #44]	; (80046ec <draw_gameplay_start+0x38>)
 80046c0:	f7ff fe4e 	bl	8004360 <lcd_write_string>
	for (int i = 0; i < 128; i++) {
 80046c4:	2300      	movs	r3, #0
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	e007      	b.n	80046da <draw_gameplay_start+0x26>
		buffer[128 + i] = 0x01;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3380      	adds	r3, #128	; 0x80
 80046ce:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <draw_gameplay_start+0x3c>)
 80046d0:	2101      	movs	r1, #1
 80046d2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 128; i++) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3301      	adds	r3, #1
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b7f      	cmp	r3, #127	; 0x7f
 80046de:	ddf4      	ble.n	80046ca <draw_gameplay_start+0x16>
	}
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	08009590 	.word	0x08009590
 80046f0:	20000214 	.word	0x20000214

080046f4 <draw_score>:

void draw_score() {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
	char score_str[8];
	sprintf(score_str, "%d", score);
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <draw_score+0x2c>)
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	463b      	mov	r3, r7
 8004704:	4907      	ldr	r1, [pc, #28]	; (8004724 <draw_score+0x30>)
 8004706:	4618      	mov	r0, r3
 8004708:	f003 fdd4 	bl	80082b4 <siprintf>
	lcd_write_string(score_str, 1, 66);
 800470c:	463b      	mov	r3, r7
 800470e:	2242      	movs	r2, #66	; 0x42
 8004710:	2101      	movs	r1, #1
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fe24 	bl	8004360 <lcd_write_string>
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	200001dc 	.word	0x200001dc
 8004724:	08009598 	.word	0x08009598

08004728 <LCD_alarm>:
			x = 1;
		}
	}
}

int LCD_alarm() {
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
	if (tid.mil == 50) {
 800472e:	4b34      	ldr	r3, [pc, #208]	; (8004800 <LCD_alarm+0xd8>)
 8004730:	789b      	ldrb	r3, [r3, #2]
 8004732:	b25b      	sxtb	r3, r3
 8004734:	2b32      	cmp	r3, #50	; 0x32
 8004736:	d13c      	bne.n	80047b2 <LCD_alarm+0x8a>
		while (tid.mil == 50) {
 8004738:	bf00      	nop
 800473a:	4b31      	ldr	r3, [pc, #196]	; (8004800 <LCD_alarm+0xd8>)
 800473c:	789b      	ldrb	r3, [r3, #2]
 800473e:	b25b      	sxtb	r3, r3
 8004740:	2b32      	cmp	r3, #50	; 0x32
 8004742:	d0fa      	beq.n	800473a <LCD_alarm+0x12>
		}
		lcd_write_string_custom(3, 1, 2, 58);
 8004744:	233a      	movs	r3, #58	; 0x3a
 8004746:	2202      	movs	r2, #2
 8004748:	2101      	movs	r1, #1
 800474a:	2003      	movs	r0, #3
 800474c:	f7ff ff2a 	bl	80045a4 <lcd_write_string_custom>
		lcd_write_string_custom(4, 1, 2, 63);
 8004750:	233f      	movs	r3, #63	; 0x3f
 8004752:	2202      	movs	r2, #2
 8004754:	2101      	movs	r1, #1
 8004756:	2004      	movs	r0, #4
 8004758:	f7ff ff24 	bl	80045a4 <lcd_write_string_custom>
		lcd_write_string_custom(5, 1, 3, 58);
 800475c:	233a      	movs	r3, #58	; 0x3a
 800475e:	2203      	movs	r2, #3
 8004760:	2101      	movs	r1, #1
 8004762:	2005      	movs	r0, #5
 8004764:	f7ff ff1e 	bl	80045a4 <lcd_write_string_custom>
		lcd_write_string_custom(6, 1, 3, 63);
 8004768:	233f      	movs	r3, #63	; 0x3f
 800476a:	2203      	movs	r2, #3
 800476c:	2101      	movs	r1, #1
 800476e:	2006      	movs	r0, #6
 8004770:	f7ff ff18 	bl	80045a4 <lcd_write_string_custom>
		lcd_write_string_custom(7, 1, 2, 68);
 8004774:	2344      	movs	r3, #68	; 0x44
 8004776:	2202      	movs	r2, #2
 8004778:	2101      	movs	r1, #1
 800477a:	2007      	movs	r0, #7
 800477c:	f7ff ff12 	bl	80045a4 <lcd_write_string_custom>
		lcd_write_string_custom(8, 1, 3, 68);
 8004780:	2344      	movs	r3, #68	; 0x44
 8004782:	2203      	movs	r2, #3
 8004784:	2101      	movs	r1, #1
 8004786:	2008      	movs	r0, #8
 8004788:	f7ff ff0c 	bl	80045a4 <lcd_write_string_custom>
		lcd_write_string_custom(9, 1, 2, 53);
 800478c:	2335      	movs	r3, #53	; 0x35
 800478e:	2202      	movs	r2, #2
 8004790:	2101      	movs	r1, #1
 8004792:	2009      	movs	r0, #9
 8004794:	f7ff ff06 	bl	80045a4 <lcd_write_string_custom>
		lcd_write_string_custom(10, 1, 3, 53);
 8004798:	2335      	movs	r3, #53	; 0x35
 800479a:	2203      	movs	r2, #3
 800479c:	2101      	movs	r1, #1
 800479e:	200a      	movs	r0, #10
 80047a0:	f7ff ff00 	bl	80045a4 <lcd_write_string_custom>
		lcd_write_string("hull breach !!!", 4, 26);
 80047a4:	221a      	movs	r2, #26
 80047a6:	2104      	movs	r1, #4
 80047a8:	4816      	ldr	r0, [pc, #88]	; (8004804 <LCD_alarm+0xdc>)
 80047aa:	f7ff fdd9 	bl	8004360 <lcd_write_string>
		return 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e021      	b.n	80047f6 <LCD_alarm+0xce>
	}
	else if (tid.mil == 95) {
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <LCD_alarm+0xd8>)
 80047b4:	789b      	ldrb	r3, [r3, #2]
 80047b6:	b25b      	sxtb	r3, r3
 80047b8:	2b5f      	cmp	r3, #95	; 0x5f
 80047ba:	d11b      	bne.n	80047f4 <LCD_alarm+0xcc>
		while (tid.mil == 95) {
 80047bc:	bf00      	nop
 80047be:	4b10      	ldr	r3, [pc, #64]	; (8004800 <LCD_alarm+0xd8>)
 80047c0:	789b      	ldrb	r3, [r3, #2]
 80047c2:	b25b      	sxtb	r3, r3
 80047c4:	2b5f      	cmp	r3, #95	; 0x5f
 80047c6:	d0fa      	beq.n	80047be <LCD_alarm+0x96>
		}
		for (int i = 0; i < 128; i++) {
 80047c8:	2300      	movs	r3, #0
 80047ca:	607b      	str	r3, [r7, #4]
 80047cc:	e007      	b.n	80047de <LCD_alarm+0xb6>
			buffer[128 + i] = 0x01;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3380      	adds	r3, #128	; 0x80
 80047d2:	4a0d      	ldr	r2, [pc, #52]	; (8004808 <LCD_alarm+0xe0>)
 80047d4:	2101      	movs	r1, #1
 80047d6:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 128; i++) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3301      	adds	r3, #1
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b7f      	cmp	r3, #127	; 0x7f
 80047e2:	ddf4      	ble.n	80047ce <LCD_alarm+0xa6>
		}
		lcd_write_string_custom(11, 51, 3, 0);
 80047e4:	2300      	movs	r3, #0
 80047e6:	2203      	movs	r2, #3
 80047e8:	2133      	movs	r1, #51	; 0x33
 80047ea:	200b      	movs	r0, #11
 80047ec:	f7ff feda 	bl	80045a4 <lcd_write_string_custom>
		return 1;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <LCD_alarm+0xce>
	} else {
		return 0;
 80047f4:	2300      	movs	r3, #0
	}
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000418 	.word	0x20000418
 8004804:	080095ac 	.word	0x080095ac
 8004808:	20000214 	.word	0x20000214

0800480c <LCD_timer>:

void LCD_timer() {
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
	char milisec_str[3];
	char sec_str[2];
	char min_str[2];
	sprintf(milisec_str, "%d", tid.mil);
 8004812:	4b25      	ldr	r3, [pc, #148]	; (80048a8 <LCD_timer+0x9c>)
 8004814:	789b      	ldrb	r3, [r3, #2]
 8004816:	b25b      	sxtb	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	f107 030c 	add.w	r3, r7, #12
 800481e:	4923      	ldr	r1, [pc, #140]	; (80048ac <LCD_timer+0xa0>)
 8004820:	4618      	mov	r0, r3
 8004822:	f003 fd47 	bl	80082b4 <siprintf>
	sprintf(sec_str, "%d", tid.sek);
 8004826:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <LCD_timer+0x9c>)
 8004828:	785b      	ldrb	r3, [r3, #1]
 800482a:	b25b      	sxtb	r3, r3
 800482c:	461a      	mov	r2, r3
 800482e:	f107 0308 	add.w	r3, r7, #8
 8004832:	491e      	ldr	r1, [pc, #120]	; (80048ac <LCD_timer+0xa0>)
 8004834:	4618      	mov	r0, r3
 8004836:	f003 fd3d 	bl	80082b4 <siprintf>
	sprintf(min_str, "%d", tid.min);
 800483a:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <LCD_timer+0x9c>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b25b      	sxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	1d3b      	adds	r3, r7, #4
 8004844:	4919      	ldr	r1, [pc, #100]	; (80048ac <LCD_timer+0xa0>)
 8004846:	4618      	mov	r0, r3
 8004848:	f003 fd34 	bl	80082b4 <siprintf>
	lcd_write_string_no_push("0:00", 3, 55);
 800484c:	2237      	movs	r2, #55	; 0x37
 800484e:	2103      	movs	r1, #3
 8004850:	4817      	ldr	r0, [pc, #92]	; (80048b0 <LCD_timer+0xa4>)
 8004852:	f7ff fe17 	bl	8004484 <lcd_write_string_no_push>
		lcd_write_string_no_push(milisec_str, 3, 73);
	} else if (t.ml <= 9) {
		lcd_write_string_no_push(milisec_str, 3, 78);
	}
	*/
	if (tid.sek >= 10) {
 8004856:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <LCD_timer+0x9c>)
 8004858:	785b      	ldrb	r3, [r3, #1]
 800485a:	b25b      	sxtb	r3, r3
 800485c:	2b09      	cmp	r3, #9
 800485e:	dd07      	ble.n	8004870 <LCD_timer+0x64>
		lcd_write_string_no_push(sec_str, 3, 65);
 8004860:	f107 0308 	add.w	r3, r7, #8
 8004864:	2241      	movs	r2, #65	; 0x41
 8004866:	2103      	movs	r1, #3
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fe0b 	bl	8004484 <lcd_write_string_no_push>
 800486e:	e00b      	b.n	8004888 <LCD_timer+0x7c>
	} else if (tid.sek <= 9) {
 8004870:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <LCD_timer+0x9c>)
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	b25b      	sxtb	r3, r3
 8004876:	2b09      	cmp	r3, #9
 8004878:	dc06      	bgt.n	8004888 <LCD_timer+0x7c>
		lcd_write_string_no_push(sec_str, 3, 70);
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	2246      	movs	r2, #70	; 0x46
 8004880:	2103      	movs	r1, #3
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fdfe 	bl	8004484 <lcd_write_string_no_push>
	}
	lcd_write_string_no_push(min_str, 3, 55);
 8004888:	1d3b      	adds	r3, r7, #4
 800488a:	2237      	movs	r2, #55	; 0x37
 800488c:	2103      	movs	r1, #3
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fdf8 	bl	8004484 <lcd_write_string_no_push>
	lcd_write_string(":", 3, 60);
 8004894:	223c      	movs	r2, #60	; 0x3c
 8004896:	2103      	movs	r1, #3
 8004898:	4806      	ldr	r0, [pc, #24]	; (80048b4 <LCD_timer+0xa8>)
 800489a:	f7ff fd61 	bl	8004360 <lcd_write_string>
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000418 	.word	0x20000418
 80048ac:	08009598 	.word	0x08009598
 80048b0:	080095bc 	.word	0x080095bc
 80048b4:	080095c4 	.word	0x080095c4

080048b8 <initLed>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi_S.h"

void initLed(){
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 80048bc:	4b48      	ldr	r3, [pc, #288]	; (80049e0 <initLed+0x128>)
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	4a47      	ldr	r2, [pc, #284]	; (80049e0 <initLed+0x128>)
 80048c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c6:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 80048c8:	4b45      	ldr	r3, [pc, #276]	; (80049e0 <initLed+0x128>)
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	4a44      	ldr	r2, [pc, #272]	; (80049e0 <initLed+0x128>)
 80048ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d2:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 80048d4:	4b42      	ldr	r3, [pc, #264]	; (80049e0 <initLed+0x128>)
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	4a41      	ldr	r2, [pc, #260]	; (80049e0 <initLed+0x128>)
 80048da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048de:	6153      	str	r3, [r2, #20]

	// Set pin PA9 to output - BLUE LED
	GPIOA->OSPEEDR &= ~(0x00000003 << (9 * 2)); // Clear speed register
 80048e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80048ea:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80048ee:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (9 * 2)); // set speed register
 80048f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80048fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048fe:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOA->OTYPER &= ~(0x0001 << (9 * 1)); // Clear output type register
 8004900:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004904:	889b      	ldrh	r3, [r3, #4]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800490c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004910:	b29b      	uxth	r3, r3
 8004912:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER |= (0x0000 << (9)); // Set output type register
 8004914:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004918:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800491c:	8892      	ldrh	r2, [r2, #4]
 800491e:	b292      	uxth	r2, r2
 8004920:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOA->MODER &= ~(0x00000003 << (9 * 2)); // Clear mode register
 8004922:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800492c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004930:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000001 << (9 * 2)); // Set mode register
 8004932:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800493c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004940:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PC7 to output - GREEN LED
	GPIOC->OSPEEDR &= ~(0x00000003 << (7 * 2)); // Clear speed register
 8004942:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <initLed+0x12c>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	4a27      	ldr	r2, [pc, #156]	; (80049e4 <initLed+0x12c>)
 8004948:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800494c:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (7 * 2)); // set speed register
 800494e:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <initLed+0x12c>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	4a24      	ldr	r2, [pc, #144]	; (80049e4 <initLed+0x12c>)
 8004954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004958:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOC->OTYPER &= ~(0x0001 << (7 * 1)); // Clear output type register
 800495a:	4b22      	ldr	r3, [pc, #136]	; (80049e4 <initLed+0x12c>)
 800495c:	889b      	ldrh	r3, [r3, #4]
 800495e:	b29b      	uxth	r3, r3
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <initLed+0x12c>)
 8004962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004966:	b29b      	uxth	r3, r3
 8004968:	8093      	strh	r3, [r2, #4]
	GPIOC->OTYPER |= (0x0000 << (7)); // Set output type register
 800496a:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <initLed+0x12c>)
 800496c:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <initLed+0x12c>)
 800496e:	8892      	ldrh	r2, [r2, #4]
 8004970:	b292      	uxth	r2, r2
 8004972:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOC->MODER &= ~(0x00000003 << (7 * 2)); // Clear mode register
 8004974:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <initLed+0x12c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <initLed+0x12c>)
 800497a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800497e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000001 << (7 * 2)); // Set mode register
 8004980:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <initLed+0x12c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <initLed+0x12c>)
 8004986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800498a:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PB4 to output - RED LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (4 * 2)); // Clear speed register
 800498c:	4b16      	ldr	r3, [pc, #88]	; (80049e8 <initLed+0x130>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <initLed+0x130>)
 8004992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004996:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (4 * 2)); // set speed register
 8004998:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <initLed+0x130>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4a12      	ldr	r2, [pc, #72]	; (80049e8 <initLed+0x130>)
 800499e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049a2:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (4 * 1)); // Clear output type register
 80049a4:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <initLed+0x130>)
 80049a6:	889b      	ldrh	r3, [r3, #4]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4a0f      	ldr	r2, [pc, #60]	; (80049e8 <initLed+0x130>)
 80049ac:	f023 0310 	bic.w	r3, r3, #16
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (4)); // Set output type register
 80049b4:	4a0c      	ldr	r2, [pc, #48]	; (80049e8 <initLed+0x130>)
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <initLed+0x130>)
 80049b8:	8892      	ldrh	r2, [r2, #4]
 80049ba:	b292      	uxth	r2, r2
 80049bc:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <initLed+0x130>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <initLed+0x130>)
 80049c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c8:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000001 << (4 * 2)); // Set mode register
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <initLed+0x130>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a06      	ldr	r2, [pc, #24]	; (80049e8 <initLed+0x130>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d4:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40021000 	.word	0x40021000
 80049e4:	48000800 	.word	0x48000800
 80049e8:	48000400 	.word	0x48000400

080049ec <writeLed>:


void writeLed(){
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0

	// Right - Blue
	if(led.blu){
 80049f0:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <writeLed+0x94>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <writeLed+0x22>
		GPIOA->ODR &= ~(0x0001 << 9); //Set pin PA9 to low - on
 80049f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049fc:	8a9b      	ldrh	r3, [r3, #20]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	8293      	strh	r3, [r2, #20]
 8004a0c:	e009      	b.n	8004a22 <writeLed+0x36>
	}
	else{
		GPIOA->ODR |= (0x0001 << 9); //Set pin PA9 to high - off
 8004a0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a12:	8a9b      	ldrh	r3, [r3, #20]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8293      	strh	r3, [r2, #20]
	}


	// Up - Green
	if(led.gre){
 8004a22:	4b17      	ldr	r3, [pc, #92]	; (8004a80 <writeLed+0x94>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <writeLed+0x50>
		GPIOC->ODR &= ~(0x0001 << 7); //Set pin PC7 to low - on
 8004a2a:	4b16      	ldr	r3, [pc, #88]	; (8004a84 <writeLed+0x98>)
 8004a2c:	8a9b      	ldrh	r3, [r3, #20]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	4a14      	ldr	r2, [pc, #80]	; (8004a84 <writeLed+0x98>)
 8004a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8293      	strh	r3, [r2, #20]
 8004a3a:	e007      	b.n	8004a4c <writeLed+0x60>
	}
	else{
		GPIOC->ODR |= (0x0001 << 7); //Set pin PC7 to high - off
 8004a3c:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <writeLed+0x98>)
 8004a3e:	8a9b      	ldrh	r3, [r3, #20]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	4a10      	ldr	r2, [pc, #64]	; (8004a84 <writeLed+0x98>)
 8004a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	8293      	strh	r3, [r2, #20]
	}


	// Left - Red
	if(led.red){
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <writeLed+0x94>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <writeLed+0x7a>
		GPIOB->ODR &= ~(0x0001 << 4); //Set pin PB4 to low - on
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <writeLed+0x9c>)
 8004a56:	8a9b      	ldrh	r3, [r3, #20]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	4a0b      	ldr	r2, [pc, #44]	; (8004a88 <writeLed+0x9c>)
 8004a5c:	f023 0310 	bic.w	r3, r3, #16
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	8293      	strh	r3, [r2, #20]
	}
	else{
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
	}

}
 8004a64:	e007      	b.n	8004a76 <writeLed+0x8a>
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <writeLed+0x9c>)
 8004a68:	8a9b      	ldrh	r3, [r3, #20]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	4a06      	ldr	r2, [pc, #24]	; (8004a88 <writeLed+0x9c>)
 8004a6e:	f043 0310 	orr.w	r3, r3, #16
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	8293      	strh	r3, [r2, #20]
}
 8004a76:	bf00      	nop
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	200001e0 	.word	0x200001e0
 8004a84:	48000800 	.word	0x48000800
 8004a88:	48000400 	.word	0x48000400

08004a8c <fgcolor>:
#include "ansi_S.h"

void fgcolor(uint8_t foreground) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
	 4        Blue            12       Light Blue
	 5        Purple          13       Light Purple
	 6        Cyan            14       Light Cyan
	 7        Light Gray      15       White
	 */
	uint8_t type = 22;             // normal text
 8004a96:	2316      	movs	r3, #22
 8004a98:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b07      	cmp	r3, #7
 8004a9e:	d904      	bls.n	8004aaa <fgcolor+0x1e>
		type = 1;                // bold text
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	3b08      	subs	r3, #8
 8004aa8:	71fb      	strb	r3, [r7, #7]
	}
	printf("%c[%d;%dm", ESC, type, foreground + 30);
 8004aaa:	7bfa      	ldrb	r2, [r7, #15]
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	331e      	adds	r3, #30
 8004ab0:	211b      	movs	r1, #27
 8004ab2:	4803      	ldr	r0, [pc, #12]	; (8004ac0 <fgcolor+0x34>)
 8004ab4:	f003 fb02 	bl	80080bc <iprintf>
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	080095c8 	.word	0x080095c8

08004ac4 <bgcolor>:

void bgcolor(uint8_t background) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
	 4        Blue
	 5        Purple
	 6        Cyan
	 7        Gray
	 */
	printf("%c[%dm", ESC, background + 40);
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	3328      	adds	r3, #40	; 0x28
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	211b      	movs	r1, #27
 8004ad6:	4803      	ldr	r0, [pc, #12]	; (8004ae4 <bgcolor+0x20>)
 8004ad8:	f003 faf0 	bl	80080bc <iprintf>
}
 8004adc:	bf00      	nop
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	080095d4 	.word	0x080095d4

08004ae8 <resetbgcolor>:
		foreground -= 8;
	}
	printf("%c[%d;%d;%dm", ESC, type, foreground + 30, background + 40);
}

void resetbgcolor() {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
 8004aec:	211b      	movs	r1, #27
 8004aee:	4802      	ldr	r0, [pc, #8]	; (8004af8 <resetbgcolor+0x10>)
 8004af0:	f003 fae4 	bl	80080bc <iprintf>
}
 8004af4:	bf00      	nop
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	080095ec 	.word	0x080095ec

08004afc <clrscr>:

void clrscr() {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 8004b00:	4a07      	ldr	r2, [pc, #28]	; (8004b20 <clrscr+0x24>)
 8004b02:	211b      	movs	r1, #27
 8004b04:	4807      	ldr	r0, [pc, #28]	; (8004b24 <clrscr+0x28>)
 8004b06:	f003 fad9 	bl	80080bc <iprintf>
	printf("%c[%s", ESC, "3J");
 8004b0a:	4a07      	ldr	r2, [pc, #28]	; (8004b28 <clrscr+0x2c>)
 8004b0c:	211b      	movs	r1, #27
 8004b0e:	4805      	ldr	r0, [pc, #20]	; (8004b24 <clrscr+0x28>)
 8004b10:	f003 fad4 	bl	80080bc <iprintf>
	gotoxy(1,1);
 8004b14:	2101      	movs	r1, #1
 8004b16:	2001      	movs	r0, #1
 8004b18:	f000 f808 	bl	8004b2c <gotoxy>
}
 8004b1c:	bf00      	nop
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	080095f4 	.word	0x080095f4
 8004b24:	080095f8 	.word	0x080095f8
 8004b28:	08009600 	.word	0x08009600

08004b2c <gotoxy>:

void clreol() {
	printf("%c[%s", ESC, "2k");
}

void gotoxy(int c, int r) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", ESC, r, c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	211b      	movs	r1, #27
 8004b3c:	4803      	ldr	r0, [pc, #12]	; (8004b4c <gotoxy+0x20>)
 8004b3e:	f003 fabd 	bl	80080bc <iprintf>
}
 8004b42:	bf00      	nop
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	08009608 	.word	0x08009608

08004b50 <blink>:
	} else {
		printf("%c[%d%c", ESC, 24, 'm');
	}
}

void blink(int state) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	if (state) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <blink+0x1a>
		//printf("\x1b[5m");
		printf("%c[%dm", ESC, 5);
 8004b5e:	2205      	movs	r2, #5
 8004b60:	211b      	movs	r1, #27
 8004b62:	4806      	ldr	r0, [pc, #24]	; (8004b7c <blink+0x2c>)
 8004b64:	f003 faaa 	bl	80080bc <iprintf>
	} else {
		//printf("\x1b[25m");
		printf("%c[%dm", ESC, 25);
	}
}
 8004b68:	e004      	b.n	8004b74 <blink+0x24>
		printf("%c[%dm", ESC, 25);
 8004b6a:	2219      	movs	r2, #25
 8004b6c:	211b      	movs	r1, #27
 8004b6e:	4803      	ldr	r0, [pc, #12]	; (8004b7c <blink+0x2c>)
 8004b70:	f003 faa4 	bl	80080bc <iprintf>
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	080095d4 	.word	0x080095d4

08004b80 <initAstro>:
#include "ansi_S.h"
#include "astroid.h"
#include "joystick.h"
#include "timer.h"

void initAstro(){
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
	bllt.px = 0;
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <initAstro+0x40>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	801a      	strh	r2, [r3, #0]
	bllt.py = 0;
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <initAstro+0x40>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	805a      	strh	r2, [r3, #2]
	bllt.vx = 0;
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <initAstro+0x40>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	711a      	strb	r2, [r3, #4]
	bllt.vy = 0;
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <initAstro+0x40>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	715a      	strb	r2, [r3, #5]

	ast1.px = 175;
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <initAstro+0x44>)
 8004b9e:	22af      	movs	r2, #175	; 0xaf
 8004ba0:	801a      	strh	r2, [r3, #0]
	ast1.py = 29;
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <initAstro+0x44>)
 8004ba4:	221d      	movs	r2, #29
 8004ba6:	805a      	strh	r2, [r3, #2]
	ast1.vx = -1;
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <initAstro+0x44>)
 8004baa:	22ff      	movs	r2, #255	; 0xff
 8004bac:	711a      	strb	r2, [r3, #4]
	ast1.vy = 0;
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <initAstro+0x44>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	715a      	strb	r2, [r3, #5]
//	ast2.py = 39;
//	ast2.vx = -2;
//	ast2.vy = 0;


}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000424 	.word	0x20000424
 8004bc4:	2000041c 	.word	0x2000041c

08004bc8 <asteroidUpdate>:


void asteroidUpdate(spaceship_t *S){
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	moveBullet();
 8004bd0:	f000 f822 	bl	8004c18 <moveBullet>
	asteroid1(S);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f8dd 	bl	8004d94 <asteroid1>
//	asteroid2();
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <shoot>:
		}
	}
}


void shoot(spaceship_t S){
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	7138      	strb	r0, [r7, #4]
bllt.state = 1;
 8004bec:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <shoot+0x30>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	719a      	strb	r2, [r3, #6]
bllt.px = 92;
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <shoot+0x30>)
 8004bf4:	225c      	movs	r2, #92	; 0x5c
 8004bf6:	801a      	strh	r2, [r3, #0]
bllt.py = S.ud+29;
 8004bf8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	331d      	adds	r3, #29
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	b21a      	sxth	r2, r3
 8004c04:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <shoot+0x30>)
 8004c06:	805a      	strh	r2, [r3, #2]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	20000424 	.word	0x20000424

08004c18 <moveBullet>:

void moveBullet(){
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
	setFreq(0);
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f000 fd97 	bl	8005750 <setFreq>
	if (bllt.state){
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <moveBullet+0x24>)
 8004c24:	799b      	ldrb	r3, [r3, #6]
 8004c26:	b25b      	sxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <moveBullet+0x1e>
		drawBullet();
 8004c2c:	f000 f808 	bl	8004c40 <drawBullet>
		setFreq(10);
 8004c30:	200a      	movs	r0, #10
 8004c32:	f000 fd8d 	bl	8005750 <setFreq>
	}

	//Debug Bullet
//	gotoxy(5,7);
//	printf("Bullet: %03d, %03d, %d", bllt.px, bllt.py, bllt.state);
}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000424 	.word	0x20000424

08004c40 <drawBullet>:

void drawBullet(){
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
	gotoxy(bllt.px,bllt.py);
 8004c46:	4b51      	ldr	r3, [pc, #324]	; (8004d8c <drawBullet+0x14c>)
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	b21b      	sxth	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b4f      	ldr	r3, [pc, #316]	; (8004d8c <drawBullet+0x14c>)
 8004c50:	885b      	ldrh	r3, [r3, #2]
 8004c52:	b21b      	sxth	r3, r3
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f7ff ff68 	bl	8004b2c <gotoxy>

	for (int j=0;j<9;j++){
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e005      	b.n	8004c6e <drawBullet+0x2e>
		printf("%c",32);
 8004c62:	2020      	movs	r0, #32
 8004c64:	f003 fa42 	bl	80080ec <putchar>
	for (int j=0;j<9;j++){
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	ddf6      	ble.n	8004c62 <drawBullet+0x22>
	}

	if (bllt.px < 183-9){
 8004c74:	4b45      	ldr	r3, [pc, #276]	; (8004d8c <drawBullet+0x14c>)
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	2bad      	cmp	r3, #173	; 0xad
 8004c7c:	dc6f      	bgt.n	8004d5e <drawBullet+0x11e>
	bllt.px += 6;
 8004c7e:	4b43      	ldr	r3, [pc, #268]	; (8004d8c <drawBullet+0x14c>)
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b21b      	sxth	r3, r3
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3306      	adds	r3, #6
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	b21a      	sxth	r2, r3
 8004c8c:	4b3f      	ldr	r3, [pc, #252]	; (8004d8c <drawBullet+0x14c>)
 8004c8e:	801a      	strh	r2, [r3, #0]
	gotoxy(bllt.px,bllt.py);
 8004c90:	4b3e      	ldr	r3, [pc, #248]	; (8004d8c <drawBullet+0x14c>)
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b21b      	sxth	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	4b3c      	ldr	r3, [pc, #240]	; (8004d8c <drawBullet+0x14c>)
 8004c9a:	885b      	ldrh	r3, [r3, #2]
 8004c9c:	b21b      	sxth	r3, r3
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f7ff ff43 	bl	8004b2c <gotoxy>

	for(int i=0; i<3;i++){
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	e010      	b.n	8004cce <drawBullet+0x8e>
		for (int j=0;j<3;j++){
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e007      	b.n	8004cc2 <drawBullet+0x82>
			printf("%c",176+i);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	33b0      	adds	r3, #176	; 0xb0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f003 fa18 	bl	80080ec <putchar>
		for (int j=0;j<3;j++){
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	ddf4      	ble.n	8004cb2 <drawBullet+0x72>
	for(int i=0; i<3;i++){
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	ddeb      	ble.n	8004cac <drawBullet+0x6c>
		}
	}

//	printf("%c%c%c",176,177,178);
	if (bllt.px <= ast1.px+10 && bllt.px >= ast1.px && bllt.py >= ast1.py-3 && bllt.py <= ast1.py+3){
 8004cd4:	4b2d      	ldr	r3, [pc, #180]	; (8004d8c <drawBullet+0x14c>)
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b21b      	sxth	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4b2c      	ldr	r3, [pc, #176]	; (8004d90 <drawBullet+0x150>)
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b21b      	sxth	r3, r3
 8004ce2:	330a      	adds	r3, #10
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	dc4c      	bgt.n	8004d82 <drawBullet+0x142>
 8004ce8:	4b28      	ldr	r3, [pc, #160]	; (8004d8c <drawBullet+0x14c>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b21a      	sxth	r2, r3
 8004cee:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <drawBullet+0x150>)
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b21b      	sxth	r3, r3
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	db44      	blt.n	8004d82 <drawBullet+0x142>
 8004cf8:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <drawBullet+0x14c>)
 8004cfa:	885b      	ldrh	r3, [r3, #2]
 8004cfc:	b21b      	sxth	r3, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4b23      	ldr	r3, [pc, #140]	; (8004d90 <drawBullet+0x150>)
 8004d02:	885b      	ldrh	r3, [r3, #2]
 8004d04:	b21b      	sxth	r3, r3
 8004d06:	3b03      	subs	r3, #3
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	db3a      	blt.n	8004d82 <drawBullet+0x142>
 8004d0c:	4b1f      	ldr	r3, [pc, #124]	; (8004d8c <drawBullet+0x14c>)
 8004d0e:	885b      	ldrh	r3, [r3, #2]
 8004d10:	b21b      	sxth	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <drawBullet+0x150>)
 8004d16:	885b      	ldrh	r3, [r3, #2]
 8004d18:	b21b      	sxth	r3, r3
 8004d1a:	3303      	adds	r3, #3
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	dc30      	bgt.n	8004d82 <drawBullet+0x142>
		for (int j=0;j<9;j++){
 8004d20:	2300      	movs	r3, #0
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	e005      	b.n	8004d32 <drawBullet+0xf2>
			printf("%c",32);
 8004d26:	2020      	movs	r0, #32
 8004d28:	f003 f9e0 	bl	80080ec <putchar>
		for (int j=0;j<9;j++){
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	ddf6      	ble.n	8004d26 <drawBullet+0xe6>
		}


		ast1.state = 1;
 8004d38:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <drawBullet+0x150>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	719a      	strb	r2, [r3, #6]
		ast1.vx -= 1;
 8004d3e:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <drawBullet+0x150>)
 8004d40:	791b      	ldrb	r3, [r3, #4]
 8004d42:	b25b      	sxtb	r3, r3
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	b25a      	sxtb	r2, r3
 8004d4c:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <drawBullet+0x150>)
 8004d4e:	711a      	strb	r2, [r3, #4]
		bllt.state = 0;
 8004d50:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <drawBullet+0x14c>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	719a      	strb	r2, [r3, #6]
		setFreq(20);
 8004d56:	2014      	movs	r0, #20
 8004d58:	f000 fcfa 	bl	8005750 <setFreq>





}
 8004d5c:	e011      	b.n	8004d82 <drawBullet+0x142>
		for (int j=0;j<9;j++){
 8004d5e:	2300      	movs	r3, #0
 8004d60:	607b      	str	r3, [r7, #4]
 8004d62:	e005      	b.n	8004d70 <drawBullet+0x130>
			printf("%c",32);
 8004d64:	2020      	movs	r0, #32
 8004d66:	f003 f9c1 	bl	80080ec <putchar>
		for (int j=0;j<9;j++){
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	ddf6      	ble.n	8004d64 <drawBullet+0x124>
		bllt.state = 0;
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <drawBullet+0x14c>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	719a      	strb	r2, [r3, #6]
		bllt.px = 6;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <drawBullet+0x14c>)
 8004d7e:	2206      	movs	r2, #6
 8004d80:	801a      	strh	r2, [r3, #0]
}
 8004d82:	bf00      	nop
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000424 	.word	0x20000424
 8004d90:	2000041c 	.word	0x2000041c

08004d94 <asteroid1>:

void asteroid1(spaceship_t ship){
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	7138      	strb	r0, [r7, #4]
	int pos = ship.ud+29;
 8004d9c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004da0:	331d      	adds	r3, #29
 8004da2:	60fb      	str	r3, [r7, #12]
	static int i;
	gotoxy(ast1.px,ast1.py+29);
 8004da4:	4b51      	ldr	r3, [pc, #324]	; (8004eec <asteroid1+0x158>)
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b21b      	sxth	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b4f      	ldr	r3, [pc, #316]	; (8004eec <asteroid1+0x158>)
 8004dae:	885b      	ldrh	r3, [r3, #2]
 8004db0:	b21b      	sxth	r3, r3
 8004db2:	331d      	adds	r3, #29
 8004db4:	4619      	mov	r1, r3
 8004db6:	4610      	mov	r0, r2
 8004db8:	f7ff feb8 	bl	8004b2c <gotoxy>
	clearAsteroSmall(ast1.px, ast1.py);
 8004dbc:	4b4b      	ldr	r3, [pc, #300]	; (8004eec <asteroid1+0x158>)
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	b21b      	sxth	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4b49      	ldr	r3, [pc, #292]	; (8004eec <asteroid1+0x158>)
 8004dc6:	885b      	ldrh	r3, [r3, #2]
 8004dc8:	b21b      	sxth	r3, r3
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f000 f891 	bl	8004ef4 <clearAsteroSmall>

	ast1.px += ast1.vx;
 8004dd2:	4b46      	ldr	r3, [pc, #280]	; (8004eec <asteroid1+0x158>)
 8004dd4:	791b      	ldrb	r3, [r3, #4]
 8004dd6:	b259      	sxtb	r1, r3
 8004dd8:	4b44      	ldr	r3, [pc, #272]	; (8004eec <asteroid1+0x158>)
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b21b      	sxth	r3, r3
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	b28b      	uxth	r3, r1
 8004de2:	4413      	add	r3, r2
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	b21a      	sxth	r2, r3
 8004de8:	4b40      	ldr	r3, [pc, #256]	; (8004eec <asteroid1+0x158>)
 8004dea:	801a      	strh	r2, [r3, #0]

	switch(i){
 8004dec:	4b40      	ldr	r3, [pc, #256]	; (8004ef0 <asteroid1+0x15c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d13c      	bne.n	8004e6e <asteroid1+0xda>
		case 3:
			i = 0;
 8004df4:	4b3e      	ldr	r3, [pc, #248]	; (8004ef0 <asteroid1+0x15c>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]

			ast1.py += ast1.vy;
 8004dfa:	4b3c      	ldr	r3, [pc, #240]	; (8004eec <asteroid1+0x158>)
 8004dfc:	795b      	ldrb	r3, [r3, #5]
 8004dfe:	b259      	sxtb	r1, r3
 8004e00:	4b3a      	ldr	r3, [pc, #232]	; (8004eec <asteroid1+0x158>)
 8004e02:	885b      	ldrh	r3, [r3, #2]
 8004e04:	b21b      	sxth	r3, r3
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	b28b      	uxth	r3, r1
 8004e0a:	4413      	add	r3, r2
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	b21a      	sxth	r2, r3
 8004e10:	4b36      	ldr	r3, [pc, #216]	; (8004eec <asteroid1+0x158>)
 8004e12:	805a      	strh	r2, [r3, #2]
			if(ast1.py > pos && ast1.vy != -1){
 8004e14:	4b35      	ldr	r3, [pc, #212]	; (8004eec <asteroid1+0x158>)
 8004e16:	885b      	ldrh	r3, [r3, #2]
 8004e18:	b21b      	sxth	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	da0f      	bge.n	8004e42 <asteroid1+0xae>
 8004e22:	4b32      	ldr	r3, [pc, #200]	; (8004eec <asteroid1+0x158>)
 8004e24:	795b      	ldrb	r3, [r3, #5]
 8004e26:	b25b      	sxtb	r3, r3
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d009      	beq.n	8004e42 <asteroid1+0xae>
				ast1.vy -= 1;
 8004e2e:	4b2f      	ldr	r3, [pc, #188]	; (8004eec <asteroid1+0x158>)
 8004e30:	795b      	ldrb	r3, [r3, #5]
 8004e32:	b25b      	sxtb	r3, r3
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	b25a      	sxtb	r2, r3
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <asteroid1+0x158>)
 8004e3e:	715a      	strb	r2, [r3, #5]
				ast1.vy += 1;
			}



			break;
 8004e40:	e01b      	b.n	8004e7a <asteroid1+0xe6>
			}else if (ast1.py < pos && ast1.vy != 1){
 8004e42:	4b2a      	ldr	r3, [pc, #168]	; (8004eec <asteroid1+0x158>)
 8004e44:	885b      	ldrh	r3, [r3, #2]
 8004e46:	b21b      	sxth	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	dd14      	ble.n	8004e7a <asteroid1+0xe6>
 8004e50:	4b26      	ldr	r3, [pc, #152]	; (8004eec <asteroid1+0x158>)
 8004e52:	795b      	ldrb	r3, [r3, #5]
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d00f      	beq.n	8004e7a <asteroid1+0xe6>
				ast1.vy += 1;
 8004e5a:	4b24      	ldr	r3, [pc, #144]	; (8004eec <asteroid1+0x158>)
 8004e5c:	795b      	ldrb	r3, [r3, #5]
 8004e5e:	b25b      	sxtb	r3, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	3301      	adds	r3, #1
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	b25a      	sxtb	r2, r3
 8004e68:	4b20      	ldr	r3, [pc, #128]	; (8004eec <asteroid1+0x158>)
 8004e6a:	715a      	strb	r2, [r3, #5]
			break;
 8004e6c:	e005      	b.n	8004e7a <asteroid1+0xe6>

		default:
			i++;
 8004e6e:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <asteroid1+0x15c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3301      	adds	r3, #1
 8004e74:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <asteroid1+0x15c>)
 8004e76:	6013      	str	r3, [r2, #0]
			break;
 8004e78:	e000      	b.n	8004e7c <asteroid1+0xe8>
			break;
 8004e7a:	bf00      	nop
	//Debug astroid
//	gotoxy(5,4);
//	printf("ast: %03d,%02d | %03d, %03d | pos: %d",ast1.px, ast1.py, ast1.vx, ast1.vy, pos);


	if (ast1.px <= 10 || ast1.py >= 60 || ast1.py < 5 || ast1.state){
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	; (8004eec <asteroid1+0x158>)
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b21b      	sxth	r3, r3
 8004e82:	2b0a      	cmp	r3, #10
 8004e84:	dd0e      	ble.n	8004ea4 <asteroid1+0x110>
 8004e86:	4b19      	ldr	r3, [pc, #100]	; (8004eec <asteroid1+0x158>)
 8004e88:	885b      	ldrh	r3, [r3, #2]
 8004e8a:	b21b      	sxth	r3, r3
 8004e8c:	2b3b      	cmp	r3, #59	; 0x3b
 8004e8e:	dc09      	bgt.n	8004ea4 <asteroid1+0x110>
 8004e90:	4b16      	ldr	r3, [pc, #88]	; (8004eec <asteroid1+0x158>)
 8004e92:	885b      	ldrh	r3, [r3, #2]
 8004e94:	b21b      	sxth	r3, r3
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	dd04      	ble.n	8004ea4 <asteroid1+0x110>
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <asteroid1+0x158>)
 8004e9c:	799b      	ldrb	r3, [r3, #6]
 8004e9e:	b25b      	sxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d014      	beq.n	8004ece <asteroid1+0x13a>
		ast1.px = 178;
 8004ea4:	4b11      	ldr	r3, [pc, #68]	; (8004eec <asteroid1+0x158>)
 8004ea6:	22b2      	movs	r2, #178	; 0xb2
 8004ea8:	801a      	strh	r2, [r3, #0]

		ast1.py += 5;
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <asteroid1+0x158>)
 8004eac:	885b      	ldrh	r3, [r3, #2]
 8004eae:	b21b      	sxth	r3, r3
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3305      	adds	r3, #5
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	b21a      	sxth	r2, r3
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <asteroid1+0x158>)
 8004eba:	805a      	strh	r2, [r3, #2]

		ast1.vy = 0;
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <asteroid1+0x158>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	715a      	strb	r2, [r3, #5]
		ast1.state = 0;
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <asteroid1+0x158>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	719a      	strb	r2, [r3, #6]
		setFreq(0);
 8004ec8:	2000      	movs	r0, #0
 8004eca:	f000 fc41 	bl	8005750 <setFreq>
	}


	drawAsteroidSmall(ast1.px, ast1.py);
 8004ece:	4b07      	ldr	r3, [pc, #28]	; (8004eec <asteroid1+0x158>)
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b21b      	sxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <asteroid1+0x158>)
 8004ed8:	885b      	ldrh	r3, [r3, #2]
 8004eda:	b21b      	sxth	r3, r3
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f000 f85a 	bl	8004f98 <drawAsteroidSmall>
}
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	2000041c 	.word	0x2000041c
 8004ef0:	200001b4 	.word	0x200001b4

08004ef4 <clearAsteroSmall>:

}



void clearAsteroSmall(int16_t x, int16_t y) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	460a      	mov	r2, r1
 8004efe:	80fb      	strh	r3, [r7, #6]
 8004f00:	4613      	mov	r3, r2
 8004f02:	80bb      	strh	r3, [r7, #4]
    gotoxy(x - 3, y - 2);
 8004f04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f08:	1eda      	subs	r2, r3, #3
 8004f0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f0e:	3b02      	subs	r3, #2
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f7ff fe0a 	bl	8004b2c <gotoxy>
    printf("       ");
 8004f18:	481c      	ldr	r0, [pc, #112]	; (8004f8c <clearAsteroSmall+0x98>)
 8004f1a:	f003 f8cf 	bl	80080bc <iprintf>
    gotoxy(x - 4, y - 1);
 8004f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f22:	1f1a      	subs	r2, r3, #4
 8004f24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f7ff fdfd 	bl	8004b2c <gotoxy>
    printf("         ");
 8004f32:	4817      	ldr	r0, [pc, #92]	; (8004f90 <clearAsteroSmall+0x9c>)
 8004f34:	f003 f8c2 	bl	80080bc <iprintf>
    gotoxy(x - 5, y);
 8004f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f3c:	3b05      	subs	r3, #5
 8004f3e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fdf1 	bl	8004b2c <gotoxy>
    printf("           ");
 8004f4a:	4812      	ldr	r0, [pc, #72]	; (8004f94 <clearAsteroSmall+0xa0>)
 8004f4c:	f003 f8b6 	bl	80080bc <iprintf>
    gotoxy(x - 4, y + 1);
 8004f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f54:	1f1a      	subs	r2, r3, #4
 8004f56:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f7ff fde4 	bl	8004b2c <gotoxy>
    printf("         ");
 8004f64:	480a      	ldr	r0, [pc, #40]	; (8004f90 <clearAsteroSmall+0x9c>)
 8004f66:	f003 f8a9 	bl	80080bc <iprintf>
    gotoxy(x - 3, y + 2);
 8004f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f6e:	1eda      	subs	r2, r3, #3
 8004f70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f74:	3302      	adds	r3, #2
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7ff fdd7 	bl	8004b2c <gotoxy>
    printf("       ");
 8004f7e:	4803      	ldr	r0, [pc, #12]	; (8004f8c <clearAsteroSmall+0x98>)
 8004f80:	f003 f89c 	bl	80080bc <iprintf>
}
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	0800961c 	.word	0x0800961c
 8004f90:	08009624 	.word	0x08009624
 8004f94:	08009630 	.word	0x08009630

08004f98 <drawAsteroidSmall>:

void drawAsteroidSmall(int16_t x, int16_t y) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	460a      	mov	r2, r1
 8004fa2:	80fb      	strh	r3, [r7, #6]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	80bb      	strh	r3, [r7, #4]
    gotoxy(x - 3, y - 2);
 8004fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fac:	1eda      	subs	r2, r3, #3
 8004fae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004fb2:	3b02      	subs	r3, #2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f7ff fdb8 	bl	8004b2c <gotoxy>
    printf(".-~~~-.");
 8004fbc:	481c      	ldr	r0, [pc, #112]	; (8005030 <drawAsteroidSmall+0x98>)
 8004fbe:	f003 f87d 	bl	80080bc <iprintf>

    gotoxy(x - 4, y - 1);
 8004fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fc6:	1f1a      	subs	r2, r3, #4
 8004fc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f7ff fdab 	bl	8004b2c <gotoxy>
    printf("/ O     \\");
 8004fd6:	4817      	ldr	r0, [pc, #92]	; (8005034 <drawAsteroidSmall+0x9c>)
 8004fd8:	f003 f870 	bl	80080bc <iprintf>

    gotoxy(x - 5, y);
 8004fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe0:	3b05      	subs	r3, #5
 8004fe2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff fd9f 	bl	8004b2c <gotoxy>
    printf(":      o  :");
 8004fee:	4812      	ldr	r0, [pc, #72]	; (8005038 <drawAsteroidSmall+0xa0>)
 8004ff0:	f003 f864 	bl	80080bc <iprintf>

    gotoxy(x - 4, y + 1);
 8004ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff8:	1f1a      	subs	r2, r3, #4
 8004ffa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ffe:	3301      	adds	r3, #1
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f7ff fd92 	bl	8004b2c <gotoxy>
    printf("\\  O    /");
 8005008:	480c      	ldr	r0, [pc, #48]	; (800503c <drawAsteroidSmall+0xa4>)
 800500a:	f003 f857 	bl	80080bc <iprintf>

    gotoxy(x - 3, y + 2);
 800500e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005012:	1eda      	subs	r2, r3, #3
 8005014:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005018:	3302      	adds	r3, #2
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f7ff fd85 	bl	8004b2c <gotoxy>
    printf("` ~~~ '");
 8005022:	4807      	ldr	r0, [pc, #28]	; (8005040 <drawAsteroidSmall+0xa8>)
 8005024:	f003 f84a 	bl	80080bc <iprintf>
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	0800963c 	.word	0x0800963c
 8005034:	08009644 	.word	0x08009644
 8005038:	08009650 	.word	0x08009650
 800503c:	0800965c 	.word	0x0800965c
 8005040:	08009668 	.word	0x08009668

08005044 <initBuzz>:
#include "stm32f30x_conf.h"
#include "timer.h"
#include "joystick.h"


void initBuzz(){
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
	// Set pin PA9 to output - BLUE LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (10 * 2)); // Clear speed register
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <initBuzz+0x5c>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a14      	ldr	r2, [pc, #80]	; (80050a0 <initBuzz+0x5c>)
 800504e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005052:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (10 * 2)); // set speed register
 8005054:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <initBuzz+0x5c>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <initBuzz+0x5c>)
 800505a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800505e:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (10 * 1)); // Clear output type register
 8005060:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <initBuzz+0x5c>)
 8005062:	889b      	ldrh	r3, [r3, #4]
 8005064:	b29b      	uxth	r3, r3
 8005066:	4a0e      	ldr	r2, [pc, #56]	; (80050a0 <initBuzz+0x5c>)
 8005068:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800506c:	b29b      	uxth	r3, r3
 800506e:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (10)); // Set output type register
 8005070:	4a0b      	ldr	r2, [pc, #44]	; (80050a0 <initBuzz+0x5c>)
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <initBuzz+0x5c>)
 8005074:	8892      	ldrh	r2, [r2, #4]
 8005076:	b292      	uxth	r2, r2
 8005078:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (10 * 2)); // Clear mode register
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <initBuzz+0x5c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a08      	ldr	r2, [pc, #32]	; (80050a0 <initBuzz+0x5c>)
 8005080:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005084:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000002 << (10 * 2)); // Set mode register
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <initBuzz+0x5c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a05      	ldr	r2, [pc, #20]	; (80050a0 <initBuzz+0x5c>)
 800508c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005090:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 8005092:	2201      	movs	r2, #1
 8005094:	210a      	movs	r1, #10
 8005096:	4802      	ldr	r0, [pc, #8]	; (80050a0 <initBuzz+0x5c>)
 8005098:	f7fb fce0 	bl	8000a5c <GPIO_PinAFConfig>

}
 800509c:	bf00      	nop
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	48000400 	.word	0x48000400

080050a4 <playTone>:
	//else (buzzTone = 0);
}

char ballin[] = " 2b 2b 2b 2b  3c";

void playTone(char s[]){
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	static int i;

	int length = strlen(s);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fb f88f 	bl	80001d0 <strlen>
 80050b2:	4603      	mov	r3, r0
 80050b4:	60fb      	str	r3, [r7, #12]

	switch(s[i]){
 80050b6:	4ba5      	ldr	r3, [pc, #660]	; (800534c <playTone+0x2a8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4413      	add	r3, r2
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	3b31      	subs	r3, #49	; 0x31
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	f200 8322 	bhi.w	800570e <playTone+0x66a>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <playTone+0x2c>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080050e5 	.word	0x080050e5
 80050d4:	0800520f 	.word	0x0800520f
 80050d8:	08005355 	.word	0x08005355
 80050dc:	0800547f 	.word	0x0800547f
 80050e0:	080055cd 	.word	0x080055cd
	case '1':
		i++;
 80050e4:	4b99      	ldr	r3, [pc, #612]	; (800534c <playTone+0x2a8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	4a98      	ldr	r2, [pc, #608]	; (800534c <playTone+0x2a8>)
 80050ec:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 80050ee:	4b97      	ldr	r3, [pc, #604]	; (800534c <playTone+0x2a8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4413      	add	r3, r2
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	3b41      	subs	r3, #65	; 0x41
 80050fc:	2b26      	cmp	r3, #38	; 0x26
 80050fe:	f200 8081 	bhi.w	8005204 <playTone+0x160>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <playTone+0x64>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	080051f5 	.word	0x080051f5
 800510c:	08005205 	.word	0x08005205
 8005110:	080051ad 	.word	0x080051ad
 8005114:	080051bd 	.word	0x080051bd
 8005118:	08005205 	.word	0x08005205
 800511c:	080051d5 	.word	0x080051d5
 8005120:	080051e5 	.word	0x080051e5
 8005124:	08005205 	.word	0x08005205
 8005128:	08005205 	.word	0x08005205
 800512c:	08005205 	.word	0x08005205
 8005130:	08005205 	.word	0x08005205
 8005134:	08005205 	.word	0x08005205
 8005138:	08005205 	.word	0x08005205
 800513c:	08005205 	.word	0x08005205
 8005140:	08005205 	.word	0x08005205
 8005144:	08005205 	.word	0x08005205
 8005148:	08005205 	.word	0x08005205
 800514c:	08005205 	.word	0x08005205
 8005150:	08005205 	.word	0x08005205
 8005154:	08005205 	.word	0x08005205
 8005158:	08005205 	.word	0x08005205
 800515c:	08005205 	.word	0x08005205
 8005160:	08005205 	.word	0x08005205
 8005164:	08005205 	.word	0x08005205
 8005168:	08005205 	.word	0x08005205
 800516c:	08005205 	.word	0x08005205
 8005170:	08005205 	.word	0x08005205
 8005174:	08005205 	.word	0x08005205
 8005178:	08005205 	.word	0x08005205
 800517c:	08005205 	.word	0x08005205
 8005180:	08005205 	.word	0x08005205
 8005184:	08005205 	.word	0x08005205
 8005188:	080051ed 	.word	0x080051ed
 800518c:	080051fd 	.word	0x080051fd
 8005190:	080051a5 	.word	0x080051a5
 8005194:	080051b5 	.word	0x080051b5
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051cd 	.word	0x080051cd
 80051a0:	080051dd 	.word	0x080051dd
			case 'c':
				buzzTone = 33;
 80051a4:	4b6a      	ldr	r3, [pc, #424]	; (8005350 <playTone+0x2ac>)
 80051a6:	2221      	movs	r2, #33	; 0x21
 80051a8:	801a      	strh	r2, [r3, #0]
				break;
 80051aa:	e02f      	b.n	800520c <playTone+0x168>
			case 'C':
				buzzTone = 35;
 80051ac:	4b68      	ldr	r3, [pc, #416]	; (8005350 <playTone+0x2ac>)
 80051ae:	2223      	movs	r2, #35	; 0x23
 80051b0:	801a      	strh	r2, [r3, #0]
				break;
 80051b2:	e02b      	b.n	800520c <playTone+0x168>

			case 'd':
				buzzTone = 37;
 80051b4:	4b66      	ldr	r3, [pc, #408]	; (8005350 <playTone+0x2ac>)
 80051b6:	2225      	movs	r2, #37	; 0x25
 80051b8:	801a      	strh	r2, [r3, #0]
				break;
 80051ba:	e027      	b.n	800520c <playTone+0x168>
			case 'D':
				buzzTone = 39;
 80051bc:	4b64      	ldr	r3, [pc, #400]	; (8005350 <playTone+0x2ac>)
 80051be:	2227      	movs	r2, #39	; 0x27
 80051c0:	801a      	strh	r2, [r3, #0]
				break;
 80051c2:	e023      	b.n	800520c <playTone+0x168>

			case 'e':
				buzzTone = 41;
 80051c4:	4b62      	ldr	r3, [pc, #392]	; (8005350 <playTone+0x2ac>)
 80051c6:	2229      	movs	r2, #41	; 0x29
 80051c8:	801a      	strh	r2, [r3, #0]
				break;
 80051ca:	e01f      	b.n	800520c <playTone+0x168>

			case 'f':
				buzzTone = 44;
 80051cc:	4b60      	ldr	r3, [pc, #384]	; (8005350 <playTone+0x2ac>)
 80051ce:	222c      	movs	r2, #44	; 0x2c
 80051d0:	801a      	strh	r2, [r3, #0]
				break;
 80051d2:	e01b      	b.n	800520c <playTone+0x168>
			case 'F':
				buzzTone = 46;
 80051d4:	4b5e      	ldr	r3, [pc, #376]	; (8005350 <playTone+0x2ac>)
 80051d6:	222e      	movs	r2, #46	; 0x2e
 80051d8:	801a      	strh	r2, [r3, #0]
				break;
 80051da:	e017      	b.n	800520c <playTone+0x168>

			case 'g':
				buzzTone = 49;
 80051dc:	4b5c      	ldr	r3, [pc, #368]	; (8005350 <playTone+0x2ac>)
 80051de:	2231      	movs	r2, #49	; 0x31
 80051e0:	801a      	strh	r2, [r3, #0]
				break;
 80051e2:	e013      	b.n	800520c <playTone+0x168>
			case 'G':
				buzzTone = 52;
 80051e4:	4b5a      	ldr	r3, [pc, #360]	; (8005350 <playTone+0x2ac>)
 80051e6:	2234      	movs	r2, #52	; 0x34
 80051e8:	801a      	strh	r2, [r3, #0]
				break;
 80051ea:	e00f      	b.n	800520c <playTone+0x168>

			case 'a':
				buzzTone = 55;
 80051ec:	4b58      	ldr	r3, [pc, #352]	; (8005350 <playTone+0x2ac>)
 80051ee:	2237      	movs	r2, #55	; 0x37
 80051f0:	801a      	strh	r2, [r3, #0]
				break;
 80051f2:	e00b      	b.n	800520c <playTone+0x168>
			case 'A':
				buzzTone = 58;
 80051f4:	4b56      	ldr	r3, [pc, #344]	; (8005350 <playTone+0x2ac>)
 80051f6:	223a      	movs	r2, #58	; 0x3a
 80051f8:	801a      	strh	r2, [r3, #0]
				break;
 80051fa:	e007      	b.n	800520c <playTone+0x168>

			case 'b':
				buzzTone = 62;
 80051fc:	4b54      	ldr	r3, [pc, #336]	; (8005350 <playTone+0x2ac>)
 80051fe:	223e      	movs	r2, #62	; 0x3e
 8005200:	801a      	strh	r2, [r3, #0]
				break;
 8005202:	e003      	b.n	800520c <playTone+0x168>
			default:
				buzzTone = 0;
 8005204:	4b52      	ldr	r3, [pc, #328]	; (8005350 <playTone+0x2ac>)
 8005206:	2200      	movs	r2, #0
 8005208:	801a      	strh	r2, [r3, #0]
				break;
 800520a:	bf00      	nop
		}
		break;
 800520c:	e283      	b.n	8005716 <playTone+0x672>
	case '2':
		i++;
 800520e:	4b4f      	ldr	r3, [pc, #316]	; (800534c <playTone+0x2a8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	4a4d      	ldr	r2, [pc, #308]	; (800534c <playTone+0x2a8>)
 8005216:	6013      	str	r3, [r2, #0]
		printf("%c",s[i]);
 8005218:	4b4c      	ldr	r3, [pc, #304]	; (800534c <playTone+0x2a8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f002 ff61 	bl	80080ec <putchar>
		switch(s[i]){
 800522a:	4b48      	ldr	r3, [pc, #288]	; (800534c <playTone+0x2a8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4413      	add	r3, r2
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	3b41      	subs	r3, #65	; 0x41
 8005238:	2b26      	cmp	r3, #38	; 0x26
 800523a:	f200 8081 	bhi.w	8005340 <playTone+0x29c>
 800523e:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <playTone+0x1a0>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	08005331 	.word	0x08005331
 8005248:	08005341 	.word	0x08005341
 800524c:	080052e9 	.word	0x080052e9
 8005250:	080052f9 	.word	0x080052f9
 8005254:	08005341 	.word	0x08005341
 8005258:	08005311 	.word	0x08005311
 800525c:	08005321 	.word	0x08005321
 8005260:	08005341 	.word	0x08005341
 8005264:	08005341 	.word	0x08005341
 8005268:	08005341 	.word	0x08005341
 800526c:	08005341 	.word	0x08005341
 8005270:	08005341 	.word	0x08005341
 8005274:	08005341 	.word	0x08005341
 8005278:	08005341 	.word	0x08005341
 800527c:	08005341 	.word	0x08005341
 8005280:	08005341 	.word	0x08005341
 8005284:	08005341 	.word	0x08005341
 8005288:	08005341 	.word	0x08005341
 800528c:	08005341 	.word	0x08005341
 8005290:	08005341 	.word	0x08005341
 8005294:	08005341 	.word	0x08005341
 8005298:	08005341 	.word	0x08005341
 800529c:	08005341 	.word	0x08005341
 80052a0:	08005341 	.word	0x08005341
 80052a4:	08005341 	.word	0x08005341
 80052a8:	08005341 	.word	0x08005341
 80052ac:	08005341 	.word	0x08005341
 80052b0:	08005341 	.word	0x08005341
 80052b4:	08005341 	.word	0x08005341
 80052b8:	08005341 	.word	0x08005341
 80052bc:	08005341 	.word	0x08005341
 80052c0:	08005341 	.word	0x08005341
 80052c4:	08005329 	.word	0x08005329
 80052c8:	08005339 	.word	0x08005339
 80052cc:	080052e1 	.word	0x080052e1
 80052d0:	080052f1 	.word	0x080052f1
 80052d4:	08005301 	.word	0x08005301
 80052d8:	08005309 	.word	0x08005309
 80052dc:	08005319 	.word	0x08005319
			case 'c':
				buzzTone = 65;
 80052e0:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <playTone+0x2ac>)
 80052e2:	2241      	movs	r2, #65	; 0x41
 80052e4:	801a      	strh	r2, [r3, #0]
				break;
 80052e6:	e02f      	b.n	8005348 <playTone+0x2a4>
			case 'C':
				buzzTone = 69;
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <playTone+0x2ac>)
 80052ea:	2245      	movs	r2, #69	; 0x45
 80052ec:	801a      	strh	r2, [r3, #0]
				break;
 80052ee:	e02b      	b.n	8005348 <playTone+0x2a4>

			case 'd':
				buzzTone = 73;
 80052f0:	4b17      	ldr	r3, [pc, #92]	; (8005350 <playTone+0x2ac>)
 80052f2:	2249      	movs	r2, #73	; 0x49
 80052f4:	801a      	strh	r2, [r3, #0]
				break;
 80052f6:	e027      	b.n	8005348 <playTone+0x2a4>
			case 'D':
				buzzTone = 78;
 80052f8:	4b15      	ldr	r3, [pc, #84]	; (8005350 <playTone+0x2ac>)
 80052fa:	224e      	movs	r2, #78	; 0x4e
 80052fc:	801a      	strh	r2, [r3, #0]
				break;
 80052fe:	e023      	b.n	8005348 <playTone+0x2a4>

			case 'e':
				buzzTone = 82;
 8005300:	4b13      	ldr	r3, [pc, #76]	; (8005350 <playTone+0x2ac>)
 8005302:	2252      	movs	r2, #82	; 0x52
 8005304:	801a      	strh	r2, [r3, #0]
				break;
 8005306:	e01f      	b.n	8005348 <playTone+0x2a4>

			case 'f':
				buzzTone = 87;
 8005308:	4b11      	ldr	r3, [pc, #68]	; (8005350 <playTone+0x2ac>)
 800530a:	2257      	movs	r2, #87	; 0x57
 800530c:	801a      	strh	r2, [r3, #0]
				break;
 800530e:	e01b      	b.n	8005348 <playTone+0x2a4>
			case 'F':
				buzzTone = 93;
 8005310:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <playTone+0x2ac>)
 8005312:	225d      	movs	r2, #93	; 0x5d
 8005314:	801a      	strh	r2, [r3, #0]
				break;
 8005316:	e017      	b.n	8005348 <playTone+0x2a4>

			case 'g':
				buzzTone = 98;
 8005318:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <playTone+0x2ac>)
 800531a:	2262      	movs	r2, #98	; 0x62
 800531c:	801a      	strh	r2, [r3, #0]
				break;
 800531e:	e013      	b.n	8005348 <playTone+0x2a4>
			case 'G':
				buzzTone = 104;
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <playTone+0x2ac>)
 8005322:	2268      	movs	r2, #104	; 0x68
 8005324:	801a      	strh	r2, [r3, #0]
				break;
 8005326:	e00f      	b.n	8005348 <playTone+0x2a4>

			case 'a':
				buzzTone = 110;
 8005328:	4b09      	ldr	r3, [pc, #36]	; (8005350 <playTone+0x2ac>)
 800532a:	226e      	movs	r2, #110	; 0x6e
 800532c:	801a      	strh	r2, [r3, #0]
				break;
 800532e:	e00b      	b.n	8005348 <playTone+0x2a4>
			case 'A':
				buzzTone = 117;
 8005330:	4b07      	ldr	r3, [pc, #28]	; (8005350 <playTone+0x2ac>)
 8005332:	2275      	movs	r2, #117	; 0x75
 8005334:	801a      	strh	r2, [r3, #0]
				break;
 8005336:	e007      	b.n	8005348 <playTone+0x2a4>

			case 'b':
				buzzTone = 123;
 8005338:	4b05      	ldr	r3, [pc, #20]	; (8005350 <playTone+0x2ac>)
 800533a:	227b      	movs	r2, #123	; 0x7b
 800533c:	801a      	strh	r2, [r3, #0]
				break;
 800533e:	e003      	b.n	8005348 <playTone+0x2a4>
			default:
				buzzTone = 0;
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <playTone+0x2ac>)
 8005342:	2200      	movs	r2, #0
 8005344:	801a      	strh	r2, [r3, #0]
				break;
 8005346:	bf00      	nop
		}
	break;
 8005348:	e1e5      	b.n	8005716 <playTone+0x672>
 800534a:	bf00      	nop
 800534c:	200001b8 	.word	0x200001b8
 8005350:	20000416 	.word	0x20000416

	case '3':
		i++;
 8005354:	4b9b      	ldr	r3, [pc, #620]	; (80055c4 <playTone+0x520>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	4a9a      	ldr	r2, [pc, #616]	; (80055c4 <playTone+0x520>)
 800535c:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 800535e:	4b99      	ldr	r3, [pc, #612]	; (80055c4 <playTone+0x520>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4413      	add	r3, r2
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	3b41      	subs	r3, #65	; 0x41
 800536c:	2b26      	cmp	r3, #38	; 0x26
 800536e:	f200 8081 	bhi.w	8005474 <playTone+0x3d0>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <playTone+0x2d4>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	08005465 	.word	0x08005465
 800537c:	08005475 	.word	0x08005475
 8005380:	0800541d 	.word	0x0800541d
 8005384:	0800542d 	.word	0x0800542d
 8005388:	08005475 	.word	0x08005475
 800538c:	08005445 	.word	0x08005445
 8005390:	08005455 	.word	0x08005455
 8005394:	08005475 	.word	0x08005475
 8005398:	08005475 	.word	0x08005475
 800539c:	08005475 	.word	0x08005475
 80053a0:	08005475 	.word	0x08005475
 80053a4:	08005475 	.word	0x08005475
 80053a8:	08005475 	.word	0x08005475
 80053ac:	08005475 	.word	0x08005475
 80053b0:	08005475 	.word	0x08005475
 80053b4:	08005475 	.word	0x08005475
 80053b8:	08005475 	.word	0x08005475
 80053bc:	08005475 	.word	0x08005475
 80053c0:	08005475 	.word	0x08005475
 80053c4:	08005475 	.word	0x08005475
 80053c8:	08005475 	.word	0x08005475
 80053cc:	08005475 	.word	0x08005475
 80053d0:	08005475 	.word	0x08005475
 80053d4:	08005475 	.word	0x08005475
 80053d8:	08005475 	.word	0x08005475
 80053dc:	08005475 	.word	0x08005475
 80053e0:	08005475 	.word	0x08005475
 80053e4:	08005475 	.word	0x08005475
 80053e8:	08005475 	.word	0x08005475
 80053ec:	08005475 	.word	0x08005475
 80053f0:	08005475 	.word	0x08005475
 80053f4:	08005475 	.word	0x08005475
 80053f8:	0800545d 	.word	0x0800545d
 80053fc:	0800546d 	.word	0x0800546d
 8005400:	08005415 	.word	0x08005415
 8005404:	08005425 	.word	0x08005425
 8005408:	08005435 	.word	0x08005435
 800540c:	0800543d 	.word	0x0800543d
 8005410:	0800544d 	.word	0x0800544d
			case 'c':
				buzzTone = 131;
 8005414:	4b6c      	ldr	r3, [pc, #432]	; (80055c8 <playTone+0x524>)
 8005416:	2283      	movs	r2, #131	; 0x83
 8005418:	801a      	strh	r2, [r3, #0]
				break;
 800541a:	e02f      	b.n	800547c <playTone+0x3d8>
			case 'C':
				buzzTone = 139;
 800541c:	4b6a      	ldr	r3, [pc, #424]	; (80055c8 <playTone+0x524>)
 800541e:	228b      	movs	r2, #139	; 0x8b
 8005420:	801a      	strh	r2, [r3, #0]
				break;
 8005422:	e02b      	b.n	800547c <playTone+0x3d8>

			case 'd':
				buzzTone = 147;
 8005424:	4b68      	ldr	r3, [pc, #416]	; (80055c8 <playTone+0x524>)
 8005426:	2293      	movs	r2, #147	; 0x93
 8005428:	801a      	strh	r2, [r3, #0]
				break;
 800542a:	e027      	b.n	800547c <playTone+0x3d8>
			case 'D':
				buzzTone = 156;
 800542c:	4b66      	ldr	r3, [pc, #408]	; (80055c8 <playTone+0x524>)
 800542e:	229c      	movs	r2, #156	; 0x9c
 8005430:	801a      	strh	r2, [r3, #0]
				break;
 8005432:	e023      	b.n	800547c <playTone+0x3d8>

			case 'e':
				buzzTone = 165;
 8005434:	4b64      	ldr	r3, [pc, #400]	; (80055c8 <playTone+0x524>)
 8005436:	22a5      	movs	r2, #165	; 0xa5
 8005438:	801a      	strh	r2, [r3, #0]
				break;
 800543a:	e01f      	b.n	800547c <playTone+0x3d8>

			case 'f':
				buzzTone = 175;
 800543c:	4b62      	ldr	r3, [pc, #392]	; (80055c8 <playTone+0x524>)
 800543e:	22af      	movs	r2, #175	; 0xaf
 8005440:	801a      	strh	r2, [r3, #0]
				break;
 8005442:	e01b      	b.n	800547c <playTone+0x3d8>
			case 'F':
				buzzTone = 185;
 8005444:	4b60      	ldr	r3, [pc, #384]	; (80055c8 <playTone+0x524>)
 8005446:	22b9      	movs	r2, #185	; 0xb9
 8005448:	801a      	strh	r2, [r3, #0]
				break;
 800544a:	e017      	b.n	800547c <playTone+0x3d8>

			case 'g':
				buzzTone = 196;
 800544c:	4b5e      	ldr	r3, [pc, #376]	; (80055c8 <playTone+0x524>)
 800544e:	22c4      	movs	r2, #196	; 0xc4
 8005450:	801a      	strh	r2, [r3, #0]
				break;
 8005452:	e013      	b.n	800547c <playTone+0x3d8>
			case 'G':
				buzzTone = 208;
 8005454:	4b5c      	ldr	r3, [pc, #368]	; (80055c8 <playTone+0x524>)
 8005456:	22d0      	movs	r2, #208	; 0xd0
 8005458:	801a      	strh	r2, [r3, #0]
				break;
 800545a:	e00f      	b.n	800547c <playTone+0x3d8>

			case 'a':
				buzzTone = 220;
 800545c:	4b5a      	ldr	r3, [pc, #360]	; (80055c8 <playTone+0x524>)
 800545e:	22dc      	movs	r2, #220	; 0xdc
 8005460:	801a      	strh	r2, [r3, #0]
				break;
 8005462:	e00b      	b.n	800547c <playTone+0x3d8>
			case 'A':
				buzzTone = 233;
 8005464:	4b58      	ldr	r3, [pc, #352]	; (80055c8 <playTone+0x524>)
 8005466:	22e9      	movs	r2, #233	; 0xe9
 8005468:	801a      	strh	r2, [r3, #0]
				break;
 800546a:	e007      	b.n	800547c <playTone+0x3d8>

			case 'b':
				buzzTone = 247;
 800546c:	4b56      	ldr	r3, [pc, #344]	; (80055c8 <playTone+0x524>)
 800546e:	22f7      	movs	r2, #247	; 0xf7
 8005470:	801a      	strh	r2, [r3, #0]
				break;
 8005472:	e003      	b.n	800547c <playTone+0x3d8>
			default:
				buzzTone = 0;
 8005474:	4b54      	ldr	r3, [pc, #336]	; (80055c8 <playTone+0x524>)
 8005476:	2200      	movs	r2, #0
 8005478:	801a      	strh	r2, [r3, #0]
				break;
 800547a:	bf00      	nop
		}
		break;
 800547c:	e14b      	b.n	8005716 <playTone+0x672>

	case '4':
		i++;
 800547e:	4b51      	ldr	r3, [pc, #324]	; (80055c4 <playTone+0x520>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	4a4f      	ldr	r2, [pc, #316]	; (80055c4 <playTone+0x520>)
 8005486:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 8005488:	4b4e      	ldr	r3, [pc, #312]	; (80055c4 <playTone+0x520>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4413      	add	r3, r2
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	3b41      	subs	r3, #65	; 0x41
 8005496:	2b26      	cmp	r3, #38	; 0x26
 8005498:	f200 808e 	bhi.w	80055b8 <playTone+0x514>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <playTone+0x400>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080055a5 	.word	0x080055a5
 80054a8:	080055b9 	.word	0x080055b9
 80054ac:	0800554b 	.word	0x0800554b
 80054b0:	0800555f 	.word	0x0800555f
 80054b4:	080055b9 	.word	0x080055b9
 80054b8:	0800557d 	.word	0x0800557d
 80054bc:	08005591 	.word	0x08005591
 80054c0:	080055b9 	.word	0x080055b9
 80054c4:	080055b9 	.word	0x080055b9
 80054c8:	080055b9 	.word	0x080055b9
 80054cc:	080055b9 	.word	0x080055b9
 80054d0:	080055b9 	.word	0x080055b9
 80054d4:	080055b9 	.word	0x080055b9
 80054d8:	080055b9 	.word	0x080055b9
 80054dc:	080055b9 	.word	0x080055b9
 80054e0:	080055b9 	.word	0x080055b9
 80054e4:	080055b9 	.word	0x080055b9
 80054e8:	080055b9 	.word	0x080055b9
 80054ec:	080055b9 	.word	0x080055b9
 80054f0:	080055b9 	.word	0x080055b9
 80054f4:	080055b9 	.word	0x080055b9
 80054f8:	080055b9 	.word	0x080055b9
 80054fc:	080055b9 	.word	0x080055b9
 8005500:	080055b9 	.word	0x080055b9
 8005504:	080055b9 	.word	0x080055b9
 8005508:	080055b9 	.word	0x080055b9
 800550c:	080055b9 	.word	0x080055b9
 8005510:	080055b9 	.word	0x080055b9
 8005514:	080055b9 	.word	0x080055b9
 8005518:	080055b9 	.word	0x080055b9
 800551c:	080055b9 	.word	0x080055b9
 8005520:	080055b9 	.word	0x080055b9
 8005524:	0800559b 	.word	0x0800559b
 8005528:	080055af 	.word	0x080055af
 800552c:	08005541 	.word	0x08005541
 8005530:	08005555 	.word	0x08005555
 8005534:	08005569 	.word	0x08005569
 8005538:	08005573 	.word	0x08005573
 800553c:	08005587 	.word	0x08005587
			case 'c':
				buzzTone = 262;
 8005540:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <playTone+0x524>)
 8005542:	f44f 7283 	mov.w	r2, #262	; 0x106
 8005546:	801a      	strh	r2, [r3, #0]
				break;
 8005548:	e03a      	b.n	80055c0 <playTone+0x51c>
			case 'C':
				buzzTone = 277;
 800554a:	4b1f      	ldr	r3, [pc, #124]	; (80055c8 <playTone+0x524>)
 800554c:	f240 1215 	movw	r2, #277	; 0x115
 8005550:	801a      	strh	r2, [r3, #0]
				break;
 8005552:	e035      	b.n	80055c0 <playTone+0x51c>

			case 'd':
				buzzTone = 294;
 8005554:	4b1c      	ldr	r3, [pc, #112]	; (80055c8 <playTone+0x524>)
 8005556:	f44f 7293 	mov.w	r2, #294	; 0x126
 800555a:	801a      	strh	r2, [r3, #0]
				break;
 800555c:	e030      	b.n	80055c0 <playTone+0x51c>
			case 'D':
				buzzTone = 311;
 800555e:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <playTone+0x524>)
 8005560:	f240 1237 	movw	r2, #311	; 0x137
 8005564:	801a      	strh	r2, [r3, #0]
				break;
 8005566:	e02b      	b.n	80055c0 <playTone+0x51c>

			case 'e':
				buzzTone = 330;
 8005568:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <playTone+0x524>)
 800556a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800556e:	801a      	strh	r2, [r3, #0]
				break;
 8005570:	e026      	b.n	80055c0 <playTone+0x51c>

			case 'f':
				buzzTone = 349;
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <playTone+0x524>)
 8005574:	f240 125d 	movw	r2, #349	; 0x15d
 8005578:	801a      	strh	r2, [r3, #0]
				break;
 800557a:	e021      	b.n	80055c0 <playTone+0x51c>
			case 'F':
				buzzTone = 370;
 800557c:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <playTone+0x524>)
 800557e:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8005582:	801a      	strh	r2, [r3, #0]
				break;
 8005584:	e01c      	b.n	80055c0 <playTone+0x51c>

			case 'g':
				buzzTone = 392;
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <playTone+0x524>)
 8005588:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800558c:	801a      	strh	r2, [r3, #0]
				break;
 800558e:	e017      	b.n	80055c0 <playTone+0x51c>
			case 'G':
				buzzTone = 415;
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <playTone+0x524>)
 8005592:	f240 129f 	movw	r2, #415	; 0x19f
 8005596:	801a      	strh	r2, [r3, #0]
				break;
 8005598:	e012      	b.n	80055c0 <playTone+0x51c>

			case 'a':
				buzzTone = 440;
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <playTone+0x524>)
 800559c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80055a0:	801a      	strh	r2, [r3, #0]
				break;
 80055a2:	e00d      	b.n	80055c0 <playTone+0x51c>
			case 'A':
				buzzTone = 466;
 80055a4:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <playTone+0x524>)
 80055a6:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 80055aa:	801a      	strh	r2, [r3, #0]
				break;
 80055ac:	e008      	b.n	80055c0 <playTone+0x51c>

			case 'b':
				buzzTone = 494;
 80055ae:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <playTone+0x524>)
 80055b0:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 80055b4:	801a      	strh	r2, [r3, #0]
				break;
 80055b6:	e003      	b.n	80055c0 <playTone+0x51c>
			default:
				buzzTone = 0;
 80055b8:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <playTone+0x524>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	801a      	strh	r2, [r3, #0]
				break;
 80055be:	bf00      	nop
		}
		break;
 80055c0:	e0a9      	b.n	8005716 <playTone+0x672>
 80055c2:	bf00      	nop
 80055c4:	200001b8 	.word	0x200001b8
 80055c8:	20000416 	.word	0x20000416

	case '5':
		i++;
 80055cc:	4b5d      	ldr	r3, [pc, #372]	; (8005744 <playTone+0x6a0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	4a5c      	ldr	r2, [pc, #368]	; (8005744 <playTone+0x6a0>)
 80055d4:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 80055d6:	4b5b      	ldr	r3, [pc, #364]	; (8005744 <playTone+0x6a0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4413      	add	r3, r2
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	3b41      	subs	r3, #65	; 0x41
 80055e4:	2b26      	cmp	r3, #38	; 0x26
 80055e6:	f200 808d 	bhi.w	8005704 <playTone+0x660>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <playTone+0x54c>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	080056f1 	.word	0x080056f1
 80055f4:	08005705 	.word	0x08005705
 80055f8:	08005697 	.word	0x08005697
 80055fc:	080056ab 	.word	0x080056ab
 8005600:	08005705 	.word	0x08005705
 8005604:	080056c9 	.word	0x080056c9
 8005608:	080056dd 	.word	0x080056dd
 800560c:	08005705 	.word	0x08005705
 8005610:	08005705 	.word	0x08005705
 8005614:	08005705 	.word	0x08005705
 8005618:	08005705 	.word	0x08005705
 800561c:	08005705 	.word	0x08005705
 8005620:	08005705 	.word	0x08005705
 8005624:	08005705 	.word	0x08005705
 8005628:	08005705 	.word	0x08005705
 800562c:	08005705 	.word	0x08005705
 8005630:	08005705 	.word	0x08005705
 8005634:	08005705 	.word	0x08005705
 8005638:	08005705 	.word	0x08005705
 800563c:	08005705 	.word	0x08005705
 8005640:	08005705 	.word	0x08005705
 8005644:	08005705 	.word	0x08005705
 8005648:	08005705 	.word	0x08005705
 800564c:	08005705 	.word	0x08005705
 8005650:	08005705 	.word	0x08005705
 8005654:	08005705 	.word	0x08005705
 8005658:	08005705 	.word	0x08005705
 800565c:	08005705 	.word	0x08005705
 8005660:	08005705 	.word	0x08005705
 8005664:	08005705 	.word	0x08005705
 8005668:	08005705 	.word	0x08005705
 800566c:	08005705 	.word	0x08005705
 8005670:	080056e7 	.word	0x080056e7
 8005674:	080056fb 	.word	0x080056fb
 8005678:	0800568d 	.word	0x0800568d
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056b5 	.word	0x080056b5
 8005684:	080056bf 	.word	0x080056bf
 8005688:	080056d3 	.word	0x080056d3
			case 'c':
				buzzTone = 523;
 800568c:	4b2e      	ldr	r3, [pc, #184]	; (8005748 <playTone+0x6a4>)
 800568e:	f240 220b 	movw	r2, #523	; 0x20b
 8005692:	801a      	strh	r2, [r3, #0]
				break;
 8005694:	e03a      	b.n	800570c <playTone+0x668>
			case 'C':
				buzzTone = 554;
 8005696:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <playTone+0x6a4>)
 8005698:	f240 222a 	movw	r2, #554	; 0x22a
 800569c:	801a      	strh	r2, [r3, #0]
				break;
 800569e:	e035      	b.n	800570c <playTone+0x668>

			case 'd':
				buzzTone = 587;
 80056a0:	4b29      	ldr	r3, [pc, #164]	; (8005748 <playTone+0x6a4>)
 80056a2:	f240 224b 	movw	r2, #587	; 0x24b
 80056a6:	801a      	strh	r2, [r3, #0]
				break;
 80056a8:	e030      	b.n	800570c <playTone+0x668>
			case 'D':
				buzzTone = 622;
 80056aa:	4b27      	ldr	r3, [pc, #156]	; (8005748 <playTone+0x6a4>)
 80056ac:	f240 226e 	movw	r2, #622	; 0x26e
 80056b0:	801a      	strh	r2, [r3, #0]
				break;
 80056b2:	e02b      	b.n	800570c <playTone+0x668>

			case 'e':
				buzzTone = 659;
 80056b4:	4b24      	ldr	r3, [pc, #144]	; (8005748 <playTone+0x6a4>)
 80056b6:	f240 2293 	movw	r2, #659	; 0x293
 80056ba:	801a      	strh	r2, [r3, #0]
				break;
 80056bc:	e026      	b.n	800570c <playTone+0x668>

			case 'f':
				buzzTone = 698;
 80056be:	4b22      	ldr	r3, [pc, #136]	; (8005748 <playTone+0x6a4>)
 80056c0:	f240 22ba 	movw	r2, #698	; 0x2ba
 80056c4:	801a      	strh	r2, [r3, #0]
				break;
 80056c6:	e021      	b.n	800570c <playTone+0x668>
			case 'F':
				buzzTone = 740;
 80056c8:	4b1f      	ldr	r3, [pc, #124]	; (8005748 <playTone+0x6a4>)
 80056ca:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80056ce:	801a      	strh	r2, [r3, #0]
				break;
 80056d0:	e01c      	b.n	800570c <playTone+0x668>

			case 'g':
				buzzTone = 784;
 80056d2:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <playTone+0x6a4>)
 80056d4:	f44f 7244 	mov.w	r2, #784	; 0x310
 80056d8:	801a      	strh	r2, [r3, #0]
				break;
 80056da:	e017      	b.n	800570c <playTone+0x668>
			case 'G':
				buzzTone = 831;
 80056dc:	4b1a      	ldr	r3, [pc, #104]	; (8005748 <playTone+0x6a4>)
 80056de:	f240 323f 	movw	r2, #831	; 0x33f
 80056e2:	801a      	strh	r2, [r3, #0]
				break;
 80056e4:	e012      	b.n	800570c <playTone+0x668>

			case 'a':
				buzzTone = 880;
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <playTone+0x6a4>)
 80056e8:	f44f 725c 	mov.w	r2, #880	; 0x370
 80056ec:	801a      	strh	r2, [r3, #0]
				break;
 80056ee:	e00d      	b.n	800570c <playTone+0x668>
			case 'A':
				buzzTone = 932;
 80056f0:	4b15      	ldr	r3, [pc, #84]	; (8005748 <playTone+0x6a4>)
 80056f2:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80056f6:	801a      	strh	r2, [r3, #0]
				break;
 80056f8:	e008      	b.n	800570c <playTone+0x668>

			case 'b':
				buzzTone = 988;
 80056fa:	4b13      	ldr	r3, [pc, #76]	; (8005748 <playTone+0x6a4>)
 80056fc:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 8005700:	801a      	strh	r2, [r3, #0]
				break;
 8005702:	e003      	b.n	800570c <playTone+0x668>
			default:
				buzzTone = 0;
 8005704:	4b10      	ldr	r3, [pc, #64]	; (8005748 <playTone+0x6a4>)
 8005706:	2200      	movs	r2, #0
 8005708:	801a      	strh	r2, [r3, #0]
				break;
 800570a:	bf00      	nop
		}
		break;
 800570c:	e003      	b.n	8005716 <playTone+0x672>

	default:
		buzzTone = 0;
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <playTone+0x6a4>)
 8005710:	2200      	movs	r2, #0
 8005712:	801a      	strh	r2, [r3, #0]
		break;
 8005714:	bf00      	nop
	}

	setFreq(buzzTone);
 8005716:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <playTone+0x6a4>)
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	4618      	mov	r0, r3
 800571e:	f000 f817 	bl	8005750 <setFreq>

	//Debug Buzzer tones
//	gotoxy(1,8);
//	printf("Input[%02d]: %c%c, Buzz: %04d | Length: %04d",i, s[i-1], s[i], buzzTone, length);

	if (i >= length){
 8005722:	4b08      	ldr	r3, [pc, #32]	; (8005744 <playTone+0x6a0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	429a      	cmp	r2, r3
 800572a:	dc02      	bgt.n	8005732 <playTone+0x68e>
		i = 0;
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <playTone+0x6a0>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
	}

	i++;
 8005732:	4b04      	ldr	r3, [pc, #16]	; (8005744 <playTone+0x6a0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3301      	adds	r3, #1
 8005738:	4a02      	ldr	r2, [pc, #8]	; (8005744 <playTone+0x6a0>)
 800573a:	6013      	str	r3, [r2, #0]

}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	200001b8 	.word	0x200001b8
 8005748:	20000416 	.word	0x20000416
 800574c:	00000000 	.word	0x00000000

08005750 <setFreq>:




void setFreq(uint16_t freq)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	80fb      	strh	r3, [r7, #6]
    // Calculate the new auto-reload value based on the desired frequency
    uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	4618      	mov	r0, r3
 800575e:	f7fa fee1 	bl	8000524 <__aeabi_i2d>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	a11c      	add	r1, pc, #112	; (adr r1, 80057d8 <setFreq+0x88>)
 8005768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800576c:	f7fb f86e 	bl	800084c <__aeabi_ddiv>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4610      	mov	r0, r2
 8005776:	4619      	mov	r1, r3
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <setFreq+0x80>)
 800577e:	f7fb f865 	bl	800084c <__aeabi_ddiv>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4610      	mov	r0, r2
 8005788:	4619      	mov	r1, r3
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <setFreq+0x84>)
 8005790:	f7fa fd7a 	bl	8000288 <__aeabi_dsub>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4610      	mov	r0, r2
 800579a:	4619      	mov	r1, r3
 800579c:	f7fb f93e 	bl	8000a1c <__aeabi_d2uiz>
 80057a0:	4603      	mov	r3, r0
 80057a2:	60fb      	str	r3, [r7, #12]

    // Set the new auto-reload value
    TIM2->ARR = reload;
 80057a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Set compare register to maintain 50% duty cycle
    TIM2->CCR3 = reload / 2;
 80057ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	085b      	lsrs	r3, r3, #1
 80057b4:	63d3      	str	r3, [r2, #60]	; 0x3c

    // Generate an update event to apply the new settings
    TIM2->EGR |= TIM_EGR_UG;
 80057b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	6153      	str	r3, [r2, #20]
}
 80057c6:	bf00      	nop
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40590000 	.word	0x40590000
 80057d4:	3ff00000 	.word	0x3ff00000
 80057d8:	00000000 	.word	0x00000000
 80057dc:	418e8480 	.word	0x418e8480

080057e0 <main>:
#include "LCD.h"
#include "charset.h"


int main(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b09e      	sub	sp, #120	; 0x78
 80057e4:	af02      	add	r7, sp, #8
	uart_init(250000);
 80057e6:	48c6      	ldr	r0, [pc, #792]	; (8005b00 <main+0x320>)
 80057e8:	f7fb fd66 	bl	80012b8 <uart_init>
	clrscr();
 80057ec:	f7ff f986 	bl	8004afc <clrscr>
	intiJoystick();
 80057f0:	f7fe fca6 	bl	8004140 <intiJoystick>
	initLed();
 80057f4:	f7ff f860 	bl	80048b8 <initLed>
	lcd_init();
 80057f8:	f7fb ffde 	bl	80017b8 <lcd_init>
	initTimer();
 80057fc:	f002 f8b2 	bl	8007964 <initTimer>
	initTimer2();
 8005800:	f002 f8d8 	bl	80079b4 <initTimer2>

	refreshRate = 5;
 8005804:	4bbf      	ldr	r3, [pc, #764]	; (8005b04 <main+0x324>)
 8005806:	2205      	movs	r2, #5
 8005808:	601a      	str	r2, [r3, #0]
	duck_t duck1;
	duck_t duck2;
	spaceship_t SS;
	int playermode, diff;
	memset(buffer,0x00,512);
 800580a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580e:	2100      	movs	r1, #0
 8005810:	48bd      	ldr	r0, [pc, #756]	; (8005b08 <main+0x328>)
 8005812:	f002 fc4b 	bl	80080ac <memset>
	menu(&playermode,&diff);
 8005816:	f107 0214 	add.w	r2, r7, #20
 800581a:	f107 0318 	add.w	r3, r7, #24
 800581e:	4611      	mov	r1, r2
 8005820:	4618      	mov	r0, r3
 8005822:	f001 f9b5 	bl	8006b90 <menu>
	clrscr();
 8005826:	f7ff f969 	bl	8004afc <clrscr>
	startWindow(1,1,184,58);
 800582a:	233a      	movs	r3, #58	; 0x3a
 800582c:	22b8      	movs	r2, #184	; 0xb8
 800582e:	2101      	movs	r1, #1
 8005830:	2001      	movs	r0, #1
 8005832:	f7fc f91d 	bl	8001a70 <startWindow>
	spaceship(2,27,91,31);
 8005836:	231f      	movs	r3, #31
 8005838:	225b      	movs	r2, #91	; 0x5b
 800583a:	211b      	movs	r1, #27
 800583c:	2002      	movs	r0, #2
 800583e:	f7fc f96d 	bl	8001b1c <spaceship>
	playerInSpaceR(1,23,24);
 8005842:	2218      	movs	r2, #24
 8005844:	2117      	movs	r1, #23
 8005846:	2001      	movs	r0, #1
 8005848:	f7fc ff30 	bl	80026ac <playerInSpaceR>
	playerInSpaceUSDR(2,23,32);
 800584c:	2220      	movs	r2, #32
 800584e:	2117      	movs	r1, #23
 8005850:	2002      	movs	r0, #2
 8005852:	f7fd f933 	bl	8002abc <playerInSpaceUSDR>
	windowSmp(141,2,183,4);
 8005856:	2304      	movs	r3, #4
 8005858:	22b7      	movs	r2, #183	; 0xb7
 800585a:	2102      	movs	r1, #2
 800585c:	208d      	movs	r0, #141	; 0x8d
 800585e:	f002 fb57 	bl	8007f10 <windowSmp>
	initAstro();
 8005862:	f7ff f98d 	bl	8004b80 <initAstro>
	SS.ud = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	773b      	strb	r3, [r7, #28]
	duck1.rl=0;
 800586a:	2300      	movs	r3, #0
 800586c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	duck1.ud=0;
 8005870:	2300      	movs	r3, #0
 8005872:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	duck2.rl = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	duck2.ud = 8;
 800587c:	2308      	movs	r3, #8
 800587e:	f887 3020 	strb.w	r3, [r7, #32]

	tid.min = 2;
 8005882:	4ba2      	ldr	r3, [pc, #648]	; (8005b0c <main+0x32c>)
 8005884:	2202      	movs	r2, #2
 8005886:	701a      	strb	r2, [r3, #0]
	tid.sek = 0;
 8005888:	4ba0      	ldr	r3, [pc, #640]	; (8005b0c <main+0x32c>)
 800588a:	2200      	movs	r2, #0
 800588c:	705a      	strb	r2, [r3, #1]
	tid.mil = 0;
 800588e:	4b9f      	ldr	r3, [pc, #636]	; (8005b0c <main+0x32c>)
 8005890:	2200      	movs	r2, #0
 8005892:	709a      	strb	r2, [r3, #2]
	tid.state = 0;
 8005894:	4b9d      	ldr	r3, [pc, #628]	; (8005b0c <main+0x32c>)
 8005896:	2200      	movs	r2, #0
 8005898:	70da      	strb	r2, [r3, #3]

	int alarm = 1;
 800589a:	2301      	movs	r3, #1
 800589c:	66fb      	str	r3, [r7, #108]	; 0x6c
	int alarm_off = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	66bb      	str	r3, [r7, #104]	; 0x68

	int i=0, keyW=0, keyA=0, keyS=0, keyD=0, keyE=0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	643b      	str	r3, [r7, #64]	; 0x40
 80058a6:	2300      	movs	r3, #0
 80058a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058aa:	2300      	movs	r3, #0
 80058ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ae:	2300      	movs	r3, #0
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
 80058b2:	2300      	movs	r3, #0
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30
 80058b6:	2300      	movs	r3, #0
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uart_clear();
 80058ba:	f7fb fcdb 	bl	8001274 <uart_clear>
	char random;
	int buffer_lenght;
	int ud1 =0, lr1 =0, ud2 = 8, lr2 = 0, a = 1, b=1;
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	2308      	movs	r3, #8
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	2300      	movs	r3, #0
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	2301      	movs	r3, #1
 80058d0:	663b      	str	r3, [r7, #96]	; 0x60
 80058d2:	2301      	movs	r3, #1
 80058d4:	65fb      	str	r3, [r7, #92]	; 0x5c
	int  one = 0, two = 0, three = 0, four = 0, five = 0, six = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80058da:	2300      	movs	r3, #0
 80058dc:	657b      	str	r3, [r7, #84]	; 0x54
 80058de:	2300      	movs	r3, #0
 80058e0:	653b      	str	r3, [r7, #80]	; 0x50
 80058e2:	2300      	movs	r3, #0
 80058e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058e6:	2300      	movs	r3, #0
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ea:	2300      	movs	r3, #0
 80058ec:	647b      	str	r3, [r7, #68]	; 0x44
	draw_gameplay_start();
 80058ee:	f7fe fee1 	bl	80046b4 <draw_gameplay_start>
	initBuzz();
 80058f2:	f7ff fba7 	bl	8005044 <initBuzz>
	setFreq(0);
 80058f6:	2000      	movs	r0, #0
 80058f8:	f7ff ff2a 	bl	8005750 <setFreq>

	while(1){
		drawTime();
 80058fc:	f002 f952 	bl	8007ba4 <drawTime>
		readJoystick();
 8005900:	f7fe fcb4 	bl	800426c <readJoystick>
		if (lcdUpdate == 0){
 8005904:	4b82      	ldr	r3, [pc, #520]	; (8005b10 <main+0x330>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d106      	bne.n	800591a <main+0x13a>
					while (lcdUpdate == 0) {
 800590c:	bf00      	nop
 800590e:	4b80      	ldr	r3, [pc, #512]	; (8005b10 <main+0x330>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0fb      	beq.n	800590e <main+0x12e>
					}
					draw_score();
 8005916:	f7fe feed 	bl	80046f4 <draw_score>
				}
				if (alarm == 1) {
 800591a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d10c      	bne.n	800593a <main+0x15a>
					alarm_off += LCD_alarm();
 8005920:	f7fe ff02 	bl	8004728 <LCD_alarm>
 8005924:	4602      	mov	r2, r0
 8005926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005928:	4413      	add	r3, r2
 800592a:	66bb      	str	r3, [r7, #104]	; 0x68
					if (alarm_off == 5) {
 800592c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800592e:	2b05      	cmp	r3, #5
 8005930:	d103      	bne.n	800593a <main+0x15a>
						alarm_off = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	66bb      	str	r3, [r7, #104]	; 0x68
						alarm = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	66fb      	str	r3, [r7, #108]	; 0x6c
					}
				}
				if (alarm == 0) {
 800593a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <main+0x164>
					LCD_timer();
 8005940:	f7fe ff64 	bl	800480c <LCD_timer>

		//Debug ship, players
//		gotoxy(10,10);
//		printf("Duck1 ud:%d  Duck1 rl:%d  Duck2 ud:%d Duck2 rl:%d   SS.ud = %d",duck1.ud, duck1.rl, duck2.ud, duck2.rl,SS.ud);

		fire(2,27+SS.ud,91,31+SS.ud);
 8005944:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005948:	f103 011b 	add.w	r1, r3, #27
 800594c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005950:	331f      	adds	r3, #31
 8005952:	225b      	movs	r2, #91	; 0x5b
 8005954:	2002      	movs	r0, #2
 8005956:	f7fc fb3d 	bl	8001fd4 <fire>





		if(duck1.ud == SS.ud && Bup == 0 && !(Bship1 == 1 && duck1.rl == 35)) {
 800595a:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 800595e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005962:	429a      	cmp	r2, r3
 8005964:	f040 8092 	bne.w	8005a8c <main+0x2ac>
 8005968:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <main+0x334>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f040 808d 	bne.w	8005a8c <main+0x2ac>
 8005972:	4b69      	ldr	r3, [pc, #420]	; (8005b18 <main+0x338>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d104      	bne.n	8005984 <main+0x1a4>
 800597a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800597e:	2b23      	cmp	r3, #35	; 0x23
 8005980:	f000 8084 	beq.w	8005a8c <main+0x2ac>
			goDuckUP1(1,22,24,&ud1,&lr1,&duck1);
 8005984:	f107 0210 	add.w	r2, r7, #16
 8005988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	f107 030c 	add.w	r3, r7, #12
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	4613      	mov	r3, r2
 8005996:	2218      	movs	r2, #24
 8005998:	2116      	movs	r1, #22
 800599a:	2001      	movs	r0, #1
 800599c:	f7fd f93e 	bl	8002c1c <goDuckUP1>
			if (duck1.rl == 5 && duck2.ud == SS.ud && joy.up && Bup == 0){
 80059a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80059a4:	2b05      	cmp	r3, #5
 80059a6:	d121      	bne.n	80059ec <main+0x20c>
 80059a8:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80059ac:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d11b      	bne.n	80059ec <main+0x20c>
 80059b4:	4b59      	ldr	r3, [pc, #356]	; (8005b1c <main+0x33c>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	b25b      	sxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d016      	beq.n	80059ec <main+0x20c>
 80059be:	4b55      	ldr	r3, [pc, #340]	; (8005b14 <main+0x334>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d112      	bne.n	80059ec <main+0x20c>
				key.up = 1;
 80059c6:	4b56      	ldr	r3, [pc, #344]	; (8005b20 <main+0x340>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	701a      	strb	r2, [r3, #0]
				goDuckUP2(2,22,24,&ud2,&lr2,&duck2);
 80059cc:	f107 0208 	add.w	r2, r7, #8
 80059d0:	f107 0320 	add.w	r3, r7, #32
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	1d3b      	adds	r3, r7, #4
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	2218      	movs	r2, #24
 80059de:	2116      	movs	r1, #22
 80059e0:	2002      	movs	r0, #2
 80059e2:	f7fd fa91 	bl	8002f08 <goDuckUP2>
				key.up = 0;
 80059e6:	4b4e      	ldr	r3, [pc, #312]	; (8005b20 <main+0x340>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	701a      	strb	r2, [r3, #0]
			}
			if (duck1.rl == 5 && duck2.ud == SS.ud + 4 && joy.up && Bup == 0){
 80059ec:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80059f0:	2b05      	cmp	r3, #5
 80059f2:	d123      	bne.n	8005a3c <main+0x25c>
 80059f4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80059f8:	461a      	mov	r2, r3
 80059fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80059fe:	3304      	adds	r3, #4
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d11b      	bne.n	8005a3c <main+0x25c>
 8005a04:	4b45      	ldr	r3, [pc, #276]	; (8005b1c <main+0x33c>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d016      	beq.n	8005a3c <main+0x25c>
 8005a0e:	4b41      	ldr	r3, [pc, #260]	; (8005b14 <main+0x334>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d112      	bne.n	8005a3c <main+0x25c>
				key.up = 1;
 8005a16:	4b42      	ldr	r3, [pc, #264]	; (8005b20 <main+0x340>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
				goDuckMIDMove2(2,22,24,&ud2,&lr2,&duck2);
 8005a1c:	f107 0208 	add.w	r2, r7, #8
 8005a20:	f107 0320 	add.w	r3, r7, #32
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	2218      	movs	r2, #24
 8005a2e:	2116      	movs	r1, #22
 8005a30:	2002      	movs	r0, #2
 8005a32:	f7fd fd93 	bl	800355c <goDuckMIDMove2>
				key.up = 0;
 8005a36:	4b3a      	ldr	r3, [pc, #232]	; (8005b20 <main+0x340>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
			}
			if (duck1.rl == 5 && duck2.ud == SS.ud + 8 && joy.up && Bup == 0){
 8005a3c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005a40:	2b05      	cmp	r3, #5
 8005a42:	d123      	bne.n	8005a8c <main+0x2ac>
 8005a44:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005a4e:	3308      	adds	r3, #8
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d11b      	bne.n	8005a8c <main+0x2ac>
 8005a54:	4b31      	ldr	r3, [pc, #196]	; (8005b1c <main+0x33c>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	b25b      	sxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d016      	beq.n	8005a8c <main+0x2ac>
 8005a5e:	4b2d      	ldr	r3, [pc, #180]	; (8005b14 <main+0x334>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d112      	bne.n	8005a8c <main+0x2ac>
				key.up = 1;
 8005a66:	4b2e      	ldr	r3, [pc, #184]	; (8005b20 <main+0x340>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
				goDuckUSDMove2(2,22,24,&ud2,&lr2,&duck2);
 8005a6c:	f107 0208 	add.w	r2, r7, #8
 8005a70:	f107 0320 	add.w	r3, r7, #32
 8005a74:	9301      	str	r3, [sp, #4]
 8005a76:	1d3b      	adds	r3, r7, #4
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	2218      	movs	r2, #24
 8005a7e:	2116      	movs	r1, #22
 8005a80:	2002      	movs	r0, #2
 8005a82:	f7fd ffdf 	bl	8003a44 <goDuckUSDMove2>
				key.up = 0;
 8005a86:	4b26      	ldr	r3, [pc, #152]	; (8005b20 <main+0x340>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (Bship1 == 1 && duck1.rl == 35 && joy.up) {
 8005a8c:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <main+0x338>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d12a      	bne.n	8005aea <main+0x30a>
 8005a94:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005a98:	2b23      	cmp	r3, #35	; 0x23
 8005a9a:	d126      	bne.n	8005aea <main+0x30a>
 8005a9c:	4b1f      	ldr	r3, [pc, #124]	; (8005b1c <main+0x33c>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	b25b      	sxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d021      	beq.n	8005aea <main+0x30a>
			four++;
 8005aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
			if (four == 5) {
 8005aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aae:	2b05      	cmp	r3, #5
 8005ab0:	d11b      	bne.n	8005aea <main+0x30a>
			gotoxy(57,27+SS.ud);
 8005ab2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ab6:	331b      	adds	r3, #27
 8005ab8:	4619      	mov	r1, r3
 8005aba:	2039      	movs	r0, #57	; 0x39
 8005abc:	f7ff f836 	bl	8004b2c <gotoxy>
			bgcolor(1);
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	f7fe ffff 	bl	8004ac4 <bgcolor>
			printf("      ");
 8005ac6:	4817      	ldr	r0, [pc, #92]	; (8005b24 <main+0x344>)
 8005ac8:	f002 faf8 	bl	80080bc <iprintf>
			bgcolor(0);
 8005acc:	2000      	movs	r0, #0
 8005ace:	f7fe fff9 	bl	8004ac4 <bgcolor>
			four = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
			Bship1 = 0;
 8005ad6:	4b10      	ldr	r3, [pc, #64]	; (8005b18 <main+0x338>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
			score += 200;
 8005adc:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <main+0x348>)
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	33c8      	adds	r3, #200	; 0xc8
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <main+0x348>)
 8005ae8:	801a      	strh	r2, [r3, #0]
		}
		}
		if(duck1.ud == SS.ud && Bup == 1 && duck1.rl == 5 && joy.up == 1) {
 8005aea:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8005aee:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d148      	bne.n	8005b88 <main+0x3a8>
 8005af6:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <main+0x334>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d144      	bne.n	8005b88 <main+0x3a8>
 8005afe:	e015      	b.n	8005b2c <main+0x34c>
 8005b00:	0003d090 	.word	0x0003d090
 8005b04:	20000200 	.word	0x20000200
 8005b08:	20000214 	.word	0x20000214
 8005b0c:	20000418 	.word	0x20000418
 8005b10:	200001f0 	.word	0x200001f0
 8005b14:	200001d0 	.word	0x200001d0
 8005b18:	200001cc 	.word	0x200001cc
 8005b1c:	20000204 	.word	0x20000204
 8005b20:	200001f8 	.word	0x200001f8
 8005b24:	080096f0 	.word	0x080096f0
 8005b28:	200001dc 	.word	0x200001dc
 8005b2c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d129      	bne.n	8005b88 <main+0x3a8>
 8005b34:	4bbf      	ldr	r3, [pc, #764]	; (8005e34 <main+0x654>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	b25b      	sxtb	r3, r3
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d124      	bne.n	8005b88 <main+0x3a8>
			one++;
 8005b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b40:	3301      	adds	r3, #1
 8005b42:	65bb      	str	r3, [r7, #88]	; 0x58
			if (one == 5) {
 8005b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b46:	2b05      	cmp	r3, #5
 8005b48:	d11e      	bne.n	8005b88 <main+0x3a8>
			gotoxy(26,27+SS.ud);
 8005b4a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005b4e:	331b      	adds	r3, #27
 8005b50:	4619      	mov	r1, r3
 8005b52:	201a      	movs	r0, #26
 8005b54:	f7fe ffea 	bl	8004b2c <gotoxy>
			bgcolor(5);
 8005b58:	2005      	movs	r0, #5
 8005b5a:	f7fe ffb3 	bl	8004ac4 <bgcolor>
			fgcolor(0);
 8005b5e:	2000      	movs	r0, #0
 8005b60:	f7fe ff94 	bl	8004a8c <fgcolor>
			printf("  UP  ");
 8005b64:	48b4      	ldr	r0, [pc, #720]	; (8005e38 <main+0x658>)
 8005b66:	f002 faa9 	bl	80080bc <iprintf>
			bgcolor(0);
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	f7fe ffaa 	bl	8004ac4 <bgcolor>
			one = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	65bb      	str	r3, [r7, #88]	; 0x58
			Bup = 0;
 8005b74:	4bb1      	ldr	r3, [pc, #708]	; (8005e3c <main+0x65c>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
			score += 200;
 8005b7a:	4bb1      	ldr	r3, [pc, #708]	; (8005e40 <main+0x660>)
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	33c8      	adds	r3, #200	; 0xc8
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	4bae      	ldr	r3, [pc, #696]	; (8005e40 <main+0x660>)
 8005b86:	801a      	strh	r2, [r3, #0]
		}
		}
		if(duck1.ud == SS.ud && Bup == 1 && duck1.rl != 5) {
 8005b88:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8005b8c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d115      	bne.n	8005bc0 <main+0x3e0>
 8005b94:	4ba9      	ldr	r3, [pc, #676]	; (8005e3c <main+0x65c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d111      	bne.n	8005bc0 <main+0x3e0>
 8005b9c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005ba0:	2b05      	cmp	r3, #5
 8005ba2:	d00d      	beq.n	8005bc0 <main+0x3e0>
			goDuckUP1(1,22,24,&ud1,&lr1,&duck1);
 8005ba4:	f107 0210 	add.w	r2, r7, #16
 8005ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	f107 030c 	add.w	r3, r7, #12
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	2218      	movs	r2, #24
 8005bb8:	2116      	movs	r1, #22
 8005bba:	2001      	movs	r0, #1
 8005bbc:	f7fd f82e 	bl	8002c1c <goDuckUP1>
		}


		if(duck1.ud == SS.ud + 4 || duck1.ud == SS.ud - 4){
 8005bc0:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d007      	beq.n	8005be0 <main+0x400>
 8005bd0:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005bda:	3b04      	subs	r3, #4
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d15b      	bne.n	8005c98 <main+0x4b8>
		goDuckMID1(1,22,24,&ud1,&lr1,&duck1);
 8005be0:	f107 0210 	add.w	r2, r7, #16
 8005be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	f107 030c 	add.w	r3, r7, #12
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	2218      	movs	r2, #24
 8005bf4:	2116      	movs	r1, #22
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	f7fd fabe 	bl	8003178 <goDuckMID1>
		if(duck1.rl == 55 && joy.right && !CJoy.right && Bcanon == 0){
 8005bfc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005c00:	2b37      	cmp	r3, #55	; 0x37
 8005c02:	d112      	bne.n	8005c2a <main+0x44a>
 8005c04:	4b8b      	ldr	r3, [pc, #556]	; (8005e34 <main+0x654>)
 8005c06:	78db      	ldrb	r3, [r3, #3]
 8005c08:	b25b      	sxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00d      	beq.n	8005c2a <main+0x44a>
 8005c0e:	4b8d      	ldr	r3, [pc, #564]	; (8005e44 <main+0x664>)
 8005c10:	78db      	ldrb	r3, [r3, #3]
 8005c12:	b25b      	sxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d108      	bne.n	8005c2a <main+0x44a>
 8005c18:	4b8b      	ldr	r3, [pc, #556]	; (8005e48 <main+0x668>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d104      	bne.n	8005c2a <main+0x44a>
			shoot(SS.ud);
 8005c20:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe ffdd 	bl	8004be4 <shoot>
		}
		if(duck1.rl == 55 && joy.right && !CJoy.right && Bcanon == 1){
 8005c2a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005c2e:	2b37      	cmp	r3, #55	; 0x37
 8005c30:	d132      	bne.n	8005c98 <main+0x4b8>
 8005c32:	4b80      	ldr	r3, [pc, #512]	; (8005e34 <main+0x654>)
 8005c34:	78db      	ldrb	r3, [r3, #3]
 8005c36:	b25b      	sxtb	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d02d      	beq.n	8005c98 <main+0x4b8>
 8005c3c:	4b81      	ldr	r3, [pc, #516]	; (8005e44 <main+0x664>)
 8005c3e:	78db      	ldrb	r3, [r3, #3]
 8005c40:	b25b      	sxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d128      	bne.n	8005c98 <main+0x4b8>
 8005c46:	4b80      	ldr	r3, [pc, #512]	; (8005e48 <main+0x668>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d124      	bne.n	8005c98 <main+0x4b8>
			three++;
 8005c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c50:	3301      	adds	r3, #1
 8005c52:	653b      	str	r3, [r7, #80]	; 0x50
			if (three == 5) {
 8005c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c56:	2b05      	cmp	r3, #5
 8005c58:	d11e      	bne.n	8005c98 <main+0x4b8>
			gotoxy(83,29+SS.ud);
 8005c5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005c5e:	331d      	adds	r3, #29
 8005c60:	4619      	mov	r1, r3
 8005c62:	2053      	movs	r0, #83	; 0x53
 8005c64:	f7fe ff62 	bl	8004b2c <gotoxy>
			fgcolor(0);
 8005c68:	2000      	movs	r0, #0
 8005c6a:	f7fe ff0f 	bl	8004a8c <fgcolor>
			bgcolor(7);
 8005c6e:	2007      	movs	r0, #7
 8005c70:	f7fe ff28 	bl	8004ac4 <bgcolor>
			printf(" CANON");
 8005c74:	4875      	ldr	r0, [pc, #468]	; (8005e4c <main+0x66c>)
 8005c76:	f002 fa21 	bl	80080bc <iprintf>
			bgcolor(0);
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	f7fe ff22 	bl	8004ac4 <bgcolor>
			three = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	653b      	str	r3, [r7, #80]	; 0x50
			Bcanon = 0;
 8005c84:	4b70      	ldr	r3, [pc, #448]	; (8005e48 <main+0x668>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
			score += 200;
 8005c8a:	4b6d      	ldr	r3, [pc, #436]	; (8005e40 <main+0x660>)
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	33c8      	adds	r3, #200	; 0xc8
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	4b6a      	ldr	r3, [pc, #424]	; (8005e40 <main+0x660>)
 8005c96:	801a      	strh	r2, [r3, #0]
			}
		}
		}

		if(duck1.ud == SS.ud+8 && Bdown == 0 && !(Bship2 == 1 && duck1.rl == 25) && !(Bship3 == 1 && duck1.rl == 55)) {
 8005c98:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	f040 809b 	bne.w	8005de0 <main+0x600>
 8005caa:	4b69      	ldr	r3, [pc, #420]	; (8005e50 <main+0x670>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 8096 	bne.w	8005de0 <main+0x600>
 8005cb4:	4b67      	ldr	r3, [pc, #412]	; (8005e54 <main+0x674>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d104      	bne.n	8005cc6 <main+0x4e6>
 8005cbc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005cc0:	2b19      	cmp	r3, #25
 8005cc2:	f000 808d 	beq.w	8005de0 <main+0x600>
 8005cc6:	4b64      	ldr	r3, [pc, #400]	; (8005e58 <main+0x678>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d104      	bne.n	8005cd8 <main+0x4f8>
 8005cce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005cd2:	2b37      	cmp	r3, #55	; 0x37
 8005cd4:	f000 8084 	beq.w	8005de0 <main+0x600>
		goDuckUSD1(1,22,24,&ud1,&lr1,&duck1);
 8005cd8:	f107 0210 	add.w	r2, r7, #16
 8005cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	f107 030c 	add.w	r3, r7, #12
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	2218      	movs	r2, #24
 8005cec:	2116      	movs	r1, #22
 8005cee:	2001      	movs	r0, #1
 8005cf0:	f7fd fcb6 	bl	8003660 <goDuckUSD1>
		if (duck1.rl == 5 && duck2.ud == SS.ud && joy.up && Bdown == 0){
 8005cf4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005cf8:	2b05      	cmp	r3, #5
 8005cfa:	d121      	bne.n	8005d40 <main+0x560>
 8005cfc:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8005d00:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d11b      	bne.n	8005d40 <main+0x560>
 8005d08:	4b4a      	ldr	r3, [pc, #296]	; (8005e34 <main+0x654>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	b25b      	sxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d016      	beq.n	8005d40 <main+0x560>
 8005d12:	4b4f      	ldr	r3, [pc, #316]	; (8005e50 <main+0x670>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d112      	bne.n	8005d40 <main+0x560>
			key.down = 1;
 8005d1a:	4b50      	ldr	r3, [pc, #320]	; (8005e5c <main+0x67c>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	705a      	strb	r2, [r3, #1]
			goDuckUPMove2(2,22,24,&ud2,&lr2,&duck2);
 8005d20:	f107 0208 	add.w	r2, r7, #8
 8005d24:	f107 0320 	add.w	r3, r7, #32
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	2218      	movs	r2, #24
 8005d32:	2116      	movs	r1, #22
 8005d34:	2002      	movs	r0, #2
 8005d36:	f7fd f9d7 	bl	80030e8 <goDuckUPMove2>
			key.down = 0;
 8005d3a:	4b48      	ldr	r3, [pc, #288]	; (8005e5c <main+0x67c>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	705a      	strb	r2, [r3, #1]
		}
		if (duck1.rl == 5 && duck2.ud == SS.ud + 4 && joy.up && Bdown == 0){
 8005d40:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005d44:	2b05      	cmp	r3, #5
 8005d46:	d123      	bne.n	8005d90 <main+0x5b0>
 8005d48:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005d52:	3304      	adds	r3, #4
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d11b      	bne.n	8005d90 <main+0x5b0>
 8005d58:	4b36      	ldr	r3, [pc, #216]	; (8005e34 <main+0x654>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d016      	beq.n	8005d90 <main+0x5b0>
 8005d62:	4b3b      	ldr	r3, [pc, #236]	; (8005e50 <main+0x670>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d112      	bne.n	8005d90 <main+0x5b0>
			key.down = 1;
 8005d6a:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <main+0x67c>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	705a      	strb	r2, [r3, #1]
			goDuckMIDMove2(2,22,24,&ud2,&lr2,&duck2);
 8005d70:	f107 0208 	add.w	r2, r7, #8
 8005d74:	f107 0320 	add.w	r3, r7, #32
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	2218      	movs	r2, #24
 8005d82:	2116      	movs	r1, #22
 8005d84:	2002      	movs	r0, #2
 8005d86:	f7fd fbe9 	bl	800355c <goDuckMIDMove2>
			key.down = 0;
 8005d8a:	4b34      	ldr	r3, [pc, #208]	; (8005e5c <main+0x67c>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	705a      	strb	r2, [r3, #1]
		}
		if (duck1.rl == 5 && duck2.ud == SS.ud + 8 && joy.up && Bdown == 0){
 8005d90:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005d94:	2b05      	cmp	r3, #5
 8005d96:	d123      	bne.n	8005de0 <main+0x600>
 8005d98:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005da2:	3308      	adds	r3, #8
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d11b      	bne.n	8005de0 <main+0x600>
 8005da8:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <main+0x654>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d016      	beq.n	8005de0 <main+0x600>
 8005db2:	4b27      	ldr	r3, [pc, #156]	; (8005e50 <main+0x670>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d112      	bne.n	8005de0 <main+0x600>
		key.down = 1;
 8005dba:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <main+0x67c>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	705a      	strb	r2, [r3, #1]
		goDuckUSDMove2(2,22,24,&ud2,&lr2,&duck2);
 8005dc0:	f107 0208 	add.w	r2, r7, #8
 8005dc4:	f107 0320 	add.w	r3, r7, #32
 8005dc8:	9301      	str	r3, [sp, #4]
 8005dca:	1d3b      	adds	r3, r7, #4
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	2218      	movs	r2, #24
 8005dd2:	2116      	movs	r1, #22
 8005dd4:	2002      	movs	r0, #2
 8005dd6:	f7fd fe35 	bl	8003a44 <goDuckUSDMove2>
		key.down = 0;
 8005dda:	4b20      	ldr	r3, [pc, #128]	; (8005e5c <main+0x67c>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	705a      	strb	r2, [r3, #1]
		}
		}
		if (Bship2 == 1 && duck1.rl == 25 && joy.up) {
 8005de0:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <main+0x674>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d144      	bne.n	8005e72 <main+0x692>
 8005de8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005dec:	2b19      	cmp	r3, #25
 8005dee:	d140      	bne.n	8005e72 <main+0x692>
 8005df0:	4b10      	ldr	r3, [pc, #64]	; (8005e34 <main+0x654>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	b25b      	sxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d03b      	beq.n	8005e72 <main+0x692>
			five++;
 8005dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	64bb      	str	r3, [r7, #72]	; 0x48
			if (five == 5) {
 8005e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e02:	2b05      	cmp	r3, #5
 8005e04:	d135      	bne.n	8005e72 <main+0x692>
			gotoxy(46,31+SS.ud);
 8005e06:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005e0a:	331f      	adds	r3, #31
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	202e      	movs	r0, #46	; 0x2e
 8005e10:	f7fe fe8c 	bl	8004b2c <gotoxy>
			bgcolor(1);
 8005e14:	2001      	movs	r0, #1
 8005e16:	f7fe fe55 	bl	8004ac4 <bgcolor>
			printf("      ");
 8005e1a:	4811      	ldr	r0, [pc, #68]	; (8005e60 <main+0x680>)
 8005e1c:	f002 f94e 	bl	80080bc <iprintf>
			bgcolor(0);
 8005e20:	2000      	movs	r0, #0
 8005e22:	f7fe fe4f 	bl	8004ac4 <bgcolor>
			five = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	64bb      	str	r3, [r7, #72]	; 0x48
			Bship2 = 0;
 8005e2a:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <main+0x674>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e018      	b.n	8005e64 <main+0x684>
 8005e32:	bf00      	nop
 8005e34:	20000204 	.word	0x20000204
 8005e38:	080096f8 	.word	0x080096f8
 8005e3c:	200001d0 	.word	0x200001d0
 8005e40:	200001dc 	.word	0x200001dc
 8005e44:	2000020c 	.word	0x2000020c
 8005e48:	200001d8 	.word	0x200001d8
 8005e4c:	08009700 	.word	0x08009700
 8005e50:	200001f4 	.word	0x200001f4
 8005e54:	200001ec 	.word	0x200001ec
 8005e58:	200001d4 	.word	0x200001d4
 8005e5c:	200001f8 	.word	0x200001f8
 8005e60:	080096f0 	.word	0x080096f0
			score += 200;
 8005e64:	4bc1      	ldr	r3, [pc, #772]	; (800616c <main+0x98c>)
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	33c8      	adds	r3, #200	; 0xc8
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	4bbf      	ldr	r3, [pc, #764]	; (800616c <main+0x98c>)
 8005e70:	801a      	strh	r2, [r3, #0]
		}
		}
		if (Bship3 == 1 && duck1.rl == 55 && joy.up) {
 8005e72:	4bbf      	ldr	r3, [pc, #764]	; (8006170 <main+0x990>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d12a      	bne.n	8005ed0 <main+0x6f0>
 8005e7a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005e7e:	2b37      	cmp	r3, #55	; 0x37
 8005e80:	d126      	bne.n	8005ed0 <main+0x6f0>
 8005e82:	4bbc      	ldr	r3, [pc, #752]	; (8006174 <main+0x994>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	b25b      	sxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d021      	beq.n	8005ed0 <main+0x6f0>
			six++;
 8005e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e8e:	3301      	adds	r3, #1
 8005e90:	647b      	str	r3, [r7, #68]	; 0x44
			if (six == 5) {
 8005e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e94:	2b05      	cmp	r3, #5
 8005e96:	d11b      	bne.n	8005ed0 <main+0x6f0>
			gotoxy(76,31+SS.ud);
 8005e98:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005e9c:	331f      	adds	r3, #31
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	204c      	movs	r0, #76	; 0x4c
 8005ea2:	f7fe fe43 	bl	8004b2c <gotoxy>
			bgcolor(1);
 8005ea6:	2001      	movs	r0, #1
 8005ea8:	f7fe fe0c 	bl	8004ac4 <bgcolor>
			printf("      ");
 8005eac:	48b2      	ldr	r0, [pc, #712]	; (8006178 <main+0x998>)
 8005eae:	f002 f905 	bl	80080bc <iprintf>
			bgcolor(0);
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	f7fe fe06 	bl	8004ac4 <bgcolor>
			six = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
			Bship3 = 0;
 8005ebc:	4bac      	ldr	r3, [pc, #688]	; (8006170 <main+0x990>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
			score += 200;
 8005ec2:	4baa      	ldr	r3, [pc, #680]	; (800616c <main+0x98c>)
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	33c8      	adds	r3, #200	; 0xc8
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	4ba7      	ldr	r3, [pc, #668]	; (800616c <main+0x98c>)
 8005ece:	801a      	strh	r2, [r3, #0]
		}
		}

		if(duck1.ud == SS.ud + 8 && Bdown == 1 && duck1.rl == 5 && joy.up == 1) {
 8005ed0:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005eda:	3308      	adds	r3, #8
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d131      	bne.n	8005f44 <main+0x764>
 8005ee0:	4ba6      	ldr	r3, [pc, #664]	; (800617c <main+0x99c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d12d      	bne.n	8005f44 <main+0x764>
 8005ee8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005eec:	2b05      	cmp	r3, #5
 8005eee:	d129      	bne.n	8005f44 <main+0x764>
 8005ef0:	4ba0      	ldr	r3, [pc, #640]	; (8006174 <main+0x994>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b25b      	sxtb	r3, r3
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d124      	bne.n	8005f44 <main+0x764>
					two++;
 8005efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efc:	3301      	adds	r3, #1
 8005efe:	657b      	str	r3, [r7, #84]	; 0x54
					if (two == 5) {
 8005f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d11e      	bne.n	8005f44 <main+0x764>
					gotoxy(26,27+SS.ud);
 8005f06:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f0a:	331b      	adds	r3, #27
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	201a      	movs	r0, #26
 8005f10:	f7fe fe0c 	bl	8004b2c <gotoxy>
					bgcolor(5);
 8005f14:	2005      	movs	r0, #5
 8005f16:	f7fe fdd5 	bl	8004ac4 <bgcolor>
					fgcolor(0);
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	f7fe fdb6 	bl	8004a8c <fgcolor>
					printf("  UP  ");
 8005f20:	4897      	ldr	r0, [pc, #604]	; (8006180 <main+0x9a0>)
 8005f22:	f002 f8cb 	bl	80080bc <iprintf>
					bgcolor(0);
 8005f26:	2000      	movs	r0, #0
 8005f28:	f7fe fdcc 	bl	8004ac4 <bgcolor>
					two = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	657b      	str	r3, [r7, #84]	; 0x54
					Bdown = 0;
 8005f30:	4b92      	ldr	r3, [pc, #584]	; (800617c <main+0x99c>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
					score += 200;
 8005f36:	4b8d      	ldr	r3, [pc, #564]	; (800616c <main+0x98c>)
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	33c8      	adds	r3, #200	; 0xc8
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	4b8a      	ldr	r3, [pc, #552]	; (800616c <main+0x98c>)
 8005f42:	801a      	strh	r2, [r3, #0]
				}
				}
				if(duck1.ud == SS.ud + 8 && Bdown == 1 && duck1.rl != 5) {
 8005f44:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f4e:	3308      	adds	r3, #8
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d115      	bne.n	8005f80 <main+0x7a0>
 8005f54:	4b89      	ldr	r3, [pc, #548]	; (800617c <main+0x99c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d111      	bne.n	8005f80 <main+0x7a0>
 8005f5c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005f60:	2b05      	cmp	r3, #5
 8005f62:	d00d      	beq.n	8005f80 <main+0x7a0>
					goDuckUSD1(1,22,24,&ud1,&lr1,&duck1);
 8005f64:	f107 0210 	add.w	r2, r7, #16
 8005f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	f107 030c 	add.w	r3, r7, #12
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	2218      	movs	r2, #24
 8005f78:	2116      	movs	r1, #22
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7fd fb70 	bl	8003660 <goDuckUSD1>
				}

		if(duck1.rl == 5 && joy.up && !CJoy.up && SS.ud == duck1.ud+1 & SS.ud != -20 && Bup == 0){
 8005f80:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005f84:	2b05      	cmp	r3, #5
 8005f86:	d14c      	bne.n	8006022 <main+0x842>
 8005f88:	4b7a      	ldr	r3, [pc, #488]	; (8006174 <main+0x994>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	b25b      	sxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d047      	beq.n	8006022 <main+0x842>
 8005f92:	4b7c      	ldr	r3, [pc, #496]	; (8006184 <main+0x9a4>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d142      	bne.n	8006022 <main+0x842>
 8005f9c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	bf0c      	ite	eq
 8005fac:	2301      	moveq	r3, #1
 8005fae:	2300      	movne	r3, #0
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005fb6:	f113 0f14 	cmn.w	r3, #20
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d02b      	beq.n	8006022 <main+0x842>
 8005fca:	4b6f      	ldr	r3, [pc, #444]	; (8006188 <main+0x9a8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d127      	bne.n	8006022 <main+0x842>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8005fd2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005fd6:	f103 011b 	add.w	r1, r3, #27
 8005fda:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005fde:	331f      	adds	r3, #31
 8005fe0:	225b      	movs	r2, #91	; 0x5b
 8005fe2:	2002      	movs	r0, #2
 8005fe4:	f7fb ff48 	bl	8001e78 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8005fe8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005fec:	f103 011b 	add.w	r1, r3, #27
 8005ff0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ff4:	331f      	adds	r3, #31
 8005ff6:	225b      	movs	r2, #91	; 0x5b
 8005ff8:	2002      	movs	r0, #2
 8005ffa:	f7fc f9cd 	bl	8002398 <fireDelete>
		SS.ud -= 1;
 8005ffe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	b25b      	sxtb	r3, r3
 800600a:	773b      	strb	r3, [r7, #28]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 800600c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006010:	f103 011b 	add.w	r1, r3, #27
 8006014:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006018:	331f      	adds	r3, #31
 800601a:	225b      	movs	r2, #91	; 0x5b
 800601c:	2002      	movs	r0, #2
 800601e:	f7fb fd7d 	bl	8001b1c <spaceship>
		}

		if(duck1.rl == 5 && joy.up && !CJoy.up && SS.ud == duck1.ud-9 && SS.ud != 21 && Bdown == 0){
 8006022:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006026:	2b05      	cmp	r3, #5
 8006028:	d141      	bne.n	80060ae <main+0x8ce>
 800602a:	4b52      	ldr	r3, [pc, #328]	; (8006174 <main+0x994>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	b25b      	sxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d03c      	beq.n	80060ae <main+0x8ce>
 8006034:	4b53      	ldr	r3, [pc, #332]	; (8006184 <main+0x9a4>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b25b      	sxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d137      	bne.n	80060ae <main+0x8ce>
 800603e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006042:	461a      	mov	r2, r3
 8006044:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8006048:	3b09      	subs	r3, #9
 800604a:	429a      	cmp	r2, r3
 800604c:	d12f      	bne.n	80060ae <main+0x8ce>
 800604e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006052:	2b15      	cmp	r3, #21
 8006054:	d02b      	beq.n	80060ae <main+0x8ce>
 8006056:	4b49      	ldr	r3, [pc, #292]	; (800617c <main+0x99c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d127      	bne.n	80060ae <main+0x8ce>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 800605e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006062:	f103 011b 	add.w	r1, r3, #27
 8006066:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800606a:	331f      	adds	r3, #31
 800606c:	225b      	movs	r2, #91	; 0x5b
 800606e:	2002      	movs	r0, #2
 8006070:	f7fb ff02 	bl	8001e78 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8006074:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006078:	f103 011b 	add.w	r1, r3, #27
 800607c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006080:	331f      	adds	r3, #31
 8006082:	225b      	movs	r2, #91	; 0x5b
 8006084:	2002      	movs	r0, #2
 8006086:	f7fc f987 	bl	8002398 <fireDelete>
		SS.ud += 1;
 800608a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	3301      	adds	r3, #1
 8006092:	b2db      	uxtb	r3, r3
 8006094:	b25b      	sxtb	r3, r3
 8006096:	773b      	strb	r3, [r7, #28]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 8006098:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800609c:	f103 011b 	add.w	r1, r3, #27
 80060a0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80060a4:	331f      	adds	r3, #31
 80060a6:	225b      	movs	r2, #91	; 0x5b
 80060a8:	2002      	movs	r0, #2
 80060aa:	f7fb fd37 	bl	8001b1c <spaceship>
		}

		if (joy.up && duck1.rl != 5 && duck1.ud == SS.ud -1) {
 80060ae:	4b31      	ldr	r3, [pc, #196]	; (8006174 <main+0x994>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	b25b      	sxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d027      	beq.n	8006108 <main+0x928>
 80060b8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80060bc:	2b05      	cmp	r3, #5
 80060be:	d023      	beq.n	8006108 <main+0x928>
 80060c0:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80060c4:	461a      	mov	r2, r3
 80060c6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d11b      	bne.n	8006108 <main+0x928>
		duckExplotion(22,24,&ud1,&lr1);
 80060d0:	f107 030c 	add.w	r3, r7, #12
 80060d4:	f107 0210 	add.w	r2, r7, #16
 80060d8:	2118      	movs	r1, #24
 80060da:	2016      	movs	r0, #22
 80060dc:	f7fd fe46 	bl	8003d6c <duckExplotion>
		playerInSpaceR(1,23,24+SS.ud);
 80060e0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80060e4:	3318      	adds	r3, #24
 80060e6:	461a      	mov	r2, r3
 80060e8:	2117      	movs	r1, #23
 80060ea:	2001      	movs	r0, #1
 80060ec:	f7fc fade 	bl	80026ac <playerInSpaceR>
		ud1 = SS.ud;
 80060f0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80060f4:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
		duck1.ud = SS.ud;
 80060fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80060fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		duck1.rl = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		if (duck1.rl == 65){
 8006108:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800610c:	2b41      	cmp	r3, #65	; 0x41
 800610e:	d11b      	bne.n	8006148 <main+0x968>
		duckExplotion(22,24,&ud1,&lr1);
 8006110:	f107 030c 	add.w	r3, r7, #12
 8006114:	f107 0210 	add.w	r2, r7, #16
 8006118:	2118      	movs	r1, #24
 800611a:	2016      	movs	r0, #22
 800611c:	f7fd fe26 	bl	8003d6c <duckExplotion>
		playerInSpaceR(1,23,24+SS.ud);
 8006120:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006124:	3318      	adds	r3, #24
 8006126:	461a      	mov	r2, r3
 8006128:	2117      	movs	r1, #23
 800612a:	2001      	movs	r0, #1
 800612c:	f7fc fabe 	bl	80026ac <playerInSpaceR>
		ud1 = SS.ud;
 8006130:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006134:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
		duck1.ud = SS.ud;
 800613a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800613e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		duck1.rl = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		if (joy.up && duck1.rl != 5 && duck1.ud == SS.ud +9) {
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <main+0x994>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	b25b      	sxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d038      	beq.n	80061c4 <main+0x9e4>
 8006152:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006156:	2b05      	cmp	r3, #5
 8006158:	d034      	beq.n	80061c4 <main+0x9e4>
 800615a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800615e:	461a      	mov	r2, r3
 8006160:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006164:	3309      	adds	r3, #9
 8006166:	429a      	cmp	r2, r3
 8006168:	d12c      	bne.n	80061c4 <main+0x9e4>
 800616a:	e00f      	b.n	800618c <main+0x9ac>
 800616c:	200001dc 	.word	0x200001dc
 8006170:	200001d4 	.word	0x200001d4
 8006174:	20000204 	.word	0x20000204
 8006178:	080096f0 	.word	0x080096f0
 800617c:	200001f4 	.word	0x200001f4
 8006180:	080096f8 	.word	0x080096f8
 8006184:	2000020c 	.word	0x2000020c
 8006188:	200001d0 	.word	0x200001d0
		duckExplotion(22,24,&ud1,&lr1);
 800618c:	f107 030c 	add.w	r3, r7, #12
 8006190:	f107 0210 	add.w	r2, r7, #16
 8006194:	2118      	movs	r1, #24
 8006196:	2016      	movs	r0, #22
 8006198:	f7fd fde8 	bl	8003d6c <duckExplotion>
		playerInSpaceR(1,23,24+SS.ud);
 800619c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80061a0:	3318      	adds	r3, #24
 80061a2:	461a      	mov	r2, r3
 80061a4:	2117      	movs	r1, #23
 80061a6:	2001      	movs	r0, #1
 80061a8:	f7fc fa80 	bl	80026ac <playerInSpaceR>
		ud1 = SS.ud;
 80061ac:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80061b0:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
		duck1.ud = SS.ud;
 80061b6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80061ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		duck1.rl = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25





		if(duck2.ud == SS.ud && Bup == 0 && !(Bship1 == 1 && duck2.rl == 35)) {
 80061c4:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80061c8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	f040 8094 	bne.w	80062fa <main+0xb1a>
 80061d2:	4bbc      	ldr	r3, [pc, #752]	; (80064c4 <main+0xce4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f040 808f 	bne.w	80062fa <main+0xb1a>
 80061dc:	4bba      	ldr	r3, [pc, #744]	; (80064c8 <main+0xce8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d104      	bne.n	80061ee <main+0xa0e>
 80061e4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80061e8:	2b23      	cmp	r3, #35	; 0x23
 80061ea:	f000 8086 	beq.w	80062fa <main+0xb1a>
		goDuckUP2(2,22,24,&ud2,&lr2,&duck2);
 80061ee:	f107 0208 	add.w	r2, r7, #8
 80061f2:	f107 0320 	add.w	r3, r7, #32
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	1d3b      	adds	r3, r7, #4
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	4613      	mov	r3, r2
 80061fe:	2218      	movs	r2, #24
 8006200:	2116      	movs	r1, #22
 8006202:	2002      	movs	r0, #2
 8006204:	f7fc fe80 	bl	8002f08 <goDuckUP2>
		if (duck2.rl == 5 && duck1.ud == SS.ud && key.up && Bup == 0){
 8006208:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800620c:	2b05      	cmp	r3, #5
 800620e:	d122      	bne.n	8006256 <main+0xa76>
 8006210:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8006214:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006218:	429a      	cmp	r2, r3
 800621a:	d11c      	bne.n	8006256 <main+0xa76>
 800621c:	4bab      	ldr	r3, [pc, #684]	; (80064cc <main+0xcec>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	b25b      	sxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d017      	beq.n	8006256 <main+0xa76>
 8006226:	4ba7      	ldr	r3, [pc, #668]	; (80064c4 <main+0xce4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d113      	bne.n	8006256 <main+0xa76>
			joy.up = 1;
 800622e:	4ba8      	ldr	r3, [pc, #672]	; (80064d0 <main+0xcf0>)
 8006230:	2201      	movs	r2, #1
 8006232:	701a      	strb	r2, [r3, #0]
			goDuckUPMove1(1,22,24,&ud1,&lr1,&duck1);
 8006234:	f107 0210 	add.w	r2, r7, #16
 8006238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800623c:	9301      	str	r3, [sp, #4]
 800623e:	f107 030c 	add.w	r3, r7, #12
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	4613      	mov	r3, r2
 8006246:	2218      	movs	r2, #24
 8006248:	2116      	movs	r1, #22
 800624a:	2001      	movs	r0, #1
 800624c:	f7fc fdec 	bl	8002e28 <goDuckUPMove1>
			joy.up = 0;
 8006250:	4b9f      	ldr	r3, [pc, #636]	; (80064d0 <main+0xcf0>)
 8006252:	2200      	movs	r2, #0
 8006254:	701a      	strb	r2, [r3, #0]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 4 && key.up && Bup == 0){
 8006256:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800625a:	2b05      	cmp	r3, #5
 800625c:	d124      	bne.n	80062a8 <main+0xac8>
 800625e:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8006262:	461a      	mov	r2, r3
 8006264:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006268:	3304      	adds	r3, #4
 800626a:	429a      	cmp	r2, r3
 800626c:	d11c      	bne.n	80062a8 <main+0xac8>
 800626e:	4b97      	ldr	r3, [pc, #604]	; (80064cc <main+0xcec>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	b25b      	sxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d017      	beq.n	80062a8 <main+0xac8>
 8006278:	4b92      	ldr	r3, [pc, #584]	; (80064c4 <main+0xce4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d113      	bne.n	80062a8 <main+0xac8>
			joy.up = 1;
 8006280:	4b93      	ldr	r3, [pc, #588]	; (80064d0 <main+0xcf0>)
 8006282:	2201      	movs	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
			goDuckMIDMove2(1,22,24,&ud1,&lr1,&duck1);
 8006286:	f107 0210 	add.w	r2, r7, #16
 800628a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	f107 030c 	add.w	r3, r7, #12
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	2218      	movs	r2, #24
 800629a:	2116      	movs	r1, #22
 800629c:	2001      	movs	r0, #1
 800629e:	f7fd f95d 	bl	800355c <goDuckMIDMove2>
			joy.up = 0;
 80062a2:	4b8b      	ldr	r3, [pc, #556]	; (80064d0 <main+0xcf0>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	701a      	strb	r2, [r3, #0]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 8 && key.up && Bup == 0){
 80062a8:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80062ac:	2b05      	cmp	r3, #5
 80062ae:	d124      	bne.n	80062fa <main+0xb1a>
 80062b0:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80062b4:	461a      	mov	r2, r3
 80062b6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80062ba:	3308      	adds	r3, #8
 80062bc:	429a      	cmp	r2, r3
 80062be:	d11c      	bne.n	80062fa <main+0xb1a>
 80062c0:	4b82      	ldr	r3, [pc, #520]	; (80064cc <main+0xcec>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	b25b      	sxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d017      	beq.n	80062fa <main+0xb1a>
 80062ca:	4b7e      	ldr	r3, [pc, #504]	; (80064c4 <main+0xce4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d113      	bne.n	80062fa <main+0xb1a>
			joy.up = 1;
 80062d2:	4b7f      	ldr	r3, [pc, #508]	; (80064d0 <main+0xcf0>)
 80062d4:	2201      	movs	r2, #1
 80062d6:	701a      	strb	r2, [r3, #0]
			goDuckUSDMove2(1,22,24,&ud1,&lr1,&duck1);
 80062d8:	f107 0210 	add.w	r2, r7, #16
 80062dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	f107 030c 	add.w	r3, r7, #12
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	2218      	movs	r2, #24
 80062ec:	2116      	movs	r1, #22
 80062ee:	2001      	movs	r0, #1
 80062f0:	f7fd fba8 	bl	8003a44 <goDuckUSDMove2>
			joy.up = 0;
 80062f4:	4b76      	ldr	r3, [pc, #472]	; (80064d0 <main+0xcf0>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	701a      	strb	r2, [r3, #0]
		}
		}
		if (Bship1 == 1 && duck2.rl == 35 && key.up) {
 80062fa:	4b73      	ldr	r3, [pc, #460]	; (80064c8 <main+0xce8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d12a      	bne.n	8006358 <main+0xb78>
 8006302:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006306:	2b23      	cmp	r3, #35	; 0x23
 8006308:	d126      	bne.n	8006358 <main+0xb78>
 800630a:	4b70      	ldr	r3, [pc, #448]	; (80064cc <main+0xcec>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	b25b      	sxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d021      	beq.n	8006358 <main+0xb78>
			four++;
 8006314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006316:	3301      	adds	r3, #1
 8006318:	64fb      	str	r3, [r7, #76]	; 0x4c
			if (four == 5) {
 800631a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800631c:	2b05      	cmp	r3, #5
 800631e:	d11b      	bne.n	8006358 <main+0xb78>
			gotoxy(57,27+SS.ud);
 8006320:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006324:	331b      	adds	r3, #27
 8006326:	4619      	mov	r1, r3
 8006328:	2039      	movs	r0, #57	; 0x39
 800632a:	f7fe fbff 	bl	8004b2c <gotoxy>
			bgcolor(1);
 800632e:	2001      	movs	r0, #1
 8006330:	f7fe fbc8 	bl	8004ac4 <bgcolor>
			printf("      ");
 8006334:	4867      	ldr	r0, [pc, #412]	; (80064d4 <main+0xcf4>)
 8006336:	f001 fec1 	bl	80080bc <iprintf>
			bgcolor(0);
 800633a:	2000      	movs	r0, #0
 800633c:	f7fe fbc2 	bl	8004ac4 <bgcolor>
			four = 0;
 8006340:	2300      	movs	r3, #0
 8006342:	64fb      	str	r3, [r7, #76]	; 0x4c
			Bship1 = 0;
 8006344:	4b60      	ldr	r3, [pc, #384]	; (80064c8 <main+0xce8>)
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
			score += 200;
 800634a:	4b63      	ldr	r3, [pc, #396]	; (80064d8 <main+0xcf8>)
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	33c8      	adds	r3, #200	; 0xc8
 8006352:	b29a      	uxth	r2, r3
 8006354:	4b60      	ldr	r3, [pc, #384]	; (80064d8 <main+0xcf8>)
 8006356:	801a      	strh	r2, [r3, #0]
		}
		}
		if(duck2.ud == SS.ud && Bup == 1 && duck2.rl == 5 && key.up == 1) {
 8006358:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800635c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006360:	429a      	cmp	r2, r3
 8006362:	d131      	bne.n	80063c8 <main+0xbe8>
 8006364:	4b57      	ldr	r3, [pc, #348]	; (80064c4 <main+0xce4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d12d      	bne.n	80063c8 <main+0xbe8>
 800636c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006370:	2b05      	cmp	r3, #5
 8006372:	d129      	bne.n	80063c8 <main+0xbe8>
 8006374:	4b55      	ldr	r3, [pc, #340]	; (80064cc <main+0xcec>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	b25b      	sxtb	r3, r3
 800637a:	2b01      	cmp	r3, #1
 800637c:	d124      	bne.n	80063c8 <main+0xbe8>
			one++;
 800637e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006380:	3301      	adds	r3, #1
 8006382:	65bb      	str	r3, [r7, #88]	; 0x58
			if (one == 5) {
 8006384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006386:	2b05      	cmp	r3, #5
 8006388:	d11e      	bne.n	80063c8 <main+0xbe8>
			gotoxy(26,27+SS.ud);
 800638a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800638e:	331b      	adds	r3, #27
 8006390:	4619      	mov	r1, r3
 8006392:	201a      	movs	r0, #26
 8006394:	f7fe fbca 	bl	8004b2c <gotoxy>
			bgcolor(5);
 8006398:	2005      	movs	r0, #5
 800639a:	f7fe fb93 	bl	8004ac4 <bgcolor>
			fgcolor(0);
 800639e:	2000      	movs	r0, #0
 80063a0:	f7fe fb74 	bl	8004a8c <fgcolor>
			printf("  UP  ");
 80063a4:	484d      	ldr	r0, [pc, #308]	; (80064dc <main+0xcfc>)
 80063a6:	f001 fe89 	bl	80080bc <iprintf>
			bgcolor(0);
 80063aa:	2000      	movs	r0, #0
 80063ac:	f7fe fb8a 	bl	8004ac4 <bgcolor>
			one = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	65bb      	str	r3, [r7, #88]	; 0x58
			Bup = 0;
 80063b4:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <main+0xce4>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
			score += 200;
 80063ba:	4b47      	ldr	r3, [pc, #284]	; (80064d8 <main+0xcf8>)
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	33c8      	adds	r3, #200	; 0xc8
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	4b44      	ldr	r3, [pc, #272]	; (80064d8 <main+0xcf8>)
 80063c6:	801a      	strh	r2, [r3, #0]
		}
		}
		if(duck2.ud == SS.ud && Bup == 1 && duck2.rl != 5) {
 80063c8:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80063cc:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d114      	bne.n	80063fe <main+0xc1e>
 80063d4:	4b3b      	ldr	r3, [pc, #236]	; (80064c4 <main+0xce4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d110      	bne.n	80063fe <main+0xc1e>
 80063dc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80063e0:	2b05      	cmp	r3, #5
 80063e2:	d00c      	beq.n	80063fe <main+0xc1e>
			goDuckUP2(2,22,24,&ud2,&lr2,&duck2);
 80063e4:	f107 0208 	add.w	r2, r7, #8
 80063e8:	f107 0320 	add.w	r3, r7, #32
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	1d3b      	adds	r3, r7, #4
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4613      	mov	r3, r2
 80063f4:	2218      	movs	r2, #24
 80063f6:	2116      	movs	r1, #22
 80063f8:	2002      	movs	r0, #2
 80063fa:	f7fc fd85 	bl	8002f08 <goDuckUP2>
		}



		if(duck2.ud == SS.ud + 4 || duck2.ud == SS.ud - 4){
 80063fe:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006402:	461a      	mov	r2, r3
 8006404:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006408:	3304      	adds	r3, #4
 800640a:	429a      	cmp	r2, r3
 800640c:	d007      	beq.n	800641e <main+0xc3e>
 800640e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006412:	461a      	mov	r2, r3
 8006414:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006418:	3b04      	subs	r3, #4
 800641a:	429a      	cmp	r2, r3
 800641c:	d164      	bne.n	80064e8 <main+0xd08>
		goDuckMID2(2,22,24,&ud2,&lr2,&duck2);
 800641e:	f107 0208 	add.w	r2, r7, #8
 8006422:	f107 0320 	add.w	r3, r7, #32
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	1d3b      	adds	r3, r7, #4
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	4613      	mov	r3, r2
 800642e:	2218      	movs	r2, #24
 8006430:	2116      	movs	r1, #22
 8006432:	2002      	movs	r0, #2
 8006434:	f7fc ffa4 	bl	8003380 <goDuckMID2>
		if(duck2.rl == 55 && key.right && Bcanon == 0){
 8006438:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800643c:	2b37      	cmp	r3, #55	; 0x37
 800643e:	d10d      	bne.n	800645c <main+0xc7c>
 8006440:	4b22      	ldr	r3, [pc, #136]	; (80064cc <main+0xcec>)
 8006442:	78db      	ldrb	r3, [r3, #3]
 8006444:	b25b      	sxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d008      	beq.n	800645c <main+0xc7c>
 800644a:	4b25      	ldr	r3, [pc, #148]	; (80064e0 <main+0xd00>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d104      	bne.n	800645c <main+0xc7c>
			shoot(SS.ud);
 8006452:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fbc4 	bl	8004be4 <shoot>
		}
		if(duck2.rl == 55 && key.right && Bcanon == 1){
 800645c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006460:	2b37      	cmp	r3, #55	; 0x37
 8006462:	d141      	bne.n	80064e8 <main+0xd08>
 8006464:	4b19      	ldr	r3, [pc, #100]	; (80064cc <main+0xcec>)
 8006466:	78db      	ldrb	r3, [r3, #3]
 8006468:	b25b      	sxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d03c      	beq.n	80064e8 <main+0xd08>
 800646e:	4b1c      	ldr	r3, [pc, #112]	; (80064e0 <main+0xd00>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d138      	bne.n	80064e8 <main+0xd08>
			three++;
 8006476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006478:	3301      	adds	r3, #1
 800647a:	653b      	str	r3, [r7, #80]	; 0x50
			if (three == 5) {
 800647c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800647e:	2b05      	cmp	r3, #5
 8006480:	d132      	bne.n	80064e8 <main+0xd08>
			gotoxy(83,29+SS.ud);
 8006482:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006486:	331d      	adds	r3, #29
 8006488:	4619      	mov	r1, r3
 800648a:	2053      	movs	r0, #83	; 0x53
 800648c:	f7fe fb4e 	bl	8004b2c <gotoxy>
			fgcolor(0);
 8006490:	2000      	movs	r0, #0
 8006492:	f7fe fafb 	bl	8004a8c <fgcolor>
			bgcolor(7);
 8006496:	2007      	movs	r0, #7
 8006498:	f7fe fb14 	bl	8004ac4 <bgcolor>
			printf(" CANON");
 800649c:	4811      	ldr	r0, [pc, #68]	; (80064e4 <main+0xd04>)
 800649e:	f001 fe0d 	bl	80080bc <iprintf>
			bgcolor(0);
 80064a2:	2000      	movs	r0, #0
 80064a4:	f7fe fb0e 	bl	8004ac4 <bgcolor>
			three = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	653b      	str	r3, [r7, #80]	; 0x50
			Bcanon = 0;
 80064ac:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <main+0xd00>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
			score += 200;
 80064b2:	4b09      	ldr	r3, [pc, #36]	; (80064d8 <main+0xcf8>)
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	33c8      	adds	r3, #200	; 0xc8
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <main+0xcf8>)
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	e012      	b.n	80064e8 <main+0xd08>
 80064c2:	bf00      	nop
 80064c4:	200001d0 	.word	0x200001d0
 80064c8:	200001cc 	.word	0x200001cc
 80064cc:	200001f8 	.word	0x200001f8
 80064d0:	20000204 	.word	0x20000204
 80064d4:	080096f0 	.word	0x080096f0
 80064d8:	200001dc 	.word	0x200001dc
 80064dc:	080096f8 	.word	0x080096f8
 80064e0:	200001d8 	.word	0x200001d8
 80064e4:	08009700 	.word	0x08009700
			}
		}
		}

		if(duck2.ud == SS.ud+8 && Bdown == 0 && !(Bship2 == 1 && duck2.rl == 25) && !(Bship3 == 1 && duck2.rl == 55)) {
 80064e8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80064ec:	461a      	mov	r2, r3
 80064ee:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80064f2:	3308      	adds	r3, #8
 80064f4:	429a      	cmp	r2, r3
 80064f6:	f040 809d 	bne.w	8006634 <main+0xe54>
 80064fa:	4bb8      	ldr	r3, [pc, #736]	; (80067dc <main+0xffc>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f040 8098 	bne.w	8006634 <main+0xe54>
 8006504:	4bb6      	ldr	r3, [pc, #728]	; (80067e0 <main+0x1000>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d104      	bne.n	8006516 <main+0xd36>
 800650c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006510:	2b19      	cmp	r3, #25
 8006512:	f000 808f 	beq.w	8006634 <main+0xe54>
 8006516:	4bb3      	ldr	r3, [pc, #716]	; (80067e4 <main+0x1004>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d104      	bne.n	8006528 <main+0xd48>
 800651e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006522:	2b37      	cmp	r3, #55	; 0x37
 8006524:	f000 8086 	beq.w	8006634 <main+0xe54>
		goDuckUSD2(2,22,24,&ud2,&lr2,&duck2);
 8006528:	f107 0208 	add.w	r2, r7, #8
 800652c:	f107 0320 	add.w	r3, r7, #32
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	1d3b      	adds	r3, r7, #4
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	4613      	mov	r3, r2
 8006538:	2218      	movs	r2, #24
 800653a:	2116      	movs	r1, #22
 800653c:	2002      	movs	r0, #2
 800653e:	f7fd f993 	bl	8003868 <goDuckUSD2>
		if (duck2.rl == 5 && duck1.ud == SS.ud && key.up && Bdown == 0){
 8006542:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006546:	2b05      	cmp	r3, #5
 8006548:	d122      	bne.n	8006590 <main+0xdb0>
 800654a:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 800654e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006552:	429a      	cmp	r2, r3
 8006554:	d11c      	bne.n	8006590 <main+0xdb0>
 8006556:	4ba4      	ldr	r3, [pc, #656]	; (80067e8 <main+0x1008>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b25b      	sxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d017      	beq.n	8006590 <main+0xdb0>
 8006560:	4b9e      	ldr	r3, [pc, #632]	; (80067dc <main+0xffc>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d113      	bne.n	8006590 <main+0xdb0>
			joy.down = 1;
 8006568:	4ba0      	ldr	r3, [pc, #640]	; (80067ec <main+0x100c>)
 800656a:	2201      	movs	r2, #1
 800656c:	705a      	strb	r2, [r3, #1]
			goDuckUPMove2(1,22,24,&ud1,&lr1,&duck1);
 800656e:	f107 0210 	add.w	r2, r7, #16
 8006572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	f107 030c 	add.w	r3, r7, #12
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	4613      	mov	r3, r2
 8006580:	2218      	movs	r2, #24
 8006582:	2116      	movs	r1, #22
 8006584:	2001      	movs	r0, #1
 8006586:	f7fc fdaf 	bl	80030e8 <goDuckUPMove2>
			joy.down = 0;
 800658a:	4b98      	ldr	r3, [pc, #608]	; (80067ec <main+0x100c>)
 800658c:	2200      	movs	r2, #0
 800658e:	705a      	strb	r2, [r3, #1]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 4 && key.up && Bdown == 0){
 8006590:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006594:	2b05      	cmp	r3, #5
 8006596:	d124      	bne.n	80065e2 <main+0xe02>
 8006598:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800659c:	461a      	mov	r2, r3
 800659e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80065a2:	3304      	adds	r3, #4
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d11c      	bne.n	80065e2 <main+0xe02>
 80065a8:	4b8f      	ldr	r3, [pc, #572]	; (80067e8 <main+0x1008>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b25b      	sxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d017      	beq.n	80065e2 <main+0xe02>
 80065b2:	4b8a      	ldr	r3, [pc, #552]	; (80067dc <main+0xffc>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d113      	bne.n	80065e2 <main+0xe02>
			joy.down = 1;
 80065ba:	4b8c      	ldr	r3, [pc, #560]	; (80067ec <main+0x100c>)
 80065bc:	2201      	movs	r2, #1
 80065be:	705a      	strb	r2, [r3, #1]
			goDuckMIDMove2(1,22,24,&ud1,&lr1,&duck1);
 80065c0:	f107 0210 	add.w	r2, r7, #16
 80065c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	f107 030c 	add.w	r3, r7, #12
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	2218      	movs	r2, #24
 80065d4:	2116      	movs	r1, #22
 80065d6:	2001      	movs	r0, #1
 80065d8:	f7fc ffc0 	bl	800355c <goDuckMIDMove2>
			joy.down = 0;
 80065dc:	4b83      	ldr	r3, [pc, #524]	; (80067ec <main+0x100c>)
 80065de:	2200      	movs	r2, #0
 80065e0:	705a      	strb	r2, [r3, #1]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 8 && key.up && Bdown == 0){
 80065e2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d124      	bne.n	8006634 <main+0xe54>
 80065ea:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80065ee:	461a      	mov	r2, r3
 80065f0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80065f4:	3308      	adds	r3, #8
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d11c      	bne.n	8006634 <main+0xe54>
 80065fa:	4b7b      	ldr	r3, [pc, #492]	; (80067e8 <main+0x1008>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	b25b      	sxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d017      	beq.n	8006634 <main+0xe54>
 8006604:	4b75      	ldr	r3, [pc, #468]	; (80067dc <main+0xffc>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d113      	bne.n	8006634 <main+0xe54>
		joy.down = 1;
 800660c:	4b77      	ldr	r3, [pc, #476]	; (80067ec <main+0x100c>)
 800660e:	2201      	movs	r2, #1
 8006610:	705a      	strb	r2, [r3, #1]
		goDuckUSDMove2(1,22,24,&ud1,&lr1,&duck1);
 8006612:	f107 0210 	add.w	r2, r7, #16
 8006616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	f107 030c 	add.w	r3, r7, #12
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	4613      	mov	r3, r2
 8006624:	2218      	movs	r2, #24
 8006626:	2116      	movs	r1, #22
 8006628:	2001      	movs	r0, #1
 800662a:	f7fd fa0b 	bl	8003a44 <goDuckUSDMove2>
		joy.down = 0;
 800662e:	4b6f      	ldr	r3, [pc, #444]	; (80067ec <main+0x100c>)
 8006630:	2200      	movs	r2, #0
 8006632:	705a      	strb	r2, [r3, #1]
		}
		}
		if (Bship2 == 1 && duck2.rl == 25 && key.up) {
 8006634:	4b6a      	ldr	r3, [pc, #424]	; (80067e0 <main+0x1000>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d12a      	bne.n	8006692 <main+0xeb2>
 800663c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006640:	2b19      	cmp	r3, #25
 8006642:	d126      	bne.n	8006692 <main+0xeb2>
 8006644:	4b68      	ldr	r3, [pc, #416]	; (80067e8 <main+0x1008>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b25b      	sxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d021      	beq.n	8006692 <main+0xeb2>
			five++;
 800664e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006650:	3301      	adds	r3, #1
 8006652:	64bb      	str	r3, [r7, #72]	; 0x48
			if (five == 5) {
 8006654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006656:	2b05      	cmp	r3, #5
 8006658:	d11b      	bne.n	8006692 <main+0xeb2>
			gotoxy(46,31+SS.ud);
 800665a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800665e:	331f      	adds	r3, #31
 8006660:	4619      	mov	r1, r3
 8006662:	202e      	movs	r0, #46	; 0x2e
 8006664:	f7fe fa62 	bl	8004b2c <gotoxy>
			bgcolor(1);
 8006668:	2001      	movs	r0, #1
 800666a:	f7fe fa2b 	bl	8004ac4 <bgcolor>
			printf("      ");
 800666e:	4860      	ldr	r0, [pc, #384]	; (80067f0 <main+0x1010>)
 8006670:	f001 fd24 	bl	80080bc <iprintf>
			bgcolor(0);
 8006674:	2000      	movs	r0, #0
 8006676:	f7fe fa25 	bl	8004ac4 <bgcolor>
			five = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	64bb      	str	r3, [r7, #72]	; 0x48
			Bship2 = 0;
 800667e:	4b58      	ldr	r3, [pc, #352]	; (80067e0 <main+0x1000>)
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
			score += 200;
 8006684:	4b5b      	ldr	r3, [pc, #364]	; (80067f4 <main+0x1014>)
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	33c8      	adds	r3, #200	; 0xc8
 800668c:	b29a      	uxth	r2, r3
 800668e:	4b59      	ldr	r3, [pc, #356]	; (80067f4 <main+0x1014>)
 8006690:	801a      	strh	r2, [r3, #0]
		}
		}
		if (Bship3 == 1 && duck2.rl == 55 && key.up) {
 8006692:	4b54      	ldr	r3, [pc, #336]	; (80067e4 <main+0x1004>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d12a      	bne.n	80066f0 <main+0xf10>
 800669a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800669e:	2b37      	cmp	r3, #55	; 0x37
 80066a0:	d126      	bne.n	80066f0 <main+0xf10>
 80066a2:	4b51      	ldr	r3, [pc, #324]	; (80067e8 <main+0x1008>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	b25b      	sxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d021      	beq.n	80066f0 <main+0xf10>
			six++;
 80066ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ae:	3301      	adds	r3, #1
 80066b0:	647b      	str	r3, [r7, #68]	; 0x44
			if (six == 5) {
 80066b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d11b      	bne.n	80066f0 <main+0xf10>
			gotoxy(76,31+SS.ud);
 80066b8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80066bc:	331f      	adds	r3, #31
 80066be:	4619      	mov	r1, r3
 80066c0:	204c      	movs	r0, #76	; 0x4c
 80066c2:	f7fe fa33 	bl	8004b2c <gotoxy>
			bgcolor(1);
 80066c6:	2001      	movs	r0, #1
 80066c8:	f7fe f9fc 	bl	8004ac4 <bgcolor>
			printf("      ");
 80066cc:	4848      	ldr	r0, [pc, #288]	; (80067f0 <main+0x1010>)
 80066ce:	f001 fcf5 	bl	80080bc <iprintf>
			bgcolor(0);
 80066d2:	2000      	movs	r0, #0
 80066d4:	f7fe f9f6 	bl	8004ac4 <bgcolor>
			six = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	647b      	str	r3, [r7, #68]	; 0x44
			Bship3 = 0;
 80066dc:	4b41      	ldr	r3, [pc, #260]	; (80067e4 <main+0x1004>)
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
			score += 200;
 80066e2:	4b44      	ldr	r3, [pc, #272]	; (80067f4 <main+0x1014>)
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	33c8      	adds	r3, #200	; 0xc8
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	4b41      	ldr	r3, [pc, #260]	; (80067f4 <main+0x1014>)
 80066ee:	801a      	strh	r2, [r3, #0]
		}
		}
		if(duck2.ud == SS.ud + 8 && Bdown == 1 && duck2.rl == 5 && key.up == 1) {
 80066f0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80066f4:	461a      	mov	r2, r3
 80066f6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80066fa:	3308      	adds	r3, #8
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d134      	bne.n	800676a <main+0xf8a>
 8006700:	4b36      	ldr	r3, [pc, #216]	; (80067dc <main+0xffc>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d130      	bne.n	800676a <main+0xf8a>
 8006708:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800670c:	2b05      	cmp	r3, #5
 800670e:	d12c      	bne.n	800676a <main+0xf8a>
 8006710:	4b35      	ldr	r3, [pc, #212]	; (80067e8 <main+0x1008>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	b25b      	sxtb	r3, r3
 8006716:	2b01      	cmp	r3, #1
 8006718:	d127      	bne.n	800676a <main+0xf8a>
					two++;
 800671a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800671c:	3301      	adds	r3, #1
 800671e:	657b      	str	r3, [r7, #84]	; 0x54
					if (two == 5) {
 8006720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006722:	2b05      	cmp	r3, #5
 8006724:	d121      	bne.n	800676a <main+0xf8a>
					Bdown = 0;
 8006726:	4b2d      	ldr	r3, [pc, #180]	; (80067dc <main+0xffc>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]
					gotoxy(26,27+SS.ud);
 800672c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006730:	331b      	adds	r3, #27
 8006732:	4619      	mov	r1, r3
 8006734:	201a      	movs	r0, #26
 8006736:	f7fe f9f9 	bl	8004b2c <gotoxy>
					bgcolor(5);
 800673a:	2005      	movs	r0, #5
 800673c:	f7fe f9c2 	bl	8004ac4 <bgcolor>
					fgcolor(0);
 8006740:	2000      	movs	r0, #0
 8006742:	f7fe f9a3 	bl	8004a8c <fgcolor>
					printf("  UP  ");
 8006746:	482c      	ldr	r0, [pc, #176]	; (80067f8 <main+0x1018>)
 8006748:	f001 fcb8 	bl	80080bc <iprintf>
					bgcolor(0);
 800674c:	2000      	movs	r0, #0
 800674e:	f7fe f9b9 	bl	8004ac4 <bgcolor>
					two = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	657b      	str	r3, [r7, #84]	; 0x54
					Bdown = 0;
 8006756:	4b21      	ldr	r3, [pc, #132]	; (80067dc <main+0xffc>)
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
					score += 200;
 800675c:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <main+0x1014>)
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	33c8      	adds	r3, #200	; 0xc8
 8006764:	b29a      	uxth	r2, r3
 8006766:	4b23      	ldr	r3, [pc, #140]	; (80067f4 <main+0x1014>)
 8006768:	801a      	strh	r2, [r3, #0]
				}
				}
				if(duck2.ud == SS.ud + 8 && Bdown == 1 && duck2.rl != 5) {
 800676a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800676e:	461a      	mov	r2, r3
 8006770:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006774:	3308      	adds	r3, #8
 8006776:	429a      	cmp	r2, r3
 8006778:	d114      	bne.n	80067a4 <main+0xfc4>
 800677a:	4b18      	ldr	r3, [pc, #96]	; (80067dc <main+0xffc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d110      	bne.n	80067a4 <main+0xfc4>
 8006782:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006786:	2b05      	cmp	r3, #5
 8006788:	d00c      	beq.n	80067a4 <main+0xfc4>
					goDuckUSD2(2,22,24,&ud2,&lr2,&duck2);
 800678a:	f107 0208 	add.w	r2, r7, #8
 800678e:	f107 0320 	add.w	r3, r7, #32
 8006792:	9301      	str	r3, [sp, #4]
 8006794:	1d3b      	adds	r3, r7, #4
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	4613      	mov	r3, r2
 800679a:	2218      	movs	r2, #24
 800679c:	2116      	movs	r1, #22
 800679e:	2002      	movs	r0, #2
 80067a0:	f7fd f862 	bl	8003868 <goDuckUSD2>
				}

		if(duck2.rl == 5 && key.up && SS.ud == duck2.ud+1 && SS.ud != -20 && Bup == 0){
 80067a4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80067a8:	2b05      	cmp	r3, #5
 80067aa:	d151      	bne.n	8006850 <main+0x1070>
 80067ac:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <main+0x1008>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b25b      	sxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d04c      	beq.n	8006850 <main+0x1070>
 80067b6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80067c0:	3301      	adds	r3, #1
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d144      	bne.n	8006850 <main+0x1070>
 80067c6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80067ca:	f113 0f14 	cmn.w	r3, #20
 80067ce:	d03f      	beq.n	8006850 <main+0x1070>
 80067d0:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <main+0x101c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d13b      	bne.n	8006850 <main+0x1070>
 80067d8:	e012      	b.n	8006800 <main+0x1020>
 80067da:	bf00      	nop
 80067dc:	200001f4 	.word	0x200001f4
 80067e0:	200001ec 	.word	0x200001ec
 80067e4:	200001d4 	.word	0x200001d4
 80067e8:	200001f8 	.word	0x200001f8
 80067ec:	20000204 	.word	0x20000204
 80067f0:	080096f0 	.word	0x080096f0
 80067f4:	200001dc 	.word	0x200001dc
 80067f8:	080096f8 	.word	0x080096f8
 80067fc:	200001d0 	.word	0x200001d0
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8006800:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006804:	f103 011b 	add.w	r1, r3, #27
 8006808:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800680c:	331f      	adds	r3, #31
 800680e:	225b      	movs	r2, #91	; 0x5b
 8006810:	2002      	movs	r0, #2
 8006812:	f7fb fb31 	bl	8001e78 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8006816:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800681a:	f103 011b 	add.w	r1, r3, #27
 800681e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006822:	331f      	adds	r3, #31
 8006824:	225b      	movs	r2, #91	; 0x5b
 8006826:	2002      	movs	r0, #2
 8006828:	f7fb fdb6 	bl	8002398 <fireDelete>
		SS.ud -= 1;
 800682c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b2db      	uxtb	r3, r3
 8006836:	b25b      	sxtb	r3, r3
 8006838:	773b      	strb	r3, [r7, #28]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 800683a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800683e:	f103 011b 	add.w	r1, r3, #27
 8006842:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006846:	331f      	adds	r3, #31
 8006848:	225b      	movs	r2, #91	; 0x5b
 800684a:	2002      	movs	r0, #2
 800684c:	f7fb f966 	bl	8001b1c <spaceship>
		}

		if(duck2.rl == 5 && key.up && SS.ud == duck2.ud-9 && SS.ud != 21 && Bdown == 0){
 8006850:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006854:	2b05      	cmp	r3, #5
 8006856:	d13c      	bne.n	80068d2 <main+0x10f2>
 8006858:	4bc1      	ldr	r3, [pc, #772]	; (8006b60 <main+0x1380>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	b25b      	sxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d037      	beq.n	80068d2 <main+0x10f2>
 8006862:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006866:	461a      	mov	r2, r3
 8006868:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800686c:	3b09      	subs	r3, #9
 800686e:	429a      	cmp	r2, r3
 8006870:	d12f      	bne.n	80068d2 <main+0x10f2>
 8006872:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006876:	2b15      	cmp	r3, #21
 8006878:	d02b      	beq.n	80068d2 <main+0x10f2>
 800687a:	4bba      	ldr	r3, [pc, #744]	; (8006b64 <main+0x1384>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d127      	bne.n	80068d2 <main+0x10f2>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8006882:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006886:	f103 011b 	add.w	r1, r3, #27
 800688a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800688e:	331f      	adds	r3, #31
 8006890:	225b      	movs	r2, #91	; 0x5b
 8006892:	2002      	movs	r0, #2
 8006894:	f7fb faf0 	bl	8001e78 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8006898:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800689c:	f103 011b 	add.w	r1, r3, #27
 80068a0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80068a4:	331f      	adds	r3, #31
 80068a6:	225b      	movs	r2, #91	; 0x5b
 80068a8:	2002      	movs	r0, #2
 80068aa:	f7fb fd75 	bl	8002398 <fireDelete>
		SS.ud += 1;
 80068ae:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	3301      	adds	r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	b25b      	sxtb	r3, r3
 80068ba:	773b      	strb	r3, [r7, #28]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 80068bc:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80068c0:	f103 011b 	add.w	r1, r3, #27
 80068c4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80068c8:	331f      	adds	r3, #31
 80068ca:	225b      	movs	r2, #91	; 0x5b
 80068cc:	2002      	movs	r0, #2
 80068ce:	f7fb f925 	bl	8001b1c <spaceship>
		}

		if (key.up && duck2.rl != 5 && duck2.ud == SS.ud -1) {
 80068d2:	4ba3      	ldr	r3, [pc, #652]	; (8006b60 <main+0x1380>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	b25b      	sxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d02b      	beq.n	8006934 <main+0x1154>
 80068dc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80068e0:	2b05      	cmp	r3, #5
 80068e2:	d027      	beq.n	8006934 <main+0x1154>
 80068e4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80068e8:	461a      	mov	r2, r3
 80068ea:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d11f      	bne.n	8006934 <main+0x1154>
		duckExplotion(22,24,&ud2,&lr2);
 80068f4:	1d3b      	adds	r3, r7, #4
 80068f6:	f107 0208 	add.w	r2, r7, #8
 80068fa:	2118      	movs	r1, #24
 80068fc:	2016      	movs	r0, #22
 80068fe:	f7fd fa35 	bl	8003d6c <duckExplotion>
		playerInSpaceUSDR(2,23,32+SS.ud);
 8006902:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006906:	3320      	adds	r3, #32
 8006908:	461a      	mov	r2, r3
 800690a:	2117      	movs	r1, #23
 800690c:	2002      	movs	r0, #2
 800690e:	f7fc f8d5 	bl	8002abc <playerInSpaceUSDR>
		ud2= SS.ud+8;
 8006912:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006916:	3308      	adds	r3, #8
 8006918:	60bb      	str	r3, [r7, #8]
		lr2=0;
 800691a:	2300      	movs	r3, #0
 800691c:	607b      	str	r3, [r7, #4]
		duck2.ud = SS.ud+8;
 800691e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	3308      	adds	r3, #8
 8006926:	b2db      	uxtb	r3, r3
 8006928:	b25b      	sxtb	r3, r3
 800692a:	f887 3020 	strb.w	r3, [r7, #32]
		duck2.rl = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		}
		if (duck2.rl == 65){
 8006934:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006938:	2b41      	cmp	r3, #65	; 0x41
 800693a:	d11f      	bne.n	800697c <main+0x119c>
		duckExplotion(22,24,&ud2,&lr2);
 800693c:	1d3b      	adds	r3, r7, #4
 800693e:	f107 0208 	add.w	r2, r7, #8
 8006942:	2118      	movs	r1, #24
 8006944:	2016      	movs	r0, #22
 8006946:	f7fd fa11 	bl	8003d6c <duckExplotion>
		playerInSpaceUSDR(2,23,32+SS.ud);
 800694a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800694e:	3320      	adds	r3, #32
 8006950:	461a      	mov	r2, r3
 8006952:	2117      	movs	r1, #23
 8006954:	2002      	movs	r0, #2
 8006956:	f7fc f8b1 	bl	8002abc <playerInSpaceUSDR>
		ud2= SS.ud+8;
 800695a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800695e:	3308      	adds	r3, #8
 8006960:	60bb      	str	r3, [r7, #8]
		lr2=0;
 8006962:	2300      	movs	r3, #0
 8006964:	607b      	str	r3, [r7, #4]
		duck2.ud = SS.ud+8;
 8006966:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	3308      	adds	r3, #8
 800696e:	b2db      	uxtb	r3, r3
 8006970:	b25b      	sxtb	r3, r3
 8006972:	f887 3020 	strb.w	r3, [r7, #32]
		duck2.rl = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		}
		if (key.up && duck2.rl != 5 && duck2.ud == SS.ud + 9) {
 800697c:	4b78      	ldr	r3, [pc, #480]	; (8006b60 <main+0x1380>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	b25b      	sxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d02b      	beq.n	80069de <main+0x11fe>
 8006986:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800698a:	2b05      	cmp	r3, #5
 800698c:	d027      	beq.n	80069de <main+0x11fe>
 800698e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006992:	461a      	mov	r2, r3
 8006994:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006998:	3309      	adds	r3, #9
 800699a:	429a      	cmp	r2, r3
 800699c:	d11f      	bne.n	80069de <main+0x11fe>
		duckExplotion(22,24,&ud2,&lr2);
 800699e:	1d3b      	adds	r3, r7, #4
 80069a0:	f107 0208 	add.w	r2, r7, #8
 80069a4:	2118      	movs	r1, #24
 80069a6:	2016      	movs	r0, #22
 80069a8:	f7fd f9e0 	bl	8003d6c <duckExplotion>
		playerInSpaceUSDR(2,23,32+SS.ud);
 80069ac:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80069b0:	3320      	adds	r3, #32
 80069b2:	461a      	mov	r2, r3
 80069b4:	2117      	movs	r1, #23
 80069b6:	2002      	movs	r0, #2
 80069b8:	f7fc f880 	bl	8002abc <playerInSpaceUSDR>
		ud2= SS.ud+8;
 80069bc:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80069c0:	3308      	adds	r3, #8
 80069c2:	60bb      	str	r3, [r7, #8]
		lr2=0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	607b      	str	r3, [r7, #4]
		duck2.ud = SS.ud+8;
 80069c8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	3308      	adds	r3, #8
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	b25b      	sxtb	r3, r3
 80069d4:	f887 3020 	strb.w	r3, [r7, #32]
		duck2.rl = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		}

		buffer_lenght = uart_get_count();
 80069de:	f7fa fc5f 	bl	80012a0 <uart_get_count>
 80069e2:	4603      	mov	r3, r0
 80069e4:	62bb      	str	r3, [r7, #40]	; 0x28
//		gotoxy(30,10);
//		printf("%d", buffer_lenght);

		if (lcdUpdate > 0){
 80069e6:	4b60      	ldr	r3, [pc, #384]	; (8006b68 <main+0x1388>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	dd57      	ble.n	8006a9e <main+0x12be>
		//Keyboard input

		if (buffer_lenght > 0) {
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	dd04      	ble.n	80069fe <main+0x121e>
			random = uart_get_char();
 80069f4:	f7fa fb9a 	bl	800112c <uart_get_char>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
//			gotoxy(10,10);
//			printf("%c", random);
		}
		resetbgcolor();
 80069fe:	f7fe f873 	bl	8004ae8 <resetbgcolor>


		if (random == 'w'){
 8006a02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a06:	2b77      	cmp	r3, #119	; 0x77
 8006a08:	d103      	bne.n	8006a12 <main+0x1232>
			key.up = 1;
 8006a0a:	4b55      	ldr	r3, [pc, #340]	; (8006b60 <main+0x1380>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	e002      	b.n	8006a18 <main+0x1238>
		}
		else {key.up = 0;}
 8006a12:	4b53      	ldr	r3, [pc, #332]	; (8006b60 <main+0x1380>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	701a      	strb	r2, [r3, #0]

		if (random == 'a'){
 8006a18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a1c:	2b61      	cmp	r3, #97	; 0x61
 8006a1e:	d103      	bne.n	8006a28 <main+0x1248>
			key.left = 1;
 8006a20:	4b4f      	ldr	r3, [pc, #316]	; (8006b60 <main+0x1380>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	709a      	strb	r2, [r3, #2]
 8006a26:	e002      	b.n	8006a2e <main+0x124e>
		}
		else {key.left = 0;}
 8006a28:	4b4d      	ldr	r3, [pc, #308]	; (8006b60 <main+0x1380>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	709a      	strb	r2, [r3, #2]

		if (random == 's'){
 8006a2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a32:	2b73      	cmp	r3, #115	; 0x73
 8006a34:	d103      	bne.n	8006a3e <main+0x125e>
			key.down = 1;
 8006a36:	4b4a      	ldr	r3, [pc, #296]	; (8006b60 <main+0x1380>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	705a      	strb	r2, [r3, #1]
 8006a3c:	e002      	b.n	8006a44 <main+0x1264>
		}
		else {key.down = 0;}
 8006a3e:	4b48      	ldr	r3, [pc, #288]	; (8006b60 <main+0x1380>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	705a      	strb	r2, [r3, #1]

		if (random == 'd'){
 8006a44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a48:	2b64      	cmp	r3, #100	; 0x64
 8006a4a:	d103      	bne.n	8006a54 <main+0x1274>
			key.right = 1;
 8006a4c:	4b44      	ldr	r3, [pc, #272]	; (8006b60 <main+0x1380>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	70da      	strb	r2, [r3, #3]
 8006a52:	e002      	b.n	8006a5a <main+0x127a>
		}
		else {key.right = 0;}
 8006a54:	4b42      	ldr	r3, [pc, #264]	; (8006b60 <main+0x1380>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	70da      	strb	r2, [r3, #3]

		if (random == 'e'){
 8006a5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a5e:	2b65      	cmp	r3, #101	; 0x65
 8006a60:	d103      	bne.n	8006a6a <main+0x128a>
			key.center = 1;
 8006a62:	4b3f      	ldr	r3, [pc, #252]	; (8006b60 <main+0x1380>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	711a      	strb	r2, [r3, #4]
 8006a68:	e002      	b.n	8006a70 <main+0x1290>
		}
		else {key.center = 0;}
 8006a6a:	4b3d      	ldr	r3, [pc, #244]	; (8006b60 <main+0x1380>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	711a      	strb	r2, [r3, #4]

		if (random == 'p'){
 8006a70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a74:	2b70      	cmp	r3, #112	; 0x70
 8006a76:	d10f      	bne.n	8006a98 <main+0x12b8>

			while(1){
				clrscr();
 8006a78:	f7fe f840 	bl	8004afc <clrscr>
				setFreq(0);
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f7fe fe67 	bl	8005750 <setFreq>
				random = uart_get_char();
 8006a82:	f7fa fb53 	bl	800112c <uart_get_char>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (random == 'P'){
 8006a8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a90:	2b50      	cmp	r3, #80	; 0x50
 8006a92:	d000      	beq.n	8006a96 <main+0x12b6>
				clrscr();
 8006a94:	e7f0      	b.n	8006a78 <main+0x1298>
					break;
 8006a96:	bf00      	nop
				}
			}
		}

		random = " ";
 8006a98:	4b34      	ldr	r3, [pc, #208]	; (8006b6c <main+0x138c>)
 8006a9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}


			if(ast1.px-7 < 91 && ast1.py >= SS.ud+24 && ast1.py <= SS.ud+34){
 8006a9e:	4b34      	ldr	r3, [pc, #208]	; (8006b70 <main+0x1390>)
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b21b      	sxth	r3, r3
 8006aa4:	2b61      	cmp	r3, #97	; 0x61
 8006aa6:	dc2d      	bgt.n	8006b04 <main+0x1324>
 8006aa8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006aac:	3317      	adds	r3, #23
 8006aae:	4a30      	ldr	r2, [pc, #192]	; (8006b70 <main+0x1390>)
 8006ab0:	8852      	ldrh	r2, [r2, #2]
 8006ab2:	b212      	sxth	r2, r2
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	da25      	bge.n	8006b04 <main+0x1324>
 8006ab8:	4b2d      	ldr	r3, [pc, #180]	; (8006b70 <main+0x1390>)
 8006aba:	885b      	ldrh	r3, [r3, #2]
 8006abc:	b21b      	sxth	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006ac4:	3322      	adds	r3, #34	; 0x22
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	dc1c      	bgt.n	8006b04 <main+0x1324>
			collision(a,b,SS.ud);
 8006aca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006ad2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006ad4:	f000 fa7e 	bl	8006fd4 <collision>
			tid.state = 1;
 8006ad8:	4b26      	ldr	r3, [pc, #152]	; (8006b74 <main+0x1394>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	70da      	strb	r2, [r3, #3]
			ast1.state = 1;
 8006ade:	4b24      	ldr	r3, [pc, #144]	; (8006b70 <main+0x1390>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	719a      	strb	r2, [r3, #6]
			b++;
 8006ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
			if(b>6) {
 8006aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aec:	2b06      	cmp	r3, #6
 8006aee:	dd01      	ble.n	8006af4 <main+0x1314>
				b = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
			a++;
 8006af4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006af6:	3301      	adds	r3, #1
 8006af8:	663b      	str	r3, [r7, #96]	; 0x60
			if(a>4) {
 8006afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	dd01      	ble.n	8006b04 <main+0x1324>
				a = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	663b      	str	r3, [r7, #96]	; 0x60

			//Debug a and B for Collision broke stuff stuff.
//			gotoxy(5,2);
//			printf("a:%d  b:%d",a,b);

		asteroidUpdate(SS.ud);
 8006b04:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fe f85d 	bl	8004bc8 <asteroidUpdate>
		copyJoystick();
 8006b0e:	f7fd fc03 	bl	8004318 <copyJoystick>

		if(Bup == 0 && Bdown == 0 && Bcanon == 0 && Bship1 == 0 && Bship2 == 0 && Bship3 == 0) {
 8006b12:	4b19      	ldr	r3, [pc, #100]	; (8006b78 <main+0x1398>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d116      	bne.n	8006b48 <main+0x1368>
 8006b1a:	4b12      	ldr	r3, [pc, #72]	; (8006b64 <main+0x1384>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d112      	bne.n	8006b48 <main+0x1368>
 8006b22:	4b16      	ldr	r3, [pc, #88]	; (8006b7c <main+0x139c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10e      	bne.n	8006b48 <main+0x1368>
 8006b2a:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <main+0x13a0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <main+0x1368>
 8006b32:	4b14      	ldr	r3, [pc, #80]	; (8006b84 <main+0x13a4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <main+0x1368>
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <main+0x13a8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <main+0x1368>
			tid.state = 0;
 8006b42:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <main+0x1394>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	70da      	strb	r2, [r3, #3]
		}
		writeLed();
 8006b48:	f7fd ff50 	bl	80049ec <writeLed>
		score += 10;
 8006b4c:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <main+0x13ac>)
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	330a      	adds	r3, #10
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <main+0x13ac>)
 8006b58:	801a      	strh	r2, [r3, #0]
	while(1){
 8006b5a:	f7fe becf 	b.w	80058fc <main+0x11c>
 8006b5e:	bf00      	nop
 8006b60:	200001f8 	.word	0x200001f8
 8006b64:	200001f4 	.word	0x200001f4
 8006b68:	200001f0 	.word	0x200001f0
 8006b6c:	08009708 	.word	0x08009708
 8006b70:	2000041c 	.word	0x2000041c
 8006b74:	20000418 	.word	0x20000418
 8006b78:	200001d0 	.word	0x200001d0
 8006b7c:	200001d8 	.word	0x200001d8
 8006b80:	200001cc 	.word	0x200001cc
 8006b84:	200001ec 	.word	0x200001ec
 8006b88:	200001d4 	.word	0x200001d4
 8006b8c:	200001dc 	.word	0x200001dc

08006b90 <menu>:
#include "ansi_S.h"
#include "joystick.h"
#include "LCD.h"

void menu(int *players, int *dif) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
	draw_main_menu();
 8006b9a:	f000 f9e5 	bl	8006f68 <draw_main_menu>
	int selection = 1;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
	int gameinit = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
	*players = 0;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]
	*dif = 0;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]

	while (gameinit == 0) {
 8006bb2:	e0ad      	b.n	8006d10 <menu+0x180>
		readJoystick();
 8006bb4:	f7fd fb5a 	bl	800426c <readJoystick>
		if (joy.up == 1) {
 8006bb8:	4b5c      	ldr	r3, [pc, #368]	; (8006d2c <menu+0x19c>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	b25b      	sxtb	r3, r3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d110      	bne.n	8006be4 <menu+0x54>
			while (joy.up == 1) {
 8006bc2:	e001      	b.n	8006bc8 <menu+0x38>
				readJoystick();
 8006bc4:	f7fd fb52 	bl	800426c <readJoystick>
			while (joy.up == 1) {
 8006bc8:	4b58      	ldr	r3, [pc, #352]	; (8006d2c <menu+0x19c>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d0f8      	beq.n	8006bc4 <menu+0x34>
			}
			if (selection > 1 && selection <= 4 ) {
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	dd05      	ble.n	8006be4 <menu+0x54>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	dc02      	bgt.n	8006be4 <menu+0x54>
				selection--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]
			}
		}

		if (joy.down == 1) {
 8006be4:	4b51      	ldr	r3, [pc, #324]	; (8006d2c <menu+0x19c>)
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	b25b      	sxtb	r3, r3
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d110      	bne.n	8006c10 <menu+0x80>
			while (joy.down == 1) {
 8006bee:	e001      	b.n	8006bf4 <menu+0x64>
				readJoystick();
 8006bf0:	f7fd fb3c 	bl	800426c <readJoystick>
			while (joy.down == 1) {
 8006bf4:	4b4d      	ldr	r3, [pc, #308]	; (8006d2c <menu+0x19c>)
 8006bf6:	785b      	ldrb	r3, [r3, #1]
 8006bf8:	b25b      	sxtb	r3, r3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d0f8      	beq.n	8006bf0 <menu+0x60>
			}
			if (selection >= 1 && selection < 4 ) {
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	dd05      	ble.n	8006c10 <menu+0x80>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	dc02      	bgt.n	8006c10 <menu+0x80>
				selection++;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	60fb      	str	r3, [r7, #12]
			}
		}
		if (selection == 1) {
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d11b      	bne.n	8006c4e <menu+0xbe>
			lcd_write_string("  ", 2, 1);
 8006c16:	2201      	movs	r2, #1
 8006c18:	2102      	movs	r1, #2
 8006c1a:	4845      	ldr	r0, [pc, #276]	; (8006d30 <menu+0x1a0>)
 8006c1c:	f7fd fba0 	bl	8004360 <lcd_write_string>
			lcd_write_string("->", 1, 1);
 8006c20:	2201      	movs	r2, #1
 8006c22:	2101      	movs	r1, #1
 8006c24:	4843      	ldr	r0, [pc, #268]	; (8006d34 <menu+0x1a4>)
 8006c26:	f7fd fb9b 	bl	8004360 <lcd_write_string>
			if (joy.center == 1) {
 8006c2a:	4b40      	ldr	r3, [pc, #256]	; (8006d2c <menu+0x19c>)
 8006c2c:	791b      	ldrb	r3, [r3, #4]
 8006c2e:	b25b      	sxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d10c      	bne.n	8006c4e <menu+0xbe>
				while (joy.center == 1) {
 8006c34:	e001      	b.n	8006c3a <menu+0xaa>
					readJoystick();
 8006c36:	f7fd fb19 	bl	800426c <readJoystick>
				while (joy.center == 1) {
 8006c3a:	4b3c      	ldr	r3, [pc, #240]	; (8006d2c <menu+0x19c>)
 8006c3c:	791b      	ldrb	r3, [r3, #4]
 8006c3e:	b25b      	sxtb	r3, r3
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d0f8      	beq.n	8006c36 <menu+0xa6>
				}
				*players = player_selection();
 8006c44:	f000 f87a 	bl	8006d3c <player_selection>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	601a      	str	r2, [r3, #0]
			}
		}
		if (selection == 2) {
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d120      	bne.n	8006c96 <menu+0x106>
			lcd_write_string("  ", 1, 1);
 8006c54:	2201      	movs	r2, #1
 8006c56:	2101      	movs	r1, #1
 8006c58:	4835      	ldr	r0, [pc, #212]	; (8006d30 <menu+0x1a0>)
 8006c5a:	f7fd fb81 	bl	8004360 <lcd_write_string>
			lcd_write_string("  ", 3, 1);
 8006c5e:	2201      	movs	r2, #1
 8006c60:	2103      	movs	r1, #3
 8006c62:	4833      	ldr	r0, [pc, #204]	; (8006d30 <menu+0x1a0>)
 8006c64:	f7fd fb7c 	bl	8004360 <lcd_write_string>
			lcd_write_string("->", 2, 1);
 8006c68:	2201      	movs	r2, #1
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	4831      	ldr	r0, [pc, #196]	; (8006d34 <menu+0x1a4>)
 8006c6e:	f7fd fb77 	bl	8004360 <lcd_write_string>
			if (joy.center == 1) {
 8006c72:	4b2e      	ldr	r3, [pc, #184]	; (8006d2c <menu+0x19c>)
 8006c74:	791b      	ldrb	r3, [r3, #4]
 8006c76:	b25b      	sxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d10c      	bne.n	8006c96 <menu+0x106>
				while (joy.center == 1) {
 8006c7c:	e001      	b.n	8006c82 <menu+0xf2>
					readJoystick();
 8006c7e:	f7fd faf5 	bl	800426c <readJoystick>
				while (joy.center == 1) {
 8006c82:	4b2a      	ldr	r3, [pc, #168]	; (8006d2c <menu+0x19c>)
 8006c84:	791b      	ldrb	r3, [r3, #4]
 8006c86:	b25b      	sxtb	r3, r3
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d0f8      	beq.n	8006c7e <menu+0xee>
				}
				*dif = difficulty();
 8006c8c:	f000 f8be 	bl	8006e0c <difficulty>
 8006c90:	4602      	mov	r2, r0
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	601a      	str	r2, [r3, #0]
			}
		}
		if (selection == 3) {
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d11d      	bne.n	8006cd8 <menu+0x148>
			lcd_write_string("  ", 2, 1);
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	2102      	movs	r1, #2
 8006ca0:	4823      	ldr	r0, [pc, #140]	; (8006d30 <menu+0x1a0>)
 8006ca2:	f7fd fb5d 	bl	8004360 <lcd_write_string>
			lcd_write_string("  ", 4, 1);
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	2104      	movs	r1, #4
 8006caa:	4821      	ldr	r0, [pc, #132]	; (8006d30 <menu+0x1a0>)
 8006cac:	f7fd fb58 	bl	8004360 <lcd_write_string>
			lcd_write_string("->", 3, 1);
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	2103      	movs	r1, #3
 8006cb4:	481f      	ldr	r0, [pc, #124]	; (8006d34 <menu+0x1a4>)
 8006cb6:	f7fd fb53 	bl	8004360 <lcd_write_string>
			if (joy.center == 1) {
 8006cba:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <menu+0x19c>)
 8006cbc:	791b      	ldrb	r3, [r3, #4]
 8006cbe:	b25b      	sxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d109      	bne.n	8006cd8 <menu+0x148>
				while (joy.center == 1) {
 8006cc4:	e001      	b.n	8006cca <menu+0x13a>
					readJoystick();
 8006cc6:	f7fd fad1 	bl	800426c <readJoystick>
				while (joy.center == 1) {
 8006cca:	4b18      	ldr	r3, [pc, #96]	; (8006d2c <menu+0x19c>)
 8006ccc:	791b      	ldrb	r3, [r3, #4]
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d0f8      	beq.n	8006cc6 <menu+0x136>
				}
				help_menu();
 8006cd4:	f000 f942 	bl	8006f5c <help_menu>
			}
		}
		if (selection == 4) {
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d118      	bne.n	8006d10 <menu+0x180>
			lcd_write_string("  ", 3, 1);
 8006cde:	2201      	movs	r2, #1
 8006ce0:	2103      	movs	r1, #3
 8006ce2:	4813      	ldr	r0, [pc, #76]	; (8006d30 <menu+0x1a0>)
 8006ce4:	f7fd fb3c 	bl	8004360 <lcd_write_string>
			lcd_write_string("->", 4, 1);
 8006ce8:	2201      	movs	r2, #1
 8006cea:	2104      	movs	r1, #4
 8006cec:	4811      	ldr	r0, [pc, #68]	; (8006d34 <menu+0x1a4>)
 8006cee:	f7fd fb37 	bl	8004360 <lcd_write_string>
			if (joy.center == 1) {
 8006cf2:	4b0e      	ldr	r3, [pc, #56]	; (8006d2c <menu+0x19c>)
 8006cf4:	791b      	ldrb	r3, [r3, #4]
 8006cf6:	b25b      	sxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d109      	bne.n	8006d10 <menu+0x180>
				while (joy.center == 1) {
 8006cfc:	e001      	b.n	8006d02 <menu+0x172>
					readJoystick();
 8006cfe:	f7fd fab5 	bl	800426c <readJoystick>
				while (joy.center == 1) {
 8006d02:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <menu+0x19c>)
 8006d04:	791b      	ldrb	r3, [r3, #4]
 8006d06:	b25b      	sxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d0f8      	beq.n	8006cfe <menu+0x16e>
				}
				gameinit = 1;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	60bb      	str	r3, [r7, #8]
	while (gameinit == 0) {
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f43f af4e 	beq.w	8006bb4 <menu+0x24>
			}

		}

	}
	memset(buffer, 0x00, 512);
 8006d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4806      	ldr	r0, [pc, #24]	; (8006d38 <menu+0x1a8>)
 8006d20:	f001 f9c4 	bl	80080ac <memset>
}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20000204 	.word	0x20000204
 8006d30:	0800970c 	.word	0x0800970c
 8006d34:	08009710 	.word	0x08009710
 8006d38:	20000214 	.word	0x20000214

08006d3c <player_selection>:

int player_selection() {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
	int x = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	607b      	str	r3, [r7, #4]
	int a;
	lcd_write_string("                   ", 1, 12);
 8006d46:	220c      	movs	r2, #12
 8006d48:	2101      	movs	r1, #1
 8006d4a:	4829      	ldr	r0, [pc, #164]	; (8006df0 <player_selection+0xb4>)
 8006d4c:	f7fd fb08 	bl	8004360 <lcd_write_string>
	while (x == 0) {
 8006d50:	e03e      	b.n	8006dd0 <player_selection+0x94>
		readJoystick();
 8006d52:	f7fd fa8b 	bl	800426c <readJoystick>

		if (joy.right == 1) {
 8006d56:	4b27      	ldr	r3, [pc, #156]	; (8006df4 <player_selection+0xb8>)
 8006d58:	78db      	ldrb	r3, [r3, #3]
 8006d5a:	b25b      	sxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d102      	bne.n	8006d66 <player_selection+0x2a>
			a = 1;
 8006d60:	2301      	movs	r3, #1
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	e006      	b.n	8006d74 <player_selection+0x38>
		} else if (joy.left == 1) {
 8006d66:	4b23      	ldr	r3, [pc, #140]	; (8006df4 <player_selection+0xb8>)
 8006d68:	789b      	ldrb	r3, [r3, #2]
 8006d6a:	b25b      	sxtb	r3, r3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <player_selection+0x38>
			a = 0;
 8006d70:	2300      	movs	r3, #0
 8006d72:	603b      	str	r3, [r7, #0]
		}
		if (a == 0) {
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d105      	bne.n	8006d86 <player_selection+0x4a>
			lcd_write_string("<1 Player>", 1, 12);
 8006d7a:	220c      	movs	r2, #12
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	481e      	ldr	r0, [pc, #120]	; (8006df8 <player_selection+0xbc>)
 8006d80:	f7fd faee 	bl	8004360 <lcd_write_string>
 8006d84:	e007      	b.n	8006d96 <player_selection+0x5a>
		} else if (a == 1) {
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d104      	bne.n	8006d96 <player_selection+0x5a>
			lcd_write_string("<2 Player>", 1, 12);
 8006d8c:	220c      	movs	r2, #12
 8006d8e:	2101      	movs	r1, #1
 8006d90:	481a      	ldr	r0, [pc, #104]	; (8006dfc <player_selection+0xc0>)
 8006d92:	f7fd fae5 	bl	8004360 <lcd_write_string>
		}
		if (joy.center == 1 ) {
 8006d96:	4b17      	ldr	r3, [pc, #92]	; (8006df4 <player_selection+0xb8>)
 8006d98:	791b      	ldrb	r3, [r3, #4]
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d117      	bne.n	8006dd0 <player_selection+0x94>
			lcd_write_string("Player Selection", 1, 12);
 8006da0:	220c      	movs	r2, #12
 8006da2:	2101      	movs	r1, #1
 8006da4:	4816      	ldr	r0, [pc, #88]	; (8006e00 <player_selection+0xc4>)
 8006da6:	f7fd fadb 	bl	8004360 <lcd_write_string>
			if (a == 0) {
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d105      	bne.n	8006dbc <player_selection+0x80>
				lcd_write_string("<P1>", 1, 108);
 8006db0:	226c      	movs	r2, #108	; 0x6c
 8006db2:	2101      	movs	r1, #1
 8006db4:	4813      	ldr	r0, [pc, #76]	; (8006e04 <player_selection+0xc8>)
 8006db6:	f7fd fad3 	bl	8004360 <lcd_write_string>
 8006dba:	e007      	b.n	8006dcc <player_selection+0x90>
			} else if (a == 1) {
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d104      	bne.n	8006dcc <player_selection+0x90>
				lcd_write_string("<P2>", 1, 108);
 8006dc2:	226c      	movs	r2, #108	; 0x6c
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	4810      	ldr	r0, [pc, #64]	; (8006e08 <player_selection+0xcc>)
 8006dc8:	f7fd faca 	bl	8004360 <lcd_write_string>
			}
			x = 1;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	607b      	str	r3, [r7, #4]
	while (x == 0) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0bd      	beq.n	8006d52 <player_selection+0x16>
		}
	}
	while (joy.center == 1 ) {
 8006dd6:	e001      	b.n	8006ddc <player_selection+0xa0>
		readJoystick();
 8006dd8:	f7fd fa48 	bl	800426c <readJoystick>
	while (joy.center == 1 ) {
 8006ddc:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <player_selection+0xb8>)
 8006dde:	791b      	ldrb	r3, [r3, #4]
 8006de0:	b25b      	sxtb	r3, r3
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d0f8      	beq.n	8006dd8 <player_selection+0x9c>
	}
	return a;
 8006de6:	683b      	ldr	r3, [r7, #0]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	08009714 	.word	0x08009714
 8006df4:	20000204 	.word	0x20000204
 8006df8:	08009728 	.word	0x08009728
 8006dfc:	08009734 	.word	0x08009734
 8006e00:	08009740 	.word	0x08009740
 8006e04:	08009754 	.word	0x08009754
 8006e08:	0800975c 	.word	0x0800975c

08006e0c <difficulty>:


int difficulty() {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
	int x = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	607b      	str	r3, [r7, #4]
	int a = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	603b      	str	r3, [r7, #0]
	lcd_write_string("                ", 2, 12);
 8006e1a:	220c      	movs	r2, #12
 8006e1c:	2102      	movs	r1, #2
 8006e1e:	4846      	ldr	r0, [pc, #280]	; (8006f38 <difficulty+0x12c>)
 8006e20:	f7fd fa9e 	bl	8004360 <lcd_write_string>
	lcd_write_string("<Easy>", 2, 12);
 8006e24:	220c      	movs	r2, #12
 8006e26:	2102      	movs	r1, #2
 8006e28:	4844      	ldr	r0, [pc, #272]	; (8006f3c <difficulty+0x130>)
 8006e2a:	f7fd fa99 	bl	8004360 <lcd_write_string>
	while (x == 0) {
 8006e2e:	e072      	b.n	8006f16 <difficulty+0x10a>
		readJoystick();
 8006e30:	f7fd fa1c 	bl	800426c <readJoystick>
		if (joy.right == 1 && a <= 1) {
 8006e34:	4b42      	ldr	r3, [pc, #264]	; (8006f40 <difficulty+0x134>)
 8006e36:	78db      	ldrb	r3, [r3, #3]
 8006e38:	b25b      	sxtb	r3, r3
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d10e      	bne.n	8006e5c <difficulty+0x50>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	dc0b      	bgt.n	8006e5c <difficulty+0x50>
			while (joy.right == 1) {
 8006e44:	e001      	b.n	8006e4a <difficulty+0x3e>
				readJoystick();
 8006e46:	f7fd fa11 	bl	800426c <readJoystick>
			while (joy.right == 1) {
 8006e4a:	4b3d      	ldr	r3, [pc, #244]	; (8006f40 <difficulty+0x134>)
 8006e4c:	78db      	ldrb	r3, [r3, #3]
 8006e4e:	b25b      	sxtb	r3, r3
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d0f8      	beq.n	8006e46 <difficulty+0x3a>
			}
			a++;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	3301      	adds	r3, #1
 8006e58:	603b      	str	r3, [r7, #0]
 8006e5a:	e012      	b.n	8006e82 <difficulty+0x76>
		} else if (joy.left == 1 && a >= 1) {
 8006e5c:	4b38      	ldr	r3, [pc, #224]	; (8006f40 <difficulty+0x134>)
 8006e5e:	789b      	ldrb	r3, [r3, #2]
 8006e60:	b25b      	sxtb	r3, r3
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d10d      	bne.n	8006e82 <difficulty+0x76>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	dd0a      	ble.n	8006e82 <difficulty+0x76>
			while (joy.left == 1) {
 8006e6c:	e001      	b.n	8006e72 <difficulty+0x66>
				readJoystick();
 8006e6e:	f7fd f9fd 	bl	800426c <readJoystick>
			while (joy.left == 1) {
 8006e72:	4b33      	ldr	r3, [pc, #204]	; (8006f40 <difficulty+0x134>)
 8006e74:	789b      	ldrb	r3, [r3, #2]
 8006e76:	b25b      	sxtb	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d0f8      	beq.n	8006e6e <difficulty+0x62>
			}
			a--;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	603b      	str	r3, [r7, #0]
		}
		if (a == 0 ) {
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <difficulty+0x92>
			lcd_write_string_no_push("        ", 2, 12);
 8006e88:	220c      	movs	r2, #12
 8006e8a:	2102      	movs	r1, #2
 8006e8c:	482d      	ldr	r0, [pc, #180]	; (8006f44 <difficulty+0x138>)
 8006e8e:	f7fd faf9 	bl	8004484 <lcd_write_string_no_push>
			lcd_write_string("<easy>", 2, 12);
 8006e92:	220c      	movs	r2, #12
 8006e94:	2102      	movs	r1, #2
 8006e96:	482c      	ldr	r0, [pc, #176]	; (8006f48 <difficulty+0x13c>)
 8006e98:	f7fd fa62 	bl	8004360 <lcd_write_string>
 8006e9c:	e015      	b.n	8006eca <difficulty+0xbe>
		} else if (a == 1 ) {
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d105      	bne.n	8006eb0 <difficulty+0xa4>
			lcd_write_string("<normal>", 2, 12);
 8006ea4:	220c      	movs	r2, #12
 8006ea6:	2102      	movs	r1, #2
 8006ea8:	4828      	ldr	r0, [pc, #160]	; (8006f4c <difficulty+0x140>)
 8006eaa:	f7fd fa59 	bl	8004360 <lcd_write_string>
 8006eae:	e00c      	b.n	8006eca <difficulty+0xbe>
		} else if (a == 2 ) {
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d109      	bne.n	8006eca <difficulty+0xbe>
			lcd_write_string_no_push("        ", 2, 12);
 8006eb6:	220c      	movs	r2, #12
 8006eb8:	2102      	movs	r1, #2
 8006eba:	4822      	ldr	r0, [pc, #136]	; (8006f44 <difficulty+0x138>)
 8006ebc:	f7fd fae2 	bl	8004484 <lcd_write_string_no_push>
			lcd_write_string("<hard>", 2, 12);
 8006ec0:	220c      	movs	r2, #12
 8006ec2:	2102      	movs	r1, #2
 8006ec4:	4822      	ldr	r0, [pc, #136]	; (8006f50 <difficulty+0x144>)
 8006ec6:	f7fd fa4b 	bl	8004360 <lcd_write_string>
		}
		if (joy.center == 1 ) {
 8006eca:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <difficulty+0x134>)
 8006ecc:	791b      	ldrb	r3, [r3, #4]
 8006ece:	b25b      	sxtb	r3, r3
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d120      	bne.n	8006f16 <difficulty+0x10a>
			lcd_write_string("Difficulty", 2, 12);
 8006ed4:	220c      	movs	r2, #12
 8006ed6:	2102      	movs	r1, #2
 8006ed8:	481e      	ldr	r0, [pc, #120]	; (8006f54 <difficulty+0x148>)
 8006eda:	f7fd fa41 	bl	8004360 <lcd_write_string>
			if (a == 0) {
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d105      	bne.n	8006ef0 <difficulty+0xe4>
				lcd_write_string("<easy>", 2, 98);
 8006ee4:	2262      	movs	r2, #98	; 0x62
 8006ee6:	2102      	movs	r1, #2
 8006ee8:	4817      	ldr	r0, [pc, #92]	; (8006f48 <difficulty+0x13c>)
 8006eea:	f7fd fa39 	bl	8004360 <lcd_write_string>
 8006eee:	e010      	b.n	8006f12 <difficulty+0x106>
			} else if (a == 1) {
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d105      	bne.n	8006f02 <difficulty+0xf6>
				lcd_write_string("<norm>", 2, 98);
 8006ef6:	2262      	movs	r2, #98	; 0x62
 8006ef8:	2102      	movs	r1, #2
 8006efa:	4817      	ldr	r0, [pc, #92]	; (8006f58 <difficulty+0x14c>)
 8006efc:	f7fd fa30 	bl	8004360 <lcd_write_string>
 8006f00:	e007      	b.n	8006f12 <difficulty+0x106>
			} else if (a == 2) {
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d104      	bne.n	8006f12 <difficulty+0x106>
				lcd_write_string("<hard>", 2, 98);
 8006f08:	2262      	movs	r2, #98	; 0x62
 8006f0a:	2102      	movs	r1, #2
 8006f0c:	4810      	ldr	r0, [pc, #64]	; (8006f50 <difficulty+0x144>)
 8006f0e:	f7fd fa27 	bl	8004360 <lcd_write_string>
			}
			x = 1;
 8006f12:	2301      	movs	r3, #1
 8006f14:	607b      	str	r3, [r7, #4]
	while (x == 0) {
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d089      	beq.n	8006e30 <difficulty+0x24>
		}
	}
	while (joy.center == 1 ) {
 8006f1c:	e001      	b.n	8006f22 <difficulty+0x116>
		readJoystick();
 8006f1e:	f7fd f9a5 	bl	800426c <readJoystick>
	while (joy.center == 1 ) {
 8006f22:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <difficulty+0x134>)
 8006f24:	791b      	ldrb	r3, [r3, #4]
 8006f26:	b25b      	sxtb	r3, r3
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d0f8      	beq.n	8006f1e <difficulty+0x112>
	}
	return a;
 8006f2c:	683b      	ldr	r3, [r7, #0]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	08009764 	.word	0x08009764
 8006f3c:	08009778 	.word	0x08009778
 8006f40:	20000204 	.word	0x20000204
 8006f44:	08009780 	.word	0x08009780
 8006f48:	0800978c 	.word	0x0800978c
 8006f4c:	08009794 	.word	0x08009794
 8006f50:	080097a0 	.word	0x080097a0
 8006f54:	080097a8 	.word	0x080097a8
 8006f58:	080097b4 	.word	0x080097b4

08006f5c <help_menu>:

void help_menu() {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
//	windowSmp(5,5,80,35);
//	gotoxy(10,7);
//	printf("Player 1 uses the joystick to move and center to shoot");
//	gotoxy(10,10);
//	printf("Player 2 uses WASD to move and E to shoot");
	helpScreen();
 8006f60:	f000 f920 	bl	80071a4 <helpScreen>
}
 8006f64:	bf00      	nop
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <draw_main_menu>:

void draw_main_menu() {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
	lcd_write_string("Player Selection", 1, 12);
 8006f6c:	220c      	movs	r2, #12
 8006f6e:	2101      	movs	r1, #1
 8006f70:	4811      	ldr	r0, [pc, #68]	; (8006fb8 <draw_main_menu+0x50>)
 8006f72:	f7fd f9f5 	bl	8004360 <lcd_write_string>
	lcd_write_string("<P1>", 1, 108);
 8006f76:	226c      	movs	r2, #108	; 0x6c
 8006f78:	2101      	movs	r1, #1
 8006f7a:	4810      	ldr	r0, [pc, #64]	; (8006fbc <draw_main_menu+0x54>)
 8006f7c:	f7fd f9f0 	bl	8004360 <lcd_write_string>
	lcd_write_string("Difficulty", 2, 12);
 8006f80:	220c      	movs	r2, #12
 8006f82:	2102      	movs	r1, #2
 8006f84:	480e      	ldr	r0, [pc, #56]	; (8006fc0 <draw_main_menu+0x58>)
 8006f86:	f7fd f9eb 	bl	8004360 <lcd_write_string>
	lcd_write_string("<easy>", 2, 98);
 8006f8a:	2262      	movs	r2, #98	; 0x62
 8006f8c:	2102      	movs	r1, #2
 8006f8e:	480d      	ldr	r0, [pc, #52]	; (8006fc4 <draw_main_menu+0x5c>)
 8006f90:	f7fd f9e6 	bl	8004360 <lcd_write_string>
	lcd_write_string("Help Menu", 3, 12);
 8006f94:	220c      	movs	r2, #12
 8006f96:	2103      	movs	r1, #3
 8006f98:	480b      	ldr	r0, [pc, #44]	; (8006fc8 <draw_main_menu+0x60>)
 8006f9a:	f7fd f9e1 	bl	8004360 <lcd_write_string>
	lcd_write_string("Start Game", 4, 12);
 8006f9e:	220c      	movs	r2, #12
 8006fa0:	2104      	movs	r1, #4
 8006fa2:	480a      	ldr	r0, [pc, #40]	; (8006fcc <draw_main_menu+0x64>)
 8006fa4:	f7fd f9dc 	bl	8004360 <lcd_write_string>
	lcd_write_string("->", 1, 1);
 8006fa8:	2201      	movs	r2, #1
 8006faa:	2101      	movs	r1, #1
 8006fac:	4808      	ldr	r0, [pc, #32]	; (8006fd0 <draw_main_menu+0x68>)
 8006fae:	f7fd f9d7 	bl	8004360 <lcd_write_string>
}
 8006fb2:	bf00      	nop
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	08009740 	.word	0x08009740
 8006fbc:	08009754 	.word	0x08009754
 8006fc0:	080097a8 	.word	0x080097a8
 8006fc4:	0800978c 	.word	0x0800978c
 8006fc8:	080097bc 	.word	0x080097bc
 8006fcc:	080097c8 	.word	0x080097c8
 8006fd0:	08009710 	.word	0x08009710

08006fd4 <collision>:
#include "ansi_S.h"

void collision(int a,int b,int SS) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]

switch (a) {
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d166      	bne.n	80070b4 <collision+0xe0>
		case 4:
			a=0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
			fgcolor(11);
 8006fea:	200b      	movs	r0, #11
 8006fec:	f7fd fd4e 	bl	8004a8c <fgcolor>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	2b05      	cmp	r3, #5
 8006ff6:	d850      	bhi.n	800709a <collision+0xc6>
 8006ff8:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <collision+0x2c>)
 8006ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffe:	bf00      	nop
 8007000:	08007019 	.word	0x08007019
 8007004:	0800702f 	.word	0x0800702f
 8007008:	08007045 	.word	0x08007045
 800700c:	0800705b 	.word	0x0800705b
 8007010:	08007071 	.word	0x08007071
 8007014:	08007087 	.word	0x08007087
			switch(b) {
			case 1:
				Broken(2,1,2,27+SS);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	331b      	adds	r3, #27
 800701c:	2202      	movs	r2, #2
 800701e:	2101      	movs	r1, #1
 8007020:	2002      	movs	r0, #2
 8007022:	f7fc fdef 	bl	8003c04 <Broken>
				if (Bup){
 8007026:	4b59      	ldr	r3, [pc, #356]	; (800718c <collision+0x1b8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d137      	bne.n	800709e <collision+0xca>
				break;
				}
			case 2:
				Broken(2,2,2,27+SS);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	331b      	adds	r3, #27
 8007032:	2202      	movs	r2, #2
 8007034:	2102      	movs	r1, #2
 8007036:	2002      	movs	r0, #2
 8007038:	f7fc fde4 	bl	8003c04 <Broken>
				if (Bdown){
 800703c:	4b54      	ldr	r3, [pc, #336]	; (8007190 <collision+0x1bc>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d12e      	bne.n	80070a2 <collision+0xce>
				break;
				}
			case 3:
				Broken(2,3,2,27+SS);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	331b      	adds	r3, #27
 8007048:	2202      	movs	r2, #2
 800704a:	2103      	movs	r1, #3
 800704c:	2002      	movs	r0, #2
 800704e:	f7fc fdd9 	bl	8003c04 <Broken>
				if (Bcanon){
 8007052:	4b50      	ldr	r3, [pc, #320]	; (8007194 <collision+0x1c0>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d125      	bne.n	80070a6 <collision+0xd2>
				break;
				}
			case 4:
				Broken(2,4,2,27+SS);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	331b      	adds	r3, #27
 800705e:	2202      	movs	r2, #2
 8007060:	2104      	movs	r1, #4
 8007062:	2002      	movs	r0, #2
 8007064:	f7fc fdce 	bl	8003c04 <Broken>
				if (Bship1) {
 8007068:	4b4b      	ldr	r3, [pc, #300]	; (8007198 <collision+0x1c4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d11c      	bne.n	80070aa <collision+0xd6>
				break;
				}
			case 5:
				Broken(2,5,2,27+SS);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	331b      	adds	r3, #27
 8007074:	2202      	movs	r2, #2
 8007076:	2105      	movs	r1, #5
 8007078:	2002      	movs	r0, #2
 800707a:	f7fc fdc3 	bl	8003c04 <Broken>
				if (Bship2) {
 800707e:	4b47      	ldr	r3, [pc, #284]	; (800719c <collision+0x1c8>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d113      	bne.n	80070ae <collision+0xda>
				break;
				}
			case 6:
				Broken(2,6,2,27+SS);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	331b      	adds	r3, #27
 800708a:	2202      	movs	r2, #2
 800708c:	2106      	movs	r1, #6
 800708e:	2002      	movs	r0, #2
 8007090:	f7fc fdb8 	bl	8003c04 <Broken>
				if (Bship3) {
 8007094:	4b42      	ldr	r3, [pc, #264]	; (80071a0 <collision+0x1cc>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
				break;
				}
			default: //timer - 10
				break;
 800709a:	bf00      	nop
 800709c:	e008      	b.n	80070b0 <collision+0xdc>
				break;
 800709e:	bf00      	nop
 80070a0:	e006      	b.n	80070b0 <collision+0xdc>
				break;
 80070a2:	bf00      	nop
 80070a4:	e004      	b.n	80070b0 <collision+0xdc>
				break;
 80070a6:	bf00      	nop
 80070a8:	e002      	b.n	80070b0 <collision+0xdc>
				break;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <collision+0xdc>
				break;
 80070ae:	bf00      	nop
			}
			resetbgcolor();
 80070b0:	f7fd fd1a 	bl	8004ae8 <resetbgcolor>
		default:
			a>4 ? a=0:a++;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	dd02      	ble.n	80070c0 <collision+0xec>
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	e002      	b.n	80070c6 <collision+0xf2>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	2b05      	cmp	r3, #5
 80070cc:	d84f      	bhi.n	800716e <collision+0x19a>
 80070ce:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <collision+0x100>)
 80070d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d4:	080070ed 	.word	0x080070ed
 80070d8:	08007103 	.word	0x08007103
 80070dc:	08007119 	.word	0x08007119
 80070e0:	0800712f 	.word	0x0800712f
 80070e4:	08007145 	.word	0x08007145
 80070e8:	0800715b 	.word	0x0800715b
			switch(b) {
				case 1:
					Broken(1,1,2,27+SS);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	331b      	adds	r3, #27
 80070f0:	2202      	movs	r2, #2
 80070f2:	2101      	movs	r1, #1
 80070f4:	2001      	movs	r0, #1
 80070f6:	f7fc fd85 	bl	8003c04 <Broken>
					if (Bup){
 80070fa:	4b24      	ldr	r3, [pc, #144]	; (800718c <collision+0x1b8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d137      	bne.n	8007172 <collision+0x19e>
					break;
					}
				case 2:
					Broken(1,2,2,27+SS);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	331b      	adds	r3, #27
 8007106:	2202      	movs	r2, #2
 8007108:	2102      	movs	r1, #2
 800710a:	2001      	movs	r0, #1
 800710c:	f7fc fd7a 	bl	8003c04 <Broken>
					if (Bdown){
 8007110:	4b1f      	ldr	r3, [pc, #124]	; (8007190 <collision+0x1bc>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d12e      	bne.n	8007176 <collision+0x1a2>
					break;
					}
				case 3:
					Broken(1,3,2,27+SS);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	331b      	adds	r3, #27
 800711c:	2202      	movs	r2, #2
 800711e:	2103      	movs	r1, #3
 8007120:	2001      	movs	r0, #1
 8007122:	f7fc fd6f 	bl	8003c04 <Broken>
					if (Bcanon){
 8007126:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <collision+0x1c0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d125      	bne.n	800717a <collision+0x1a6>
					break;
					}
				case 4:
					Broken(1,4,2,27+SS);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	331b      	adds	r3, #27
 8007132:	2202      	movs	r2, #2
 8007134:	2104      	movs	r1, #4
 8007136:	2001      	movs	r0, #1
 8007138:	f7fc fd64 	bl	8003c04 <Broken>
					if (Bship1) {
 800713c:	4b16      	ldr	r3, [pc, #88]	; (8007198 <collision+0x1c4>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d11c      	bne.n	800717e <collision+0x1aa>
					break;
					}
				case 5:
					Broken(1,5,2,27+SS);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	331b      	adds	r3, #27
 8007148:	2202      	movs	r2, #2
 800714a:	2105      	movs	r1, #5
 800714c:	2001      	movs	r0, #1
 800714e:	f7fc fd59 	bl	8003c04 <Broken>
					if (Bship2) {
 8007152:	4b12      	ldr	r3, [pc, #72]	; (800719c <collision+0x1c8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d113      	bne.n	8007182 <collision+0x1ae>
					break;
					}
				case 6:
					Broken(1,6,2,27+SS);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	331b      	adds	r3, #27
 800715e:	2202      	movs	r2, #2
 8007160:	2106      	movs	r1, #6
 8007162:	2001      	movs	r0, #1
 8007164:	f7fc fd4e 	bl	8003c04 <Broken>
					if (Bship3) {
 8007168:	4b0d      	ldr	r3, [pc, #52]	; (80071a0 <collision+0x1cc>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
					break;
					}
				default: //timer - 10
					break;
 800716e:	bf00      	nop
 8007170:	e008      	b.n	8007184 <collision+0x1b0>
					break;
 8007172:	bf00      	nop
 8007174:	e006      	b.n	8007184 <collision+0x1b0>
					break;
 8007176:	bf00      	nop
 8007178:	e004      	b.n	8007184 <collision+0x1b0>
					break;
 800717a:	bf00      	nop
 800717c:	e002      	b.n	8007184 <collision+0x1b0>
					break;
 800717e:	bf00      	nop
 8007180:	e000      	b.n	8007184 <collision+0x1b0>
					break;
 8007182:	bf00      	nop
				}
		}
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	200001d0 	.word	0x200001d0
 8007190:	200001f4 	.word	0x200001f4
 8007194:	200001d8 	.word	0x200001d8
 8007198:	200001cc 	.word	0x200001cc
 800719c:	200001ec 	.word	0x200001ec
 80071a0:	200001d4 	.word	0x200001d4

080071a4 <helpScreen>:
#include "LCD.h"

void helpScreen(){
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08c      	sub	sp, #48	; 0x30
 80071a8:	af02      	add	r7, sp, #8
	windowSmp(1,1,184,58);
 80071aa:	233a      	movs	r3, #58	; 0x3a
 80071ac:	22b8      	movs	r2, #184	; 0xb8
 80071ae:	2101      	movs	r1, #1
 80071b0:	2001      	movs	r0, #1
 80071b2:	f000 fead 	bl	8007f10 <windowSmp>
	spaceship(2,27,91,31);
 80071b6:	231f      	movs	r3, #31
 80071b8:	225b      	movs	r2, #91	; 0x5b
 80071ba:	211b      	movs	r1, #27
 80071bc:	2002      	movs	r0, #2
 80071be:	f7fa fcad 	bl	8001b1c <spaceship>

	playerInSpaceR(1,23,24);
 80071c2:	2218      	movs	r2, #24
 80071c4:	2117      	movs	r1, #23
 80071c6:	2001      	movs	r0, #1
 80071c8:	f7fb fa70 	bl	80026ac <playerInSpaceR>

	playerInShipL(2,37,28);
 80071cc:	221c      	movs	r2, #28
 80071ce:	2125      	movs	r1, #37	; 0x25
 80071d0:	2002      	movs	r0, #2
 80071d2:	f7fb f9d7 	bl	8002584 <playerInShipL>

	gotoxy(100,29);
 80071d6:	211d      	movs	r1, #29
 80071d8:	2064      	movs	r0, #100	; 0x64
 80071da:	f7fd fca7 	bl	8004b2c <gotoxy>
	for(int i=0; i<3;i++){
 80071de:	2300      	movs	r3, #0
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24
 80071e2:	e010      	b.n	8007206 <helpScreen+0x62>
		for (int j=0;j<3;j++){
 80071e4:	2300      	movs	r3, #0
 80071e6:	623b      	str	r3, [r7, #32]
 80071e8:	e007      	b.n	80071fa <helpScreen+0x56>
			printf("%c",176+i);
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	33b0      	adds	r3, #176	; 0xb0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 ff7c 	bl	80080ec <putchar>
		for (int j=0;j<3;j++){
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	3301      	adds	r3, #1
 80071f8:	623b      	str	r3, [r7, #32]
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	ddf4      	ble.n	80071ea <helpScreen+0x46>
	for(int i=0; i<3;i++){
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	3301      	adds	r3, #1
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	2b02      	cmp	r3, #2
 800720a:	ddeb      	ble.n	80071e4 <helpScreen+0x40>
		}
	}

	//Guide PLayer 1
	windowSmp(7,18,42,21);
 800720c:	2315      	movs	r3, #21
 800720e:	222a      	movs	r2, #42	; 0x2a
 8007210:	2112      	movs	r1, #18
 8007212:	2007      	movs	r0, #7
 8007214:	f000 fe7c 	bl	8007f10 <windowSmp>
	gotoxy(9,19);
 8007218:	2113      	movs	r1, #19
 800721a:	2009      	movs	r0, #9
 800721c:	f7fd fc86 	bl	8004b2c <gotoxy>
	printf("Player 1 Action: Center.");
 8007220:	48d4      	ldr	r0, [pc, #848]	; (8007574 <helpScreen+0x3d0>)
 8007222:	f000 ff4b 	bl	80080bc <iprintf>
	gotoxy(9,20);
 8007226:	2114      	movs	r1, #20
 8007228:	2009      	movs	r0, #9
 800722a:	f7fd fc7f 	bl	8004b2c <gotoxy>
	printf("Joystick: Up, Down, Left, Right.");
 800722e:	48d2      	ldr	r0, [pc, #840]	; (8007578 <helpScreen+0x3d4>)
 8007230:	f000 ff44 	bl	80080bc <iprintf>

	for (int i = 0; i<2;i++){
 8007234:	2300      	movs	r3, #0
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	e00b      	b.n	8007252 <helpScreen+0xae>
		gotoxy(24,21+i);
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	3315      	adds	r3, #21
 800723e:	4619      	mov	r1, r3
 8007240:	2018      	movs	r0, #24
 8007242:	f7fd fc73 	bl	8004b2c <gotoxy>
		printf("%c",179);
 8007246:	20b3      	movs	r0, #179	; 0xb3
 8007248:	f000 ff50 	bl	80080ec <putchar>
	for (int i = 0; i<2;i++){
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	3301      	adds	r3, #1
 8007250:	61fb      	str	r3, [r7, #28]
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	2b01      	cmp	r3, #1
 8007256:	ddf0      	ble.n	800723a <helpScreen+0x96>
	}
	gotoxy(24,21);
 8007258:	2115      	movs	r1, #21
 800725a:	2018      	movs	r0, #24
 800725c:	f7fd fc66 	bl	8004b2c <gotoxy>
	printf("%c",194);
 8007260:	20c2      	movs	r0, #194	; 0xc2
 8007262:	f000 ff43 	bl	80080ec <putchar>


	// Guide Player 2
	windowSmp(34,33,58,36);
 8007266:	2324      	movs	r3, #36	; 0x24
 8007268:	223a      	movs	r2, #58	; 0x3a
 800726a:	2121      	movs	r1, #33	; 0x21
 800726c:	2022      	movs	r0, #34	; 0x22
 800726e:	f000 fe4f 	bl	8007f10 <windowSmp>
	gotoxy(36,34);
 8007272:	2122      	movs	r1, #34	; 0x22
 8007274:	2024      	movs	r0, #36	; 0x24
 8007276:	f7fd fc59 	bl	8004b2c <gotoxy>
	printf("Player 2 Action: E.");
 800727a:	48c0      	ldr	r0, [pc, #768]	; (800757c <helpScreen+0x3d8>)
 800727c:	f000 ff1e 	bl	80080bc <iprintf>
	gotoxy(36,35);
 8007280:	2123      	movs	r1, #35	; 0x23
 8007282:	2024      	movs	r0, #36	; 0x24
 8007284:	f7fd fc52 	bl	8004b2c <gotoxy>
	printf("Keyboard: W, A, S, D.");
 8007288:	48bd      	ldr	r0, [pc, #756]	; (8007580 <helpScreen+0x3dc>)
 800728a:	f000 ff17 	bl	80080bc <iprintf>

	for (int i = 0; i<2;i++){
 800728e:	2300      	movs	r3, #0
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	e00b      	b.n	80072ac <helpScreen+0x108>
		gotoxy(38,31+i);
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	331f      	adds	r3, #31
 8007298:	4619      	mov	r1, r3
 800729a:	2026      	movs	r0, #38	; 0x26
 800729c:	f7fd fc46 	bl	8004b2c <gotoxy>
		printf("%c",179);
 80072a0:	20b3      	movs	r0, #179	; 0xb3
 80072a2:	f000 ff23 	bl	80080ec <putchar>
	for (int i = 0; i<2;i++){
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	3301      	adds	r3, #1
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	ddf0      	ble.n	8007294 <helpScreen+0xf0>
	}
	gotoxy(38,33);
 80072b2:	2121      	movs	r1, #33	; 0x21
 80072b4:	2026      	movs	r0, #38	; 0x26
 80072b6:	f7fd fc39 	bl	8004b2c <gotoxy>
	printf("%c",193);
 80072ba:	20c1      	movs	r0, #193	; 0xc1
 80072bc:	f000 ff16 	bl	80080ec <putchar>


	//Up & down controll
	for (int i = 0; i<3;i++){
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	e00b      	b.n	80072de <helpScreen+0x13a>
		gotoxy(28,28+i);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	331c      	adds	r3, #28
 80072ca:	4619      	mov	r1, r3
 80072cc:	201c      	movs	r0, #28
 80072ce:	f7fd fc2d 	bl	8004b2c <gotoxy>
		printf("%c",179);
 80072d2:	20b3      	movs	r0, #179	; 0xb3
 80072d4:	f000 ff0a 	bl	80080ec <putchar>
	for (int i = 0; i<3;i++){
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	3301      	adds	r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	ddf0      	ble.n	80072c6 <helpScreen+0x122>
	}

	gotoxy(25,29);
 80072e4:	211d      	movs	r1, #29
 80072e6:	2019      	movs	r0, #25
 80072e8:	f7fd fc20 	bl	8004b2c <gotoxy>
	printf("%c%c%c%c",218,196,196,180);
 80072ec:	23b4      	movs	r3, #180	; 0xb4
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	23c4      	movs	r3, #196	; 0xc4
 80072f2:	22c4      	movs	r2, #196	; 0xc4
 80072f4:	21da      	movs	r1, #218	; 0xda
 80072f6:	48a3      	ldr	r0, [pc, #652]	; (8007584 <helpScreen+0x3e0>)
 80072f8:	f000 fee0 	bl	80080bc <iprintf>

	for (int i = 0; i<7;i++){
 80072fc:	2300      	movs	r3, #0
 80072fe:	613b      	str	r3, [r7, #16]
 8007300:	e00b      	b.n	800731a <helpScreen+0x176>
		gotoxy(25,30+i);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	331e      	adds	r3, #30
 8007306:	4619      	mov	r1, r3
 8007308:	2019      	movs	r0, #25
 800730a:	f7fd fc0f 	bl	8004b2c <gotoxy>
		printf("%c",179);
 800730e:	20b3      	movs	r0, #179	; 0xb3
 8007310:	f000 feec 	bl	80080ec <putchar>
	for (int i = 0; i<7;i++){
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	3301      	adds	r3, #1
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b06      	cmp	r3, #6
 800731e:	ddf0      	ble.n	8007302 <helpScreen+0x15e>
	}

	windowSmp(3,37,41,40);
 8007320:	2328      	movs	r3, #40	; 0x28
 8007322:	2229      	movs	r2, #41	; 0x29
 8007324:	2125      	movs	r1, #37	; 0x25
 8007326:	2003      	movs	r0, #3
 8007328:	f000 fdf2 	bl	8007f10 <windowSmp>
	gotoxy(5,38);
 800732c:	2126      	movs	r1, #38	; 0x26
 800732e:	2005      	movs	r0, #5
 8007330:	f7fd fbfc 	bl	8004b2c <gotoxy>
	printf("UP: Move ontop and press Up or W.");
 8007334:	4894      	ldr	r0, [pc, #592]	; (8007588 <helpScreen+0x3e4>)
 8007336:	f000 fec1 	bl	80080bc <iprintf>
	gotoxy(5,39);
 800733a:	2127      	movs	r1, #39	; 0x27
 800733c:	2005      	movs	r0, #5
 800733e:	f7fd fbf5 	bl	8004b2c <gotoxy>
	printf("Down: Move under and press Up or W.");
 8007342:	4892      	ldr	r0, [pc, #584]	; (800758c <helpScreen+0x3e8>)
 8007344:	f000 feba 	bl	80080bc <iprintf>

	gotoxy(25,37);
 8007348:	2125      	movs	r1, #37	; 0x25
 800734a:	2019      	movs	r0, #25
 800734c:	f7fd fbee 	bl	8004b2c <gotoxy>
	printf("%c",193);
 8007350:	20c1      	movs	r0, #193	; 0xc1
 8007352:	f000 fecb 	bl	80080ec <putchar>


	// Hatches
	for (int i = 0; i<3;i++){
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	e00b      	b.n	8007374 <helpScreen+0x1d0>
		gotoxy(54,28+i);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	331c      	adds	r3, #28
 8007360:	4619      	mov	r1, r3
 8007362:	2036      	movs	r0, #54	; 0x36
 8007364:	f7fd fbe2 	bl	8004b2c <gotoxy>
		printf("%c",179);
 8007368:	20b3      	movs	r0, #179	; 0xb3
 800736a:	f000 febf 	bl	80080ec <putchar>
	for (int i = 0; i<3;i++){
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b02      	cmp	r3, #2
 8007378:	ddf0      	ble.n	800735c <helpScreen+0x1b8>
	}
	gotoxy(54,29);
 800737a:	211d      	movs	r1, #29
 800737c:	2036      	movs	r0, #54	; 0x36
 800737e:	f7fd fbd5 	bl	8004b2c <gotoxy>
	printf("%c%c%c%c",195,196,196,217);
 8007382:	23d9      	movs	r3, #217	; 0xd9
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	23c4      	movs	r3, #196	; 0xc4
 8007388:	22c4      	movs	r2, #196	; 0xc4
 800738a:	21c3      	movs	r1, #195	; 0xc3
 800738c:	487d      	ldr	r0, [pc, #500]	; (8007584 <helpScreen+0x3e0>)
 800738e:	f000 fe95 	bl	80080bc <iprintf>
	for (int i = 0; i<3;i++){
 8007392:	2300      	movs	r3, #0
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	e00b      	b.n	80073b0 <helpScreen+0x20c>
		gotoxy(57,26+i);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	331a      	adds	r3, #26
 800739c:	4619      	mov	r1, r3
 800739e:	2039      	movs	r0, #57	; 0x39
 80073a0:	f7fd fbc4 	bl	8004b2c <gotoxy>
		printf("%c",179);
 80073a4:	20b3      	movs	r0, #179	; 0xb3
 80073a6:	f000 fea1 	bl	80080ec <putchar>
	for (int i = 0; i<3;i++){
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	3301      	adds	r3, #1
 80073ae:	60bb      	str	r3, [r7, #8]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	ddf0      	ble.n	8007398 <helpScreen+0x1f4>
	}

	windowSmp(43,20,74,25);
 80073b6:	2319      	movs	r3, #25
 80073b8:	224a      	movs	r2, #74	; 0x4a
 80073ba:	2114      	movs	r1, #20
 80073bc:	202b      	movs	r0, #43	; 0x2b
 80073be:	f000 fda7 	bl	8007f10 <windowSmp>
	gotoxy(45,21);
 80073c2:	2115      	movs	r1, #21
 80073c4:	202d      	movs	r0, #45	; 0x2d
 80073c6:	f7fd fbb1 	bl	8004b2c <gotoxy>
	printf("Up or W: Move to top deck.");
 80073ca:	4871      	ldr	r0, [pc, #452]	; (8007590 <helpScreen+0x3ec>)
 80073cc:	f000 fe76 	bl	80080bc <iprintf>
	gotoxy(45,22);
 80073d0:	2116      	movs	r1, #22
 80073d2:	202d      	movs	r0, #45	; 0x2d
 80073d4:	f7fd fbaa 	bl	8004b2c <gotoxy>
	printf("Down or S: Move to sub deck.");
 80073d8:	486e      	ldr	r0, [pc, #440]	; (8007594 <helpScreen+0x3f0>)
 80073da:	f000 fe6f 	bl	80080bc <iprintf>
	gotoxy(45,23);
 80073de:	2117      	movs	r1, #23
 80073e0:	202d      	movs	r0, #45	; 0x2d
 80073e2:	f7fd fba3 	bl	8004b2c <gotoxy>
	printf("To go back into middle deck,");
 80073e6:	486c      	ldr	r0, [pc, #432]	; (8007598 <helpScreen+0x3f4>)
 80073e8:	f000 fe68 	bl	80080bc <iprintf>
	gotoxy(45,24);
 80073ec:	2118      	movs	r1, #24
 80073ee:	202d      	movs	r0, #45	; 0x2d
 80073f0:	f7fd fb9c 	bl	8004b2c <gotoxy>
	printf("Use down or S.");
 80073f4:	4869      	ldr	r0, [pc, #420]	; (800759c <helpScreen+0x3f8>)
 80073f6:	f000 fe61 	bl	80080bc <iprintf>


	// Canon
	gotoxy(80,29);
 80073fa:	211d      	movs	r1, #29
 80073fc:	2050      	movs	r0, #80	; 0x50
 80073fe:	f7fd fb95 	bl	8004b2c <gotoxy>
	printf("%c%c%c",218,196,196);
 8007402:	23c4      	movs	r3, #196	; 0xc4
 8007404:	22c4      	movs	r2, #196	; 0xc4
 8007406:	21da      	movs	r1, #218	; 0xda
 8007408:	4865      	ldr	r0, [pc, #404]	; (80075a0 <helpScreen+0x3fc>)
 800740a:	f000 fe57 	bl	80080bc <iprintf>

	for (int i = 0; i<3;i++){
 800740e:	2300      	movs	r3, #0
 8007410:	607b      	str	r3, [r7, #4]
 8007412:	e00b      	b.n	800742c <helpScreen+0x288>
		gotoxy(80,30+i);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	331e      	adds	r3, #30
 8007418:	4619      	mov	r1, r3
 800741a:	2050      	movs	r0, #80	; 0x50
 800741c:	f7fd fb86 	bl	8004b2c <gotoxy>
		printf("%c",179);
 8007420:	20b3      	movs	r0, #179	; 0xb3
 8007422:	f000 fe63 	bl	80080ec <putchar>
	for (int i = 0; i<3;i++){
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3301      	adds	r3, #1
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b02      	cmp	r3, #2
 8007430:	ddf0      	ble.n	8007414 <helpScreen+0x270>
	}

	windowSmp(62,33,90,36);
 8007432:	2324      	movs	r3, #36	; 0x24
 8007434:	225a      	movs	r2, #90	; 0x5a
 8007436:	2121      	movs	r1, #33	; 0x21
 8007438:	203e      	movs	r0, #62	; 0x3e
 800743a:	f000 fd69 	bl	8007f10 <windowSmp>

	gotoxy(64,34);
 800743e:	2122      	movs	r1, #34	; 0x22
 8007440:	2040      	movs	r0, #64	; 0x40
 8007442:	f7fd fb73 	bl	8004b2c <gotoxy>
	printf("Walk up to the canon,");
 8007446:	4857      	ldr	r0, [pc, #348]	; (80075a4 <helpScreen+0x400>)
 8007448:	f000 fe38 	bl	80080bc <iprintf>
	gotoxy(64,35);
 800744c:	2123      	movs	r1, #35	; 0x23
 800744e:	2040      	movs	r0, #64	; 0x40
 8007450:	f7fd fb6c 	bl	8004b2c <gotoxy>
	printf("Use Right or D to shoot.");
 8007454:	4854      	ldr	r0, [pc, #336]	; (80075a8 <helpScreen+0x404>)
 8007456:	f000 fe31 	bl	80080bc <iprintf>

	gotoxy(80,33);
 800745a:	2121      	movs	r1, #33	; 0x21
 800745c:	2050      	movs	r0, #80	; 0x50
 800745e:	f7fd fb65 	bl	8004b2c <gotoxy>
	printf("%c",193);
 8007462:	20c1      	movs	r0, #193	; 0xc1
 8007464:	f000 fe42 	bl	80080ec <putchar>


	//Astroid
	drawAsteroidSmall(170,15);
 8007468:	210f      	movs	r1, #15
 800746a:	20aa      	movs	r0, #170	; 0xaa
 800746c:	f7fd fd94 	bl	8004f98 <drawAsteroidSmall>

	for (int i = 0; i<3;i++){
 8007470:	2300      	movs	r3, #0
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	e00b      	b.n	800748e <helpScreen+0x2ea>
		gotoxy(162,16+i);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	3310      	adds	r3, #16
 800747a:	4619      	mov	r1, r3
 800747c:	20a2      	movs	r0, #162	; 0xa2
 800747e:	f7fd fb55 	bl	8004b2c <gotoxy>
		printf("%c",179);
 8007482:	20b3      	movs	r0, #179	; 0xb3
 8007484:	f000 fe32 	bl	80080ec <putchar>
	for (int i = 0; i<3;i++){
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	3301      	adds	r3, #1
 800748c:	603b      	str	r3, [r7, #0]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b02      	cmp	r3, #2
 8007492:	ddf0      	ble.n	8007476 <helpScreen+0x2d2>
	}

	gotoxy(162,15);
 8007494:	210f      	movs	r1, #15
 8007496:	20a2      	movs	r0, #162	; 0xa2
 8007498:	f7fd fb48 	bl	8004b2c <gotoxy>
	printf("%c%c%c",218,196,196);
 800749c:	23c4      	movs	r3, #196	; 0xc4
 800749e:	22c4      	movs	r2, #196	; 0xc4
 80074a0:	21da      	movs	r1, #218	; 0xda
 80074a2:	483f      	ldr	r0, [pc, #252]	; (80075a0 <helpScreen+0x3fc>)
 80074a4:	f000 fe0a 	bl	80080bc <iprintf>

	windowSmp(142,18,182,23);
 80074a8:	2317      	movs	r3, #23
 80074aa:	22b6      	movs	r2, #182	; 0xb6
 80074ac:	2112      	movs	r1, #18
 80074ae:	208e      	movs	r0, #142	; 0x8e
 80074b0:	f000 fd2e 	bl	8007f10 <windowSmp>

	gotoxy(162,18);
 80074b4:	2112      	movs	r1, #18
 80074b6:	20a2      	movs	r0, #162	; 0xa2
 80074b8:	f7fd fb38 	bl	8004b2c <gotoxy>
	printf("%c",193);
 80074bc:	20c1      	movs	r0, #193	; 0xc1
 80074be:	f000 fe15 	bl	80080ec <putchar>

	gotoxy(144,19);
 80074c2:	2113      	movs	r1, #19
 80074c4:	2090      	movs	r0, #144	; 0x90
 80074c6:	f7fd fb31 	bl	8004b2c <gotoxy>
	printf("The Astroids will come from the right");
 80074ca:	4838      	ldr	r0, [pc, #224]	; (80075ac <helpScreen+0x408>)
 80074cc:	f000 fdf6 	bl	80080bc <iprintf>
	gotoxy(144,20);
 80074d0:	2114      	movs	r1, #20
 80074d2:	2090      	movs	r0, #144	; 0x90
 80074d4:	f7fd fb2a 	bl	8004b2c <gotoxy>
	printf("Your ship's mass will attract!");
 80074d8:	4835      	ldr	r0, [pc, #212]	; (80075b0 <helpScreen+0x40c>)
 80074da:	f000 fdef 	bl	80080bc <iprintf>
	gotoxy(144,21);
 80074de:	2115      	movs	r1, #21
 80074e0:	2090      	movs	r0, #144	; 0x90
 80074e2:	f7fd fb23 	bl	8004b2c <gotoxy>
	printf("Either perform evasive maneuvers!");
 80074e6:	4833      	ldr	r0, [pc, #204]	; (80075b4 <helpScreen+0x410>)
 80074e8:	f000 fde8 	bl	80080bc <iprintf>
	gotoxy(144,22);
 80074ec:	2116      	movs	r1, #22
 80074ee:	2090      	movs	r0, #144	; 0x90
 80074f0:	f7fd fb1c 	bl	8004b2c <gotoxy>
	printf("Or use the canon to shoot them.");
 80074f4:	4830      	ldr	r0, [pc, #192]	; (80075b8 <helpScreen+0x414>)
 80074f6:	f000 fde1 	bl	80080bc <iprintf>


	//Timer
	windowSmp(141,2,183,4);
 80074fa:	2304      	movs	r3, #4
 80074fc:	22b7      	movs	r2, #183	; 0xb7
 80074fe:	2102      	movs	r1, #2
 8007500:	208d      	movs	r0, #141	; 0x8d
 8007502:	f000 fd05 	bl	8007f10 <windowSmp>
	drawTime();
 8007506:	f000 fb4d 	bl	8007ba4 <drawTime>

	gotoxy(162,5);
 800750a:	2105      	movs	r1, #5
 800750c:	20a2      	movs	r0, #162	; 0xa2
 800750e:	f7fd fb0d 	bl	8004b2c <gotoxy>
	printf("%c",179);
 8007512:	20b3      	movs	r0, #179	; 0xb3
 8007514:	f000 fdea 	bl	80080ec <putchar>

	windowSmp(142,6,182,11);
 8007518:	230b      	movs	r3, #11
 800751a:	22b6      	movs	r2, #182	; 0xb6
 800751c:	2106      	movs	r1, #6
 800751e:	208e      	movs	r0, #142	; 0x8e
 8007520:	f000 fcf6 	bl	8007f10 <windowSmp>

	gotoxy(144,7);
 8007524:	2107      	movs	r1, #7
 8007526:	2090      	movs	r0, #144	; 0x90
 8007528:	f7fd fb00 	bl	8004b2c <gotoxy>
	printf("Health is indicated by a timer.");
 800752c:	4823      	ldr	r0, [pc, #140]	; (80075bc <helpScreen+0x418>)
 800752e:	f000 fdc5 	bl	80080bc <iprintf>
	gotoxy(144,8);
 8007532:	2108      	movs	r1, #8
 8007534:	2090      	movs	r0, #144	; 0x90
 8007536:	f7fd faf9 	bl	8004b2c <gotoxy>
	printf("When damaged, countdown will begin.");
 800753a:	4821      	ldr	r0, [pc, #132]	; (80075c0 <helpScreen+0x41c>)
 800753c:	f000 fdbe 	bl	80080bc <iprintf>
	gotoxy(144,9);
 8007540:	2109      	movs	r1, #9
 8007542:	2090      	movs	r0, #144	; 0x90
 8007544:	f7fd faf2 	bl	8004b2c <gotoxy>
	printf("This will indicate how much time you");
 8007548:	481e      	ldr	r0, [pc, #120]	; (80075c4 <helpScreen+0x420>)
 800754a:	f000 fdb7 	bl	80080bc <iprintf>
	gotoxy(144,10);
 800754e:	210a      	movs	r1, #10
 8007550:	2090      	movs	r0, #144	; 0x90
 8007552:	f7fd faeb 	bl	8004b2c <gotoxy>
	printf("Have to fix the damage, Better hurry!");
 8007556:	481c      	ldr	r0, [pc, #112]	; (80075c8 <helpScreen+0x424>)
 8007558:	f000 fdb0 	bl	80080bc <iprintf>

	gotoxy(162,6);
 800755c:	2106      	movs	r1, #6
 800755e:	20a2      	movs	r0, #162	; 0xa2
 8007560:	f7fd fae4 	bl	8004b2c <gotoxy>
	printf("%c",193);
 8007564:	20c1      	movs	r0, #193	; 0xc1
 8007566:	f000 fdc1 	bl	80080ec <putchar>
}
 800756a:	bf00      	nop
 800756c:	3728      	adds	r7, #40	; 0x28
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	080097d4 	.word	0x080097d4
 8007578:	080097f0 	.word	0x080097f0
 800757c:	08009814 	.word	0x08009814
 8007580:	08009828 	.word	0x08009828
 8007584:	08009840 	.word	0x08009840
 8007588:	0800984c 	.word	0x0800984c
 800758c:	08009870 	.word	0x08009870
 8007590:	08009894 	.word	0x08009894
 8007594:	080098b0 	.word	0x080098b0
 8007598:	080098d0 	.word	0x080098d0
 800759c:	080098f0 	.word	0x080098f0
 80075a0:	08009900 	.word	0x08009900
 80075a4:	08009908 	.word	0x08009908
 80075a8:	08009920 	.word	0x08009920
 80075ac:	0800993c 	.word	0x0800993c
 80075b0:	08009964 	.word	0x08009964
 80075b4:	08009984 	.word	0x08009984
 80075b8:	080099a8 	.word	0x080099a8
 80075bc:	080099c8 	.word	0x080099c8
 80075c0:	080099e8 	.word	0x080099e8
 80075c4:	08009a0c 	.word	0x08009a0c
 80075c8:	08009a34 	.word	0x08009a34

080075cc <GameOver>:

void GameOver(){
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
	uint16_t x = score;
 80075d2:	4b10      	ldr	r3, [pc, #64]	; (8007614 <GameOver+0x48>)
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	80fb      	strh	r3, [r7, #6]
	clrscr();
 80075d8:	f7fd fa90 	bl	8004afc <clrscr>
	windowSmp(1,1,184,58);
 80075dc:	233a      	movs	r3, #58	; 0x3a
 80075de:	22b8      	movs	r2, #184	; 0xb8
 80075e0:	2101      	movs	r1, #1
 80075e2:	2001      	movs	r0, #1
 80075e4:	f000 fc94 	bl	8007f10 <windowSmp>
	DrawGO();
 80075e8:	f000 f81a 	bl	8007620 <DrawGO>

	gotoxy(72,20);
 80075ec:	2114      	movs	r1, #20
 80075ee:	2048      	movs	r0, #72	; 0x48
 80075f0:	f7fd fa9c 	bl	8004b2c <gotoxy>
	printf("Your(s) Score was: %05d",x);
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	4619      	mov	r1, r3
 80075f8:	4807      	ldr	r0, [pc, #28]	; (8007618 <GameOver+0x4c>)
 80075fa:	f000 fd5f 	bl	80080bc <iprintf>
	gotoxy(72,21);
 80075fe:	2115      	movs	r1, #21
 8007600:	2048      	movs	r0, #72	; 0x48
 8007602:	f7fd fa93 	bl	8004b2c <gotoxy>
	printf("A new personal Best.");
 8007606:	4805      	ldr	r0, [pc, #20]	; (800761c <GameOver+0x50>)
 8007608:	f000 fd58 	bl	80080bc <iprintf>

}
 800760c:	bf00      	nop
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	200001dc 	.word	0x200001dc
 8007618:	08009a5c 	.word	0x08009a5c
 800761c:	08009a74 	.word	0x08009a74

08007620 <DrawGO>:

void DrawGO(){
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
gotoxy(46,5);	printf("  /$$$$$$                                           /$$$$$$                               	");
 8007624:	2105      	movs	r1, #5
 8007626:	202e      	movs	r0, #46	; 0x2e
 8007628:	f7fd fa80 	bl	8004b2c <gotoxy>
 800762c:	481a      	ldr	r0, [pc, #104]	; (8007698 <DrawGO+0x78>)
 800762e:	f000 fd45 	bl	80080bc <iprintf>
gotoxy(46,6);	printf(" /$$__  $$                                         /$$__  $$                              	");
 8007632:	2106      	movs	r1, #6
 8007634:	202e      	movs	r0, #46	; 0x2e
 8007636:	f7fd fa79 	bl	8004b2c <gotoxy>
 800763a:	4818      	ldr	r0, [pc, #96]	; (800769c <DrawGO+0x7c>)
 800763c:	f000 fd3e 	bl	80080bc <iprintf>
gotoxy(46,7);	printf("| $$  \\__/  /$$$$$$  /$$$$$$/$$$$   /$$$$$$       | $$  \\ $$ /$$    /$$ /$$$$$$   /$$$$$$ 	");
 8007640:	2107      	movs	r1, #7
 8007642:	202e      	movs	r0, #46	; 0x2e
 8007644:	f7fd fa72 	bl	8004b2c <gotoxy>
 8007648:	4815      	ldr	r0, [pc, #84]	; (80076a0 <DrawGO+0x80>)
 800764a:	f000 fd37 	bl	80080bc <iprintf>
gotoxy(46,8);	printf("| $$ /$$$$ |____  $$| $$_  $$_  $$ /$$__  $$      | $$  | $$|  $$  /$$//$$__  $$ /$$__  $$	");
 800764e:	2108      	movs	r1, #8
 8007650:	202e      	movs	r0, #46	; 0x2e
 8007652:	f7fd fa6b 	bl	8004b2c <gotoxy>
 8007656:	4813      	ldr	r0, [pc, #76]	; (80076a4 <DrawGO+0x84>)
 8007658:	f000 fd30 	bl	80080bc <iprintf>
gotoxy(46,9);	printf("| $$|_  $$  /$$$$$$$| $$ \\ $$ \\ $$| $$$$$$$$      | $$  | $$ \\  $$/$$/| $$$$$$$$| $$  \\__/	");
 800765c:	2109      	movs	r1, #9
 800765e:	202e      	movs	r0, #46	; 0x2e
 8007660:	f7fd fa64 	bl	8004b2c <gotoxy>
 8007664:	4810      	ldr	r0, [pc, #64]	; (80076a8 <DrawGO+0x88>)
 8007666:	f000 fd29 	bl	80080bc <iprintf>
gotoxy(46,9);	printf("| $$  \\ $$ /$$__  $$| $$ | $$ | $$| $$_____/      | $$  | $$  \\  $$$/ | $$_____/| $$      	");
 800766a:	2109      	movs	r1, #9
 800766c:	202e      	movs	r0, #46	; 0x2e
 800766e:	f7fd fa5d 	bl	8004b2c <gotoxy>
 8007672:	480e      	ldr	r0, [pc, #56]	; (80076ac <DrawGO+0x8c>)
 8007674:	f000 fd22 	bl	80080bc <iprintf>
gotoxy(46,10);	printf("|  $$$$$$/|  $$$$$$$| $$ | $$ | $$|  $$$$$$$      |  $$$$$$/   \\  $/  |  $$$$$$$| $$      	");
 8007678:	210a      	movs	r1, #10
 800767a:	202e      	movs	r0, #46	; 0x2e
 800767c:	f7fd fa56 	bl	8004b2c <gotoxy>
 8007680:	480b      	ldr	r0, [pc, #44]	; (80076b0 <DrawGO+0x90>)
 8007682:	f000 fd1b 	bl	80080bc <iprintf>
gotoxy(46,11);	printf(" \\______/  \\_______/|__/ |__/ |__/ \\_______/       \\______/     \\_/    \\_______/|__/      	");
 8007686:	210b      	movs	r1, #11
 8007688:	202e      	movs	r0, #46	; 0x2e
 800768a:	f7fd fa4f 	bl	8004b2c <gotoxy>
 800768e:	4809      	ldr	r0, [pc, #36]	; (80076b4 <DrawGO+0x94>)
 8007690:	f000 fd14 	bl	80080bc <iprintf>

}
 8007694:	bf00      	nop
 8007696:	bd80      	pop	{r7, pc}
 8007698:	08009a8c 	.word	0x08009a8c
 800769c:	08009ae8 	.word	0x08009ae8
 80076a0:	08009b44 	.word	0x08009b44
 80076a4:	08009ba0 	.word	0x08009ba0
 80076a8:	08009bfc 	.word	0x08009bfc
 80076ac:	08009c58 	.word	0x08009c58
 80076b0:	08009cb4 	.word	0x08009cb4
 80076b4:	08009d10 	.word	0x08009d10

080076b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	e00a      	b.n	80076e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80076ca:	f3af 8000 	nop.w
 80076ce:	4601      	mov	r1, r0
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	60ba      	str	r2, [r7, #8]
 80076d6:	b2ca      	uxtb	r2, r1
 80076d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	3301      	adds	r3, #1
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	dbf0      	blt.n	80076ca <_read+0x12>
	}

return len;
 80076e8:	687b      	ldr	r3, [r7, #4]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
	return -1;
 80076fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800771a:	605a      	str	r2, [r3, #4]
	return 0;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <_isatty>:

int _isatty(int file)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
	return 1;
 8007732:	2301      	movs	r3, #1
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
	return 0;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
	...

0800775c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007764:	4b11      	ldr	r3, [pc, #68]	; (80077ac <_sbrk+0x50>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <_sbrk+0x16>
		heap_end = &end;
 800776c:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <_sbrk+0x50>)
 800776e:	4a10      	ldr	r2, [pc, #64]	; (80077b0 <_sbrk+0x54>)
 8007770:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007772:	4b0e      	ldr	r3, [pc, #56]	; (80077ac <_sbrk+0x50>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <_sbrk+0x50>)
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4413      	add	r3, r2
 8007780:	466a      	mov	r2, sp
 8007782:	4293      	cmp	r3, r2
 8007784:	d907      	bls.n	8007796 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007786:	f000 fc59 	bl	800803c <__errno>
 800778a:	4603      	mov	r3, r0
 800778c:	220c      	movs	r2, #12
 800778e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007790:	f04f 33ff 	mov.w	r3, #4294967295
 8007794:	e006      	b.n	80077a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007796:	4b05      	ldr	r3, [pc, #20]	; (80077ac <_sbrk+0x50>)
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4413      	add	r3, r2
 800779e:	4a03      	ldr	r2, [pc, #12]	; (80077ac <_sbrk+0x50>)
 80077a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80077a2:	68fb      	ldr	r3, [r7, #12]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	200001bc 	.word	0x200001bc
 80077b0:	20000450 	.word	0x20000450

080077b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80077b8:	4b1f      	ldr	r3, [pc, #124]	; (8007838 <SystemInit+0x84>)
 80077ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077be:	4a1e      	ldr	r2, [pc, #120]	; (8007838 <SystemInit+0x84>)
 80077c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80077c8:	4b1c      	ldr	r3, [pc, #112]	; (800783c <SystemInit+0x88>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a1b      	ldr	r2, [pc, #108]	; (800783c <SystemInit+0x88>)
 80077ce:	f043 0301 	orr.w	r3, r3, #1
 80077d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80077d4:	4b19      	ldr	r3, [pc, #100]	; (800783c <SystemInit+0x88>)
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	4918      	ldr	r1, [pc, #96]	; (800783c <SystemInit+0x88>)
 80077da:	4b19      	ldr	r3, [pc, #100]	; (8007840 <SystemInit+0x8c>)
 80077dc:	4013      	ands	r3, r2
 80077de:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80077e0:	4b16      	ldr	r3, [pc, #88]	; (800783c <SystemInit+0x88>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a15      	ldr	r2, [pc, #84]	; (800783c <SystemInit+0x88>)
 80077e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80077ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80077f0:	4b12      	ldr	r3, [pc, #72]	; (800783c <SystemInit+0x88>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a11      	ldr	r2, [pc, #68]	; (800783c <SystemInit+0x88>)
 80077f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80077fc:	4b0f      	ldr	r3, [pc, #60]	; (800783c <SystemInit+0x88>)
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	4a0e      	ldr	r2, [pc, #56]	; (800783c <SystemInit+0x88>)
 8007802:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007806:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8007808:	4b0c      	ldr	r3, [pc, #48]	; (800783c <SystemInit+0x88>)
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	4a0b      	ldr	r2, [pc, #44]	; (800783c <SystemInit+0x88>)
 800780e:	f023 030f 	bic.w	r3, r3, #15
 8007812:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8007814:	4b09      	ldr	r3, [pc, #36]	; (800783c <SystemInit+0x88>)
 8007816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007818:	4908      	ldr	r1, [pc, #32]	; (800783c <SystemInit+0x88>)
 800781a:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <SystemInit+0x90>)
 800781c:	4013      	ands	r3, r2
 800781e:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007820:	4b06      	ldr	r3, [pc, #24]	; (800783c <SystemInit+0x88>)
 8007822:	2200      	movs	r2, #0
 8007824:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8007826:	f000 f80f 	bl	8007848 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800782a:	4b03      	ldr	r3, [pc, #12]	; (8007838 <SystemInit+0x84>)
 800782c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007830:	609a      	str	r2, [r3, #8]
#endif  
}
 8007832:	bf00      	nop
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	e000ed00 	.word	0xe000ed00
 800783c:	40021000 	.word	0x40021000
 8007840:	f87fc00c 	.word	0xf87fc00c
 8007844:	ff00fccc 	.word	0xff00fccc

08007848 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800784c:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <SetSysClock+0x8c>)
 800784e:	2212      	movs	r2, #18
 8007850:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8007852:	4b21      	ldr	r3, [pc, #132]	; (80078d8 <SetSysClock+0x90>)
 8007854:	4a20      	ldr	r2, [pc, #128]	; (80078d8 <SetSysClock+0x90>)
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800785a:	4b1f      	ldr	r3, [pc, #124]	; (80078d8 <SetSysClock+0x90>)
 800785c:	4a1e      	ldr	r2, [pc, #120]	; (80078d8 <SetSysClock+0x90>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8007862:	4b1d      	ldr	r3, [pc, #116]	; (80078d8 <SetSysClock+0x90>)
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	4a1c      	ldr	r2, [pc, #112]	; (80078d8 <SetSysClock+0x90>)
 8007868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800786c:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800786e:	4b1a      	ldr	r3, [pc, #104]	; (80078d8 <SetSysClock+0x90>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	4a19      	ldr	r2, [pc, #100]	; (80078d8 <SetSysClock+0x90>)
 8007874:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8007878:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800787a:	4b17      	ldr	r3, [pc, #92]	; (80078d8 <SetSysClock+0x90>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	4a16      	ldr	r2, [pc, #88]	; (80078d8 <SetSysClock+0x90>)
 8007880:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8007884:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8007886:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <SetSysClock+0x90>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a13      	ldr	r2, [pc, #76]	; (80078d8 <SetSysClock+0x90>)
 800788c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007890:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8007892:	bf00      	nop
 8007894:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <SetSysClock+0x90>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0f9      	beq.n	8007894 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80078a0:	4b0d      	ldr	r3, [pc, #52]	; (80078d8 <SetSysClock+0x90>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	4a0c      	ldr	r2, [pc, #48]	; (80078d8 <SetSysClock+0x90>)
 80078a6:	f023 0303 	bic.w	r3, r3, #3
 80078aa:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80078ac:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <SetSysClock+0x90>)
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4a09      	ldr	r2, [pc, #36]	; (80078d8 <SetSysClock+0x90>)
 80078b2:	f043 0302 	orr.w	r3, r3, #2
 80078b6:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80078b8:	bf00      	nop
 80078ba:	4b07      	ldr	r3, [pc, #28]	; (80078d8 <SetSysClock+0x90>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f003 030c 	and.w	r3, r3, #12
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d1f9      	bne.n	80078ba <SetSysClock+0x72>
  {
  }
}
 80078c6:	bf00      	nop
 80078c8:	bf00      	nop
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	40022000 	.word	0x40022000
 80078d8:	40021000 	.word	0x40021000

080078dc <NVIC_EnableIRQ>:
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	f003 031f 	and.w	r3, r3, #31
 80078ec:	2201      	movs	r2, #1
 80078ee:	fa02 f103 	lsl.w	r1, r2, r3
 80078f2:	4a06      	ldr	r2, [pc, #24]	; (800790c <NVIC_EnableIRQ+0x30>)
 80078f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078f8:	095b      	lsrs	r3, r3, #5
 80078fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	e000e100 	.word	0xe000e100

08007910 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	4603      	mov	r3, r0
 8007918:	6039      	str	r1, [r7, #0]
 800791a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800791c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007920:	2b00      	cmp	r3, #0
 8007922:	da0b      	bge.n	800793c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	b2da      	uxtb	r2, r3
 8007928:	490c      	ldr	r1, [pc, #48]	; (800795c <NVIC_SetPriority+0x4c>)
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	f003 030f 	and.w	r3, r3, #15
 8007930:	3b04      	subs	r3, #4
 8007932:	0112      	lsls	r2, r2, #4
 8007934:	b2d2      	uxtb	r2, r2
 8007936:	440b      	add	r3, r1
 8007938:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800793a:	e009      	b.n	8007950 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	b2da      	uxtb	r2, r3
 8007940:	4907      	ldr	r1, [pc, #28]	; (8007960 <NVIC_SetPriority+0x50>)
 8007942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007946:	0112      	lsls	r2, r2, #4
 8007948:	b2d2      	uxtb	r2, r2
 800794a:	440b      	add	r3, r1
 800794c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	e000ed00 	.word	0xe000ed00
 8007960:	e000e100 	.word	0xe000e100

08007964 <initTimer>:
//TIM15->CR1 to disable the timer and configure the mode.
//TIM15->ARR to set the reload value.
//TIM15->PSC to set the prescaler.
// Write to TIM15->CR1 to enable the timer and begin counting

void initTimer(){
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8007968:	4b10      	ldr	r3, [pc, #64]	; (80079ac <initTimer+0x48>)
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	4a0f      	ldr	r2, [pc, #60]	; (80079ac <initTimer+0x48>)
 800796e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007972:	6193      	str	r3, [r2, #24]
TIM15->CR1 = 0x0000; // Configure timer 15
 8007974:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <initTimer+0x4c>)
 8007976:	2200      	movs	r2, #0
 8007978:	801a      	strh	r2, [r3, #0]
TIM15->ARR = 0xF9FF; // Set reload value
 800797a:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <initTimer+0x4c>)
 800797c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8007980:	62da      	str	r2, [r3, #44]	; 0x2c
TIM15->PSC = 0x0009; // Set prescale value
 8007982:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <initTimer+0x4c>)
 8007984:	2209      	movs	r2, #9
 8007986:	851a      	strh	r2, [r3, #40]	; 0x28
TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8007988:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <initTimer+0x4c>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	4a08      	ldr	r2, [pc, #32]	; (80079b0 <initTimer+0x4c>)
 800798e:	f043 0301 	orr.w	r3, r3, #1
 8007992:	60d3      	str	r3, [r2, #12]
TIM15->CR1 = 0x0001;
 8007994:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <initTimer+0x4c>)
 8007996:	2201      	movs	r2, #1
 8007998:	801a      	strh	r2, [r3, #0]
NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 800799a:	2100      	movs	r1, #0
 800799c:	2018      	movs	r0, #24
 800799e:	f7ff ffb7 	bl	8007910 <NVIC_SetPriority>
NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 80079a2:	2018      	movs	r0, #24
 80079a4:	f7ff ff9a 	bl	80078dc <NVIC_EnableIRQ>
}
 80079a8:	bf00      	nop
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40021000 	.word	0x40021000
 80079b0:	40014000 	.word	0x40014000

080079b4 <initTimer2>:


void initTimer2(){
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2;
 80079b8:	4b34      	ldr	r3, [pc, #208]	; (8007a8c <initTimer2+0xd8>)
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	4a33      	ldr	r2, [pc, #204]	; (8007a8c <initTimer2+0xd8>)
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 	= 0x0000; // Configure timer 2
 80079c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079c8:	2200      	movs	r2, #0
 80079ca:	801a      	strh	r2, [r3, #0]

	TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 80079cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80079d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079da:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 80079dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80079e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ea:	6213      	str	r3, [r2, #32]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 80079ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80079f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fa:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 80079fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 8007a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007a16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a1a:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8007a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007a26:	f023 0308 	bic.w	r3, r3, #8
 8007a2a:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCPreload_Enable;
 8007a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007a36:	f043 0308 	orr.w	r3, r3, #8
 8007a3a:	61d3      	str	r3, [r2, #28]
	TIM2->CCR3 = RELOAD_VALUE / 2; // Set duty cycle to 50 %
 8007a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a40:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8007a44:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CR1 	= 0x0001; // Configure timer 2
 8007a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	801a      	strh	r2, [r3, #0]

	TIM2->ARR 	= 0xF9FF; // Set reload value
 8007a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a52:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8007a56:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->PSC 	= 0x0009; // Set prescale value
 8007a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a5c:	2209      	movs	r2, #9
 8007a5e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->DIER	|= 0x0001;
 8007a60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	60d3      	str	r3, [r2, #12]
	TIM2->SR	= 0x0000;
 8007a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a74:	2200      	movs	r2, #0
 8007a76:	611a      	str	r2, [r3, #16]

	NVIC_SetPriority(TIM2_IRQn, 1); // Set interrupt priority
 8007a78:	2101      	movs	r1, #1
 8007a7a:	201c      	movs	r0, #28
 8007a7c:	f7ff ff48 	bl	8007910 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // Enable interrupt
 8007a80:	201c      	movs	r0, #28
 8007a82:	f7ff ff2b 	bl	80078dc <NVIC_EnableIRQ>
}
 8007a86:	bf00      	nop
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	40021000 	.word	0x40021000

08007a90 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0


//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM2->SR &= ~0x0001; // Clear interrupt bit
 8007a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007a9e:	f023 0301 	bic.w	r3, r3, #1
 8007aa2:	6113      	str	r3, [r2, #16]
}
 8007aa4:	bf00      	nop
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
	...

08007ab0 <TIM1_BRK_TIM15_IRQHandler>:
}
void initTimerStart(){
NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
TIM15->CR1 = 0x0001; // Configure timer 15
}
void TIM1_BRK_TIM15_IRQHandler(void) {
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0

	lcdUpdate++;
 8007ab4:	4b36      	ldr	r3, [pc, #216]	; (8007b90 <TIM1_BRK_TIM15_IRQHandler+0xe0>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	4a35      	ldr	r2, [pc, #212]	; (8007b90 <TIM1_BRK_TIM15_IRQHandler+0xe0>)
 8007abc:	6013      	str	r3, [r2, #0]
	if (lcdUpdate >= refreshRate){
 8007abe:	4b34      	ldr	r3, [pc, #208]	; (8007b90 <TIM1_BRK_TIM15_IRQHandler+0xe0>)
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	4b34      	ldr	r3, [pc, #208]	; (8007b94 <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	db13      	blt.n	8007af2 <TIM1_BRK_TIM15_IRQHandler+0x42>

		if (timeState == 0){
 8007aca:	4b33      	ldr	r3, [pc, #204]	; (8007b98 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	b25b      	sxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d103      	bne.n	8007adc <TIM1_BRK_TIM15_IRQHandler+0x2c>
			timeState = 1;
 8007ad4:	4b30      	ldr	r3, [pc, #192]	; (8007b98 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	e007      	b.n	8007aec <TIM1_BRK_TIM15_IRQHandler+0x3c>
		}
		else if (timeState == 1){
 8007adc:	4b2e      	ldr	r3, [pc, #184]	; (8007b98 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	b25b      	sxtb	r3, r3
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d102      	bne.n	8007aec <TIM1_BRK_TIM15_IRQHandler+0x3c>
			timeState = 0;
 8007ae6:	4b2c      	ldr	r3, [pc, #176]	; (8007b98 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]
		}
		lcdUpdate = 0;
 8007aec:	4b28      	ldr	r3, [pc, #160]	; (8007b90 <TIM1_BRK_TIM15_IRQHandler+0xe0>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
	}

	if(tid.state){
 8007af2:	4b2a      	ldr	r3, [pc, #168]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007af4:	78db      	ldrb	r3, [r3, #3]
 8007af6:	b25b      	sxtb	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d041      	beq.n	8007b80 <TIM1_BRK_TIM15_IRQHandler+0xd0>
		if (tid.mil <= 0){
 8007afc:	4b27      	ldr	r3, [pc, #156]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007afe:	789b      	ldrb	r3, [r3, #2]
 8007b00:	b25b      	sxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	dc0b      	bgt.n	8007b1e <TIM1_BRK_TIM15_IRQHandler+0x6e>
			tid.mil = 99;
 8007b06:	4b25      	ldr	r3, [pc, #148]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b08:	2263      	movs	r2, #99	; 0x63
 8007b0a:	709a      	strb	r2, [r3, #2]
			tid.sek--;
 8007b0c:	4b23      	ldr	r3, [pc, #140]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b0e:	785b      	ldrb	r3, [r3, #1]
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	b25a      	sxtb	r2, r3
 8007b1a:	4b20      	ldr	r3, [pc, #128]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b1c:	705a      	strb	r2, [r3, #1]
		}
		if (tid.sek < 0){
 8007b1e:	4b1f      	ldr	r3, [pc, #124]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	b25b      	sxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	da0b      	bge.n	8007b40 <TIM1_BRK_TIM15_IRQHandler+0x90>
			tid.sek = 59;
 8007b28:	4b1c      	ldr	r3, [pc, #112]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b2a:	223b      	movs	r2, #59	; 0x3b
 8007b2c:	705a      	strb	r2, [r3, #1]
			tid.min--;
 8007b2e:	4b1b      	ldr	r3, [pc, #108]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	b25b      	sxtb	r3, r3
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	b25a      	sxtb	r2, r3
 8007b3c:	4b17      	ldr	r3, [pc, #92]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b3e:	701a      	strb	r2, [r3, #0]
		}
		tid.mil--;
 8007b40:	4b16      	ldr	r3, [pc, #88]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b42:	789b      	ldrb	r3, [r3, #2]
 8007b44:	b25b      	sxtb	r3, r3
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	b25a      	sxtb	r2, r3
 8007b4e:	4b13      	ldr	r3, [pc, #76]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b50:	709a      	strb	r2, [r3, #2]
		if (tid.min < 0){
 8007b52:	4b12      	ldr	r3, [pc, #72]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	b25b      	sxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	da11      	bge.n	8007b80 <TIM1_BRK_TIM15_IRQHandler+0xd0>
			tid.state = 0;
 8007b5c:	4b0f      	ldr	r3, [pc, #60]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b5e:	2200      	movs	r2, #0
 8007b60:	70da      	strb	r2, [r3, #3]
			tid.min = 0;
 8007b62:	4b0e      	ldr	r3, [pc, #56]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
			tid.sek = 0;
 8007b68:	4b0c      	ldr	r3, [pc, #48]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	705a      	strb	r2, [r3, #1]
			tid.mil = 0;
 8007b6e:	4b0b      	ldr	r3, [pc, #44]	; (8007b9c <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	709a      	strb	r2, [r3, #2]
			setFreq(0);
 8007b74:	2000      	movs	r0, #0
 8007b76:	f7fd fdeb 	bl	8005750 <setFreq>
			GameOver();
 8007b7a:	f7ff fd27 	bl	80075cc <GameOver>
			while (1){
 8007b7e:	e7fe      	b.n	8007b7e <TIM1_BRK_TIM15_IRQHandler+0xce>
		}

	}

//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM15->SR &= ~0x0001; // Clear interrupt bit
 8007b80:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	4a06      	ldr	r2, [pc, #24]	; (8007ba0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8007b86:	f023 0301 	bic.w	r3, r3, #1
 8007b8a:	6113      	str	r3, [r2, #16]
}
 8007b8c:	bf00      	nop
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	200001f0 	.word	0x200001f0
 8007b94:	20000200 	.word	0x20000200
 8007b98:	20000414 	.word	0x20000414
 8007b9c:	20000418 	.word	0x20000418
 8007ba0:	40014000 	.word	0x40014000

08007ba4 <drawTime>:


void drawTime(){
 8007ba4:	b5b0      	push	{r4, r5, r7, lr}
 8007ba6:	f5ad 6d0f 	sub.w	sp, sp, #2288	; 0x8f0
 8007baa:	af00      	add	r7, sp, #0
	static int hp;
	int red = 0, green = 0, yellow = 0, x = tid.sek + (tid.min * 60);
 8007bac:	2300      	movs	r3, #0
 8007bae:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 8007bbe:	4bc5      	ldr	r3, [pc, #788]	; (8007ed4 <drawTime+0x330>)
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	b25b      	sxtb	r3, r3
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4bc3      	ldr	r3, [pc, #780]	; (8007ed4 <drawTime+0x330>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	b25b      	sxtb	r3, r3
 8007bcc:	461a      	mov	r2, r3
 8007bce:	4613      	mov	r3, r2
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	1a9b      	subs	r3, r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8

	char greenS[] = "1G  1f 1G  1f 1G  1f 1G  1f 1G 1f 1D 1e 1f 1G  1f 1G  1f 1G  1f 1G  1f 1G 1f 1D1e1f 2c  1G 2c  1G 2c  1G 2c  1G 2c 1G 1g1g1G 2c  1G 2c  1G 2c  1G 2c  1G 2c 1G 1g1g1G  ";
 8007bdc:	4abe      	ldr	r2, [pc, #760]	; (8007ed8 <drawTime+0x334>)
 8007bde:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8007be2:	4611      	mov	r1, r2
 8007be4:	22a8      	movs	r2, #168	; 0xa8
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fa52 	bl	8008090 <memcpy>
	char yellowS[] = " 2G2G2G2A2B2B2A2G2G2A2B2B2A2G";
 8007bec:	4bbb      	ldr	r3, [pc, #748]	; (8007edc <drawTime+0x338>)
 8007bee:	f507 6400 	add.w	r4, r7, #2048	; 0x800
 8007bf2:	461d      	mov	r5, r3
 8007bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007bfc:	c407      	stmia	r4!, {r0, r1, r2}
 8007bfe:	8023      	strh	r3, [r4, #0]
	char redS[] = " 3C3C3C3D3E3E3D3C3C3D3E3E3D3C";
 8007c00:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8007c04:	4ab6      	ldr	r2, [pc, #728]	; (8007ee0 <drawTime+0x33c>)
 8007c06:	461c      	mov	r4, r3
 8007c08:	4615      	mov	r5, r2
 8007c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007c12:	c407      	stmia	r4!, {r0, r1, r2}
 8007c14:	8023      	strh	r3, [r4, #0]
	char doom[] = "2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a  2D 2A 2b 2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D  2a    2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a 2D 2D 2A 2b 2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a      2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a 2D  2A 2b 2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a     2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a 2D 2D 2A 2b 2D 2D 3D 2D 2D 3C 2D 2D 4f 4D 4f 4F 4d 4F 4A 4F 4d2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a 2D  2A 2b 2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a     2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a 2D  2A 2b 2D 2D 3D 2D 2D 3C 2D 2D 4A 4F4D 4F4A 4F4A 4A 4F4A 4F4A  2G 2G 3G 2G 2G 3F 2G 2G 3e 2G 2G 3d 2G 2G 3D 3e 2G 2G 3G 2G 2G 3F 2G 2G 3e 2G 2G 3d     2G 2G 3G 2G 2G 3F 2G 2G 3e 2G 2G 3d 2G 2G 3D 3e 2G 2G 3G 2G 2G 3F 2G 2G  3b 3b 3b3G 4G 3b 3b 3G3b 2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a 2D  2A 2b 2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a     2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a 2D 2D 2A 2b 2D 2D 3D 2D 2D 3C 2D 2D 3A 2A 2A 3G 2A 2A 3F 2a 2G 3e     2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a 2D 2D 2A 2b 2D 2D 3D 2D 2D 3C 2D 2D 4D4F 3F3A 4D3A 4F4D 4F4D 3F3A 4D4F 4A 2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2a 2D 2D 2A 2b 2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D  2a    2D 2D 3D 2D 2D 3C 2D 2D 2b 2D 2D 2D2a 2D  2A 2b 2D 2D 3D 2D 2D 3C 2D 2D 4d3b 3f3A 4f4d 3G3A 4G4f 4d 4A4G3A 4f4d 2D 2D 3F 2D 2D 3f 2D 2D 3d 2D 2D 3C2D 2D  3C 3D 2D 2D 3F 2D 2D 3f 2D 2D 3D 2D 2D  3c    2D 2D 3F 2D 2D 3f 2D 2D 3d 2D 2D 3C     2D 2D 3F 2D 2D 3f 2D 2D 6D4A 4F 6D4D4A 4A4F 4D4F 4A4F 6D4A 4F4D 2G 2G 3b 2G 2G 3A 2G 2G 3g 2G 2G 3F 2G  3F 3G 2G 2G 3b 2G 2G 3A 2G 2G 3G 2G 2G  3F    2G 2G 3b 2G 2G 3A 2G 2G 3g 2G 2G 3F 2G 2G 3F 3G 2G 2G 3b 2G 2G 3A 2G 2G 4D4C 4D3b 3G3b 4D3b 4G4D 4D3b 4D3b 3G3b 2D 2D 3F 2D 2D 3f 2D 2D 3d 2D 2D 3C 2D  3C 3D 2D 2D 3F 2D 2D 3f 2D 2D 3D 2D   3c    2D 2D 3F 2D 2D 3f 2D 2D 3d 2D 2D 3C2D 2D  3C 3D 2D 2D 3F 2D 2D 3f 2D 2D 3D 2D 2D 3c     3c 3c 4F 3c 3c 4f 3c 3c 4D 3c 3c 4c 3c 3c 4c 4D 2A 2A 4f 2A 2A 4D 2A 2A 4d 2a 2G 3A     2D 2D 3F 2D 2D 3f 2D 2D 3d 2D 2D 3C 2D  3C 3D 2D 2D 3F 2D 2D 3f 2D 2D  4d 3G3A 3d3f 2A  4f4d3A 3f3G 3d  3D                     ";
 8007c16:	1d3b      	adds	r3, r7, #4
 8007c18:	4ab2      	ldr	r2, [pc, #712]	; (8007ee4 <drawTime+0x340>)
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	f240 73da 	movw	r3, #2010	; 0x7da
 8007c22:	461a      	mov	r2, r3
 8007c24:	f000 fa34 	bl	8008090 <memcpy>


	gotoxy(132,3);
 8007c28:	2103      	movs	r1, #3
 8007c2a:	2084      	movs	r0, #132	; 0x84
 8007c2c:	f7fc ff7e 	bl	8004b2c <gotoxy>
	printf("%02d:%02d:%02d", tid.min, tid.sek, tid.mil);
 8007c30:	4ba8      	ldr	r3, [pc, #672]	; (8007ed4 <drawTime+0x330>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	b25b      	sxtb	r3, r3
 8007c36:	4619      	mov	r1, r3
 8007c38:	4ba6      	ldr	r3, [pc, #664]	; (8007ed4 <drawTime+0x330>)
 8007c3a:	785b      	ldrb	r3, [r3, #1]
 8007c3c:	b25b      	sxtb	r3, r3
 8007c3e:	461a      	mov	r2, r3
 8007c40:	4ba4      	ldr	r3, [pc, #656]	; (8007ed4 <drawTime+0x330>)
 8007c42:	789b      	ldrb	r3, [r3, #2]
 8007c44:	b25b      	sxtb	r3, r3
 8007c46:	48a8      	ldr	r0, [pc, #672]	; (8007ee8 <drawTime+0x344>)
 8007c48:	f000 fa38 	bl	80080bc <iprintf>
//	gotoxy(2,3);
//	for (int i = 0; i < 40; i++){
//		printf("%c",32);
//	}

	gotoxy(142,3);
 8007c4c:	2103      	movs	r1, #3
 8007c4e:	208e      	movs	r0, #142	; 0x8e
 8007c50:	f7fc ff6c 	bl	8004b2c <gotoxy>
	tid.state ? blink(1): blink(0);
 8007c54:	4b9f      	ldr	r3, [pc, #636]	; (8007ed4 <drawTime+0x330>)
 8007c56:	78db      	ldrb	r3, [r3, #3]
 8007c58:	b25b      	sxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <drawTime+0xc2>
 8007c5e:	2001      	movs	r0, #1
 8007c60:	f7fc ff76 	bl	8004b50 <blink>
 8007c64:	e002      	b.n	8007c6c <drawTime+0xc8>
 8007c66:	2000      	movs	r0, #0
 8007c68:	f7fc ff72 	bl	8004b50 <blink>
	if (x>=80){
 8007c6c:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8007c70:	2b4f      	cmp	r3, #79	; 0x4f
 8007c72:	dd2e      	ble.n	8007cd2 <drawTime+0x12e>
		hp = 1;
 8007c74:	4b9d      	ldr	r3, [pc, #628]	; (8007eec <drawTime+0x348>)
 8007c76:	2201      	movs	r2, #1
 8007c78:	601a      	str	r2, [r3, #0]
		fgcolor(2); // green
 8007c7a:	2002      	movs	r0, #2
 8007c7c:	f7fc ff06 	bl	8004a8c <fgcolor>
		for (int i = 0; i < x-80; i++){
 8007c80:	2300      	movs	r3, #0
 8007c82:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
 8007c86:	e007      	b.n	8007c98 <drawTime+0xf4>
			printf("%c",178);
 8007c88:	20b2      	movs	r0, #178	; 0xb2
 8007c8a:	f000 fa2f 	bl	80080ec <putchar>
		for (int i = 0; i < x-80; i++){
 8007c8e:	f8d7 38e0 	ldr.w	r3, [r7, #2272]	; 0x8e0
 8007c92:	3301      	adds	r3, #1
 8007c94:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
 8007c98:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8007c9c:	3b50      	subs	r3, #80	; 0x50
 8007c9e:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	dbf0      	blt.n	8007c88 <drawTime+0xe4>
		}
		fgcolor(11); // yellow
 8007ca6:	200b      	movs	r0, #11
 8007ca8:	f7fc fef0 	bl	8004a8c <fgcolor>
		for (int i = x-80; i < 40; i++){
 8007cac:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8007cb0:	3b50      	subs	r3, #80	; 0x50
 8007cb2:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 8007cb6:	e007      	b.n	8007cc8 <drawTime+0x124>
			printf("%c",178);
 8007cb8:	20b2      	movs	r0, #178	; 0xb2
 8007cba:	f000 fa17 	bl	80080ec <putchar>
		for (int i = x-80; i < 40; i++){
 8007cbe:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 8007cc8:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8007ccc:	2b27      	cmp	r3, #39	; 0x27
 8007cce:	ddf3      	ble.n	8007cb8 <drawTime+0x114>
 8007cd0:	e073      	b.n	8007dba <drawTime+0x216>
		}
	}
	else if (x>=40){
 8007cd2:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8007cd6:	2b27      	cmp	r3, #39	; 0x27
 8007cd8:	dd2e      	ble.n	8007d38 <drawTime+0x194>
		hp = 2;
 8007cda:	4b84      	ldr	r3, [pc, #528]	; (8007eec <drawTime+0x348>)
 8007cdc:	2202      	movs	r2, #2
 8007cde:	601a      	str	r2, [r3, #0]
		fgcolor(11); // yellow
 8007ce0:	200b      	movs	r0, #11
 8007ce2:	f7fc fed3 	bl	8004a8c <fgcolor>
		for (int i = 0; i < x-40; i++){
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
 8007cec:	e007      	b.n	8007cfe <drawTime+0x15a>
			printf("%c",178);
 8007cee:	20b2      	movs	r0, #178	; 0xb2
 8007cf0:	f000 f9fc 	bl	80080ec <putchar>
		for (int i = 0; i < x-40; i++){
 8007cf4:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
 8007cfe:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8007d02:	3b28      	subs	r3, #40	; 0x28
 8007d04:	f8d7 28d8 	ldr.w	r2, [r7, #2264]	; 0x8d8
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	dbf0      	blt.n	8007cee <drawTime+0x14a>
		}
		fgcolor(1); // red
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	f7fc febd 	bl	8004a8c <fgcolor>
		for (int i = x-40; i < 40; i++){
 8007d12:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8007d16:	3b28      	subs	r3, #40	; 0x28
 8007d18:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 8007d1c:	e007      	b.n	8007d2e <drawTime+0x18a>
			printf("%c",178);
 8007d1e:	20b2      	movs	r0, #178	; 0xb2
 8007d20:	f000 f9e4 	bl	80080ec <putchar>
		for (int i = x-40; i < 40; i++){
 8007d24:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 8007d28:	3301      	adds	r3, #1
 8007d2a:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 8007d2e:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 8007d32:	2b27      	cmp	r3, #39	; 0x27
 8007d34:	ddf3      	ble.n	8007d1e <drawTime+0x17a>
 8007d36:	e040      	b.n	8007dba <drawTime+0x216>
		}
	}
	else if (x<40){
 8007d38:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8007d3c:	2b27      	cmp	r3, #39	; 0x27
 8007d3e:	dc32      	bgt.n	8007da6 <drawTime+0x202>
		hp = 3;
 8007d40:	4b6a      	ldr	r3, [pc, #424]	; (8007eec <drawTime+0x348>)
 8007d42:	2203      	movs	r2, #3
 8007d44:	601a      	str	r2, [r3, #0]

		led.red = tid.state;
 8007d46:	4b63      	ldr	r3, [pc, #396]	; (8007ed4 <drawTime+0x330>)
 8007d48:	78db      	ldrb	r3, [r3, #3]
 8007d4a:	b25b      	sxtb	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4b68      	ldr	r3, [pc, #416]	; (8007ef0 <drawTime+0x34c>)
 8007d50:	601a      	str	r2, [r3, #0]
		fgcolor(1); // red
 8007d52:	2001      	movs	r0, #1
 8007d54:	f7fc fe9a 	bl	8004a8c <fgcolor>
		for (int i = 0; i < x; i++){
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
 8007d5e:	e007      	b.n	8007d70 <drawTime+0x1cc>
			printf("%c",178);
 8007d60:	20b2      	movs	r0, #178	; 0xb2
 8007d62:	f000 f9c3 	bl	80080ec <putchar>
		for (int i = 0; i < x; i++){
 8007d66:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
 8007d70:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8007d74:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	dbf1      	blt.n	8007d60 <drawTime+0x1bc>
		}
		blink(0);
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	f7fc fee7 	bl	8004b50 <blink>
		for (int i = x; i < 40; i++){
 8007d82:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8007d86:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 8007d8a:	e007      	b.n	8007d9c <drawTime+0x1f8>
			printf("%c",32);
 8007d8c:	2020      	movs	r0, #32
 8007d8e:	f000 f9ad 	bl	80080ec <putchar>
		for (int i = x; i < 40; i++){
 8007d92:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 8007d96:	3301      	adds	r3, #1
 8007d98:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 8007d9c:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 8007da0:	2b27      	cmp	r3, #39	; 0x27
 8007da2:	ddf3      	ble.n	8007d8c <drawTime+0x1e8>
 8007da4:	e009      	b.n	8007dba <drawTime+0x216>
		}
	}
	else if (x = 0){
 8007da6:	2300      	movs	r3, #0
 8007da8:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
 8007dac:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <drawTime+0x216>
		hp = 0;
 8007db4:	4b4d      	ldr	r3, [pc, #308]	; (8007eec <drawTime+0x348>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	601a      	str	r2, [r3, #0]
	}

	blink(0);
 8007dba:	2000      	movs	r0, #0
 8007dbc:	f7fc fec8 	bl	8004b50 <blink>
	resetbgcolor();
 8007dc0:	f7fc fe92 	bl	8004ae8 <resetbgcolor>

	switch(hp){
 8007dc4:	4b49      	ldr	r3, [pc, #292]	; (8007eec <drawTime+0x348>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d842      	bhi.n	8007e52 <drawTime+0x2ae>
 8007dcc:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <drawTime+0x230>)
 8007dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd2:	bf00      	nop
 8007dd4:	08007de5 	.word	0x08007de5
 8007dd8:	08007df3 	.word	0x08007df3
 8007ddc:	08007e13 	.word	0x08007e13
 8007de0:	08007e33 	.word	0x08007e33
		case 0:
			red = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
			green = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
			break;
 8007df0:	e02f      	b.n	8007e52 <drawTime+0x2ae>
		case 1:
			green = !tid.state | timeState;
 8007df2:	4b38      	ldr	r3, [pc, #224]	; (8007ed4 <drawTime+0x330>)
 8007df4:	78db      	ldrb	r3, [r3, #3]
 8007df6:	b25b      	sxtb	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	bf0c      	ite	eq
 8007dfc:	2301      	moveq	r3, #1
 8007dfe:	2300      	movne	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	4b3b      	ldr	r3, [pc, #236]	; (8007ef4 <drawTime+0x350>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	b25b      	sxtb	r3, r3
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
			break;
 8007e10:	e01f      	b.n	8007e52 <drawTime+0x2ae>
		case 2:
			yellow = !tid.state | timeState;
 8007e12:	4b30      	ldr	r3, [pc, #192]	; (8007ed4 <drawTime+0x330>)
 8007e14:	78db      	ldrb	r3, [r3, #3]
 8007e16:	b25b      	sxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	bf0c      	ite	eq
 8007e1c:	2301      	moveq	r3, #1
 8007e1e:	2300      	movne	r3, #0
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	461a      	mov	r2, r3
 8007e24:	4b33      	ldr	r3, [pc, #204]	; (8007ef4 <drawTime+0x350>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	b25b      	sxtb	r3, r3
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
			break;
 8007e30:	e00f      	b.n	8007e52 <drawTime+0x2ae>
		case 3:
			red = !tid.state | timeState;
 8007e32:	4b28      	ldr	r3, [pc, #160]	; (8007ed4 <drawTime+0x330>)
 8007e34:	78db      	ldrb	r3, [r3, #3]
 8007e36:	b25b      	sxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bf0c      	ite	eq
 8007e3c:	2301      	moveq	r3, #1
 8007e3e:	2300      	movne	r3, #0
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	4b2b      	ldr	r3, [pc, #172]	; (8007ef4 <drawTime+0x350>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	b25b      	sxtb	r3, r3
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
			break;
 8007e50:	bf00      	nop
	}

	led.gre = green | yellow;
 8007e52:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 8007e56:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	4a24      	ldr	r2, [pc, #144]	; (8007ef0 <drawTime+0x34c>)
 8007e5e:	6093      	str	r3, [r2, #8]
	led.red = red | yellow;
 8007e60:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 8007e64:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	4a21      	ldr	r2, [pc, #132]	; (8007ef0 <drawTime+0x34c>)
 8007e6c:	6013      	str	r3, [r2, #0]

	if (tid.state){
 8007e6e:	4b19      	ldr	r3, [pc, #100]	; (8007ed4 <drawTime+0x330>)
 8007e70:	78db      	ldrb	r3, [r3, #3]
 8007e72:	b25b      	sxtb	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d03f      	beq.n	8007ef8 <drawTime+0x354>
		if(green & timeState ){
 8007e78:	4b1e      	ldr	r3, [pc, #120]	; (8007ef4 <drawTime+0x350>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	b25b      	sxtb	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8007e84:	4013      	ands	r3, r2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d005      	beq.n	8007e96 <drawTime+0x2f2>
			playTone(greenS);
 8007e8a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fd f908 	bl	80050a4 <playTone>
		playTone(doom);


	}

}
 8007e94:	e037      	b.n	8007f06 <drawTime+0x362>
		else if(yellow & timeState ){
 8007e96:	4b17      	ldr	r3, [pc, #92]	; (8007ef4 <drawTime+0x350>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	b25b      	sxtb	r3, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <drawTime+0x310>
			playTone(yellowS);
 8007ea8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fd f8f9 	bl	80050a4 <playTone>
}
 8007eb2:	e028      	b.n	8007f06 <drawTime+0x362>
		else if(red & timeState){
 8007eb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <drawTime+0x350>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	b25b      	sxtb	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d01f      	beq.n	8007f06 <drawTime+0x362>
			playTone(redS);
 8007ec6:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fd f8ea 	bl	80050a4 <playTone>
}
 8007ed0:	e019      	b.n	8007f06 <drawTime+0x362>
 8007ed2:	bf00      	nop
 8007ed4:	20000418 	.word	0x20000418
 8007ed8:	08009d7c 	.word	0x08009d7c
 8007edc:	08009e24 	.word	0x08009e24
 8007ee0:	08009e44 	.word	0x08009e44
 8007ee4:	08009e64 	.word	0x08009e64
 8007ee8:	08009d6c 	.word	0x08009d6c
 8007eec:	200001c0 	.word	0x200001c0
 8007ef0:	200001e0 	.word	0x200001e0
 8007ef4:	20000414 	.word	0x20000414
		setFreq(0);
 8007ef8:	2000      	movs	r0, #0
 8007efa:	f7fd fc29 	bl	8005750 <setFreq>
		playTone(doom);
 8007efe:	1d3b      	adds	r3, r7, #4
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fd f8cf 	bl	80050a4 <playTone>
}
 8007f06:	bf00      	nop
 8007f08:	f507 670f 	add.w	r7, r7, #2288	; 0x8f0
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bdb0      	pop	{r4, r5, r7, pc}

08007f10 <windowSmp>:
#include "ansi_s.h"

void windowSmp(int x1, int y1, int x2, int y2) {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b090      	sub	sp, #64	; 0x40
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]

		int tl = 218; 	// ┌
 8007f1e:	23da      	movs	r3, #218	; 0xda
 8007f20:	633b      	str	r3, [r7, #48]	; 0x30
		int lsd = 180; 	// ┤
 8007f22:	23b4      	movs	r3, #180	; 0xb4
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
		int bl = 192;	// └
 8007f26:	23c0      	movs	r3, #192	; 0xc0
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
		int wll = 179;	// │
 8007f2a:	23b3      	movs	r3, #179	; 0xb3
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
		int btt = 196; 	// ─
 8007f2e:	23c4      	movs	r3, #196	; 0xc4
 8007f30:	623b      	str	r3, [r7, #32]
		int tr = 191; 	// ┐
 8007f32:	23bf      	movs	r3, #191	; 0xbf
 8007f34:	61fb      	str	r3, [r7, #28]
		int rsd = 195;	// ├
 8007f36:	23c3      	movs	r3, #195	; 0xc3
 8007f38:	61bb      	str	r3, [r7, #24]
		int br = 217;	// ┘
 8007f3a:	23d9      	movs	r3, #217	; 0xd9
 8007f3c:	617b      	str	r3, [r7, #20]

		//Top ┌──────┐
		gotoxy(x1, y1);
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7fc fdf3 	bl	8004b2c <gotoxy>
		printf("%c", tl);
 8007f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f48:	f000 f8d0 	bl	80080ec <putchar>
		for (int i=x1+1;i<x2-1;i++){
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f52:	e005      	b.n	8007f60 <windowSmp+0x50>
			printf("%c",btt);
 8007f54:	6a38      	ldr	r0, [r7, #32]
 8007f56:	f000 f8c9 	bl	80080ec <putchar>
		for (int i=x1+1;i<x2-1;i++){
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f66:	429a      	cmp	r2, r3
 8007f68:	dbf4      	blt.n	8007f54 <windowSmp+0x44>
		}


		printf("%c\n", tr);
 8007f6a:	69f9      	ldr	r1, [r7, #28]
 8007f6c:	481d      	ldr	r0, [pc, #116]	; (8007fe4 <windowSmp+0xd4>)
 8007f6e:	f000 f8a5 	bl	80080bc <iprintf>

		//Mid │        │
for (int i = y1+1; i < y2; i++) {
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	3301      	adds	r3, #1
 8007f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f78:	e012      	b.n	8007fa0 <windowSmp+0x90>
			gotoxy(x1, i);
 8007f7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f7fc fdd5 	bl	8004b2c <gotoxy>
			printf("%c", wll);
 8007f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f84:	f000 f8b2 	bl	80080ec <putchar>
			gotoxy(x2-1,i);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fc fdcc 	bl	8004b2c <gotoxy>
			printf("%c", wll);
 8007f94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f96:	f000 f8a9 	bl	80080ec <putchar>
for (int i = y1+1; i < y2; i++) {
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	dbe8      	blt.n	8007f7a <windowSmp+0x6a>
		}

		//Bottom  └─────────┘
		gotoxy(x1,y2);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f7fc fdbe 	bl	8004b2c <gotoxy>
		printf("%c", bl);
 8007fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fb2:	f000 f89b 	bl	80080ec <putchar>
		for (int i=x1; i < x2-2; i++){
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fba:	e005      	b.n	8007fc8 <windowSmp+0xb8>
			printf("%c", btt);
 8007fbc:	6a38      	ldr	r0, [r7, #32]
 8007fbe:	f000 f895 	bl	80080ec <putchar>
		for (int i=x1; i < x2-2; i++){
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3b02      	subs	r3, #2
 8007fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	dbf4      	blt.n	8007fbc <windowSmp+0xac>
		}
		printf("%c\n", br);
 8007fd2:	6979      	ldr	r1, [r7, #20]
 8007fd4:	4803      	ldr	r0, [pc, #12]	; (8007fe4 <windowSmp+0xd4>)
 8007fd6:	f000 f871 	bl	80080bc <iprintf>
	}
 8007fda:	bf00      	nop
 8007fdc:	3740      	adds	r7, #64	; 0x40
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	0800a640 	.word	0x0800a640

08007fe8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007fe8:	480d      	ldr	r0, [pc, #52]	; (8008020 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007fea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007fec:	480d      	ldr	r0, [pc, #52]	; (8008024 <LoopForever+0x6>)
  ldr r1, =_edata
 8007fee:	490e      	ldr	r1, [pc, #56]	; (8008028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007ff0:	4a0e      	ldr	r2, [pc, #56]	; (800802c <LoopForever+0xe>)
  movs r3, #0
 8007ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ff4:	e002      	b.n	8007ffc <LoopCopyDataInit>

08007ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ffa:	3304      	adds	r3, #4

08007ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008000:	d3f9      	bcc.n	8007ff6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008002:	4a0b      	ldr	r2, [pc, #44]	; (8008030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008004:	4c0b      	ldr	r4, [pc, #44]	; (8008034 <LoopForever+0x16>)
  movs r3, #0
 8008006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008008:	e001      	b.n	800800e <LoopFillZerobss>

0800800a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800800a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800800c:	3204      	adds	r2, #4

0800800e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800800e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008010:	d3fb      	bcc.n	800800a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008012:	f7ff fbcf 	bl	80077b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8008016:	f000 f817 	bl	8008048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800801a:	f7fd fbe1 	bl	80057e0 <main>

0800801e <LoopForever>:

LoopForever:
    b LoopForever
 800801e:	e7fe      	b.n	800801e <LoopForever>
  ldr   r0, =_estack
 8008020:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8008024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008028:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800802c:	0800a8f8 	.word	0x0800a8f8
  ldr r2, =_sbss
 8008030:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8008034:	20000450 	.word	0x20000450

08008038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008038:	e7fe      	b.n	8008038 <ADC1_2_IRQHandler>
	...

0800803c <__errno>:
 800803c:	4b01      	ldr	r3, [pc, #4]	; (8008044 <__errno+0x8>)
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	2000002c 	.word	0x2000002c

08008048 <__libc_init_array>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	4d0d      	ldr	r5, [pc, #52]	; (8008080 <__libc_init_array+0x38>)
 800804c:	4c0d      	ldr	r4, [pc, #52]	; (8008084 <__libc_init_array+0x3c>)
 800804e:	1b64      	subs	r4, r4, r5
 8008050:	10a4      	asrs	r4, r4, #2
 8008052:	2600      	movs	r6, #0
 8008054:	42a6      	cmp	r6, r4
 8008056:	d109      	bne.n	800806c <__libc_init_array+0x24>
 8008058:	4d0b      	ldr	r5, [pc, #44]	; (8008088 <__libc_init_array+0x40>)
 800805a:	4c0c      	ldr	r4, [pc, #48]	; (800808c <__libc_init_array+0x44>)
 800805c:	f001 fa6a 	bl	8009534 <_init>
 8008060:	1b64      	subs	r4, r4, r5
 8008062:	10a4      	asrs	r4, r4, #2
 8008064:	2600      	movs	r6, #0
 8008066:	42a6      	cmp	r6, r4
 8008068:	d105      	bne.n	8008076 <__libc_init_array+0x2e>
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008070:	4798      	blx	r3
 8008072:	3601      	adds	r6, #1
 8008074:	e7ee      	b.n	8008054 <__libc_init_array+0xc>
 8008076:	f855 3b04 	ldr.w	r3, [r5], #4
 800807a:	4798      	blx	r3
 800807c:	3601      	adds	r6, #1
 800807e:	e7f2      	b.n	8008066 <__libc_init_array+0x1e>
 8008080:	0800a8f0 	.word	0x0800a8f0
 8008084:	0800a8f0 	.word	0x0800a8f0
 8008088:	0800a8f0 	.word	0x0800a8f0
 800808c:	0800a8f4 	.word	0x0800a8f4

08008090 <memcpy>:
 8008090:	440a      	add	r2, r1
 8008092:	4291      	cmp	r1, r2
 8008094:	f100 33ff 	add.w	r3, r0, #4294967295
 8008098:	d100      	bne.n	800809c <memcpy+0xc>
 800809a:	4770      	bx	lr
 800809c:	b510      	push	{r4, lr}
 800809e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080a6:	4291      	cmp	r1, r2
 80080a8:	d1f9      	bne.n	800809e <memcpy+0xe>
 80080aa:	bd10      	pop	{r4, pc}

080080ac <memset>:
 80080ac:	4402      	add	r2, r0
 80080ae:	4603      	mov	r3, r0
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d100      	bne.n	80080b6 <memset+0xa>
 80080b4:	4770      	bx	lr
 80080b6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ba:	e7f9      	b.n	80080b0 <memset+0x4>

080080bc <iprintf>:
 80080bc:	b40f      	push	{r0, r1, r2, r3}
 80080be:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <iprintf+0x2c>)
 80080c0:	b513      	push	{r0, r1, r4, lr}
 80080c2:	681c      	ldr	r4, [r3, #0]
 80080c4:	b124      	cbz	r4, 80080d0 <iprintf+0x14>
 80080c6:	69a3      	ldr	r3, [r4, #24]
 80080c8:	b913      	cbnz	r3, 80080d0 <iprintf+0x14>
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 fa2c 	bl	8008528 <__sinit>
 80080d0:	ab05      	add	r3, sp, #20
 80080d2:	9a04      	ldr	r2, [sp, #16]
 80080d4:	68a1      	ldr	r1, [r4, #8]
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	4620      	mov	r0, r4
 80080da:	f000 fd61 	bl	8008ba0 <_vfiprintf_r>
 80080de:	b002      	add	sp, #8
 80080e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e4:	b004      	add	sp, #16
 80080e6:	4770      	bx	lr
 80080e8:	2000002c 	.word	0x2000002c

080080ec <putchar>:
 80080ec:	4b09      	ldr	r3, [pc, #36]	; (8008114 <putchar+0x28>)
 80080ee:	b513      	push	{r0, r1, r4, lr}
 80080f0:	681c      	ldr	r4, [r3, #0]
 80080f2:	4601      	mov	r1, r0
 80080f4:	b134      	cbz	r4, 8008104 <putchar+0x18>
 80080f6:	69a3      	ldr	r3, [r4, #24]
 80080f8:	b923      	cbnz	r3, 8008104 <putchar+0x18>
 80080fa:	9001      	str	r0, [sp, #4]
 80080fc:	4620      	mov	r0, r4
 80080fe:	f000 fa13 	bl	8008528 <__sinit>
 8008102:	9901      	ldr	r1, [sp, #4]
 8008104:	68a2      	ldr	r2, [r4, #8]
 8008106:	4620      	mov	r0, r4
 8008108:	b002      	add	sp, #8
 800810a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800810e:	f001 b80b 	b.w	8009128 <_putc_r>
 8008112:	bf00      	nop
 8008114:	2000002c 	.word	0x2000002c

08008118 <setbuf>:
 8008118:	2900      	cmp	r1, #0
 800811a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800811e:	bf0c      	ite	eq
 8008120:	2202      	moveq	r2, #2
 8008122:	2200      	movne	r2, #0
 8008124:	f000 b800 	b.w	8008128 <setvbuf>

08008128 <setvbuf>:
 8008128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800812c:	461d      	mov	r5, r3
 800812e:	4b5d      	ldr	r3, [pc, #372]	; (80082a4 <setvbuf+0x17c>)
 8008130:	681f      	ldr	r7, [r3, #0]
 8008132:	4604      	mov	r4, r0
 8008134:	460e      	mov	r6, r1
 8008136:	4690      	mov	r8, r2
 8008138:	b127      	cbz	r7, 8008144 <setvbuf+0x1c>
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	b913      	cbnz	r3, 8008144 <setvbuf+0x1c>
 800813e:	4638      	mov	r0, r7
 8008140:	f000 f9f2 	bl	8008528 <__sinit>
 8008144:	4b58      	ldr	r3, [pc, #352]	; (80082a8 <setvbuf+0x180>)
 8008146:	429c      	cmp	r4, r3
 8008148:	d167      	bne.n	800821a <setvbuf+0xf2>
 800814a:	687c      	ldr	r4, [r7, #4]
 800814c:	f1b8 0f02 	cmp.w	r8, #2
 8008150:	d006      	beq.n	8008160 <setvbuf+0x38>
 8008152:	f1b8 0f01 	cmp.w	r8, #1
 8008156:	f200 809f 	bhi.w	8008298 <setvbuf+0x170>
 800815a:	2d00      	cmp	r5, #0
 800815c:	f2c0 809c 	blt.w	8008298 <setvbuf+0x170>
 8008160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008162:	07db      	lsls	r3, r3, #31
 8008164:	d405      	bmi.n	8008172 <setvbuf+0x4a>
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	0598      	lsls	r0, r3, #22
 800816a:	d402      	bmi.n	8008172 <setvbuf+0x4a>
 800816c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800816e:	f000 fa79 	bl	8008664 <__retarget_lock_acquire_recursive>
 8008172:	4621      	mov	r1, r4
 8008174:	4638      	mov	r0, r7
 8008176:	f000 f943 	bl	8008400 <_fflush_r>
 800817a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800817c:	b141      	cbz	r1, 8008190 <setvbuf+0x68>
 800817e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008182:	4299      	cmp	r1, r3
 8008184:	d002      	beq.n	800818c <setvbuf+0x64>
 8008186:	4638      	mov	r0, r7
 8008188:	f000 fada 	bl	8008740 <_free_r>
 800818c:	2300      	movs	r3, #0
 800818e:	6363      	str	r3, [r4, #52]	; 0x34
 8008190:	2300      	movs	r3, #0
 8008192:	61a3      	str	r3, [r4, #24]
 8008194:	6063      	str	r3, [r4, #4]
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	0619      	lsls	r1, r3, #24
 800819a:	d503      	bpl.n	80081a4 <setvbuf+0x7c>
 800819c:	6921      	ldr	r1, [r4, #16]
 800819e:	4638      	mov	r0, r7
 80081a0:	f000 face 	bl	8008740 <_free_r>
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80081aa:	f023 0303 	bic.w	r3, r3, #3
 80081ae:	f1b8 0f02 	cmp.w	r8, #2
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	d06c      	beq.n	8008290 <setvbuf+0x168>
 80081b6:	ab01      	add	r3, sp, #4
 80081b8:	466a      	mov	r2, sp
 80081ba:	4621      	mov	r1, r4
 80081bc:	4638      	mov	r0, r7
 80081be:	f000 fa53 	bl	8008668 <__swhatbuf_r>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	4318      	orrs	r0, r3
 80081c6:	81a0      	strh	r0, [r4, #12]
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	d130      	bne.n	800822e <setvbuf+0x106>
 80081cc:	9d00      	ldr	r5, [sp, #0]
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 faae 	bl	8008730 <malloc>
 80081d4:	4606      	mov	r6, r0
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d155      	bne.n	8008286 <setvbuf+0x15e>
 80081da:	f8dd 9000 	ldr.w	r9, [sp]
 80081de:	45a9      	cmp	r9, r5
 80081e0:	d14a      	bne.n	8008278 <setvbuf+0x150>
 80081e2:	f04f 35ff 	mov.w	r5, #4294967295
 80081e6:	2200      	movs	r2, #0
 80081e8:	60a2      	str	r2, [r4, #8]
 80081ea:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80081ee:	6022      	str	r2, [r4, #0]
 80081f0:	6122      	str	r2, [r4, #16]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f8:	6162      	str	r2, [r4, #20]
 80081fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081fc:	f043 0302 	orr.w	r3, r3, #2
 8008200:	07d2      	lsls	r2, r2, #31
 8008202:	81a3      	strh	r3, [r4, #12]
 8008204:	d405      	bmi.n	8008212 <setvbuf+0xea>
 8008206:	f413 7f00 	tst.w	r3, #512	; 0x200
 800820a:	d102      	bne.n	8008212 <setvbuf+0xea>
 800820c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800820e:	f000 fa2a 	bl	8008666 <__retarget_lock_release_recursive>
 8008212:	4628      	mov	r0, r5
 8008214:	b003      	add	sp, #12
 8008216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800821a:	4b24      	ldr	r3, [pc, #144]	; (80082ac <setvbuf+0x184>)
 800821c:	429c      	cmp	r4, r3
 800821e:	d101      	bne.n	8008224 <setvbuf+0xfc>
 8008220:	68bc      	ldr	r4, [r7, #8]
 8008222:	e793      	b.n	800814c <setvbuf+0x24>
 8008224:	4b22      	ldr	r3, [pc, #136]	; (80082b0 <setvbuf+0x188>)
 8008226:	429c      	cmp	r4, r3
 8008228:	bf08      	it	eq
 800822a:	68fc      	ldreq	r4, [r7, #12]
 800822c:	e78e      	b.n	800814c <setvbuf+0x24>
 800822e:	2e00      	cmp	r6, #0
 8008230:	d0cd      	beq.n	80081ce <setvbuf+0xa6>
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	b913      	cbnz	r3, 800823c <setvbuf+0x114>
 8008236:	4638      	mov	r0, r7
 8008238:	f000 f976 	bl	8008528 <__sinit>
 800823c:	f1b8 0f01 	cmp.w	r8, #1
 8008240:	bf08      	it	eq
 8008242:	89a3      	ldrheq	r3, [r4, #12]
 8008244:	6026      	str	r6, [r4, #0]
 8008246:	bf04      	itt	eq
 8008248:	f043 0301 	orreq.w	r3, r3, #1
 800824c:	81a3      	strheq	r3, [r4, #12]
 800824e:	89a2      	ldrh	r2, [r4, #12]
 8008250:	f012 0308 	ands.w	r3, r2, #8
 8008254:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008258:	d01c      	beq.n	8008294 <setvbuf+0x16c>
 800825a:	07d3      	lsls	r3, r2, #31
 800825c:	bf41      	itttt	mi
 800825e:	2300      	movmi	r3, #0
 8008260:	426d      	negmi	r5, r5
 8008262:	60a3      	strmi	r3, [r4, #8]
 8008264:	61a5      	strmi	r5, [r4, #24]
 8008266:	bf58      	it	pl
 8008268:	60a5      	strpl	r5, [r4, #8]
 800826a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800826c:	f015 0501 	ands.w	r5, r5, #1
 8008270:	d115      	bne.n	800829e <setvbuf+0x176>
 8008272:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008276:	e7c8      	b.n	800820a <setvbuf+0xe2>
 8008278:	4648      	mov	r0, r9
 800827a:	f000 fa59 	bl	8008730 <malloc>
 800827e:	4606      	mov	r6, r0
 8008280:	2800      	cmp	r0, #0
 8008282:	d0ae      	beq.n	80081e2 <setvbuf+0xba>
 8008284:	464d      	mov	r5, r9
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	e7d0      	b.n	8008232 <setvbuf+0x10a>
 8008290:	2500      	movs	r5, #0
 8008292:	e7a8      	b.n	80081e6 <setvbuf+0xbe>
 8008294:	60a3      	str	r3, [r4, #8]
 8008296:	e7e8      	b.n	800826a <setvbuf+0x142>
 8008298:	f04f 35ff 	mov.w	r5, #4294967295
 800829c:	e7b9      	b.n	8008212 <setvbuf+0xea>
 800829e:	2500      	movs	r5, #0
 80082a0:	e7b7      	b.n	8008212 <setvbuf+0xea>
 80082a2:	bf00      	nop
 80082a4:	2000002c 	.word	0x2000002c
 80082a8:	0800a87c 	.word	0x0800a87c
 80082ac:	0800a89c 	.word	0x0800a89c
 80082b0:	0800a85c 	.word	0x0800a85c

080082b4 <siprintf>:
 80082b4:	b40e      	push	{r1, r2, r3}
 80082b6:	b500      	push	{lr}
 80082b8:	b09c      	sub	sp, #112	; 0x70
 80082ba:	ab1d      	add	r3, sp, #116	; 0x74
 80082bc:	9002      	str	r0, [sp, #8]
 80082be:	9006      	str	r0, [sp, #24]
 80082c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082c4:	4809      	ldr	r0, [pc, #36]	; (80082ec <siprintf+0x38>)
 80082c6:	9107      	str	r1, [sp, #28]
 80082c8:	9104      	str	r1, [sp, #16]
 80082ca:	4909      	ldr	r1, [pc, #36]	; (80082f0 <siprintf+0x3c>)
 80082cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d0:	9105      	str	r1, [sp, #20]
 80082d2:	6800      	ldr	r0, [r0, #0]
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	a902      	add	r1, sp, #8
 80082d8:	f000 fb38 	bl	800894c <_svfiprintf_r>
 80082dc:	9b02      	ldr	r3, [sp, #8]
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	b01c      	add	sp, #112	; 0x70
 80082e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e8:	b003      	add	sp, #12
 80082ea:	4770      	bx	lr
 80082ec:	2000002c 	.word	0x2000002c
 80082f0:	ffff0208 	.word	0xffff0208

080082f4 <__sflush_r>:
 80082f4:	898a      	ldrh	r2, [r1, #12]
 80082f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fa:	4605      	mov	r5, r0
 80082fc:	0710      	lsls	r0, r2, #28
 80082fe:	460c      	mov	r4, r1
 8008300:	d458      	bmi.n	80083b4 <__sflush_r+0xc0>
 8008302:	684b      	ldr	r3, [r1, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	dc05      	bgt.n	8008314 <__sflush_r+0x20>
 8008308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800830a:	2b00      	cmp	r3, #0
 800830c:	dc02      	bgt.n	8008314 <__sflush_r+0x20>
 800830e:	2000      	movs	r0, #0
 8008310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008316:	2e00      	cmp	r6, #0
 8008318:	d0f9      	beq.n	800830e <__sflush_r+0x1a>
 800831a:	2300      	movs	r3, #0
 800831c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008320:	682f      	ldr	r7, [r5, #0]
 8008322:	602b      	str	r3, [r5, #0]
 8008324:	d032      	beq.n	800838c <__sflush_r+0x98>
 8008326:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	075a      	lsls	r2, r3, #29
 800832c:	d505      	bpl.n	800833a <__sflush_r+0x46>
 800832e:	6863      	ldr	r3, [r4, #4]
 8008330:	1ac0      	subs	r0, r0, r3
 8008332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008334:	b10b      	cbz	r3, 800833a <__sflush_r+0x46>
 8008336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008338:	1ac0      	subs	r0, r0, r3
 800833a:	2300      	movs	r3, #0
 800833c:	4602      	mov	r2, r0
 800833e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008340:	6a21      	ldr	r1, [r4, #32]
 8008342:	4628      	mov	r0, r5
 8008344:	47b0      	blx	r6
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	d106      	bne.n	800835a <__sflush_r+0x66>
 800834c:	6829      	ldr	r1, [r5, #0]
 800834e:	291d      	cmp	r1, #29
 8008350:	d82c      	bhi.n	80083ac <__sflush_r+0xb8>
 8008352:	4a2a      	ldr	r2, [pc, #168]	; (80083fc <__sflush_r+0x108>)
 8008354:	40ca      	lsrs	r2, r1
 8008356:	07d6      	lsls	r6, r2, #31
 8008358:	d528      	bpl.n	80083ac <__sflush_r+0xb8>
 800835a:	2200      	movs	r2, #0
 800835c:	6062      	str	r2, [r4, #4]
 800835e:	04d9      	lsls	r1, r3, #19
 8008360:	6922      	ldr	r2, [r4, #16]
 8008362:	6022      	str	r2, [r4, #0]
 8008364:	d504      	bpl.n	8008370 <__sflush_r+0x7c>
 8008366:	1c42      	adds	r2, r0, #1
 8008368:	d101      	bne.n	800836e <__sflush_r+0x7a>
 800836a:	682b      	ldr	r3, [r5, #0]
 800836c:	b903      	cbnz	r3, 8008370 <__sflush_r+0x7c>
 800836e:	6560      	str	r0, [r4, #84]	; 0x54
 8008370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008372:	602f      	str	r7, [r5, #0]
 8008374:	2900      	cmp	r1, #0
 8008376:	d0ca      	beq.n	800830e <__sflush_r+0x1a>
 8008378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800837c:	4299      	cmp	r1, r3
 800837e:	d002      	beq.n	8008386 <__sflush_r+0x92>
 8008380:	4628      	mov	r0, r5
 8008382:	f000 f9dd 	bl	8008740 <_free_r>
 8008386:	2000      	movs	r0, #0
 8008388:	6360      	str	r0, [r4, #52]	; 0x34
 800838a:	e7c1      	b.n	8008310 <__sflush_r+0x1c>
 800838c:	6a21      	ldr	r1, [r4, #32]
 800838e:	2301      	movs	r3, #1
 8008390:	4628      	mov	r0, r5
 8008392:	47b0      	blx	r6
 8008394:	1c41      	adds	r1, r0, #1
 8008396:	d1c7      	bne.n	8008328 <__sflush_r+0x34>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0c4      	beq.n	8008328 <__sflush_r+0x34>
 800839e:	2b1d      	cmp	r3, #29
 80083a0:	d001      	beq.n	80083a6 <__sflush_r+0xb2>
 80083a2:	2b16      	cmp	r3, #22
 80083a4:	d101      	bne.n	80083aa <__sflush_r+0xb6>
 80083a6:	602f      	str	r7, [r5, #0]
 80083a8:	e7b1      	b.n	800830e <__sflush_r+0x1a>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	e7ad      	b.n	8008310 <__sflush_r+0x1c>
 80083b4:	690f      	ldr	r7, [r1, #16]
 80083b6:	2f00      	cmp	r7, #0
 80083b8:	d0a9      	beq.n	800830e <__sflush_r+0x1a>
 80083ba:	0793      	lsls	r3, r2, #30
 80083bc:	680e      	ldr	r6, [r1, #0]
 80083be:	bf08      	it	eq
 80083c0:	694b      	ldreq	r3, [r1, #20]
 80083c2:	600f      	str	r7, [r1, #0]
 80083c4:	bf18      	it	ne
 80083c6:	2300      	movne	r3, #0
 80083c8:	eba6 0807 	sub.w	r8, r6, r7
 80083cc:	608b      	str	r3, [r1, #8]
 80083ce:	f1b8 0f00 	cmp.w	r8, #0
 80083d2:	dd9c      	ble.n	800830e <__sflush_r+0x1a>
 80083d4:	6a21      	ldr	r1, [r4, #32]
 80083d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083d8:	4643      	mov	r3, r8
 80083da:	463a      	mov	r2, r7
 80083dc:	4628      	mov	r0, r5
 80083de:	47b0      	blx	r6
 80083e0:	2800      	cmp	r0, #0
 80083e2:	dc06      	bgt.n	80083f2 <__sflush_r+0xfe>
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	e78e      	b.n	8008310 <__sflush_r+0x1c>
 80083f2:	4407      	add	r7, r0
 80083f4:	eba8 0800 	sub.w	r8, r8, r0
 80083f8:	e7e9      	b.n	80083ce <__sflush_r+0xda>
 80083fa:	bf00      	nop
 80083fc:	20400001 	.word	0x20400001

08008400 <_fflush_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	690b      	ldr	r3, [r1, #16]
 8008404:	4605      	mov	r5, r0
 8008406:	460c      	mov	r4, r1
 8008408:	b913      	cbnz	r3, 8008410 <_fflush_r+0x10>
 800840a:	2500      	movs	r5, #0
 800840c:	4628      	mov	r0, r5
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	b118      	cbz	r0, 800841a <_fflush_r+0x1a>
 8008412:	6983      	ldr	r3, [r0, #24]
 8008414:	b90b      	cbnz	r3, 800841a <_fflush_r+0x1a>
 8008416:	f000 f887 	bl	8008528 <__sinit>
 800841a:	4b14      	ldr	r3, [pc, #80]	; (800846c <_fflush_r+0x6c>)
 800841c:	429c      	cmp	r4, r3
 800841e:	d11b      	bne.n	8008458 <_fflush_r+0x58>
 8008420:	686c      	ldr	r4, [r5, #4]
 8008422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0ef      	beq.n	800840a <_fflush_r+0xa>
 800842a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800842c:	07d0      	lsls	r0, r2, #31
 800842e:	d404      	bmi.n	800843a <_fflush_r+0x3a>
 8008430:	0599      	lsls	r1, r3, #22
 8008432:	d402      	bmi.n	800843a <_fflush_r+0x3a>
 8008434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008436:	f000 f915 	bl	8008664 <__retarget_lock_acquire_recursive>
 800843a:	4628      	mov	r0, r5
 800843c:	4621      	mov	r1, r4
 800843e:	f7ff ff59 	bl	80082f4 <__sflush_r>
 8008442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008444:	07da      	lsls	r2, r3, #31
 8008446:	4605      	mov	r5, r0
 8008448:	d4e0      	bmi.n	800840c <_fflush_r+0xc>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	059b      	lsls	r3, r3, #22
 800844e:	d4dd      	bmi.n	800840c <_fflush_r+0xc>
 8008450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008452:	f000 f908 	bl	8008666 <__retarget_lock_release_recursive>
 8008456:	e7d9      	b.n	800840c <_fflush_r+0xc>
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <_fflush_r+0x70>)
 800845a:	429c      	cmp	r4, r3
 800845c:	d101      	bne.n	8008462 <_fflush_r+0x62>
 800845e:	68ac      	ldr	r4, [r5, #8]
 8008460:	e7df      	b.n	8008422 <_fflush_r+0x22>
 8008462:	4b04      	ldr	r3, [pc, #16]	; (8008474 <_fflush_r+0x74>)
 8008464:	429c      	cmp	r4, r3
 8008466:	bf08      	it	eq
 8008468:	68ec      	ldreq	r4, [r5, #12]
 800846a:	e7da      	b.n	8008422 <_fflush_r+0x22>
 800846c:	0800a87c 	.word	0x0800a87c
 8008470:	0800a89c 	.word	0x0800a89c
 8008474:	0800a85c 	.word	0x0800a85c

08008478 <std>:
 8008478:	2300      	movs	r3, #0
 800847a:	b510      	push	{r4, lr}
 800847c:	4604      	mov	r4, r0
 800847e:	e9c0 3300 	strd	r3, r3, [r0]
 8008482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008486:	6083      	str	r3, [r0, #8]
 8008488:	8181      	strh	r1, [r0, #12]
 800848a:	6643      	str	r3, [r0, #100]	; 0x64
 800848c:	81c2      	strh	r2, [r0, #14]
 800848e:	6183      	str	r3, [r0, #24]
 8008490:	4619      	mov	r1, r3
 8008492:	2208      	movs	r2, #8
 8008494:	305c      	adds	r0, #92	; 0x5c
 8008496:	f7ff fe09 	bl	80080ac <memset>
 800849a:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <std+0x38>)
 800849c:	6263      	str	r3, [r4, #36]	; 0x24
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <std+0x3c>)
 80084a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <std+0x40>)
 80084a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <std+0x44>)
 80084a8:	6224      	str	r4, [r4, #32]
 80084aa:	6323      	str	r3, [r4, #48]	; 0x30
 80084ac:	bd10      	pop	{r4, pc}
 80084ae:	bf00      	nop
 80084b0:	080091d9 	.word	0x080091d9
 80084b4:	080091fb 	.word	0x080091fb
 80084b8:	08009233 	.word	0x08009233
 80084bc:	08009257 	.word	0x08009257

080084c0 <_cleanup_r>:
 80084c0:	4901      	ldr	r1, [pc, #4]	; (80084c8 <_cleanup_r+0x8>)
 80084c2:	f000 b8af 	b.w	8008624 <_fwalk_reent>
 80084c6:	bf00      	nop
 80084c8:	08008401 	.word	0x08008401

080084cc <__sfmoreglue>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	1e4a      	subs	r2, r1, #1
 80084d0:	2568      	movs	r5, #104	; 0x68
 80084d2:	4355      	muls	r5, r2
 80084d4:	460e      	mov	r6, r1
 80084d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084da:	f000 f981 	bl	80087e0 <_malloc_r>
 80084de:	4604      	mov	r4, r0
 80084e0:	b140      	cbz	r0, 80084f4 <__sfmoreglue+0x28>
 80084e2:	2100      	movs	r1, #0
 80084e4:	e9c0 1600 	strd	r1, r6, [r0]
 80084e8:	300c      	adds	r0, #12
 80084ea:	60a0      	str	r0, [r4, #8]
 80084ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084f0:	f7ff fddc 	bl	80080ac <memset>
 80084f4:	4620      	mov	r0, r4
 80084f6:	bd70      	pop	{r4, r5, r6, pc}

080084f8 <__sfp_lock_acquire>:
 80084f8:	4801      	ldr	r0, [pc, #4]	; (8008500 <__sfp_lock_acquire+0x8>)
 80084fa:	f000 b8b3 	b.w	8008664 <__retarget_lock_acquire_recursive>
 80084fe:	bf00      	nop
 8008500:	20000448 	.word	0x20000448

08008504 <__sfp_lock_release>:
 8008504:	4801      	ldr	r0, [pc, #4]	; (800850c <__sfp_lock_release+0x8>)
 8008506:	f000 b8ae 	b.w	8008666 <__retarget_lock_release_recursive>
 800850a:	bf00      	nop
 800850c:	20000448 	.word	0x20000448

08008510 <__sinit_lock_acquire>:
 8008510:	4801      	ldr	r0, [pc, #4]	; (8008518 <__sinit_lock_acquire+0x8>)
 8008512:	f000 b8a7 	b.w	8008664 <__retarget_lock_acquire_recursive>
 8008516:	bf00      	nop
 8008518:	20000443 	.word	0x20000443

0800851c <__sinit_lock_release>:
 800851c:	4801      	ldr	r0, [pc, #4]	; (8008524 <__sinit_lock_release+0x8>)
 800851e:	f000 b8a2 	b.w	8008666 <__retarget_lock_release_recursive>
 8008522:	bf00      	nop
 8008524:	20000443 	.word	0x20000443

08008528 <__sinit>:
 8008528:	b510      	push	{r4, lr}
 800852a:	4604      	mov	r4, r0
 800852c:	f7ff fff0 	bl	8008510 <__sinit_lock_acquire>
 8008530:	69a3      	ldr	r3, [r4, #24]
 8008532:	b11b      	cbz	r3, 800853c <__sinit+0x14>
 8008534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008538:	f7ff bff0 	b.w	800851c <__sinit_lock_release>
 800853c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008540:	6523      	str	r3, [r4, #80]	; 0x50
 8008542:	4b13      	ldr	r3, [pc, #76]	; (8008590 <__sinit+0x68>)
 8008544:	4a13      	ldr	r2, [pc, #76]	; (8008594 <__sinit+0x6c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	62a2      	str	r2, [r4, #40]	; 0x28
 800854a:	42a3      	cmp	r3, r4
 800854c:	bf04      	itt	eq
 800854e:	2301      	moveq	r3, #1
 8008550:	61a3      	streq	r3, [r4, #24]
 8008552:	4620      	mov	r0, r4
 8008554:	f000 f820 	bl	8008598 <__sfp>
 8008558:	6060      	str	r0, [r4, #4]
 800855a:	4620      	mov	r0, r4
 800855c:	f000 f81c 	bl	8008598 <__sfp>
 8008560:	60a0      	str	r0, [r4, #8]
 8008562:	4620      	mov	r0, r4
 8008564:	f000 f818 	bl	8008598 <__sfp>
 8008568:	2200      	movs	r2, #0
 800856a:	60e0      	str	r0, [r4, #12]
 800856c:	2104      	movs	r1, #4
 800856e:	6860      	ldr	r0, [r4, #4]
 8008570:	f7ff ff82 	bl	8008478 <std>
 8008574:	68a0      	ldr	r0, [r4, #8]
 8008576:	2201      	movs	r2, #1
 8008578:	2109      	movs	r1, #9
 800857a:	f7ff ff7d 	bl	8008478 <std>
 800857e:	68e0      	ldr	r0, [r4, #12]
 8008580:	2202      	movs	r2, #2
 8008582:	2112      	movs	r1, #18
 8008584:	f7ff ff78 	bl	8008478 <std>
 8008588:	2301      	movs	r3, #1
 800858a:	61a3      	str	r3, [r4, #24]
 800858c:	e7d2      	b.n	8008534 <__sinit+0xc>
 800858e:	bf00      	nop
 8008590:	0800a858 	.word	0x0800a858
 8008594:	080084c1 	.word	0x080084c1

08008598 <__sfp>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	4607      	mov	r7, r0
 800859c:	f7ff ffac 	bl	80084f8 <__sfp_lock_acquire>
 80085a0:	4b1e      	ldr	r3, [pc, #120]	; (800861c <__sfp+0x84>)
 80085a2:	681e      	ldr	r6, [r3, #0]
 80085a4:	69b3      	ldr	r3, [r6, #24]
 80085a6:	b913      	cbnz	r3, 80085ae <__sfp+0x16>
 80085a8:	4630      	mov	r0, r6
 80085aa:	f7ff ffbd 	bl	8008528 <__sinit>
 80085ae:	3648      	adds	r6, #72	; 0x48
 80085b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	d503      	bpl.n	80085c0 <__sfp+0x28>
 80085b8:	6833      	ldr	r3, [r6, #0]
 80085ba:	b30b      	cbz	r3, 8008600 <__sfp+0x68>
 80085bc:	6836      	ldr	r6, [r6, #0]
 80085be:	e7f7      	b.n	80085b0 <__sfp+0x18>
 80085c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085c4:	b9d5      	cbnz	r5, 80085fc <__sfp+0x64>
 80085c6:	4b16      	ldr	r3, [pc, #88]	; (8008620 <__sfp+0x88>)
 80085c8:	60e3      	str	r3, [r4, #12]
 80085ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085ce:	6665      	str	r5, [r4, #100]	; 0x64
 80085d0:	f000 f847 	bl	8008662 <__retarget_lock_init_recursive>
 80085d4:	f7ff ff96 	bl	8008504 <__sfp_lock_release>
 80085d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085e0:	6025      	str	r5, [r4, #0]
 80085e2:	61a5      	str	r5, [r4, #24]
 80085e4:	2208      	movs	r2, #8
 80085e6:	4629      	mov	r1, r5
 80085e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085ec:	f7ff fd5e 	bl	80080ac <memset>
 80085f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085f8:	4620      	mov	r0, r4
 80085fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085fc:	3468      	adds	r4, #104	; 0x68
 80085fe:	e7d9      	b.n	80085b4 <__sfp+0x1c>
 8008600:	2104      	movs	r1, #4
 8008602:	4638      	mov	r0, r7
 8008604:	f7ff ff62 	bl	80084cc <__sfmoreglue>
 8008608:	4604      	mov	r4, r0
 800860a:	6030      	str	r0, [r6, #0]
 800860c:	2800      	cmp	r0, #0
 800860e:	d1d5      	bne.n	80085bc <__sfp+0x24>
 8008610:	f7ff ff78 	bl	8008504 <__sfp_lock_release>
 8008614:	230c      	movs	r3, #12
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	e7ee      	b.n	80085f8 <__sfp+0x60>
 800861a:	bf00      	nop
 800861c:	0800a858 	.word	0x0800a858
 8008620:	ffff0001 	.word	0xffff0001

08008624 <_fwalk_reent>:
 8008624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008628:	4606      	mov	r6, r0
 800862a:	4688      	mov	r8, r1
 800862c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008630:	2700      	movs	r7, #0
 8008632:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008636:	f1b9 0901 	subs.w	r9, r9, #1
 800863a:	d505      	bpl.n	8008648 <_fwalk_reent+0x24>
 800863c:	6824      	ldr	r4, [r4, #0]
 800863e:	2c00      	cmp	r4, #0
 8008640:	d1f7      	bne.n	8008632 <_fwalk_reent+0xe>
 8008642:	4638      	mov	r0, r7
 8008644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008648:	89ab      	ldrh	r3, [r5, #12]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d907      	bls.n	800865e <_fwalk_reent+0x3a>
 800864e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008652:	3301      	adds	r3, #1
 8008654:	d003      	beq.n	800865e <_fwalk_reent+0x3a>
 8008656:	4629      	mov	r1, r5
 8008658:	4630      	mov	r0, r6
 800865a:	47c0      	blx	r8
 800865c:	4307      	orrs	r7, r0
 800865e:	3568      	adds	r5, #104	; 0x68
 8008660:	e7e9      	b.n	8008636 <_fwalk_reent+0x12>

08008662 <__retarget_lock_init_recursive>:
 8008662:	4770      	bx	lr

08008664 <__retarget_lock_acquire_recursive>:
 8008664:	4770      	bx	lr

08008666 <__retarget_lock_release_recursive>:
 8008666:	4770      	bx	lr

08008668 <__swhatbuf_r>:
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	460e      	mov	r6, r1
 800866c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008670:	2900      	cmp	r1, #0
 8008672:	b096      	sub	sp, #88	; 0x58
 8008674:	4614      	mov	r4, r2
 8008676:	461d      	mov	r5, r3
 8008678:	da07      	bge.n	800868a <__swhatbuf_r+0x22>
 800867a:	2300      	movs	r3, #0
 800867c:	602b      	str	r3, [r5, #0]
 800867e:	89b3      	ldrh	r3, [r6, #12]
 8008680:	061a      	lsls	r2, r3, #24
 8008682:	d410      	bmi.n	80086a6 <__swhatbuf_r+0x3e>
 8008684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008688:	e00e      	b.n	80086a8 <__swhatbuf_r+0x40>
 800868a:	466a      	mov	r2, sp
 800868c:	f000 feb8 	bl	8009400 <_fstat_r>
 8008690:	2800      	cmp	r0, #0
 8008692:	dbf2      	blt.n	800867a <__swhatbuf_r+0x12>
 8008694:	9a01      	ldr	r2, [sp, #4]
 8008696:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800869a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800869e:	425a      	negs	r2, r3
 80086a0:	415a      	adcs	r2, r3
 80086a2:	602a      	str	r2, [r5, #0]
 80086a4:	e7ee      	b.n	8008684 <__swhatbuf_r+0x1c>
 80086a6:	2340      	movs	r3, #64	; 0x40
 80086a8:	2000      	movs	r0, #0
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	b016      	add	sp, #88	; 0x58
 80086ae:	bd70      	pop	{r4, r5, r6, pc}

080086b0 <__smakebuf_r>:
 80086b0:	898b      	ldrh	r3, [r1, #12]
 80086b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086b4:	079d      	lsls	r5, r3, #30
 80086b6:	4606      	mov	r6, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	d507      	bpl.n	80086cc <__smakebuf_r+0x1c>
 80086bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	6123      	str	r3, [r4, #16]
 80086c4:	2301      	movs	r3, #1
 80086c6:	6163      	str	r3, [r4, #20]
 80086c8:	b002      	add	sp, #8
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
 80086cc:	ab01      	add	r3, sp, #4
 80086ce:	466a      	mov	r2, sp
 80086d0:	f7ff ffca 	bl	8008668 <__swhatbuf_r>
 80086d4:	9900      	ldr	r1, [sp, #0]
 80086d6:	4605      	mov	r5, r0
 80086d8:	4630      	mov	r0, r6
 80086da:	f000 f881 	bl	80087e0 <_malloc_r>
 80086de:	b948      	cbnz	r0, 80086f4 <__smakebuf_r+0x44>
 80086e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e4:	059a      	lsls	r2, r3, #22
 80086e6:	d4ef      	bmi.n	80086c8 <__smakebuf_r+0x18>
 80086e8:	f023 0303 	bic.w	r3, r3, #3
 80086ec:	f043 0302 	orr.w	r3, r3, #2
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	e7e3      	b.n	80086bc <__smakebuf_r+0xc>
 80086f4:	4b0d      	ldr	r3, [pc, #52]	; (800872c <__smakebuf_r+0x7c>)
 80086f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	6020      	str	r0, [r4, #0]
 80086fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008700:	81a3      	strh	r3, [r4, #12]
 8008702:	9b00      	ldr	r3, [sp, #0]
 8008704:	6163      	str	r3, [r4, #20]
 8008706:	9b01      	ldr	r3, [sp, #4]
 8008708:	6120      	str	r0, [r4, #16]
 800870a:	b15b      	cbz	r3, 8008724 <__smakebuf_r+0x74>
 800870c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008710:	4630      	mov	r0, r6
 8008712:	f000 fe87 	bl	8009424 <_isatty_r>
 8008716:	b128      	cbz	r0, 8008724 <__smakebuf_r+0x74>
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	f023 0303 	bic.w	r3, r3, #3
 800871e:	f043 0301 	orr.w	r3, r3, #1
 8008722:	81a3      	strh	r3, [r4, #12]
 8008724:	89a0      	ldrh	r0, [r4, #12]
 8008726:	4305      	orrs	r5, r0
 8008728:	81a5      	strh	r5, [r4, #12]
 800872a:	e7cd      	b.n	80086c8 <__smakebuf_r+0x18>
 800872c:	080084c1 	.word	0x080084c1

08008730 <malloc>:
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <malloc+0xc>)
 8008732:	4601      	mov	r1, r0
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	f000 b853 	b.w	80087e0 <_malloc_r>
 800873a:	bf00      	nop
 800873c:	2000002c 	.word	0x2000002c

08008740 <_free_r>:
 8008740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008742:	2900      	cmp	r1, #0
 8008744:	d048      	beq.n	80087d8 <_free_r+0x98>
 8008746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874a:	9001      	str	r0, [sp, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f1a1 0404 	sub.w	r4, r1, #4
 8008752:	bfb8      	it	lt
 8008754:	18e4      	addlt	r4, r4, r3
 8008756:	f000 fea1 	bl	800949c <__malloc_lock>
 800875a:	4a20      	ldr	r2, [pc, #128]	; (80087dc <_free_r+0x9c>)
 800875c:	9801      	ldr	r0, [sp, #4]
 800875e:	6813      	ldr	r3, [r2, #0]
 8008760:	4615      	mov	r5, r2
 8008762:	b933      	cbnz	r3, 8008772 <_free_r+0x32>
 8008764:	6063      	str	r3, [r4, #4]
 8008766:	6014      	str	r4, [r2, #0]
 8008768:	b003      	add	sp, #12
 800876a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800876e:	f000 be9b 	b.w	80094a8 <__malloc_unlock>
 8008772:	42a3      	cmp	r3, r4
 8008774:	d90b      	bls.n	800878e <_free_r+0x4e>
 8008776:	6821      	ldr	r1, [r4, #0]
 8008778:	1862      	adds	r2, r4, r1
 800877a:	4293      	cmp	r3, r2
 800877c:	bf04      	itt	eq
 800877e:	681a      	ldreq	r2, [r3, #0]
 8008780:	685b      	ldreq	r3, [r3, #4]
 8008782:	6063      	str	r3, [r4, #4]
 8008784:	bf04      	itt	eq
 8008786:	1852      	addeq	r2, r2, r1
 8008788:	6022      	streq	r2, [r4, #0]
 800878a:	602c      	str	r4, [r5, #0]
 800878c:	e7ec      	b.n	8008768 <_free_r+0x28>
 800878e:	461a      	mov	r2, r3
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	b10b      	cbz	r3, 8008798 <_free_r+0x58>
 8008794:	42a3      	cmp	r3, r4
 8008796:	d9fa      	bls.n	800878e <_free_r+0x4e>
 8008798:	6811      	ldr	r1, [r2, #0]
 800879a:	1855      	adds	r5, r2, r1
 800879c:	42a5      	cmp	r5, r4
 800879e:	d10b      	bne.n	80087b8 <_free_r+0x78>
 80087a0:	6824      	ldr	r4, [r4, #0]
 80087a2:	4421      	add	r1, r4
 80087a4:	1854      	adds	r4, r2, r1
 80087a6:	42a3      	cmp	r3, r4
 80087a8:	6011      	str	r1, [r2, #0]
 80087aa:	d1dd      	bne.n	8008768 <_free_r+0x28>
 80087ac:	681c      	ldr	r4, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	6053      	str	r3, [r2, #4]
 80087b2:	4421      	add	r1, r4
 80087b4:	6011      	str	r1, [r2, #0]
 80087b6:	e7d7      	b.n	8008768 <_free_r+0x28>
 80087b8:	d902      	bls.n	80087c0 <_free_r+0x80>
 80087ba:	230c      	movs	r3, #12
 80087bc:	6003      	str	r3, [r0, #0]
 80087be:	e7d3      	b.n	8008768 <_free_r+0x28>
 80087c0:	6825      	ldr	r5, [r4, #0]
 80087c2:	1961      	adds	r1, r4, r5
 80087c4:	428b      	cmp	r3, r1
 80087c6:	bf04      	itt	eq
 80087c8:	6819      	ldreq	r1, [r3, #0]
 80087ca:	685b      	ldreq	r3, [r3, #4]
 80087cc:	6063      	str	r3, [r4, #4]
 80087ce:	bf04      	itt	eq
 80087d0:	1949      	addeq	r1, r1, r5
 80087d2:	6021      	streq	r1, [r4, #0]
 80087d4:	6054      	str	r4, [r2, #4]
 80087d6:	e7c7      	b.n	8008768 <_free_r+0x28>
 80087d8:	b003      	add	sp, #12
 80087da:	bd30      	pop	{r4, r5, pc}
 80087dc:	200001c4 	.word	0x200001c4

080087e0 <_malloc_r>:
 80087e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e2:	1ccd      	adds	r5, r1, #3
 80087e4:	f025 0503 	bic.w	r5, r5, #3
 80087e8:	3508      	adds	r5, #8
 80087ea:	2d0c      	cmp	r5, #12
 80087ec:	bf38      	it	cc
 80087ee:	250c      	movcc	r5, #12
 80087f0:	2d00      	cmp	r5, #0
 80087f2:	4606      	mov	r6, r0
 80087f4:	db01      	blt.n	80087fa <_malloc_r+0x1a>
 80087f6:	42a9      	cmp	r1, r5
 80087f8:	d903      	bls.n	8008802 <_malloc_r+0x22>
 80087fa:	230c      	movs	r3, #12
 80087fc:	6033      	str	r3, [r6, #0]
 80087fe:	2000      	movs	r0, #0
 8008800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008802:	f000 fe4b 	bl	800949c <__malloc_lock>
 8008806:	4921      	ldr	r1, [pc, #132]	; (800888c <_malloc_r+0xac>)
 8008808:	680a      	ldr	r2, [r1, #0]
 800880a:	4614      	mov	r4, r2
 800880c:	b99c      	cbnz	r4, 8008836 <_malloc_r+0x56>
 800880e:	4f20      	ldr	r7, [pc, #128]	; (8008890 <_malloc_r+0xb0>)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	b923      	cbnz	r3, 800881e <_malloc_r+0x3e>
 8008814:	4621      	mov	r1, r4
 8008816:	4630      	mov	r0, r6
 8008818:	f000 fcce 	bl	80091b8 <_sbrk_r>
 800881c:	6038      	str	r0, [r7, #0]
 800881e:	4629      	mov	r1, r5
 8008820:	4630      	mov	r0, r6
 8008822:	f000 fcc9 	bl	80091b8 <_sbrk_r>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d123      	bne.n	8008872 <_malloc_r+0x92>
 800882a:	230c      	movs	r3, #12
 800882c:	6033      	str	r3, [r6, #0]
 800882e:	4630      	mov	r0, r6
 8008830:	f000 fe3a 	bl	80094a8 <__malloc_unlock>
 8008834:	e7e3      	b.n	80087fe <_malloc_r+0x1e>
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	1b5b      	subs	r3, r3, r5
 800883a:	d417      	bmi.n	800886c <_malloc_r+0x8c>
 800883c:	2b0b      	cmp	r3, #11
 800883e:	d903      	bls.n	8008848 <_malloc_r+0x68>
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	441c      	add	r4, r3
 8008844:	6025      	str	r5, [r4, #0]
 8008846:	e004      	b.n	8008852 <_malloc_r+0x72>
 8008848:	6863      	ldr	r3, [r4, #4]
 800884a:	42a2      	cmp	r2, r4
 800884c:	bf0c      	ite	eq
 800884e:	600b      	streq	r3, [r1, #0]
 8008850:	6053      	strne	r3, [r2, #4]
 8008852:	4630      	mov	r0, r6
 8008854:	f000 fe28 	bl	80094a8 <__malloc_unlock>
 8008858:	f104 000b 	add.w	r0, r4, #11
 800885c:	1d23      	adds	r3, r4, #4
 800885e:	f020 0007 	bic.w	r0, r0, #7
 8008862:	1ac2      	subs	r2, r0, r3
 8008864:	d0cc      	beq.n	8008800 <_malloc_r+0x20>
 8008866:	1a1b      	subs	r3, r3, r0
 8008868:	50a3      	str	r3, [r4, r2]
 800886a:	e7c9      	b.n	8008800 <_malloc_r+0x20>
 800886c:	4622      	mov	r2, r4
 800886e:	6864      	ldr	r4, [r4, #4]
 8008870:	e7cc      	b.n	800880c <_malloc_r+0x2c>
 8008872:	1cc4      	adds	r4, r0, #3
 8008874:	f024 0403 	bic.w	r4, r4, #3
 8008878:	42a0      	cmp	r0, r4
 800887a:	d0e3      	beq.n	8008844 <_malloc_r+0x64>
 800887c:	1a21      	subs	r1, r4, r0
 800887e:	4630      	mov	r0, r6
 8008880:	f000 fc9a 	bl	80091b8 <_sbrk_r>
 8008884:	3001      	adds	r0, #1
 8008886:	d1dd      	bne.n	8008844 <_malloc_r+0x64>
 8008888:	e7cf      	b.n	800882a <_malloc_r+0x4a>
 800888a:	bf00      	nop
 800888c:	200001c4 	.word	0x200001c4
 8008890:	200001c8 	.word	0x200001c8

08008894 <__ssputs_r>:
 8008894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008898:	688e      	ldr	r6, [r1, #8]
 800889a:	429e      	cmp	r6, r3
 800889c:	4682      	mov	sl, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	4690      	mov	r8, r2
 80088a2:	461f      	mov	r7, r3
 80088a4:	d838      	bhi.n	8008918 <__ssputs_r+0x84>
 80088a6:	898a      	ldrh	r2, [r1, #12]
 80088a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088ac:	d032      	beq.n	8008914 <__ssputs_r+0x80>
 80088ae:	6825      	ldr	r5, [r4, #0]
 80088b0:	6909      	ldr	r1, [r1, #16]
 80088b2:	eba5 0901 	sub.w	r9, r5, r1
 80088b6:	6965      	ldr	r5, [r4, #20]
 80088b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088c0:	3301      	adds	r3, #1
 80088c2:	444b      	add	r3, r9
 80088c4:	106d      	asrs	r5, r5, #1
 80088c6:	429d      	cmp	r5, r3
 80088c8:	bf38      	it	cc
 80088ca:	461d      	movcc	r5, r3
 80088cc:	0553      	lsls	r3, r2, #21
 80088ce:	d531      	bpl.n	8008934 <__ssputs_r+0xa0>
 80088d0:	4629      	mov	r1, r5
 80088d2:	f7ff ff85 	bl	80087e0 <_malloc_r>
 80088d6:	4606      	mov	r6, r0
 80088d8:	b950      	cbnz	r0, 80088f0 <__ssputs_r+0x5c>
 80088da:	230c      	movs	r3, #12
 80088dc:	f8ca 3000 	str.w	r3, [sl]
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f0:	6921      	ldr	r1, [r4, #16]
 80088f2:	464a      	mov	r2, r9
 80088f4:	f7ff fbcc 	bl	8008090 <memcpy>
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	6126      	str	r6, [r4, #16]
 8008906:	6165      	str	r5, [r4, #20]
 8008908:	444e      	add	r6, r9
 800890a:	eba5 0509 	sub.w	r5, r5, r9
 800890e:	6026      	str	r6, [r4, #0]
 8008910:	60a5      	str	r5, [r4, #8]
 8008912:	463e      	mov	r6, r7
 8008914:	42be      	cmp	r6, r7
 8008916:	d900      	bls.n	800891a <__ssputs_r+0x86>
 8008918:	463e      	mov	r6, r7
 800891a:	4632      	mov	r2, r6
 800891c:	6820      	ldr	r0, [r4, #0]
 800891e:	4641      	mov	r1, r8
 8008920:	f000 fda2 	bl	8009468 <memmove>
 8008924:	68a3      	ldr	r3, [r4, #8]
 8008926:	6822      	ldr	r2, [r4, #0]
 8008928:	1b9b      	subs	r3, r3, r6
 800892a:	4432      	add	r2, r6
 800892c:	60a3      	str	r3, [r4, #8]
 800892e:	6022      	str	r2, [r4, #0]
 8008930:	2000      	movs	r0, #0
 8008932:	e7db      	b.n	80088ec <__ssputs_r+0x58>
 8008934:	462a      	mov	r2, r5
 8008936:	f000 fdbd 	bl	80094b4 <_realloc_r>
 800893a:	4606      	mov	r6, r0
 800893c:	2800      	cmp	r0, #0
 800893e:	d1e1      	bne.n	8008904 <__ssputs_r+0x70>
 8008940:	6921      	ldr	r1, [r4, #16]
 8008942:	4650      	mov	r0, sl
 8008944:	f7ff fefc 	bl	8008740 <_free_r>
 8008948:	e7c7      	b.n	80088da <__ssputs_r+0x46>
	...

0800894c <_svfiprintf_r>:
 800894c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	4698      	mov	r8, r3
 8008952:	898b      	ldrh	r3, [r1, #12]
 8008954:	061b      	lsls	r3, r3, #24
 8008956:	b09d      	sub	sp, #116	; 0x74
 8008958:	4607      	mov	r7, r0
 800895a:	460d      	mov	r5, r1
 800895c:	4614      	mov	r4, r2
 800895e:	d50e      	bpl.n	800897e <_svfiprintf_r+0x32>
 8008960:	690b      	ldr	r3, [r1, #16]
 8008962:	b963      	cbnz	r3, 800897e <_svfiprintf_r+0x32>
 8008964:	2140      	movs	r1, #64	; 0x40
 8008966:	f7ff ff3b 	bl	80087e0 <_malloc_r>
 800896a:	6028      	str	r0, [r5, #0]
 800896c:	6128      	str	r0, [r5, #16]
 800896e:	b920      	cbnz	r0, 800897a <_svfiprintf_r+0x2e>
 8008970:	230c      	movs	r3, #12
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	e0d1      	b.n	8008b1e <_svfiprintf_r+0x1d2>
 800897a:	2340      	movs	r3, #64	; 0x40
 800897c:	616b      	str	r3, [r5, #20]
 800897e:	2300      	movs	r3, #0
 8008980:	9309      	str	r3, [sp, #36]	; 0x24
 8008982:	2320      	movs	r3, #32
 8008984:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008988:	f8cd 800c 	str.w	r8, [sp, #12]
 800898c:	2330      	movs	r3, #48	; 0x30
 800898e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b38 <_svfiprintf_r+0x1ec>
 8008992:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008996:	f04f 0901 	mov.w	r9, #1
 800899a:	4623      	mov	r3, r4
 800899c:	469a      	mov	sl, r3
 800899e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a2:	b10a      	cbz	r2, 80089a8 <_svfiprintf_r+0x5c>
 80089a4:	2a25      	cmp	r2, #37	; 0x25
 80089a6:	d1f9      	bne.n	800899c <_svfiprintf_r+0x50>
 80089a8:	ebba 0b04 	subs.w	fp, sl, r4
 80089ac:	d00b      	beq.n	80089c6 <_svfiprintf_r+0x7a>
 80089ae:	465b      	mov	r3, fp
 80089b0:	4622      	mov	r2, r4
 80089b2:	4629      	mov	r1, r5
 80089b4:	4638      	mov	r0, r7
 80089b6:	f7ff ff6d 	bl	8008894 <__ssputs_r>
 80089ba:	3001      	adds	r0, #1
 80089bc:	f000 80aa 	beq.w	8008b14 <_svfiprintf_r+0x1c8>
 80089c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089c2:	445a      	add	r2, fp
 80089c4:	9209      	str	r2, [sp, #36]	; 0x24
 80089c6:	f89a 3000 	ldrb.w	r3, [sl]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 80a2 	beq.w	8008b14 <_svfiprintf_r+0x1c8>
 80089d0:	2300      	movs	r3, #0
 80089d2:	f04f 32ff 	mov.w	r2, #4294967295
 80089d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089da:	f10a 0a01 	add.w	sl, sl, #1
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	9307      	str	r3, [sp, #28]
 80089e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089e6:	931a      	str	r3, [sp, #104]	; 0x68
 80089e8:	4654      	mov	r4, sl
 80089ea:	2205      	movs	r2, #5
 80089ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f0:	4851      	ldr	r0, [pc, #324]	; (8008b38 <_svfiprintf_r+0x1ec>)
 80089f2:	f7f7 fbf5 	bl	80001e0 <memchr>
 80089f6:	9a04      	ldr	r2, [sp, #16]
 80089f8:	b9d8      	cbnz	r0, 8008a32 <_svfiprintf_r+0xe6>
 80089fa:	06d0      	lsls	r0, r2, #27
 80089fc:	bf44      	itt	mi
 80089fe:	2320      	movmi	r3, #32
 8008a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a04:	0711      	lsls	r1, r2, #28
 8008a06:	bf44      	itt	mi
 8008a08:	232b      	movmi	r3, #43	; 0x2b
 8008a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a12:	2b2a      	cmp	r3, #42	; 0x2a
 8008a14:	d015      	beq.n	8008a42 <_svfiprintf_r+0xf6>
 8008a16:	9a07      	ldr	r2, [sp, #28]
 8008a18:	4654      	mov	r4, sl
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	f04f 0c0a 	mov.w	ip, #10
 8008a20:	4621      	mov	r1, r4
 8008a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a26:	3b30      	subs	r3, #48	; 0x30
 8008a28:	2b09      	cmp	r3, #9
 8008a2a:	d94e      	bls.n	8008aca <_svfiprintf_r+0x17e>
 8008a2c:	b1b0      	cbz	r0, 8008a5c <_svfiprintf_r+0x110>
 8008a2e:	9207      	str	r2, [sp, #28]
 8008a30:	e014      	b.n	8008a5c <_svfiprintf_r+0x110>
 8008a32:	eba0 0308 	sub.w	r3, r0, r8
 8008a36:	fa09 f303 	lsl.w	r3, r9, r3
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	46a2      	mov	sl, r4
 8008a40:	e7d2      	b.n	80089e8 <_svfiprintf_r+0x9c>
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	1d19      	adds	r1, r3, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	9103      	str	r1, [sp, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	bfbb      	ittet	lt
 8008a4e:	425b      	neglt	r3, r3
 8008a50:	f042 0202 	orrlt.w	r2, r2, #2
 8008a54:	9307      	strge	r3, [sp, #28]
 8008a56:	9307      	strlt	r3, [sp, #28]
 8008a58:	bfb8      	it	lt
 8008a5a:	9204      	strlt	r2, [sp, #16]
 8008a5c:	7823      	ldrb	r3, [r4, #0]
 8008a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a60:	d10c      	bne.n	8008a7c <_svfiprintf_r+0x130>
 8008a62:	7863      	ldrb	r3, [r4, #1]
 8008a64:	2b2a      	cmp	r3, #42	; 0x2a
 8008a66:	d135      	bne.n	8008ad4 <_svfiprintf_r+0x188>
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	1d1a      	adds	r2, r3, #4
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	9203      	str	r2, [sp, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bfb8      	it	lt
 8008a74:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a78:	3402      	adds	r4, #2
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b48 <_svfiprintf_r+0x1fc>
 8008a80:	7821      	ldrb	r1, [r4, #0]
 8008a82:	2203      	movs	r2, #3
 8008a84:	4650      	mov	r0, sl
 8008a86:	f7f7 fbab 	bl	80001e0 <memchr>
 8008a8a:	b140      	cbz	r0, 8008a9e <_svfiprintf_r+0x152>
 8008a8c:	2340      	movs	r3, #64	; 0x40
 8008a8e:	eba0 000a 	sub.w	r0, r0, sl
 8008a92:	fa03 f000 	lsl.w	r0, r3, r0
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	4303      	orrs	r3, r0
 8008a9a:	3401      	adds	r4, #1
 8008a9c:	9304      	str	r3, [sp, #16]
 8008a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa2:	4826      	ldr	r0, [pc, #152]	; (8008b3c <_svfiprintf_r+0x1f0>)
 8008aa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008aa8:	2206      	movs	r2, #6
 8008aaa:	f7f7 fb99 	bl	80001e0 <memchr>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d038      	beq.n	8008b24 <_svfiprintf_r+0x1d8>
 8008ab2:	4b23      	ldr	r3, [pc, #140]	; (8008b40 <_svfiprintf_r+0x1f4>)
 8008ab4:	bb1b      	cbnz	r3, 8008afe <_svfiprintf_r+0x1b2>
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	3307      	adds	r3, #7
 8008aba:	f023 0307 	bic.w	r3, r3, #7
 8008abe:	3308      	adds	r3, #8
 8008ac0:	9303      	str	r3, [sp, #12]
 8008ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac4:	4433      	add	r3, r6
 8008ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac8:	e767      	b.n	800899a <_svfiprintf_r+0x4e>
 8008aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ace:	460c      	mov	r4, r1
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	e7a5      	b.n	8008a20 <_svfiprintf_r+0xd4>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	3401      	adds	r4, #1
 8008ad8:	9305      	str	r3, [sp, #20]
 8008ada:	4619      	mov	r1, r3
 8008adc:	f04f 0c0a 	mov.w	ip, #10
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ae6:	3a30      	subs	r2, #48	; 0x30
 8008ae8:	2a09      	cmp	r2, #9
 8008aea:	d903      	bls.n	8008af4 <_svfiprintf_r+0x1a8>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0c5      	beq.n	8008a7c <_svfiprintf_r+0x130>
 8008af0:	9105      	str	r1, [sp, #20]
 8008af2:	e7c3      	b.n	8008a7c <_svfiprintf_r+0x130>
 8008af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008af8:	4604      	mov	r4, r0
 8008afa:	2301      	movs	r3, #1
 8008afc:	e7f0      	b.n	8008ae0 <_svfiprintf_r+0x194>
 8008afe:	ab03      	add	r3, sp, #12
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	462a      	mov	r2, r5
 8008b04:	4b0f      	ldr	r3, [pc, #60]	; (8008b44 <_svfiprintf_r+0x1f8>)
 8008b06:	a904      	add	r1, sp, #16
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f3af 8000 	nop.w
 8008b0e:	1c42      	adds	r2, r0, #1
 8008b10:	4606      	mov	r6, r0
 8008b12:	d1d6      	bne.n	8008ac2 <_svfiprintf_r+0x176>
 8008b14:	89ab      	ldrh	r3, [r5, #12]
 8008b16:	065b      	lsls	r3, r3, #25
 8008b18:	f53f af2c 	bmi.w	8008974 <_svfiprintf_r+0x28>
 8008b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b1e:	b01d      	add	sp, #116	; 0x74
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b24:	ab03      	add	r3, sp, #12
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	462a      	mov	r2, r5
 8008b2a:	4b06      	ldr	r3, [pc, #24]	; (8008b44 <_svfiprintf_r+0x1f8>)
 8008b2c:	a904      	add	r1, sp, #16
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f000 f9d4 	bl	8008edc <_printf_i>
 8008b34:	e7eb      	b.n	8008b0e <_svfiprintf_r+0x1c2>
 8008b36:	bf00      	nop
 8008b38:	0800a8bc 	.word	0x0800a8bc
 8008b3c:	0800a8c6 	.word	0x0800a8c6
 8008b40:	00000000 	.word	0x00000000
 8008b44:	08008895 	.word	0x08008895
 8008b48:	0800a8c2 	.word	0x0800a8c2

08008b4c <__sfputc_r>:
 8008b4c:	6893      	ldr	r3, [r2, #8]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	b410      	push	{r4}
 8008b54:	6093      	str	r3, [r2, #8]
 8008b56:	da08      	bge.n	8008b6a <__sfputc_r+0x1e>
 8008b58:	6994      	ldr	r4, [r2, #24]
 8008b5a:	42a3      	cmp	r3, r4
 8008b5c:	db01      	blt.n	8008b62 <__sfputc_r+0x16>
 8008b5e:	290a      	cmp	r1, #10
 8008b60:	d103      	bne.n	8008b6a <__sfputc_r+0x1e>
 8008b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b66:	f000 bb7b 	b.w	8009260 <__swbuf_r>
 8008b6a:	6813      	ldr	r3, [r2, #0]
 8008b6c:	1c58      	adds	r0, r3, #1
 8008b6e:	6010      	str	r0, [r2, #0]
 8008b70:	7019      	strb	r1, [r3, #0]
 8008b72:	4608      	mov	r0, r1
 8008b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <__sfputs_r>:
 8008b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	460f      	mov	r7, r1
 8008b80:	4614      	mov	r4, r2
 8008b82:	18d5      	adds	r5, r2, r3
 8008b84:	42ac      	cmp	r4, r5
 8008b86:	d101      	bne.n	8008b8c <__sfputs_r+0x12>
 8008b88:	2000      	movs	r0, #0
 8008b8a:	e007      	b.n	8008b9c <__sfputs_r+0x22>
 8008b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b90:	463a      	mov	r2, r7
 8008b92:	4630      	mov	r0, r6
 8008b94:	f7ff ffda 	bl	8008b4c <__sfputc_r>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d1f3      	bne.n	8008b84 <__sfputs_r+0xa>
 8008b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ba0 <_vfiprintf_r>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	460d      	mov	r5, r1
 8008ba6:	b09d      	sub	sp, #116	; 0x74
 8008ba8:	4614      	mov	r4, r2
 8008baa:	4698      	mov	r8, r3
 8008bac:	4606      	mov	r6, r0
 8008bae:	b118      	cbz	r0, 8008bb8 <_vfiprintf_r+0x18>
 8008bb0:	6983      	ldr	r3, [r0, #24]
 8008bb2:	b90b      	cbnz	r3, 8008bb8 <_vfiprintf_r+0x18>
 8008bb4:	f7ff fcb8 	bl	8008528 <__sinit>
 8008bb8:	4b89      	ldr	r3, [pc, #548]	; (8008de0 <_vfiprintf_r+0x240>)
 8008bba:	429d      	cmp	r5, r3
 8008bbc:	d11b      	bne.n	8008bf6 <_vfiprintf_r+0x56>
 8008bbe:	6875      	ldr	r5, [r6, #4]
 8008bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bc2:	07d9      	lsls	r1, r3, #31
 8008bc4:	d405      	bmi.n	8008bd2 <_vfiprintf_r+0x32>
 8008bc6:	89ab      	ldrh	r3, [r5, #12]
 8008bc8:	059a      	lsls	r2, r3, #22
 8008bca:	d402      	bmi.n	8008bd2 <_vfiprintf_r+0x32>
 8008bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bce:	f7ff fd49 	bl	8008664 <__retarget_lock_acquire_recursive>
 8008bd2:	89ab      	ldrh	r3, [r5, #12]
 8008bd4:	071b      	lsls	r3, r3, #28
 8008bd6:	d501      	bpl.n	8008bdc <_vfiprintf_r+0x3c>
 8008bd8:	692b      	ldr	r3, [r5, #16]
 8008bda:	b9eb      	cbnz	r3, 8008c18 <_vfiprintf_r+0x78>
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4630      	mov	r0, r6
 8008be0:	f000 fb90 	bl	8009304 <__swsetup_r>
 8008be4:	b1c0      	cbz	r0, 8008c18 <_vfiprintf_r+0x78>
 8008be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008be8:	07dc      	lsls	r4, r3, #31
 8008bea:	d50e      	bpl.n	8008c0a <_vfiprintf_r+0x6a>
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf0:	b01d      	add	sp, #116	; 0x74
 8008bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf6:	4b7b      	ldr	r3, [pc, #492]	; (8008de4 <_vfiprintf_r+0x244>)
 8008bf8:	429d      	cmp	r5, r3
 8008bfa:	d101      	bne.n	8008c00 <_vfiprintf_r+0x60>
 8008bfc:	68b5      	ldr	r5, [r6, #8]
 8008bfe:	e7df      	b.n	8008bc0 <_vfiprintf_r+0x20>
 8008c00:	4b79      	ldr	r3, [pc, #484]	; (8008de8 <_vfiprintf_r+0x248>)
 8008c02:	429d      	cmp	r5, r3
 8008c04:	bf08      	it	eq
 8008c06:	68f5      	ldreq	r5, [r6, #12]
 8008c08:	e7da      	b.n	8008bc0 <_vfiprintf_r+0x20>
 8008c0a:	89ab      	ldrh	r3, [r5, #12]
 8008c0c:	0598      	lsls	r0, r3, #22
 8008c0e:	d4ed      	bmi.n	8008bec <_vfiprintf_r+0x4c>
 8008c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c12:	f7ff fd28 	bl	8008666 <__retarget_lock_release_recursive>
 8008c16:	e7e9      	b.n	8008bec <_vfiprintf_r+0x4c>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1c:	2320      	movs	r3, #32
 8008c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c26:	2330      	movs	r3, #48	; 0x30
 8008c28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008dec <_vfiprintf_r+0x24c>
 8008c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c30:	f04f 0901 	mov.w	r9, #1
 8008c34:	4623      	mov	r3, r4
 8008c36:	469a      	mov	sl, r3
 8008c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c3c:	b10a      	cbz	r2, 8008c42 <_vfiprintf_r+0xa2>
 8008c3e:	2a25      	cmp	r2, #37	; 0x25
 8008c40:	d1f9      	bne.n	8008c36 <_vfiprintf_r+0x96>
 8008c42:	ebba 0b04 	subs.w	fp, sl, r4
 8008c46:	d00b      	beq.n	8008c60 <_vfiprintf_r+0xc0>
 8008c48:	465b      	mov	r3, fp
 8008c4a:	4622      	mov	r2, r4
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f7ff ff93 	bl	8008b7a <__sfputs_r>
 8008c54:	3001      	adds	r0, #1
 8008c56:	f000 80aa 	beq.w	8008dae <_vfiprintf_r+0x20e>
 8008c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c5c:	445a      	add	r2, fp
 8008c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c60:	f89a 3000 	ldrb.w	r3, [sl]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 80a2 	beq.w	8008dae <_vfiprintf_r+0x20e>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c74:	f10a 0a01 	add.w	sl, sl, #1
 8008c78:	9304      	str	r3, [sp, #16]
 8008c7a:	9307      	str	r3, [sp, #28]
 8008c7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c80:	931a      	str	r3, [sp, #104]	; 0x68
 8008c82:	4654      	mov	r4, sl
 8008c84:	2205      	movs	r2, #5
 8008c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c8a:	4858      	ldr	r0, [pc, #352]	; (8008dec <_vfiprintf_r+0x24c>)
 8008c8c:	f7f7 faa8 	bl	80001e0 <memchr>
 8008c90:	9a04      	ldr	r2, [sp, #16]
 8008c92:	b9d8      	cbnz	r0, 8008ccc <_vfiprintf_r+0x12c>
 8008c94:	06d1      	lsls	r1, r2, #27
 8008c96:	bf44      	itt	mi
 8008c98:	2320      	movmi	r3, #32
 8008c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c9e:	0713      	lsls	r3, r2, #28
 8008ca0:	bf44      	itt	mi
 8008ca2:	232b      	movmi	r3, #43	; 0x2b
 8008ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cac:	2b2a      	cmp	r3, #42	; 0x2a
 8008cae:	d015      	beq.n	8008cdc <_vfiprintf_r+0x13c>
 8008cb0:	9a07      	ldr	r2, [sp, #28]
 8008cb2:	4654      	mov	r4, sl
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	f04f 0c0a 	mov.w	ip, #10
 8008cba:	4621      	mov	r1, r4
 8008cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc0:	3b30      	subs	r3, #48	; 0x30
 8008cc2:	2b09      	cmp	r3, #9
 8008cc4:	d94e      	bls.n	8008d64 <_vfiprintf_r+0x1c4>
 8008cc6:	b1b0      	cbz	r0, 8008cf6 <_vfiprintf_r+0x156>
 8008cc8:	9207      	str	r2, [sp, #28]
 8008cca:	e014      	b.n	8008cf6 <_vfiprintf_r+0x156>
 8008ccc:	eba0 0308 	sub.w	r3, r0, r8
 8008cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	9304      	str	r3, [sp, #16]
 8008cd8:	46a2      	mov	sl, r4
 8008cda:	e7d2      	b.n	8008c82 <_vfiprintf_r+0xe2>
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	1d19      	adds	r1, r3, #4
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	9103      	str	r1, [sp, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bfbb      	ittet	lt
 8008ce8:	425b      	neglt	r3, r3
 8008cea:	f042 0202 	orrlt.w	r2, r2, #2
 8008cee:	9307      	strge	r3, [sp, #28]
 8008cf0:	9307      	strlt	r3, [sp, #28]
 8008cf2:	bfb8      	it	lt
 8008cf4:	9204      	strlt	r2, [sp, #16]
 8008cf6:	7823      	ldrb	r3, [r4, #0]
 8008cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8008cfa:	d10c      	bne.n	8008d16 <_vfiprintf_r+0x176>
 8008cfc:	7863      	ldrb	r3, [r4, #1]
 8008cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008d00:	d135      	bne.n	8008d6e <_vfiprintf_r+0x1ce>
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	1d1a      	adds	r2, r3, #4
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	9203      	str	r2, [sp, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	bfb8      	it	lt
 8008d0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d12:	3402      	adds	r4, #2
 8008d14:	9305      	str	r3, [sp, #20]
 8008d16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008dfc <_vfiprintf_r+0x25c>
 8008d1a:	7821      	ldrb	r1, [r4, #0]
 8008d1c:	2203      	movs	r2, #3
 8008d1e:	4650      	mov	r0, sl
 8008d20:	f7f7 fa5e 	bl	80001e0 <memchr>
 8008d24:	b140      	cbz	r0, 8008d38 <_vfiprintf_r+0x198>
 8008d26:	2340      	movs	r3, #64	; 0x40
 8008d28:	eba0 000a 	sub.w	r0, r0, sl
 8008d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	4303      	orrs	r3, r0
 8008d34:	3401      	adds	r4, #1
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3c:	482c      	ldr	r0, [pc, #176]	; (8008df0 <_vfiprintf_r+0x250>)
 8008d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d42:	2206      	movs	r2, #6
 8008d44:	f7f7 fa4c 	bl	80001e0 <memchr>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d03f      	beq.n	8008dcc <_vfiprintf_r+0x22c>
 8008d4c:	4b29      	ldr	r3, [pc, #164]	; (8008df4 <_vfiprintf_r+0x254>)
 8008d4e:	bb1b      	cbnz	r3, 8008d98 <_vfiprintf_r+0x1f8>
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	3307      	adds	r3, #7
 8008d54:	f023 0307 	bic.w	r3, r3, #7
 8008d58:	3308      	adds	r3, #8
 8008d5a:	9303      	str	r3, [sp, #12]
 8008d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5e:	443b      	add	r3, r7
 8008d60:	9309      	str	r3, [sp, #36]	; 0x24
 8008d62:	e767      	b.n	8008c34 <_vfiprintf_r+0x94>
 8008d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d68:	460c      	mov	r4, r1
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	e7a5      	b.n	8008cba <_vfiprintf_r+0x11a>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	3401      	adds	r4, #1
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	4619      	mov	r1, r3
 8008d76:	f04f 0c0a 	mov.w	ip, #10
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d80:	3a30      	subs	r2, #48	; 0x30
 8008d82:	2a09      	cmp	r2, #9
 8008d84:	d903      	bls.n	8008d8e <_vfiprintf_r+0x1ee>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0c5      	beq.n	8008d16 <_vfiprintf_r+0x176>
 8008d8a:	9105      	str	r1, [sp, #20]
 8008d8c:	e7c3      	b.n	8008d16 <_vfiprintf_r+0x176>
 8008d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d92:	4604      	mov	r4, r0
 8008d94:	2301      	movs	r3, #1
 8008d96:	e7f0      	b.n	8008d7a <_vfiprintf_r+0x1da>
 8008d98:	ab03      	add	r3, sp, #12
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	4b16      	ldr	r3, [pc, #88]	; (8008df8 <_vfiprintf_r+0x258>)
 8008da0:	a904      	add	r1, sp, #16
 8008da2:	4630      	mov	r0, r6
 8008da4:	f3af 8000 	nop.w
 8008da8:	4607      	mov	r7, r0
 8008daa:	1c78      	adds	r0, r7, #1
 8008dac:	d1d6      	bne.n	8008d5c <_vfiprintf_r+0x1bc>
 8008dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008db0:	07d9      	lsls	r1, r3, #31
 8008db2:	d405      	bmi.n	8008dc0 <_vfiprintf_r+0x220>
 8008db4:	89ab      	ldrh	r3, [r5, #12]
 8008db6:	059a      	lsls	r2, r3, #22
 8008db8:	d402      	bmi.n	8008dc0 <_vfiprintf_r+0x220>
 8008dba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dbc:	f7ff fc53 	bl	8008666 <__retarget_lock_release_recursive>
 8008dc0:	89ab      	ldrh	r3, [r5, #12]
 8008dc2:	065b      	lsls	r3, r3, #25
 8008dc4:	f53f af12 	bmi.w	8008bec <_vfiprintf_r+0x4c>
 8008dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dca:	e711      	b.n	8008bf0 <_vfiprintf_r+0x50>
 8008dcc:	ab03      	add	r3, sp, #12
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	462a      	mov	r2, r5
 8008dd2:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <_vfiprintf_r+0x258>)
 8008dd4:	a904      	add	r1, sp, #16
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f000 f880 	bl	8008edc <_printf_i>
 8008ddc:	e7e4      	b.n	8008da8 <_vfiprintf_r+0x208>
 8008dde:	bf00      	nop
 8008de0:	0800a87c 	.word	0x0800a87c
 8008de4:	0800a89c 	.word	0x0800a89c
 8008de8:	0800a85c 	.word	0x0800a85c
 8008dec:	0800a8bc 	.word	0x0800a8bc
 8008df0:	0800a8c6 	.word	0x0800a8c6
 8008df4:	00000000 	.word	0x00000000
 8008df8:	08008b7b 	.word	0x08008b7b
 8008dfc:	0800a8c2 	.word	0x0800a8c2

08008e00 <_printf_common>:
 8008e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e04:	4616      	mov	r6, r2
 8008e06:	4699      	mov	r9, r3
 8008e08:	688a      	ldr	r2, [r1, #8]
 8008e0a:	690b      	ldr	r3, [r1, #16]
 8008e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e10:	4293      	cmp	r3, r2
 8008e12:	bfb8      	it	lt
 8008e14:	4613      	movlt	r3, r2
 8008e16:	6033      	str	r3, [r6, #0]
 8008e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e1c:	4607      	mov	r7, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	b10a      	cbz	r2, 8008e26 <_printf_common+0x26>
 8008e22:	3301      	adds	r3, #1
 8008e24:	6033      	str	r3, [r6, #0]
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	0699      	lsls	r1, r3, #26
 8008e2a:	bf42      	ittt	mi
 8008e2c:	6833      	ldrmi	r3, [r6, #0]
 8008e2e:	3302      	addmi	r3, #2
 8008e30:	6033      	strmi	r3, [r6, #0]
 8008e32:	6825      	ldr	r5, [r4, #0]
 8008e34:	f015 0506 	ands.w	r5, r5, #6
 8008e38:	d106      	bne.n	8008e48 <_printf_common+0x48>
 8008e3a:	f104 0a19 	add.w	sl, r4, #25
 8008e3e:	68e3      	ldr	r3, [r4, #12]
 8008e40:	6832      	ldr	r2, [r6, #0]
 8008e42:	1a9b      	subs	r3, r3, r2
 8008e44:	42ab      	cmp	r3, r5
 8008e46:	dc26      	bgt.n	8008e96 <_printf_common+0x96>
 8008e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e4c:	1e13      	subs	r3, r2, #0
 8008e4e:	6822      	ldr	r2, [r4, #0]
 8008e50:	bf18      	it	ne
 8008e52:	2301      	movne	r3, #1
 8008e54:	0692      	lsls	r2, r2, #26
 8008e56:	d42b      	bmi.n	8008eb0 <_printf_common+0xb0>
 8008e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	4638      	mov	r0, r7
 8008e60:	47c0      	blx	r8
 8008e62:	3001      	adds	r0, #1
 8008e64:	d01e      	beq.n	8008ea4 <_printf_common+0xa4>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	68e5      	ldr	r5, [r4, #12]
 8008e6a:	6832      	ldr	r2, [r6, #0]
 8008e6c:	f003 0306 	and.w	r3, r3, #6
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	bf08      	it	eq
 8008e74:	1aad      	subeq	r5, r5, r2
 8008e76:	68a3      	ldr	r3, [r4, #8]
 8008e78:	6922      	ldr	r2, [r4, #16]
 8008e7a:	bf0c      	ite	eq
 8008e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e80:	2500      	movne	r5, #0
 8008e82:	4293      	cmp	r3, r2
 8008e84:	bfc4      	itt	gt
 8008e86:	1a9b      	subgt	r3, r3, r2
 8008e88:	18ed      	addgt	r5, r5, r3
 8008e8a:	2600      	movs	r6, #0
 8008e8c:	341a      	adds	r4, #26
 8008e8e:	42b5      	cmp	r5, r6
 8008e90:	d11a      	bne.n	8008ec8 <_printf_common+0xc8>
 8008e92:	2000      	movs	r0, #0
 8008e94:	e008      	b.n	8008ea8 <_printf_common+0xa8>
 8008e96:	2301      	movs	r3, #1
 8008e98:	4652      	mov	r2, sl
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	47c0      	blx	r8
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d103      	bne.n	8008eac <_printf_common+0xac>
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eac:	3501      	adds	r5, #1
 8008eae:	e7c6      	b.n	8008e3e <_printf_common+0x3e>
 8008eb0:	18e1      	adds	r1, r4, r3
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	2030      	movs	r0, #48	; 0x30
 8008eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eba:	4422      	add	r2, r4
 8008ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ec4:	3302      	adds	r3, #2
 8008ec6:	e7c7      	b.n	8008e58 <_printf_common+0x58>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	4622      	mov	r2, r4
 8008ecc:	4649      	mov	r1, r9
 8008ece:	4638      	mov	r0, r7
 8008ed0:	47c0      	blx	r8
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	d0e6      	beq.n	8008ea4 <_printf_common+0xa4>
 8008ed6:	3601      	adds	r6, #1
 8008ed8:	e7d9      	b.n	8008e8e <_printf_common+0x8e>
	...

08008edc <_printf_i>:
 8008edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	4691      	mov	r9, r2
 8008ee4:	7e27      	ldrb	r7, [r4, #24]
 8008ee6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ee8:	2f78      	cmp	r7, #120	; 0x78
 8008eea:	4680      	mov	r8, r0
 8008eec:	469a      	mov	sl, r3
 8008eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ef2:	d807      	bhi.n	8008f04 <_printf_i+0x28>
 8008ef4:	2f62      	cmp	r7, #98	; 0x62
 8008ef6:	d80a      	bhi.n	8008f0e <_printf_i+0x32>
 8008ef8:	2f00      	cmp	r7, #0
 8008efa:	f000 80d8 	beq.w	80090ae <_printf_i+0x1d2>
 8008efe:	2f58      	cmp	r7, #88	; 0x58
 8008f00:	f000 80a3 	beq.w	800904a <_printf_i+0x16e>
 8008f04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f0c:	e03a      	b.n	8008f84 <_printf_i+0xa8>
 8008f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f12:	2b15      	cmp	r3, #21
 8008f14:	d8f6      	bhi.n	8008f04 <_printf_i+0x28>
 8008f16:	a001      	add	r0, pc, #4	; (adr r0, 8008f1c <_printf_i+0x40>)
 8008f18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f1c:	08008f75 	.word	0x08008f75
 8008f20:	08008f89 	.word	0x08008f89
 8008f24:	08008f05 	.word	0x08008f05
 8008f28:	08008f05 	.word	0x08008f05
 8008f2c:	08008f05 	.word	0x08008f05
 8008f30:	08008f05 	.word	0x08008f05
 8008f34:	08008f89 	.word	0x08008f89
 8008f38:	08008f05 	.word	0x08008f05
 8008f3c:	08008f05 	.word	0x08008f05
 8008f40:	08008f05 	.word	0x08008f05
 8008f44:	08008f05 	.word	0x08008f05
 8008f48:	08009095 	.word	0x08009095
 8008f4c:	08008fb9 	.word	0x08008fb9
 8008f50:	08009077 	.word	0x08009077
 8008f54:	08008f05 	.word	0x08008f05
 8008f58:	08008f05 	.word	0x08008f05
 8008f5c:	080090b7 	.word	0x080090b7
 8008f60:	08008f05 	.word	0x08008f05
 8008f64:	08008fb9 	.word	0x08008fb9
 8008f68:	08008f05 	.word	0x08008f05
 8008f6c:	08008f05 	.word	0x08008f05
 8008f70:	0800907f 	.word	0x0800907f
 8008f74:	680b      	ldr	r3, [r1, #0]
 8008f76:	1d1a      	adds	r2, r3, #4
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	600a      	str	r2, [r1, #0]
 8008f7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f84:	2301      	movs	r3, #1
 8008f86:	e0a3      	b.n	80090d0 <_printf_i+0x1f4>
 8008f88:	6825      	ldr	r5, [r4, #0]
 8008f8a:	6808      	ldr	r0, [r1, #0]
 8008f8c:	062e      	lsls	r6, r5, #24
 8008f8e:	f100 0304 	add.w	r3, r0, #4
 8008f92:	d50a      	bpl.n	8008faa <_printf_i+0xce>
 8008f94:	6805      	ldr	r5, [r0, #0]
 8008f96:	600b      	str	r3, [r1, #0]
 8008f98:	2d00      	cmp	r5, #0
 8008f9a:	da03      	bge.n	8008fa4 <_printf_i+0xc8>
 8008f9c:	232d      	movs	r3, #45	; 0x2d
 8008f9e:	426d      	negs	r5, r5
 8008fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa4:	485e      	ldr	r0, [pc, #376]	; (8009120 <_printf_i+0x244>)
 8008fa6:	230a      	movs	r3, #10
 8008fa8:	e019      	b.n	8008fde <_printf_i+0x102>
 8008faa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008fae:	6805      	ldr	r5, [r0, #0]
 8008fb0:	600b      	str	r3, [r1, #0]
 8008fb2:	bf18      	it	ne
 8008fb4:	b22d      	sxthne	r5, r5
 8008fb6:	e7ef      	b.n	8008f98 <_printf_i+0xbc>
 8008fb8:	680b      	ldr	r3, [r1, #0]
 8008fba:	6825      	ldr	r5, [r4, #0]
 8008fbc:	1d18      	adds	r0, r3, #4
 8008fbe:	6008      	str	r0, [r1, #0]
 8008fc0:	0628      	lsls	r0, r5, #24
 8008fc2:	d501      	bpl.n	8008fc8 <_printf_i+0xec>
 8008fc4:	681d      	ldr	r5, [r3, #0]
 8008fc6:	e002      	b.n	8008fce <_printf_i+0xf2>
 8008fc8:	0669      	lsls	r1, r5, #25
 8008fca:	d5fb      	bpl.n	8008fc4 <_printf_i+0xe8>
 8008fcc:	881d      	ldrh	r5, [r3, #0]
 8008fce:	4854      	ldr	r0, [pc, #336]	; (8009120 <_printf_i+0x244>)
 8008fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8008fd2:	bf0c      	ite	eq
 8008fd4:	2308      	moveq	r3, #8
 8008fd6:	230a      	movne	r3, #10
 8008fd8:	2100      	movs	r1, #0
 8008fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fde:	6866      	ldr	r6, [r4, #4]
 8008fe0:	60a6      	str	r6, [r4, #8]
 8008fe2:	2e00      	cmp	r6, #0
 8008fe4:	bfa2      	ittt	ge
 8008fe6:	6821      	ldrge	r1, [r4, #0]
 8008fe8:	f021 0104 	bicge.w	r1, r1, #4
 8008fec:	6021      	strge	r1, [r4, #0]
 8008fee:	b90d      	cbnz	r5, 8008ff4 <_printf_i+0x118>
 8008ff0:	2e00      	cmp	r6, #0
 8008ff2:	d04d      	beq.n	8009090 <_printf_i+0x1b4>
 8008ff4:	4616      	mov	r6, r2
 8008ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8008ffe:	5dc7      	ldrb	r7, [r0, r7]
 8009000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009004:	462f      	mov	r7, r5
 8009006:	42bb      	cmp	r3, r7
 8009008:	460d      	mov	r5, r1
 800900a:	d9f4      	bls.n	8008ff6 <_printf_i+0x11a>
 800900c:	2b08      	cmp	r3, #8
 800900e:	d10b      	bne.n	8009028 <_printf_i+0x14c>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	07df      	lsls	r7, r3, #31
 8009014:	d508      	bpl.n	8009028 <_printf_i+0x14c>
 8009016:	6923      	ldr	r3, [r4, #16]
 8009018:	6861      	ldr	r1, [r4, #4]
 800901a:	4299      	cmp	r1, r3
 800901c:	bfde      	ittt	le
 800901e:	2330      	movle	r3, #48	; 0x30
 8009020:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009024:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009028:	1b92      	subs	r2, r2, r6
 800902a:	6122      	str	r2, [r4, #16]
 800902c:	f8cd a000 	str.w	sl, [sp]
 8009030:	464b      	mov	r3, r9
 8009032:	aa03      	add	r2, sp, #12
 8009034:	4621      	mov	r1, r4
 8009036:	4640      	mov	r0, r8
 8009038:	f7ff fee2 	bl	8008e00 <_printf_common>
 800903c:	3001      	adds	r0, #1
 800903e:	d14c      	bne.n	80090da <_printf_i+0x1fe>
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
 8009044:	b004      	add	sp, #16
 8009046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904a:	4835      	ldr	r0, [pc, #212]	; (8009120 <_printf_i+0x244>)
 800904c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	680e      	ldr	r6, [r1, #0]
 8009054:	061f      	lsls	r7, r3, #24
 8009056:	f856 5b04 	ldr.w	r5, [r6], #4
 800905a:	600e      	str	r6, [r1, #0]
 800905c:	d514      	bpl.n	8009088 <_printf_i+0x1ac>
 800905e:	07d9      	lsls	r1, r3, #31
 8009060:	bf44      	itt	mi
 8009062:	f043 0320 	orrmi.w	r3, r3, #32
 8009066:	6023      	strmi	r3, [r4, #0]
 8009068:	b91d      	cbnz	r5, 8009072 <_printf_i+0x196>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	f023 0320 	bic.w	r3, r3, #32
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	2310      	movs	r3, #16
 8009074:	e7b0      	b.n	8008fd8 <_printf_i+0xfc>
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	f043 0320 	orr.w	r3, r3, #32
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	2378      	movs	r3, #120	; 0x78
 8009080:	4828      	ldr	r0, [pc, #160]	; (8009124 <_printf_i+0x248>)
 8009082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009086:	e7e3      	b.n	8009050 <_printf_i+0x174>
 8009088:	065e      	lsls	r6, r3, #25
 800908a:	bf48      	it	mi
 800908c:	b2ad      	uxthmi	r5, r5
 800908e:	e7e6      	b.n	800905e <_printf_i+0x182>
 8009090:	4616      	mov	r6, r2
 8009092:	e7bb      	b.n	800900c <_printf_i+0x130>
 8009094:	680b      	ldr	r3, [r1, #0]
 8009096:	6826      	ldr	r6, [r4, #0]
 8009098:	6960      	ldr	r0, [r4, #20]
 800909a:	1d1d      	adds	r5, r3, #4
 800909c:	600d      	str	r5, [r1, #0]
 800909e:	0635      	lsls	r5, r6, #24
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	d501      	bpl.n	80090a8 <_printf_i+0x1cc>
 80090a4:	6018      	str	r0, [r3, #0]
 80090a6:	e002      	b.n	80090ae <_printf_i+0x1d2>
 80090a8:	0671      	lsls	r1, r6, #25
 80090aa:	d5fb      	bpl.n	80090a4 <_printf_i+0x1c8>
 80090ac:	8018      	strh	r0, [r3, #0]
 80090ae:	2300      	movs	r3, #0
 80090b0:	6123      	str	r3, [r4, #16]
 80090b2:	4616      	mov	r6, r2
 80090b4:	e7ba      	b.n	800902c <_printf_i+0x150>
 80090b6:	680b      	ldr	r3, [r1, #0]
 80090b8:	1d1a      	adds	r2, r3, #4
 80090ba:	600a      	str	r2, [r1, #0]
 80090bc:	681e      	ldr	r6, [r3, #0]
 80090be:	6862      	ldr	r2, [r4, #4]
 80090c0:	2100      	movs	r1, #0
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7f7 f88c 	bl	80001e0 <memchr>
 80090c8:	b108      	cbz	r0, 80090ce <_printf_i+0x1f2>
 80090ca:	1b80      	subs	r0, r0, r6
 80090cc:	6060      	str	r0, [r4, #4]
 80090ce:	6863      	ldr	r3, [r4, #4]
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	2300      	movs	r3, #0
 80090d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d8:	e7a8      	b.n	800902c <_printf_i+0x150>
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	4632      	mov	r2, r6
 80090de:	4649      	mov	r1, r9
 80090e0:	4640      	mov	r0, r8
 80090e2:	47d0      	blx	sl
 80090e4:	3001      	adds	r0, #1
 80090e6:	d0ab      	beq.n	8009040 <_printf_i+0x164>
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	079b      	lsls	r3, r3, #30
 80090ec:	d413      	bmi.n	8009116 <_printf_i+0x23a>
 80090ee:	68e0      	ldr	r0, [r4, #12]
 80090f0:	9b03      	ldr	r3, [sp, #12]
 80090f2:	4298      	cmp	r0, r3
 80090f4:	bfb8      	it	lt
 80090f6:	4618      	movlt	r0, r3
 80090f8:	e7a4      	b.n	8009044 <_printf_i+0x168>
 80090fa:	2301      	movs	r3, #1
 80090fc:	4632      	mov	r2, r6
 80090fe:	4649      	mov	r1, r9
 8009100:	4640      	mov	r0, r8
 8009102:	47d0      	blx	sl
 8009104:	3001      	adds	r0, #1
 8009106:	d09b      	beq.n	8009040 <_printf_i+0x164>
 8009108:	3501      	adds	r5, #1
 800910a:	68e3      	ldr	r3, [r4, #12]
 800910c:	9903      	ldr	r1, [sp, #12]
 800910e:	1a5b      	subs	r3, r3, r1
 8009110:	42ab      	cmp	r3, r5
 8009112:	dcf2      	bgt.n	80090fa <_printf_i+0x21e>
 8009114:	e7eb      	b.n	80090ee <_printf_i+0x212>
 8009116:	2500      	movs	r5, #0
 8009118:	f104 0619 	add.w	r6, r4, #25
 800911c:	e7f5      	b.n	800910a <_printf_i+0x22e>
 800911e:	bf00      	nop
 8009120:	0800a8cd 	.word	0x0800a8cd
 8009124:	0800a8de 	.word	0x0800a8de

08009128 <_putc_r>:
 8009128:	b570      	push	{r4, r5, r6, lr}
 800912a:	460d      	mov	r5, r1
 800912c:	4614      	mov	r4, r2
 800912e:	4606      	mov	r6, r0
 8009130:	b118      	cbz	r0, 800913a <_putc_r+0x12>
 8009132:	6983      	ldr	r3, [r0, #24]
 8009134:	b90b      	cbnz	r3, 800913a <_putc_r+0x12>
 8009136:	f7ff f9f7 	bl	8008528 <__sinit>
 800913a:	4b1c      	ldr	r3, [pc, #112]	; (80091ac <_putc_r+0x84>)
 800913c:	429c      	cmp	r4, r3
 800913e:	d124      	bne.n	800918a <_putc_r+0x62>
 8009140:	6874      	ldr	r4, [r6, #4]
 8009142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009144:	07d8      	lsls	r0, r3, #31
 8009146:	d405      	bmi.n	8009154 <_putc_r+0x2c>
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	0599      	lsls	r1, r3, #22
 800914c:	d402      	bmi.n	8009154 <_putc_r+0x2c>
 800914e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009150:	f7ff fa88 	bl	8008664 <__retarget_lock_acquire_recursive>
 8009154:	68a3      	ldr	r3, [r4, #8]
 8009156:	3b01      	subs	r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	60a3      	str	r3, [r4, #8]
 800915c:	da05      	bge.n	800916a <_putc_r+0x42>
 800915e:	69a2      	ldr	r2, [r4, #24]
 8009160:	4293      	cmp	r3, r2
 8009162:	db1c      	blt.n	800919e <_putc_r+0x76>
 8009164:	b2eb      	uxtb	r3, r5
 8009166:	2b0a      	cmp	r3, #10
 8009168:	d019      	beq.n	800919e <_putc_r+0x76>
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	6022      	str	r2, [r4, #0]
 8009170:	701d      	strb	r5, [r3, #0]
 8009172:	b2ed      	uxtb	r5, r5
 8009174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009176:	07da      	lsls	r2, r3, #31
 8009178:	d405      	bmi.n	8009186 <_putc_r+0x5e>
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	059b      	lsls	r3, r3, #22
 800917e:	d402      	bmi.n	8009186 <_putc_r+0x5e>
 8009180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009182:	f7ff fa70 	bl	8008666 <__retarget_lock_release_recursive>
 8009186:	4628      	mov	r0, r5
 8009188:	bd70      	pop	{r4, r5, r6, pc}
 800918a:	4b09      	ldr	r3, [pc, #36]	; (80091b0 <_putc_r+0x88>)
 800918c:	429c      	cmp	r4, r3
 800918e:	d101      	bne.n	8009194 <_putc_r+0x6c>
 8009190:	68b4      	ldr	r4, [r6, #8]
 8009192:	e7d6      	b.n	8009142 <_putc_r+0x1a>
 8009194:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <_putc_r+0x8c>)
 8009196:	429c      	cmp	r4, r3
 8009198:	bf08      	it	eq
 800919a:	68f4      	ldreq	r4, [r6, #12]
 800919c:	e7d1      	b.n	8009142 <_putc_r+0x1a>
 800919e:	4629      	mov	r1, r5
 80091a0:	4622      	mov	r2, r4
 80091a2:	4630      	mov	r0, r6
 80091a4:	f000 f85c 	bl	8009260 <__swbuf_r>
 80091a8:	4605      	mov	r5, r0
 80091aa:	e7e3      	b.n	8009174 <_putc_r+0x4c>
 80091ac:	0800a87c 	.word	0x0800a87c
 80091b0:	0800a89c 	.word	0x0800a89c
 80091b4:	0800a85c 	.word	0x0800a85c

080091b8 <_sbrk_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d06      	ldr	r5, [pc, #24]	; (80091d4 <_sbrk_r+0x1c>)
 80091bc:	2300      	movs	r3, #0
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	602b      	str	r3, [r5, #0]
 80091c4:	f7fe faca 	bl	800775c <_sbrk>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d102      	bne.n	80091d2 <_sbrk_r+0x1a>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	b103      	cbz	r3, 80091d2 <_sbrk_r+0x1a>
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	2000044c 	.word	0x2000044c

080091d8 <__sread>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	460c      	mov	r4, r1
 80091dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e0:	f000 f98e 	bl	8009500 <_read_r>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	bfab      	itete	ge
 80091e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091ea:	89a3      	ldrhlt	r3, [r4, #12]
 80091ec:	181b      	addge	r3, r3, r0
 80091ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091f2:	bfac      	ite	ge
 80091f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80091f6:	81a3      	strhlt	r3, [r4, #12]
 80091f8:	bd10      	pop	{r4, pc}

080091fa <__swrite>:
 80091fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091fe:	461f      	mov	r7, r3
 8009200:	898b      	ldrh	r3, [r1, #12]
 8009202:	05db      	lsls	r3, r3, #23
 8009204:	4605      	mov	r5, r0
 8009206:	460c      	mov	r4, r1
 8009208:	4616      	mov	r6, r2
 800920a:	d505      	bpl.n	8009218 <__swrite+0x1e>
 800920c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009210:	2302      	movs	r3, #2
 8009212:	2200      	movs	r2, #0
 8009214:	f000 f916 	bl	8009444 <_lseek_r>
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800921e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009222:	81a3      	strh	r3, [r4, #12]
 8009224:	4632      	mov	r2, r6
 8009226:	463b      	mov	r3, r7
 8009228:	4628      	mov	r0, r5
 800922a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800922e:	f7f7 bfc1 	b.w	80011b4 <_write_r>

08009232 <__sseek>:
 8009232:	b510      	push	{r4, lr}
 8009234:	460c      	mov	r4, r1
 8009236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923a:	f000 f903 	bl	8009444 <_lseek_r>
 800923e:	1c43      	adds	r3, r0, #1
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	bf15      	itete	ne
 8009244:	6560      	strne	r0, [r4, #84]	; 0x54
 8009246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800924a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800924e:	81a3      	strheq	r3, [r4, #12]
 8009250:	bf18      	it	ne
 8009252:	81a3      	strhne	r3, [r4, #12]
 8009254:	bd10      	pop	{r4, pc}

08009256 <__sclose>:
 8009256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925a:	f000 b8c1 	b.w	80093e0 <_close_r>
	...

08009260 <__swbuf_r>:
 8009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009262:	460e      	mov	r6, r1
 8009264:	4614      	mov	r4, r2
 8009266:	4605      	mov	r5, r0
 8009268:	b118      	cbz	r0, 8009272 <__swbuf_r+0x12>
 800926a:	6983      	ldr	r3, [r0, #24]
 800926c:	b90b      	cbnz	r3, 8009272 <__swbuf_r+0x12>
 800926e:	f7ff f95b 	bl	8008528 <__sinit>
 8009272:	4b21      	ldr	r3, [pc, #132]	; (80092f8 <__swbuf_r+0x98>)
 8009274:	429c      	cmp	r4, r3
 8009276:	d12b      	bne.n	80092d0 <__swbuf_r+0x70>
 8009278:	686c      	ldr	r4, [r5, #4]
 800927a:	69a3      	ldr	r3, [r4, #24]
 800927c:	60a3      	str	r3, [r4, #8]
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	071a      	lsls	r2, r3, #28
 8009282:	d52f      	bpl.n	80092e4 <__swbuf_r+0x84>
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	b36b      	cbz	r3, 80092e4 <__swbuf_r+0x84>
 8009288:	6923      	ldr	r3, [r4, #16]
 800928a:	6820      	ldr	r0, [r4, #0]
 800928c:	1ac0      	subs	r0, r0, r3
 800928e:	6963      	ldr	r3, [r4, #20]
 8009290:	b2f6      	uxtb	r6, r6
 8009292:	4283      	cmp	r3, r0
 8009294:	4637      	mov	r7, r6
 8009296:	dc04      	bgt.n	80092a2 <__swbuf_r+0x42>
 8009298:	4621      	mov	r1, r4
 800929a:	4628      	mov	r0, r5
 800929c:	f7ff f8b0 	bl	8008400 <_fflush_r>
 80092a0:	bb30      	cbnz	r0, 80092f0 <__swbuf_r+0x90>
 80092a2:	68a3      	ldr	r3, [r4, #8]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	60a3      	str	r3, [r4, #8]
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	6022      	str	r2, [r4, #0]
 80092ae:	701e      	strb	r6, [r3, #0]
 80092b0:	6963      	ldr	r3, [r4, #20]
 80092b2:	3001      	adds	r0, #1
 80092b4:	4283      	cmp	r3, r0
 80092b6:	d004      	beq.n	80092c2 <__swbuf_r+0x62>
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	07db      	lsls	r3, r3, #31
 80092bc:	d506      	bpl.n	80092cc <__swbuf_r+0x6c>
 80092be:	2e0a      	cmp	r6, #10
 80092c0:	d104      	bne.n	80092cc <__swbuf_r+0x6c>
 80092c2:	4621      	mov	r1, r4
 80092c4:	4628      	mov	r0, r5
 80092c6:	f7ff f89b 	bl	8008400 <_fflush_r>
 80092ca:	b988      	cbnz	r0, 80092f0 <__swbuf_r+0x90>
 80092cc:	4638      	mov	r0, r7
 80092ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d0:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <__swbuf_r+0x9c>)
 80092d2:	429c      	cmp	r4, r3
 80092d4:	d101      	bne.n	80092da <__swbuf_r+0x7a>
 80092d6:	68ac      	ldr	r4, [r5, #8]
 80092d8:	e7cf      	b.n	800927a <__swbuf_r+0x1a>
 80092da:	4b09      	ldr	r3, [pc, #36]	; (8009300 <__swbuf_r+0xa0>)
 80092dc:	429c      	cmp	r4, r3
 80092de:	bf08      	it	eq
 80092e0:	68ec      	ldreq	r4, [r5, #12]
 80092e2:	e7ca      	b.n	800927a <__swbuf_r+0x1a>
 80092e4:	4621      	mov	r1, r4
 80092e6:	4628      	mov	r0, r5
 80092e8:	f000 f80c 	bl	8009304 <__swsetup_r>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d0cb      	beq.n	8009288 <__swbuf_r+0x28>
 80092f0:	f04f 37ff 	mov.w	r7, #4294967295
 80092f4:	e7ea      	b.n	80092cc <__swbuf_r+0x6c>
 80092f6:	bf00      	nop
 80092f8:	0800a87c 	.word	0x0800a87c
 80092fc:	0800a89c 	.word	0x0800a89c
 8009300:	0800a85c 	.word	0x0800a85c

08009304 <__swsetup_r>:
 8009304:	4b32      	ldr	r3, [pc, #200]	; (80093d0 <__swsetup_r+0xcc>)
 8009306:	b570      	push	{r4, r5, r6, lr}
 8009308:	681d      	ldr	r5, [r3, #0]
 800930a:	4606      	mov	r6, r0
 800930c:	460c      	mov	r4, r1
 800930e:	b125      	cbz	r5, 800931a <__swsetup_r+0x16>
 8009310:	69ab      	ldr	r3, [r5, #24]
 8009312:	b913      	cbnz	r3, 800931a <__swsetup_r+0x16>
 8009314:	4628      	mov	r0, r5
 8009316:	f7ff f907 	bl	8008528 <__sinit>
 800931a:	4b2e      	ldr	r3, [pc, #184]	; (80093d4 <__swsetup_r+0xd0>)
 800931c:	429c      	cmp	r4, r3
 800931e:	d10f      	bne.n	8009340 <__swsetup_r+0x3c>
 8009320:	686c      	ldr	r4, [r5, #4]
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009328:	0719      	lsls	r1, r3, #28
 800932a:	d42c      	bmi.n	8009386 <__swsetup_r+0x82>
 800932c:	06dd      	lsls	r5, r3, #27
 800932e:	d411      	bmi.n	8009354 <__swsetup_r+0x50>
 8009330:	2309      	movs	r3, #9
 8009332:	6033      	str	r3, [r6, #0]
 8009334:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009338:	81a3      	strh	r3, [r4, #12]
 800933a:	f04f 30ff 	mov.w	r0, #4294967295
 800933e:	e03e      	b.n	80093be <__swsetup_r+0xba>
 8009340:	4b25      	ldr	r3, [pc, #148]	; (80093d8 <__swsetup_r+0xd4>)
 8009342:	429c      	cmp	r4, r3
 8009344:	d101      	bne.n	800934a <__swsetup_r+0x46>
 8009346:	68ac      	ldr	r4, [r5, #8]
 8009348:	e7eb      	b.n	8009322 <__swsetup_r+0x1e>
 800934a:	4b24      	ldr	r3, [pc, #144]	; (80093dc <__swsetup_r+0xd8>)
 800934c:	429c      	cmp	r4, r3
 800934e:	bf08      	it	eq
 8009350:	68ec      	ldreq	r4, [r5, #12]
 8009352:	e7e6      	b.n	8009322 <__swsetup_r+0x1e>
 8009354:	0758      	lsls	r0, r3, #29
 8009356:	d512      	bpl.n	800937e <__swsetup_r+0x7a>
 8009358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800935a:	b141      	cbz	r1, 800936e <__swsetup_r+0x6a>
 800935c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009360:	4299      	cmp	r1, r3
 8009362:	d002      	beq.n	800936a <__swsetup_r+0x66>
 8009364:	4630      	mov	r0, r6
 8009366:	f7ff f9eb 	bl	8008740 <_free_r>
 800936a:	2300      	movs	r3, #0
 800936c:	6363      	str	r3, [r4, #52]	; 0x34
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	2300      	movs	r3, #0
 8009378:	6063      	str	r3, [r4, #4]
 800937a:	6923      	ldr	r3, [r4, #16]
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	f043 0308 	orr.w	r3, r3, #8
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	6923      	ldr	r3, [r4, #16]
 8009388:	b94b      	cbnz	r3, 800939e <__swsetup_r+0x9a>
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009394:	d003      	beq.n	800939e <__swsetup_r+0x9a>
 8009396:	4621      	mov	r1, r4
 8009398:	4630      	mov	r0, r6
 800939a:	f7ff f989 	bl	80086b0 <__smakebuf_r>
 800939e:	89a0      	ldrh	r0, [r4, #12]
 80093a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093a4:	f010 0301 	ands.w	r3, r0, #1
 80093a8:	d00a      	beq.n	80093c0 <__swsetup_r+0xbc>
 80093aa:	2300      	movs	r3, #0
 80093ac:	60a3      	str	r3, [r4, #8]
 80093ae:	6963      	ldr	r3, [r4, #20]
 80093b0:	425b      	negs	r3, r3
 80093b2:	61a3      	str	r3, [r4, #24]
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	b943      	cbnz	r3, 80093ca <__swsetup_r+0xc6>
 80093b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093bc:	d1ba      	bne.n	8009334 <__swsetup_r+0x30>
 80093be:	bd70      	pop	{r4, r5, r6, pc}
 80093c0:	0781      	lsls	r1, r0, #30
 80093c2:	bf58      	it	pl
 80093c4:	6963      	ldrpl	r3, [r4, #20]
 80093c6:	60a3      	str	r3, [r4, #8]
 80093c8:	e7f4      	b.n	80093b4 <__swsetup_r+0xb0>
 80093ca:	2000      	movs	r0, #0
 80093cc:	e7f7      	b.n	80093be <__swsetup_r+0xba>
 80093ce:	bf00      	nop
 80093d0:	2000002c 	.word	0x2000002c
 80093d4:	0800a87c 	.word	0x0800a87c
 80093d8:	0800a89c 	.word	0x0800a89c
 80093dc:	0800a85c 	.word	0x0800a85c

080093e0 <_close_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d06      	ldr	r5, [pc, #24]	; (80093fc <_close_r+0x1c>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	f7fe f981 	bl	80076f2 <_close>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_close_r+0x1a>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_close_r+0x1a>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	2000044c 	.word	0x2000044c

08009400 <_fstat_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d07      	ldr	r5, [pc, #28]	; (8009420 <_fstat_r+0x20>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	602b      	str	r3, [r5, #0]
 800940e:	f7fe f97c 	bl	800770a <_fstat>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d102      	bne.n	800941c <_fstat_r+0x1c>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	b103      	cbz	r3, 800941c <_fstat_r+0x1c>
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	2000044c 	.word	0x2000044c

08009424 <_isatty_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d06      	ldr	r5, [pc, #24]	; (8009440 <_isatty_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7fe f97b 	bl	800772a <_isatty>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_isatty_r+0x1a>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_isatty_r+0x1a>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	2000044c 	.word	0x2000044c

08009444 <_lseek_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d07      	ldr	r5, [pc, #28]	; (8009464 <_lseek_r+0x20>)
 8009448:	4604      	mov	r4, r0
 800944a:	4608      	mov	r0, r1
 800944c:	4611      	mov	r1, r2
 800944e:	2200      	movs	r2, #0
 8009450:	602a      	str	r2, [r5, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	f7fe f974 	bl	8007740 <_lseek>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_lseek_r+0x1e>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_lseek_r+0x1e>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	2000044c 	.word	0x2000044c

08009468 <memmove>:
 8009468:	4288      	cmp	r0, r1
 800946a:	b510      	push	{r4, lr}
 800946c:	eb01 0402 	add.w	r4, r1, r2
 8009470:	d902      	bls.n	8009478 <memmove+0x10>
 8009472:	4284      	cmp	r4, r0
 8009474:	4623      	mov	r3, r4
 8009476:	d807      	bhi.n	8009488 <memmove+0x20>
 8009478:	1e43      	subs	r3, r0, #1
 800947a:	42a1      	cmp	r1, r4
 800947c:	d008      	beq.n	8009490 <memmove+0x28>
 800947e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009482:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009486:	e7f8      	b.n	800947a <memmove+0x12>
 8009488:	4402      	add	r2, r0
 800948a:	4601      	mov	r1, r0
 800948c:	428a      	cmp	r2, r1
 800948e:	d100      	bne.n	8009492 <memmove+0x2a>
 8009490:	bd10      	pop	{r4, pc}
 8009492:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009496:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800949a:	e7f7      	b.n	800948c <memmove+0x24>

0800949c <__malloc_lock>:
 800949c:	4801      	ldr	r0, [pc, #4]	; (80094a4 <__malloc_lock+0x8>)
 800949e:	f7ff b8e1 	b.w	8008664 <__retarget_lock_acquire_recursive>
 80094a2:	bf00      	nop
 80094a4:	20000444 	.word	0x20000444

080094a8 <__malloc_unlock>:
 80094a8:	4801      	ldr	r0, [pc, #4]	; (80094b0 <__malloc_unlock+0x8>)
 80094aa:	f7ff b8dc 	b.w	8008666 <__retarget_lock_release_recursive>
 80094ae:	bf00      	nop
 80094b0:	20000444 	.word	0x20000444

080094b4 <_realloc_r>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	4607      	mov	r7, r0
 80094b8:	4614      	mov	r4, r2
 80094ba:	460e      	mov	r6, r1
 80094bc:	b921      	cbnz	r1, 80094c8 <_realloc_r+0x14>
 80094be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094c2:	4611      	mov	r1, r2
 80094c4:	f7ff b98c 	b.w	80087e0 <_malloc_r>
 80094c8:	b922      	cbnz	r2, 80094d4 <_realloc_r+0x20>
 80094ca:	f7ff f939 	bl	8008740 <_free_r>
 80094ce:	4625      	mov	r5, r4
 80094d0:	4628      	mov	r0, r5
 80094d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d4:	f000 f826 	bl	8009524 <_malloc_usable_size_r>
 80094d8:	42a0      	cmp	r0, r4
 80094da:	d20f      	bcs.n	80094fc <_realloc_r+0x48>
 80094dc:	4621      	mov	r1, r4
 80094de:	4638      	mov	r0, r7
 80094e0:	f7ff f97e 	bl	80087e0 <_malloc_r>
 80094e4:	4605      	mov	r5, r0
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d0f2      	beq.n	80094d0 <_realloc_r+0x1c>
 80094ea:	4631      	mov	r1, r6
 80094ec:	4622      	mov	r2, r4
 80094ee:	f7fe fdcf 	bl	8008090 <memcpy>
 80094f2:	4631      	mov	r1, r6
 80094f4:	4638      	mov	r0, r7
 80094f6:	f7ff f923 	bl	8008740 <_free_r>
 80094fa:	e7e9      	b.n	80094d0 <_realloc_r+0x1c>
 80094fc:	4635      	mov	r5, r6
 80094fe:	e7e7      	b.n	80094d0 <_realloc_r+0x1c>

08009500 <_read_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d07      	ldr	r5, [pc, #28]	; (8009520 <_read_r+0x20>)
 8009504:	4604      	mov	r4, r0
 8009506:	4608      	mov	r0, r1
 8009508:	4611      	mov	r1, r2
 800950a:	2200      	movs	r2, #0
 800950c:	602a      	str	r2, [r5, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	f7fe f8d2 	bl	80076b8 <_read>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_read_r+0x1e>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_read_r+0x1e>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	2000044c 	.word	0x2000044c

08009524 <_malloc_usable_size_r>:
 8009524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009528:	1f18      	subs	r0, r3, #4
 800952a:	2b00      	cmp	r3, #0
 800952c:	bfbc      	itt	lt
 800952e:	580b      	ldrlt	r3, [r1, r0]
 8009530:	18c0      	addlt	r0, r0, r3
 8009532:	4770      	bx	lr

08009534 <_init>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	bf00      	nop
 8009538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953a:	bc08      	pop	{r3}
 800953c:	469e      	mov	lr, r3
 800953e:	4770      	bx	lr

08009540 <_fini>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	bf00      	nop
 8009544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009546:	bc08      	pop	{r3}
 8009548:	469e      	mov	lr, r3
 800954a:	4770      	bx	lr
