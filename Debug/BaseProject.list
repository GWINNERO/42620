
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008470  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d68  08008d68  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08008d68  08008d68  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d68  08008d68  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d68  08008d68  00018d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000090  08008e00  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08008e00  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012006  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5f  00000000  00000000  000320c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00034e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  000357c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ae8  00000000  00000000  00035ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e70b  00000000  00000000  0003bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ab44  00000000  00000000  0004a1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a4d2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff8  00000000  00000000  000a4d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085e8 	.word	0x080085e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080085e8 	.word	0x080085e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a84:	4b91      	ldr	r3, [pc, #580]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 030c 	and.w	r3, r3, #12
 8000a8c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000a8e:	6a3b      	ldr	r3, [r7, #32]
 8000a90:	2b08      	cmp	r3, #8
 8000a92:	d011      	beq.n	8000ab8 <RCC_GetClocksFreq+0x5c>
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	d837      	bhi.n	8000b0a <RCC_GetClocksFreq+0xae>
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <RCC_GetClocksFreq+0x4c>
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d004      	beq.n	8000ab0 <RCC_GetClocksFreq+0x54>
 8000aa6:	e030      	b.n	8000b0a <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a89      	ldr	r2, [pc, #548]	; (8000cd0 <RCC_GetClocksFreq+0x274>)
 8000aac:	601a      	str	r2, [r3, #0]
      break;
 8000aae:	e030      	b.n	8000b12 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a87      	ldr	r2, [pc, #540]	; (8000cd0 <RCC_GetClocksFreq+0x274>)
 8000ab4:	601a      	str	r2, [r3, #0]
      break;
 8000ab6:	e02c      	b.n	8000b12 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000ab8:	4b84      	ldr	r3, [pc, #528]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000ac0:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000ac2:	4b82      	ldr	r3, [pc, #520]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aca:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	0c9b      	lsrs	r3, r3, #18
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d105      	bne.n	8000ae6 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	4a7d      	ldr	r2, [pc, #500]	; (8000cd4 <RCC_GetClocksFreq+0x278>)
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae4:	e00d      	b.n	8000b02 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000ae6:	4b79      	ldr	r3, [pc, #484]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3301      	adds	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000af2:	4a77      	ldr	r2, [pc, #476]	; (8000cd0 <RCC_GetClocksFreq+0x274>)
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b06:	601a      	str	r2, [r3, #0]
      break;
 8000b08:	e003      	b.n	8000b12 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a70      	ldr	r2, [pc, #448]	; (8000cd0 <RCC_GetClocksFreq+0x274>)
 8000b0e:	601a      	str	r2, [r3, #0]
      break;
 8000b10:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b12:	4b6e      	ldr	r3, [pc, #440]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b1a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000b22:	4a6d      	ldr	r2, [pc, #436]	; (8000cd8 <RCC_GetClocksFreq+0x27c>)
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	4413      	add	r3, r2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	40da      	lsrs	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000b3a:	4b64      	ldr	r3, [pc, #400]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b42:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	0a1b      	lsrs	r3, r3, #8
 8000b48:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000b4a:	4a63      	ldr	r2, [pc, #396]	; (8000cd8 <RCC_GetClocksFreq+0x27c>)
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	40da      	lsrs	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000b62:	4b5a      	ldr	r3, [pc, #360]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000b6a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	0adb      	lsrs	r3, r3, #11
 8000b70:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000b72:	4a59      	ldr	r2, [pc, #356]	; (8000cd8 <RCC_GetClocksFreq+0x27c>)
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	4413      	add	r3, r2
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	40da      	lsrs	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000b8a:	4b50      	ldr	r3, [pc, #320]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000b92:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	091b      	lsrs	r3, r3, #4
 8000b98:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000b9a:	4a50      	ldr	r2, [pc, #320]	; (8000cdc <RCC_GetClocksFreq+0x280>)
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	e003      	b.n	8000bc6 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000bc6:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bca:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000bce:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	0a5b      	lsrs	r3, r3, #9
 8000bd4:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000bd6:	4a41      	ldr	r2, [pc, #260]	; (8000cdc <RCC_GetClocksFreq+0x280>)
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	f003 0310 	and.w	r3, r3, #16
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	615a      	str	r2, [r3, #20]
 8000bf8:	e003      	b.n	8000c02 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000c02:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	2b10      	cmp	r3, #16
 8000c0c:	d003      	beq.n	8000c16 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a2f      	ldr	r2, [pc, #188]	; (8000cd0 <RCC_GetClocksFreq+0x274>)
 8000c12:	619a      	str	r2, [r3, #24]
 8000c14:	e003      	b.n	8000c1e <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000c1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0320 	and.w	r3, r3, #32
 8000c26:	2b20      	cmp	r3, #32
 8000c28:	d003      	beq.n	8000c32 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a28      	ldr	r2, [pc, #160]	; (8000cd0 <RCC_GetClocksFreq+0x274>)
 8000c2e:	61da      	str	r2, [r3, #28]
 8000c30:	e003      	b.n	8000c3a <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000c3a:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c46:	d10d      	bne.n	8000c64 <RCC_GetClocksFreq+0x208>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d108      	bne.n	8000c64 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d104      	bne.n	8000c64 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	005a      	lsls	r2, r3, #1
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	621a      	str	r2, [r3, #32]
 8000c62:	e003      	b.n	8000c6c <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c78:	d10d      	bne.n	8000c96 <RCC_GetClocksFreq+0x23a>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d108      	bne.n	8000c96 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d104      	bne.n	8000c96 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	005a      	lsls	r2, r3, #1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
 8000c94:	e003      	b.n	8000c9e <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d104      	bne.n	8000cb4 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
 8000cb2:	e029      	b.n	8000d08 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <RCC_GetClocksFreq+0x270>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d10f      	bne.n	8000ce0 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8000cc8:	e01e      	b.n	8000d08 <RCC_GetClocksFreq+0x2ac>
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	007a1200 	.word	0x007a1200
 8000cd4:	003d0900 	.word	0x003d0900
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000ce0:	4b66      	ldr	r3, [pc, #408]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d104      	bne.n	8000cf6 <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8000cf4:	e008      	b.n	8000d08 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000cf6:	4b61      	ldr	r3, [pc, #388]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d102      	bne.n	8000d08 <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a5e      	ldr	r2, [pc, #376]	; (8000e80 <RCC_GetClocksFreq+0x424>)
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000d08:	4b5c      	ldr	r3, [pc, #368]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d1c:	e021      	b.n	8000d62 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000d1e:	4b57      	ldr	r3, [pc, #348]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2a:	d104      	bne.n	8000d36 <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d34:	e015      	b.n	8000d62 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000d36:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d42:	d104      	bne.n	8000d4e <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d4c:	e009      	b.n	8000d62 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000d4e:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000d5a:	d102      	bne.n	8000d62 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a48      	ldr	r2, [pc, #288]	; (8000e80 <RCC_GetClocksFreq+0x424>)
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000d62:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d104      	bne.n	8000d78 <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	631a      	str	r2, [r3, #48]	; 0x30
 8000d76:	e021      	b.n	8000dbc <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000d78:	4b40      	ldr	r3, [pc, #256]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000d84:	d104      	bne.n	8000d90 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d8e:	e015      	b.n	8000dbc <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000d90:	4b3a      	ldr	r3, [pc, #232]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000d9c:	d104      	bne.n	8000da8 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
 8000da6:	e009      	b.n	8000dbc <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000da8:	4b34      	ldr	r3, [pc, #208]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000db0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000db4:	d102      	bne.n	8000dbc <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a31      	ldr	r2, [pc, #196]	; (8000e80 <RCC_GetClocksFreq+0x424>)
 8000dba:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000dbc:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d104      	bne.n	8000dd2 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd0:	e021      	b.n	8000e16 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000dde:	d104      	bne.n	8000dea <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
 8000de8:	e015      	b.n	8000e16 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000df6:	d104      	bne.n	8000e02 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
 8000e00:	e009      	b.n	8000e16 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000e0e:	d102      	bne.n	8000e16 <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <RCC_GetClocksFreq+0x424>)
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d104      	bne.n	8000e2c <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000e2a:	e021      	b.n	8000e70 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e38:	d104      	bne.n	8000e44 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e42:	e015      	b.n	8000e70 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000e50:	d104      	bne.n	8000e5c <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e58:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e5a:	e009      	b.n	8000e70 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <RCC_GetClocksFreq+0x420>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000e68:	d102      	bne.n	8000e70 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <RCC_GetClocksFreq+0x424>)
 8000e6e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e70:	bf00      	nop
 8000e72:	372c      	adds	r7, #44	; 0x2c
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	007a1200 	.word	0x007a1200

08000e84 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	330c      	adds	r3, #12
 8000e9c:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	78fa      	ldrb	r2, [r7, #3]
 8000ea2:	701a      	strb	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	891b      	ldrh	r3, [r3, #8]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e001      	b.n	8000eda <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	4613      	mov	r3, r2
 8000f18:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d103      	bne.n	8000f56 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	e005      	b.n	8000f62 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d102      	bne.n	8000f62 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	3308      	adds	r3, #8
 8000f60:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000f74:	e006      	b.n	8000f84 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	6819      	ldr	r1, [r3, #0]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43da      	mvns	r2, r3
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	400a      	ands	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	bf00      	nop
 8000f86:	3724      	adds	r7, #36	; 0x24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69da      	ldr	r2, [r3, #28]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e001      	b.n	8000fb4 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b087      	sub	sp, #28
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000fec:	2201      	movs	r2, #1
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	4013      	ands	r3, r2
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e00d      	b.n	8001024 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d105      	bne.n	800101a <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4013      	ands	r3, r2
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e004      	b.n	8001024 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	0c1b      	lsrs	r3, r3, #16
 8001028:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800102a:	2201      	movs	r2, #1
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4013      	ands	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <USART_GetITStatus+0x8e>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800104a:	2301      	movs	r3, #1
 800104c:	74fb      	strb	r3, [r7, #19]
 800104e:	e001      	b.n	8001054 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001054:	7cfb      	ldrb	r3, [r7, #19]
}
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	2201      	movs	r2, #1
 8001076:	fa02 f103 	lsl.w	r1, r2, r3
 800107a:	4a06      	ldr	r2, [pc, #24]	; (8001094 <NVIC_EnableIRQ+0x30>)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	095b      	lsrs	r3, r3, #5
 8001082:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000e100 	.word	0xe000e100

08001098 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <uart_get_char+0x48>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d011      	beq.n	80010d0 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <uart_get_char+0x4c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	b2d1      	uxtb	r1, r2
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <uart_get_char+0x4c>)
 80010b8:	7011      	strb	r1, [r2, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <uart_get_char+0x50>)
 80010be:	5c9b      	ldrb	r3, [r3, r2]
 80010c0:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <uart_get_char+0x48>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <uart_get_char+0x48>)
 80010ce:	701a      	strb	r2, [r3, #0]
    }
    return val;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	200001ae 	.word	0x200001ae
 80010e4:	200001ad 	.word	0x200001ad
 80010e8:	200000ac 	.word	0x200000ac

080010ec <uart_put_char>:

void uart_put_char(uint8_t c) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <uart_put_char+0x30>)
 80010fe:	f7ff fef3 	bl	8000ee8 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001102:	bf00      	nop
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <uart_put_char+0x30>)
 8001108:	f7ff ff42 	bl	8000f90 <USART_GetFlagStatus>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f8      	beq.n	8001104 <uart_put_char+0x18>
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40004400 	.word	0x40004400

08001120 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e012      	b.n	800115a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b0a      	cmp	r3, #10
 800113e:	d102      	bne.n	8001146 <_write_r+0x26>
            uart_put_char('\r');
 8001140:	200d      	movs	r0, #13
 8001142:	f7ff ffd3 	bl	80010ec <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ffcc 	bl	80010ec <uart_put_char>
    for (n = 0; n < len; n++) {
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	dbe8      	blt.n	8001134 <_write_r+0x14>
    }

    return len;
 8001162:	683b      	ldr	r3, [r7, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001170:	4915      	ldr	r1, [pc, #84]	; (80011c8 <USART2_IRQHandler+0x5c>)
 8001172:	4816      	ldr	r0, [pc, #88]	; (80011cc <USART2_IRQHandler+0x60>)
 8001174:	f7ff ff25 	bl	8000fc2 <USART_GetITStatus>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d021      	beq.n	80011c2 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <USART2_IRQHandler+0x60>)
 8001180:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001182:	b299      	uxth	r1, r3
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <USART2_IRQHandler+0x64>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	b2d0      	uxtb	r0, r2
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <USART2_IRQHandler+0x64>)
 8001190:	7010      	strb	r0, [r2, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	b2c9      	uxtb	r1, r1
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <USART2_IRQHandler+0x68>)
 8001198:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <USART2_IRQHandler+0x6c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2bff      	cmp	r3, #255	; 0xff
 80011a2:	d107      	bne.n	80011b4 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <USART2_IRQHandler+0x70>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	3301      	adds	r3, #1
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <USART2_IRQHandler+0x70>)
 80011b0:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80011b2:	e006      	b.n	80011c2 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <USART2_IRQHandler+0x6c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	3301      	adds	r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <USART2_IRQHandler+0x6c>)
 80011c0:	701a      	strb	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	00050105 	.word	0x00050105
 80011cc:	40004400 	.word	0x40004400
 80011d0:	200001ac 	.word	0x200001ac
 80011d4:	200000ac 	.word	0x200000ac
 80011d8:	200001ae 	.word	0x200001ae
 80011dc:	200001ad 	.word	0x200001ad

080011e0 <uart_clear>:

void uart_clear(){
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
    UART_START_IDX = 0;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <uart_clear+0x20>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
    UART_END_IDX = 0;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <uart_clear+0x24>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
    UART_COUNT = 0;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <uart_clear+0x28>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	200001ad 	.word	0x200001ad
 8001204:	200001ac 	.word	0x200001ac
 8001208:	200001ae 	.word	0x200001ae

0800120c <uart_get_count>:

uint8_t uart_get_count(){
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
    return UART_COUNT;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <uart_get_count+0x14>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	200001ae 	.word	0x200001ae

08001224 <uart_init>:

void uart_init(uint32_t baud) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	; 0x50
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 800122c:	4b86      	ldr	r3, [pc, #536]	; (8001448 <uart_init+0x224>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f005 ffc9 	bl	80071cc <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 800123a:	4b83      	ldr	r3, [pc, #524]	; (8001448 <uart_init+0x224>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f005 ffc2 	bl	80071cc <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001248:	4b80      	ldr	r3, [pc, #512]	; (800144c <uart_init+0x228>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	4a7f      	ldr	r2, [pc, #508]	; (800144c <uart_init+0x228>)
 800124e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001252:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001254:	4b7d      	ldr	r3, [pc, #500]	; (800144c <uart_init+0x228>)
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	4a7c      	ldr	r2, [pc, #496]	; (800144c <uart_init+0x228>)
 800125a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001260:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800126a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800126e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001270:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800127a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800127e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800128a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800128e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800129a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800129e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80012a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012ae:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80012b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012ba:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80012be:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80012c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012c4:	889b      	ldrh	r3, [r3, #4]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012cc:	f023 030c 	bic.w	r3, r3, #12
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80012d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012dc:	8892      	ldrh	r2, [r2, #4]
 80012de:	b292      	uxth	r2, r2
 80012e0:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80012e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012f0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80012f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012fc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001300:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001302:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800130c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001310:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001312:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800131c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001320:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001322:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <uart_init+0x22c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a4a      	ldr	r2, [pc, #296]	; (8001450 <uart_init+0x22c>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 800132e:	4b48      	ldr	r3, [pc, #288]	; (8001450 <uart_init+0x22c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4a47      	ldr	r2, [pc, #284]	; (8001450 <uart_init+0x22c>)
 8001334:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001338:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800133a:	4b45      	ldr	r3, [pc, #276]	; (8001450 <uart_init+0x22c>)
 800133c:	4a44      	ldr	r2, [pc, #272]	; (8001450 <uart_init+0x22c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <uart_init+0x22c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a42      	ldr	r2, [pc, #264]	; (8001450 <uart_init+0x22c>)
 8001348:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800134c:	f023 030c 	bic.w	r3, r3, #12
 8001350:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <uart_init+0x22c>)
 8001354:	4a3e      	ldr	r2, [pc, #248]	; (8001450 <uart_init+0x22c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <uart_init+0x22c>)
 800135c:	4a3c      	ldr	r2, [pc, #240]	; (8001450 <uart_init+0x22c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001362:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <uart_init+0x22c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <uart_init+0x22c>)
 8001368:	f043 030c 	orr.w	r3, r3, #12
 800136c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 800136e:	4b38      	ldr	r3, [pc, #224]	; (8001450 <uart_init+0x22c>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	4a37      	ldr	r2, [pc, #220]	; (8001450 <uart_init+0x22c>)
 8001374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001378:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800137a:	4b35      	ldr	r3, [pc, #212]	; (8001450 <uart_init+0x22c>)
 800137c:	4a34      	ldr	r2, [pc, #208]	; (8001450 <uart_init+0x22c>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001386:	2300      	movs	r3, #0
 8001388:	647b      	str	r3, [r7, #68]	; 0x44
 800138a:	2300      	movs	r3, #0
 800138c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fb62 	bl	8000a5c <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139a:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <uart_init+0x22c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d010      	beq.n	80013ca <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80013a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013aa:	005a      	lsls	r2, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 80013b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	fb01 f202 	mul.w	r2, r1, r2
 80013c4:	1a9b      	subs	r3, r3, r2
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80013c8:	e00d      	b.n	80013e6 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80013ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80013d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	fb01 f202 	mul.w	r2, r1, r2
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d302      	bcc.n	80013f6 <uart_init+0x1d2>
        divider++;
 80013f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f2:	3301      	adds	r3, #1
 80013f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <uart_init+0x22c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 800140c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800140e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001412:	4013      	ands	r3, r2
 8001414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001416:	4313      	orrs	r3, r2
 8001418:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <uart_init+0x22c>)
 800141c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800141e:	b292      	uxth	r2, r2
 8001420:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <uart_init+0x22c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <uart_init+0x22c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800142e:	2201      	movs	r2, #1
 8001430:	4908      	ldr	r1, [pc, #32]	; (8001454 <uart_init+0x230>)
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <uart_init+0x22c>)
 8001434:	f7ff fd6a 	bl	8000f0c <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001438:	2026      	movs	r0, #38	; 0x26
 800143a:	f7ff fe13 	bl	8001064 <NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3750      	adds	r7, #80	; 0x50
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000002c 	.word	0x2000002c
 800144c:	40021000 	.word	0x40021000
 8001450:	40004400 	.word	0x40004400
 8001454:	00050105 	.word	0x00050105

08001458 <lcd_transmit_byte>:

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <lcd_transmit_byte+0x5c>)
 8001464:	8a9b      	ldrh	r3, [r3, #20]
 8001466:	b29b      	uxth	r3, r3
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <lcd_transmit_byte+0x5c>)
 800146a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800146e:	b29b      	uxth	r3, r3
 8001470:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001472:	bf00      	nop
 8001474:	2102      	movs	r1, #2
 8001476:	4810      	ldr	r0, [pc, #64]	; (80014b8 <lcd_transmit_byte+0x60>)
 8001478:	f7ff fd1a 	bl	8000eb0 <SPI_I2S_GetFlagStatus>
 800147c:	4603      	mov	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	d1f8      	bne.n	8001474 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4619      	mov	r1, r3
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <lcd_transmit_byte+0x60>)
 8001488:	f7ff fcfc 	bl	8000e84 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 800148c:	bf00      	nop
 800148e:	2102      	movs	r1, #2
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <lcd_transmit_byte+0x60>)
 8001492:	f7ff fd0d 	bl	8000eb0 <SPI_I2S_GetFlagStatus>
 8001496:	4603      	mov	r3, r0
 8001498:	2b01      	cmp	r3, #1
 800149a:	d1f8      	bne.n	800148e <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <lcd_transmit_byte+0x5c>)
 800149e:	8a9b      	ldrh	r3, [r3, #20]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <lcd_transmit_byte+0x5c>)
 80014a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	8293      	strh	r3, [r2, #20]
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	48000400 	.word	0x48000400
 80014b8:	40003800 	.word	0x40003800

080014bc <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    int i = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80014c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014cc:	8a9b      	ldrh	r3, [r3, #20]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d8:	b29b      	uxth	r3, r3
 80014da:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff ffbb 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80014e2:	2010      	movs	r0, #16
 80014e4:	f7ff ffb8 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 80014e8:	20b0      	movs	r0, #176	; 0xb0
 80014ea:	f7ff ffb5 	bl	8001458 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80014ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014f2:	8a9b      	ldrh	r3, [r3, #20]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fe:	b29b      	uxth	r3, r3
 8001500:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e009      	b.n	800151c <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ffa1 	bl	8001458 <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3301      	adds	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	ddf2      	ble.n	8001508 <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001522:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001526:	8a9b      	ldrh	r3, [r3, #20]
 8001528:	b29b      	uxth	r3, r3
 800152a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800152e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001532:	b29b      	uxth	r3, r3
 8001534:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff ff8e 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 800153c:	2010      	movs	r0, #16
 800153e:	f7ff ff8b 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 8001542:	20b1      	movs	r0, #177	; 0xb1
 8001544:	f7ff ff88 	bl	8001458 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800154c:	8a9b      	ldrh	r3, [r3, #20]
 800154e:	b29b      	uxth	r3, r3
 8001550:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	b29b      	uxth	r3, r3
 800155a:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e009      	b.n	8001576 <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff74 	bl	8001458 <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3301      	adds	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2bff      	cmp	r3, #255	; 0xff
 800157a:	ddf2      	ble.n	8001562 <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 800157c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001580:	8a9b      	ldrh	r3, [r3, #20]
 8001582:	b29b      	uxth	r3, r3
 8001584:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800158c:	b29b      	uxth	r3, r3
 800158e:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff ff61 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001596:	2010      	movs	r0, #16
 8001598:	f7ff ff5e 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 800159c:	20b2      	movs	r0, #178	; 0xb2
 800159e:	f7ff ff5b 	bl	8001458 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80015a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015a6:	8a9b      	ldrh	r3, [r3, #20]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 80015b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	e009      	b.n	80015d2 <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff46 	bl	8001458 <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80015d8:	dbf1      	blt.n	80015be <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80015da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015de:	8a9b      	ldrh	r3, [r3, #20]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff ff32 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80015f4:	2010      	movs	r0, #16
 80015f6:	f7ff ff2f 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 80015fa:	20b3      	movs	r0, #179	; 0xb3
 80015fc:	f7ff ff2c 	bl	8001458 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001604:	8a9b      	ldrh	r3, [r3, #20]
 8001606:	b29b      	uxth	r3, r3
 8001608:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	b29b      	uxth	r3, r3
 8001612:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 8001614:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	e009      	b.n	8001630 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff17 	bl	8001458 <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3301      	adds	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001636:	dbf1      	blt.n	800161c <lcd_push_buffer+0x160>
    }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <lcd_reset>:

void lcd_reset()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 800164a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800164e:	8a9b      	ldrh	r3, [r3, #20]
 8001650:	b29b      	uxth	r3, r3
 8001652:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800165a:	b29b      	uxth	r3, r3
 800165c:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 800165e:	4b2f      	ldr	r3, [pc, #188]	; (800171c <lcd_reset+0xd8>)
 8001660:	8a9b      	ldrh	r3, [r3, #20]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4a2d      	ldr	r2, [pc, #180]	; (800171c <lcd_reset+0xd8>)
 8001666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800166a:	b29b      	uxth	r3, r3
 800166c:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <lcd_reset+0xd8>)
 8001670:	8a9b      	ldrh	r3, [r3, #20]
 8001672:	b29b      	uxth	r3, r3
 8001674:	4a29      	ldr	r2, [pc, #164]	; (800171c <lcd_reset+0xd8>)
 8001676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800167a:	b29b      	uxth	r3, r3
 800167c:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	e003      	b.n	800168c <lcd_reset+0x48>
 8001684:	bf00      	nop
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3301      	adds	r3, #1
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f241 2247 	movw	r2, #4679	; 0x1247
 8001692:	4293      	cmp	r3, r2
 8001694:	d9f6      	bls.n	8001684 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <lcd_reset+0xd8>)
 8001698:	8a9b      	ldrh	r3, [r3, #20]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4a1f      	ldr	r2, [pc, #124]	; (800171c <lcd_reset+0xd8>)
 800169e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	e003      	b.n	80016b4 <lcd_reset+0x70>
 80016ac:	bf00      	nop
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4a1a      	ldr	r2, [pc, #104]	; (8001720 <lcd_reset+0xdc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d9f7      	bls.n	80016ac <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80016bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016c0:	8a9b      	ldrh	r3, [r3, #20]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 80016d0:	20ae      	movs	r0, #174	; 0xae
 80016d2:	f7ff fec1 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 80016d6:	20a2      	movs	r0, #162	; 0xa2
 80016d8:	f7ff febe 	bl	8001458 <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 80016dc:	20a0      	movs	r0, #160	; 0xa0
 80016de:	f7ff febb 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 80016e2:	20c8      	movs	r0, #200	; 0xc8
 80016e4:	f7ff feb8 	bl	8001458 <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 80016e8:	2022      	movs	r0, #34	; 0x22
 80016ea:	f7ff feb5 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 80016ee:	202f      	movs	r0, #47	; 0x2f
 80016f0:	f7ff feb2 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 80016f4:	2040      	movs	r0, #64	; 0x40
 80016f6:	f7ff feaf 	bl	8001458 <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 80016fa:	20af      	movs	r0, #175	; 0xaf
 80016fc:	f7ff feac 	bl	8001458 <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 8001700:	2081      	movs	r0, #129	; 0x81
 8001702:	f7ff fea9 	bl	8001458 <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 8001706:	2017      	movs	r0, #23
 8001708:	f7ff fea6 	bl	8001458 <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 800170c:	20a6      	movs	r0, #166	; 0xa6
 800170e:	f7ff fea3 	bl	8001458 <lcd_transmit_byte>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	48000400 	.word	0x48000400
 8001720:	0005f36f 	.word	0x0005f36f

08001724 <lcd_init>:

void lcd_init() {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8001728:	4b9d      	ldr	r3, [pc, #628]	; (80019a0 <lcd_init+0x27c>)
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	4a9c      	ldr	r2, [pc, #624]	; (80019a0 <lcd_init+0x27c>)
 800172e:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8001732:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8001734:	4b9a      	ldr	r3, [pc, #616]	; (80019a0 <lcd_init+0x27c>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	4a99      	ldr	r2, [pc, #612]	; (80019a0 <lcd_init+0x27c>)
 800173a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173e:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8001740:	4b98      	ldr	r3, [pc, #608]	; (80019a4 <lcd_init+0x280>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	4a97      	ldr	r2, [pc, #604]	; (80019a4 <lcd_init+0x280>)
 8001746:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800174a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 800174c:	4b95      	ldr	r3, [pc, #596]	; (80019a4 <lcd_init+0x280>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	4a94      	ldr	r2, [pc, #592]	; (80019a4 <lcd_init+0x280>)
 8001752:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001756:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8001758:	4b92      	ldr	r3, [pc, #584]	; (80019a4 <lcd_init+0x280>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	4a91      	ldr	r2, [pc, #580]	; (80019a4 <lcd_init+0x280>)
 800175e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001762:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8001764:	4b8f      	ldr	r3, [pc, #572]	; (80019a4 <lcd_init+0x280>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	4a8e      	ldr	r2, [pc, #568]	; (80019a4 <lcd_init+0x280>)
 800176a:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800176e:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8001770:	4b8c      	ldr	r3, [pc, #560]	; (80019a4 <lcd_init+0x280>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4a8b      	ldr	r2, [pc, #556]	; (80019a4 <lcd_init+0x280>)
 8001776:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 800177a:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 800177c:	4b89      	ldr	r3, [pc, #548]	; (80019a4 <lcd_init+0x280>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a88      	ldr	r2, [pc, #544]	; (80019a4 <lcd_init+0x280>)
 8001782:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8001786:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 8001788:	4b86      	ldr	r3, [pc, #536]	; (80019a4 <lcd_init+0x280>)
 800178a:	889b      	ldrh	r3, [r3, #4]
 800178c:	b29a      	uxth	r2, r3
 800178e:	4985      	ldr	r1, [pc, #532]	; (80019a4 <lcd_init+0x280>)
 8001790:	f645 73ff 	movw	r3, #24575	; 0x5fff
 8001794:	4013      	ands	r3, r2
 8001796:	b29b      	uxth	r3, r3
 8001798:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 800179a:	4a82      	ldr	r2, [pc, #520]	; (80019a4 <lcd_init+0x280>)
 800179c:	4b81      	ldr	r3, [pc, #516]	; (80019a4 <lcd_init+0x280>)
 800179e:	8892      	ldrh	r2, [r2, #4]
 80017a0:	b292      	uxth	r2, r2
 80017a2:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 80017a4:	4b7f      	ldr	r3, [pc, #508]	; (80019a4 <lcd_init+0x280>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a7e      	ldr	r2, [pc, #504]	; (80019a4 <lcd_init+0x280>)
 80017aa:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 80017ae:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80017b0:	4b7c      	ldr	r3, [pc, #496]	; (80019a4 <lcd_init+0x280>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a7b      	ldr	r2, [pc, #492]	; (80019a4 <lcd_init+0x280>)
 80017b6:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80017ba:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 80017bc:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <lcd_init+0x280>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a78      	ldr	r2, [pc, #480]	; (80019a4 <lcd_init+0x280>)
 80017c2:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 80017c6:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80017c8:	4b76      	ldr	r3, [pc, #472]	; (80019a4 <lcd_init+0x280>)
 80017ca:	4a76      	ldr	r2, [pc, #472]	; (80019a4 <lcd_init+0x280>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 80017d0:	4b74      	ldr	r3, [pc, #464]	; (80019a4 <lcd_init+0x280>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a73      	ldr	r2, [pc, #460]	; (80019a4 <lcd_init+0x280>)
 80017d6:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80017da:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80017dc:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <lcd_init+0x280>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <lcd_init+0x280>)
 80017e2:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 80017e6:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 80017e8:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <lcd_init+0x280>)
 80017ea:	889b      	ldrh	r3, [r3, #4]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4a6d      	ldr	r2, [pc, #436]	; (80019a4 <lcd_init+0x280>)
 80017f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80017fc:	4a69      	ldr	r2, [pc, #420]	; (80019a4 <lcd_init+0x280>)
 80017fe:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <lcd_init+0x280>)
 8001800:	8892      	ldrh	r2, [r2, #4]
 8001802:	b292      	uxth	r2, r2
 8001804:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <lcd_init+0x280>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a66      	ldr	r2, [pc, #408]	; (80019a4 <lcd_init+0x280>)
 800180c:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8001810:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001812:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <lcd_init+0x280>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a63      	ldr	r2, [pc, #396]	; (80019a4 <lcd_init+0x280>)
 8001818:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 800181c:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 800181e:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <lcd_init+0x280>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	4a60      	ldr	r2, [pc, #384]	; (80019a4 <lcd_init+0x280>)
 8001824:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8001828:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800182a:	4b5e      	ldr	r3, [pc, #376]	; (80019a4 <lcd_init+0x280>)
 800182c:	4a5d      	ldr	r2, [pc, #372]	; (80019a4 <lcd_init+0x280>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 8001832:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800183c:	0c9b      	lsrs	r3, r3, #18
 800183e:	049b      	lsls	r3, r3, #18
 8001840:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001842:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 8001852:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001856:	889b      	ldrh	r3, [r3, #4]
 8001858:	b29b      	uxth	r3, r3
 800185a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800185e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	b29b      	uxth	r3, r3
 8001868:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 800186a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800186e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001872:	8892      	ldrh	r2, [r2, #4]
 8001874:	b292      	uxth	r2, r2
 8001876:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 8001878:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001882:	0c9b      	lsrs	r3, r3, #18
 8001884:	049b      	lsls	r3, r3, #18
 8001886:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001888:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 8001898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018a6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 80018a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018b2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80018b6:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 80018b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018c2:	0c9b      	lsrs	r3, r3, #18
 80018c4:	049b      	lsls	r3, r3, #18
 80018c6:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80018c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 80018d4:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <lcd_init+0x280>)
 80018d6:	8a9b      	ldrh	r3, [r3, #20]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <lcd_init+0x280>)
 80018dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <lcd_init+0x284>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	4a2f      	ldr	r2, [pc, #188]	; (80019a8 <lcd_init+0x284>)
 80018ec:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 80018f4:	4a2c      	ldr	r2, [pc, #176]	; (80019a8 <lcd_init+0x284>)
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <lcd_init+0x284>)
 80018f8:	8812      	ldrh	r2, [r2, #0]
 80018fa:	b292      	uxth	r2, r2
 80018fc:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <lcd_init+0x284>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <lcd_init+0x284>)
 8001906:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 800190a:	b29b      	uxth	r3, r3
 800190c:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <lcd_init+0x284>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	4a24      	ldr	r2, [pc, #144]	; (80019a8 <lcd_init+0x284>)
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	b29b      	uxth	r3, r3
 800191c:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <lcd_init+0x284>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <lcd_init+0x284>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	b29b      	uxth	r3, r3
 800192c:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <lcd_init+0x284>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <lcd_init+0x284>)
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	b29b      	uxth	r3, r3
 800193c:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <lcd_init+0x284>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <lcd_init+0x284>)
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	b29b      	uxth	r3, r3
 800194c:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 800194e:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <lcd_init+0x284>)
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <lcd_init+0x284>)
 8001952:	8812      	ldrh	r2, [r2, #0]
 8001954:	b292      	uxth	r2, r2
 8001956:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <lcd_init+0x284>)
 800195a:	889b      	ldrh	r3, [r3, #4]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <lcd_init+0x284>)
 8001960:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001964:	b29b      	uxth	r3, r3
 8001966:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <lcd_init+0x284>)
 800196a:	889b      	ldrh	r3, [r3, #4]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <lcd_init+0x284>)
 8001970:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001974:	b29b      	uxth	r3, r3
 8001976:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <lcd_init+0x284>)
 800197a:	8b9b      	ldrh	r3, [r3, #28]
 800197c:	b29b      	uxth	r3, r3
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <lcd_init+0x284>)
 8001980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001984:	b29b      	uxth	r3, r3
 8001986:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <lcd_init+0x284>)
 800198a:	2207      	movs	r2, #7
 800198c:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <lcd_init+0x284>)
 8001990:	889b      	ldrh	r3, [r3, #4]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <lcd_init+0x284>)
 8001996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800199a:	b29b      	uxth	r3, r3
 800199c:	e006      	b.n	80019ac <lcd_init+0x288>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	48000400 	.word	0x48000400
 80019a8:	40003800 	.word	0x40003800
 80019ac:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <lcd_init+0x2b4>)
 80019b0:	889b      	ldrh	r3, [r3, #4]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <lcd_init+0x2b4>)
 80019b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <lcd_init+0x2b4>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <lcd_init+0x2b4>)
 80019c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 80019ce:	f7ff fe39 	bl	8001644 <lcd_reset>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40003800 	.word	0x40003800

080019dc <startWindow>:
#include "ansi_S.h"
#include "joystick.h"
void startWindow(int x1, int y1, int x2, int y2) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]

//TOP
	gotoxy(x1, y1);
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f002 ffd1 	bl	8004994 <gotoxy>
	printf("%c", 201);
 80019f2:	20c9      	movs	r0, #201	; 0xc9
 80019f4:	f005 fbd4 	bl	80071a0 <putchar>
	for (int i=x1+1;i<x2;i++){
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3301      	adds	r3, #1
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	e005      	b.n	8001a0c <startWindow+0x30>
		printf("%c",205);
 8001a00:	20cd      	movs	r0, #205	; 0xcd
 8001a02:	f005 fbcd 	bl	80071a0 <putchar>
	for (int i=x1+1;i<x2;i++){
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbf5      	blt.n	8001a00 <startWindow+0x24>
	}
	printf("%c", 187);
 8001a14:	20bb      	movs	r0, #187	; 0xbb
 8001a16:	f005 fbc3 	bl	80071a0 <putchar>

//SIDES
	for(int i = 1; i<y2-1; i++){
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	e016      	b.n	8001a4e <startWindow+0x72>
		gotoxy(x1, y1+i);
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4413      	add	r3, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f002 ffb3 	bl	8004994 <gotoxy>
		printf("%c", 186);
 8001a2e:	20ba      	movs	r0, #186	; 0xba
 8001a30:	f005 fbb6 	bl	80071a0 <putchar>
		gotoxy(x2, y1+i);
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f002 ffa9 	bl	8004994 <gotoxy>
		printf("%c", 186);
 8001a42:	20ba      	movs	r0, #186	; 0xba
 8001a44:	f005 fbac 	bl	80071a0 <putchar>
	for(int i = 1; i<y2-1; i++){
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbe3      	blt.n	8001a20 <startWindow+0x44>
	}

//BUTTOM
	printf("%c",200);
 8001a58:	20c8      	movs	r0, #200	; 0xc8
 8001a5a:	f005 fba1 	bl	80071a0 <putchar>
	for (int i=x1+1;i<x2;i++){
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e005      	b.n	8001a72 <startWindow+0x96>
		printf("%c",205);
 8001a66:	20cd      	movs	r0, #205	; 0xcd
 8001a68:	f005 fb9a 	bl	80071a0 <putchar>
	for (int i=x1+1;i<x2;i++){
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbf5      	blt.n	8001a66 <startWindow+0x8a>
	}
	printf("%c", 188);
 8001a7a:	20bc      	movs	r0, #188	; 0xbc
 8001a7c:	f005 fb90 	bl	80071a0 <putchar>
}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <spaceship>:

int ani = 0;

void spaceship(int x1, int y1, int x2, int y2) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b090      	sub	sp, #64	; 0x40
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]

	fgcolor(1);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f002 ff2c 	bl	80048f4 <fgcolor>
	int ex = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	gotoxy(x1+15, y1);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	330f      	adds	r3, #15
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 ff74 	bl	8004994 <gotoxy>
	for(int i = 0; i <9; i++) {
 8001aac:	2300      	movs	r3, #0
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab0:	e005      	b.n	8001abe <spaceship+0x36>
	printf("%c",219);
 8001ab2:	20db      	movs	r0, #219	; 0xdb
 8001ab4:	f005 fb74 	bl	80071a0 <putchar>
	for(int i = 0; i <9; i++) {
 8001ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aba:	3301      	adds	r3, #1
 8001abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	ddf6      	ble.n	8001ab2 <spaceship+0x2a>
	}
	bgcolor(5);
 8001ac4:	2005      	movs	r0, #5
 8001ac6:	f002 ff31 	bl	800492c <bgcolor>
	fgcolor(0);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f002 ff12 	bl	80048f4 <fgcolor>
	printf("  UP  ");
 8001ad0:	4884      	ldr	r0, [pc, #528]	; (8001ce4 <spaceship+0x25c>)
 8001ad2:	f005 fb4d 	bl	8007170 <iprintf>
	bgcolor(0);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f002 ff28 	bl	800492c <bgcolor>
	fgcolor(1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f002 ff09 	bl	80048f4 <fgcolor>
	for(int i = 0; i <20; i++) {
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae6:	e005      	b.n	8001af4 <spaceship+0x6c>
	printf("%c",219);
 8001ae8:	20db      	movs	r0, #219	; 0xdb
 8001aea:	f005 fb59 	bl	80071a0 <putchar>
	for(int i = 0; i <20; i++) {
 8001aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af0:	3301      	adds	r3, #1
 8001af2:	637b      	str	r3, [r7, #52]	; 0x34
 8001af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af6:	2b13      	cmp	r3, #19
 8001af8:	ddf6      	ble.n	8001ae8 <spaceship+0x60>
	}
	bgcolor(6);
 8001afa:	2006      	movs	r0, #6
 8001afc:	f002 ff16 	bl	800492c <bgcolor>
	fgcolor(0);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f002 fef7 	bl	80048f4 <fgcolor>
	printf("HATCH");
 8001b06:	4878      	ldr	r0, [pc, #480]	; (8001ce8 <spaceship+0x260>)
 8001b08:	f005 fb32 	bl	8007170 <iprintf>
	bgcolor(0);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f002 ff0d 	bl	800492c <bgcolor>
	fgcolor(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f002 feee 	bl	80048f4 <fgcolor>
	for(int i = 0; i <29; i++) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8001b1c:	e005      	b.n	8001b2a <spaceship+0xa2>
	printf("%c",219);
 8001b1e:	20db      	movs	r0, #219	; 0xdb
 8001b20:	f005 fb3e 	bl	80071a0 <putchar>
	for(int i = 0; i <29; i++) {
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	3301      	adds	r3, #1
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
 8001b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2c:	2b1c      	cmp	r3, #28
 8001b2e:	ddf6      	ble.n	8001b1e <spaceship+0x96>
	}
	gotoxy(x1+15, y1+4);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f103 020f 	add.w	r2, r3, #15
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f002 ff29 	bl	8004994 <gotoxy>
	for(int i = 0; i <9; i++) {
 8001b42:	2300      	movs	r3, #0
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b46:	e005      	b.n	8001b54 <spaceship+0xcc>
	printf("%c",219);
 8001b48:	20db      	movs	r0, #219	; 0xdb
 8001b4a:	f005 fb29 	bl	80071a0 <putchar>
	for(int i = 0; i <9; i++) {
 8001b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b50:	3301      	adds	r3, #1
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	ddf6      	ble.n	8001b48 <spaceship+0xc0>
	}
	bgcolor(5);
 8001b5a:	2005      	movs	r0, #5
 8001b5c:	f002 fee6 	bl	800492c <bgcolor>
	fgcolor(0);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f002 fec7 	bl	80048f4 <fgcolor>
	printf(" DOWN ");
 8001b66:	4861      	ldr	r0, [pc, #388]	; (8001cec <spaceship+0x264>)
 8001b68:	f005 fb02 	bl	8007170 <iprintf>
	bgcolor(0);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f002 fedd 	bl	800492c <bgcolor>
	fgcolor(1);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f002 febe 	bl	80048f4 <fgcolor>
	for(int i = 0; i <20; i++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7c:	e005      	b.n	8001b8a <spaceship+0x102>
	printf("%c",219);
 8001b7e:	20db      	movs	r0, #219	; 0xdb
 8001b80:	f005 fb0e 	bl	80071a0 <putchar>
	for(int i = 0; i <20; i++) {
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	3301      	adds	r3, #1
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8c:	2b13      	cmp	r3, #19
 8001b8e:	ddf6      	ble.n	8001b7e <spaceship+0xf6>
	}
	bgcolor(6);
 8001b90:	2006      	movs	r0, #6
 8001b92:	f002 fecb 	bl	800492c <bgcolor>
	fgcolor(0);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f002 feac 	bl	80048f4 <fgcolor>
	printf("HATCH");
 8001b9c:	4852      	ldr	r0, [pc, #328]	; (8001ce8 <spaceship+0x260>)
 8001b9e:	f005 fae7 	bl	8007170 <iprintf>
	bgcolor(0);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f002 fec2 	bl	800492c <bgcolor>
	fgcolor(1);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f002 fea3 	bl	80048f4 <fgcolor>
	for(int i = 0; i <29; i++) {
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb2:	e005      	b.n	8001bc0 <spaceship+0x138>
	printf("%c",219);
 8001bb4:	20db      	movs	r0, #219	; 0xdb
 8001bb6:	f005 faf3 	bl	80071a0 <putchar>
	for(int i = 0; i <29; i++) {
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	2b1c      	cmp	r3, #28
 8001bc4:	ddf6      	ble.n	8001bb4 <spaceship+0x12c>
	}
	int a = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	e030      	b.n	8001c32 <spaceship+0x1aa>
	for(int i = 0; i < 7; i++){
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e024      	b.n	8001c20 <spaceship+0x198>
	gotoxy(x1+9+i+a, y1-3+j);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f103 0209 	add.w	r2, r3, #9
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	441a      	add	r2, r3
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	18d0      	adds	r0, r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1eda      	subs	r2, r3, #3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	4413      	add	r3, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f002 fed1 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001bf2:	20db      	movs	r0, #219	; 0xdb
 8001bf4:	f005 fad4 	bl	80071a0 <putchar>
	gotoxy(x1+9+i+a, y1+7-j);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f103 0209 	add.w	r2, r3, #9
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	441a      	add	r2, r3
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	18d0      	adds	r0, r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1dda      	adds	r2, r3, #7
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f002 fec0 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001c14:	20db      	movs	r0, #219	; 0xdb
 8001c16:	f005 fac3 	bl	80071a0 <putchar>
	for(int i = 0; i < 7; i++){
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	ddd7      	ble.n	8001bd6 <spaceship+0x14e>
	} a+=2;
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	3302      	adds	r3, #2
 8001c2a:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	ddcb      	ble.n	8001bd0 <spaceship+0x148>
	}
	for(int i = 1; i < 4; i++) {
 8001c38:	2301      	movs	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e039      	b.n	8001cb2 <spaceship+0x22a>
	gotoxy(x1+15, y1+i);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f103 000f 	add.w	r0, r3, #15
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f002 fea2 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001c50:	20db      	movs	r0, #219	; 0xdb
 8001c52:	f005 faa5 	bl	80071a0 <putchar>
	for(int j = 0; j < 6; j++){
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	e024      	b.n	8001ca6 <spaceship+0x21e>
	gotoxy(x2-8+j, y1+i);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f1a3 0208 	sub.w	r2, r3, #8
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	18d0      	adds	r0, r2, r3
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f002 fe91 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001c72:	20db      	movs	r0, #219	; 0xdb
 8001c74:	f005 fa94 	bl	80071a0 <putchar>
	ex++;
 8001c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (ex < 5){
 8001c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	dc0d      	bgt.n	8001ca0 <spaceship+0x218>
	gotoxy(x2-3+j, y1+i+1);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	1eda      	subs	r2, r3, #3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	18d0      	adds	r0, r2, r3
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4413      	add	r3, r2
 8001c92:	3301      	adds	r3, #1
 8001c94:	4619      	mov	r1, r3
 8001c96:	f002 fe7d 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001c9a:	20db      	movs	r0, #219	; 0xdb
 8001c9c:	f005 fa80 	bl	80071a0 <putchar>
	for(int j = 0; j < 6; j++){
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	ddd7      	ble.n	8001c5c <spaceship+0x1d4>
	for(int i = 1; i < 4; i++) {
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	ddc2      	ble.n	8001c3e <spaceship+0x1b6>
	}
	}
	}
	gotoxy(83,y1+2);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	3302      	adds	r3, #2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	2053      	movs	r0, #83	; 0x53
 8001cc0:	f002 fe68 	bl	8004994 <gotoxy>
	fgcolor(0);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f002 fe15 	bl	80048f4 <fgcolor>
	bgcolor(7);
 8001cca:	2007      	movs	r0, #7
 8001ccc:	f002 fe2e 	bl	800492c <bgcolor>
	printf(" CANON   ");
 8001cd0:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <spaceship+0x268>)
 8001cd2:	f005 fa4d 	bl	8007170 <iprintf>
	resetbgcolor();
 8001cd6:	f002 fe3b 	bl	8004950 <resetbgcolor>
}
 8001cda:	bf00      	nop
 8001cdc:	3740      	adds	r7, #64	; 0x40
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	08008600 	.word	0x08008600
 8001ce8:	08008608 	.word	0x08008608
 8001cec:	08008610 	.word	0x08008610
 8001cf0:	08008618 	.word	0x08008618

08001cf4 <spaceshipDelete>:

void spaceshipDelete(int x1, int y1, int x2, int y2) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]

	int ex = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	gotoxy(x1+15, y1);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	330f      	adds	r3, #15
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 fe41 	bl	8004994 <gotoxy>
	for(int i = 0; i <69; i++) {
 8001d12:	2300      	movs	r3, #0
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d16:	e005      	b.n	8001d24 <spaceshipDelete+0x30>
	printf("%c",32);
 8001d18:	2020      	movs	r0, #32
 8001d1a:	f005 fa41 	bl	80071a0 <putchar>
	for(int i = 0; i <69; i++) {
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	3301      	adds	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d26:	2b44      	cmp	r3, #68	; 0x44
 8001d28:	ddf6      	ble.n	8001d18 <spaceshipDelete+0x24>
	}
	gotoxy(x1+15, y1+4);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f103 020f 	add.w	r2, r3, #15
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	3304      	adds	r3, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f002 fe2c 	bl	8004994 <gotoxy>
	for(int i = 0; i <69; i++) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	e005      	b.n	8001d4e <spaceshipDelete+0x5a>
	printf("%c",32);
 8001d42:	2020      	movs	r0, #32
 8001d44:	f005 fa2c 	bl	80071a0 <putchar>
	for(int i = 0; i <69; i++) {
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	2b44      	cmp	r3, #68	; 0x44
 8001d52:	ddf6      	ble.n	8001d42 <spaceshipDelete+0x4e>
	}
	int a = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	e030      	b.n	8001dc0 <spaceshipDelete+0xcc>
	for(int i = 0; i < 7; i++){
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	e024      	b.n	8001dae <spaceshipDelete+0xba>
	gotoxy(x1+9+i+a, y1-3+j);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f103 0209 	add.w	r2, r3, #9
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	441a      	add	r2, r3
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	18d0      	adds	r0, r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1eda      	subs	r2, r3, #3
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f002 fe0a 	bl	8004994 <gotoxy>
	printf("%c",32);
 8001d80:	2020      	movs	r0, #32
 8001d82:	f005 fa0d 	bl	80071a0 <putchar>
	gotoxy(x1+9+i+a, y1+7-j);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f103 0209 	add.w	r2, r3, #9
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	441a      	add	r2, r3
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	18d0      	adds	r0, r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	1dda      	adds	r2, r3, #7
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f002 fdf9 	bl	8004994 <gotoxy>
	printf("%c",32);
 8001da2:	2020      	movs	r0, #32
 8001da4:	f005 f9fc 	bl	80071a0 <putchar>
	for(int i = 0; i < 7; i++){
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	3301      	adds	r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b06      	cmp	r3, #6
 8001db2:	ddd7      	ble.n	8001d64 <spaceshipDelete+0x70>
	} a+=2;
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	3302      	adds	r3, #2
 8001db8:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	ddcb      	ble.n	8001d5e <spaceshipDelete+0x6a>
	}
	for(int i = 1; i < 4; i++) {
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e039      	b.n	8001e40 <spaceshipDelete+0x14c>
	gotoxy(x1+15, y1+i);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f103 000f 	add.w	r0, r3, #15
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f002 fddb 	bl	8004994 <gotoxy>
	printf("%c",32);
 8001dde:	2020      	movs	r0, #32
 8001de0:	f005 f9de 	bl	80071a0 <putchar>
	for(int j = 0; j < 6; j++){
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e024      	b.n	8001e34 <spaceshipDelete+0x140>
	gotoxy(x2-8+j, y1+i);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f1a3 0208 	sub.w	r2, r3, #8
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	18d0      	adds	r0, r2, r3
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f002 fdca 	bl	8004994 <gotoxy>
	printf("%c",32);
 8001e00:	2020      	movs	r0, #32
 8001e02:	f005 f9cd 	bl	80071a0 <putchar>
	ex++;
 8001e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e08:	3301      	adds	r3, #1
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (ex < 5){
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	dc0d      	bgt.n	8001e2e <spaceshipDelete+0x13a>
	gotoxy(x2-3+j, y1+i+1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	1eda      	subs	r2, r3, #3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	18d0      	adds	r0, r2, r3
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	4413      	add	r3, r2
 8001e20:	3301      	adds	r3, #1
 8001e22:	4619      	mov	r1, r3
 8001e24:	f002 fdb6 	bl	8004994 <gotoxy>
	printf("%c",32);
 8001e28:	2020      	movs	r0, #32
 8001e2a:	f005 f9b9 	bl	80071a0 <putchar>
	for(int j = 0; j < 6; j++){
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	3301      	adds	r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	ddd7      	ble.n	8001dea <spaceshipDelete+0xf6>
	for(int i = 1; i < 4; i++) {
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	ddc2      	ble.n	8001dcc <spaceshipDelete+0xd8>
	}
	}
	}
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	3730      	adds	r7, #48	; 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <fire>:

void fire(int x1, int y1, int x2, int y2) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	; 0x30
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
	int s = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (ani < 2) {
 8001e62:	4ba1      	ldr	r3, [pc, #644]	; (80020e8 <fire+0x298>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	f300 8101 	bgt.w	800206e <fire+0x21e>
	for (int i = 0; i <= 8; i++){
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e70:	e044      	b.n	8001efc <fire+0xac>
	if (s == 0){
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d114      	bne.n	8001ea2 <fire+0x52>
	fgcolor(0);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f002 fd3b 	bl	80048f4 <fgcolor>
	gotoxy(7+i,y1);
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e80:	3307      	adds	r3, #7
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 fd85 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001e8a:	20db      	movs	r0, #219	; 0xdb
 8001e8c:	f005 f988 	bl	80071a0 <putchar>
	gotoxy(7+i,y2);
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	3307      	adds	r3, #7
 8001e94:	6839      	ldr	r1, [r7, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 fd7c 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001e9c:	20db      	movs	r0, #219	; 0xdb
 8001e9e:	f005 f97f 	bl	80071a0 <putchar>
	}
	if (s < 3){
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	dc02      	bgt.n	8001eae <fire+0x5e>
	fgcolor(1);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f002 fd23 	bl	80048f4 <fgcolor>
	}
	if (s < 6 && s >= 3){
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	dc05      	bgt.n	8001ec0 <fire+0x70>
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	dd02      	ble.n	8001ec0 <fire+0x70>
	fgcolor(9);
 8001eba:	2009      	movs	r0, #9
 8001ebc:	f002 fd1a 	bl	80048f4 <fgcolor>
	}
	if (s >= 6){
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	dd02      	ble.n	8001ecc <fire+0x7c>
	fgcolor(11);
 8001ec6:	200b      	movs	r0, #11
 8001ec8:	f002 fd14 	bl	80048f4 <fgcolor>
	}
	gotoxy(8+i,y1);
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ece:	3308      	adds	r3, #8
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 fd5e 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001ed8:	20db      	movs	r0, #219	; 0xdb
 8001eda:	f005 f961 	bl	80071a0 <putchar>
	gotoxy(8+i,y2);
 8001ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fd55 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001eea:	20db      	movs	r0, #219	; 0xdb
 8001eec:	f005 f958 	bl	80071a0 <putchar>
	s++;
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 8; i++){
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	3301      	adds	r3, #1
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	ddb7      	ble.n	8001e72 <fire+0x22>
	} s = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 11; i++){
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0a:	e055      	b.n	8001fb8 <fire+0x168>
	if (s == 0){
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d118      	bne.n	8001f44 <fire+0xf4>
	fgcolor(0);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f002 fcee 	bl	80048f4 <fgcolor>
	gotoxy(4+i,y1+1);
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	1d1a      	adds	r2, r3, #4
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	4619      	mov	r1, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	f002 fd36 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001f28:	20db      	movs	r0, #219	; 0xdb
 8001f2a:	f005 f939 	bl	80071a0 <putchar>
	gotoxy(4+i,y2-1);
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	1d1a      	adds	r2, r3, #4
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f002 fd2b 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001f3e:	20db      	movs	r0, #219	; 0xdb
 8001f40:	f005 f92e 	bl	80071a0 <putchar>
	}
	if (s < 4){
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	dc02      	bgt.n	8001f50 <fire+0x100>
	fgcolor(1);
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f002 fcd2 	bl	80048f4 <fgcolor>
	}
	if (s < 7 && s >= 4){
 8001f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	dc05      	bgt.n	8001f62 <fire+0x112>
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	dd02      	ble.n	8001f62 <fire+0x112>
	fgcolor(9);
 8001f5c:	2009      	movs	r0, #9
 8001f5e:	f002 fcc9 	bl	80048f4 <fgcolor>
	}
	if (s < 10 && s >= 7){
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	dc05      	bgt.n	8001f74 <fire+0x124>
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	dd02      	ble.n	8001f74 <fire+0x124>
	fgcolor(11);
 8001f6e:	200b      	movs	r0, #11
 8001f70:	f002 fcc0 	bl	80048f4 <fgcolor>
	}
	if (s >= 10){
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	dd02      	ble.n	8001f80 <fire+0x130>
	fgcolor(15);
 8001f7a:	200f      	movs	r0, #15
 8001f7c:	f002 fcba 	bl	80048f4 <fgcolor>
	}
	gotoxy(5+i,y1+1);
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	1d5a      	adds	r2, r3, #5
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	3301      	adds	r3, #1
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f002 fd02 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001f90:	20db      	movs	r0, #219	; 0xdb
 8001f92:	f005 f905 	bl	80071a0 <putchar>
	gotoxy(5+i,y2-1);
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	1d5a      	adds	r2, r3, #5
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	f002 fcf7 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001fa6:	20db      	movs	r0, #219	; 0xdb
 8001fa8:	f005 f8fa 	bl	80071a0 <putchar>
	s++;
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	3301      	adds	r3, #1
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 11; i++){
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	2b0b      	cmp	r3, #11
 8001fbc:	dda6      	ble.n	8001f0c <fire+0xbc>
	} s = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 13; i++){
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
 8001fc6:	e048      	b.n	800205a <fire+0x20a>
	if (s == 0){
 8001fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10d      	bne.n	8001fea <fire+0x19a>
	fgcolor(0);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f002 fc90 	bl	80048f4 <fgcolor>
	gotoxy(2+i,y1+2);
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	1c9a      	adds	r2, r3, #2
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	3302      	adds	r3, #2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	f002 fcd8 	bl	8004994 <gotoxy>
	printf("%c",219);
 8001fe4:	20db      	movs	r0, #219	; 0xdb
 8001fe6:	f005 f8db 	bl	80071a0 <putchar>
	}
	if(s < 3) {
 8001fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	dc02      	bgt.n	8001ff6 <fire+0x1a6>
	fgcolor(1);
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f002 fc7f 	bl	80048f4 <fgcolor>
	}
	if (s < 7 && s >= 3){
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	2b06      	cmp	r3, #6
 8001ffa:	dc05      	bgt.n	8002008 <fire+0x1b8>
 8001ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	dd02      	ble.n	8002008 <fire+0x1b8>
	fgcolor(9);
 8002002:	2009      	movs	r0, #9
 8002004:	f002 fc76 	bl	80048f4 <fgcolor>
	}
	if (s < 10 && s >=7){
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	2b09      	cmp	r3, #9
 800200c:	dc05      	bgt.n	800201a <fire+0x1ca>
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	2b06      	cmp	r3, #6
 8002012:	dd02      	ble.n	800201a <fire+0x1ca>
	fgcolor(11);
 8002014:	200b      	movs	r0, #11
 8002016:	f002 fc6d 	bl	80048f4 <fgcolor>
	}
	if (s < 13 && s >= 10){
 800201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201c:	2b0c      	cmp	r3, #12
 800201e:	dc05      	bgt.n	800202c <fire+0x1dc>
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002022:	2b09      	cmp	r3, #9
 8002024:	dd02      	ble.n	800202c <fire+0x1dc>
	fgcolor(15);
 8002026:	200f      	movs	r0, #15
 8002028:	f002 fc64 	bl	80048f4 <fgcolor>
	}
	if (s >= 13) {
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202e:	2b0c      	cmp	r3, #12
 8002030:	dd02      	ble.n	8002038 <fire+0x1e8>
	fgcolor(12);
 8002032:	200c      	movs	r0, #12
 8002034:	f002 fc5e 	bl	80048f4 <fgcolor>
	}
	gotoxy(3+i,y1+2);
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	1cda      	adds	r2, r3, #3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	3302      	adds	r3, #2
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f002 fca6 	bl	8004994 <gotoxy>
	printf("%c",219);
 8002048:	20db      	movs	r0, #219	; 0xdb
 800204a:	f005 f8a9 	bl	80071a0 <putchar>
	s++;
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	3301      	adds	r3, #1
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 13; i++){
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	3301      	adds	r3, #1
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	2b0d      	cmp	r3, #13
 800205e:	ddb3      	ble.n	8001fc8 <fire+0x178>
	} s = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
	ani++;
 8002064:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <fire+0x298>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	4a1f      	ldr	r2, [pc, #124]	; (80020e8 <fire+0x298>)
 800206c:	6013      	str	r3, [r2, #0]
	}

	if (ani >= 2) {
 800206e:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <fire+0x298>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	f340 80c5 	ble.w	8002202 <fire+0x3b2>
	for (int i = 0; i <= 9; i++){
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	e02c      	b.n	80020d8 <fire+0x288>
	if (s < 3){
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	2b02      	cmp	r3, #2
 8002082:	dc02      	bgt.n	800208a <fire+0x23a>
	fgcolor(9);
 8002084:	2009      	movs	r0, #9
 8002086:	f002 fc35 	bl	80048f4 <fgcolor>
	}
	if (s < 6 && s >= 3){
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	2b05      	cmp	r3, #5
 800208e:	dc05      	bgt.n	800209c <fire+0x24c>
 8002090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002092:	2b02      	cmp	r3, #2
 8002094:	dd02      	ble.n	800209c <fire+0x24c>
	fgcolor(11);
 8002096:	200b      	movs	r0, #11
 8002098:	f002 fc2c 	bl	80048f4 <fgcolor>
	}
	if (s >= 6){
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	2b05      	cmp	r3, #5
 80020a0:	dd02      	ble.n	80020a8 <fire+0x258>
	fgcolor(15);
 80020a2:	200f      	movs	r0, #15
 80020a4:	f002 fc26 	bl	80048f4 <fgcolor>
	}
	gotoxy(7+i,y1);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	3307      	adds	r3, #7
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 fc70 	bl	8004994 <gotoxy>
	printf("%c",219);
 80020b4:	20db      	movs	r0, #219	; 0xdb
 80020b6:	f005 f873 	bl	80071a0 <putchar>
	gotoxy(7+i,y2);
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3307      	adds	r3, #7
 80020be:	6839      	ldr	r1, [r7, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 fc67 	bl	8004994 <gotoxy>
	printf("%c",219);
 80020c6:	20db      	movs	r0, #219	; 0xdb
 80020c8:	f005 f86a 	bl	80071a0 <putchar>
	s++;
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ce:	3301      	adds	r3, #1
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 9; i++){
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3301      	adds	r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2b09      	cmp	r3, #9
 80020dc:	ddcf      	ble.n	800207e <fire+0x22e>
	} s = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 12; i++){
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	e03b      	b.n	8002160 <fire+0x310>
 80020e8:	200001b0 	.word	0x200001b0
	if (s < 4){
 80020ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	dc02      	bgt.n	80020f8 <fire+0x2a8>
	fgcolor(9);
 80020f2:	2009      	movs	r0, #9
 80020f4:	f002 fbfe 	bl	80048f4 <fgcolor>
	}
	if (s < 7 && s >= 4){
 80020f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	dc05      	bgt.n	800210a <fire+0x2ba>
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	2b03      	cmp	r3, #3
 8002102:	dd02      	ble.n	800210a <fire+0x2ba>
	fgcolor(11);
 8002104:	200b      	movs	r0, #11
 8002106:	f002 fbf5 	bl	80048f4 <fgcolor>
	}
	if (s < 10 && s >= 7){
 800210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210c:	2b09      	cmp	r3, #9
 800210e:	dc05      	bgt.n	800211c <fire+0x2cc>
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	2b06      	cmp	r3, #6
 8002114:	dd02      	ble.n	800211c <fire+0x2cc>
	fgcolor(15);
 8002116:	200f      	movs	r0, #15
 8002118:	f002 fbec 	bl	80048f4 <fgcolor>
	}
	if (s >= 10){
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211e:	2b09      	cmp	r3, #9
 8002120:	dd02      	ble.n	8002128 <fire+0x2d8>
	fgcolor(12);
 8002122:	200c      	movs	r0, #12
 8002124:	f002 fbe6 	bl	80048f4 <fgcolor>
	}
	gotoxy(4+i,y1+1);
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1d1a      	adds	r2, r3, #4
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	3301      	adds	r3, #1
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f002 fc2e 	bl	8004994 <gotoxy>
	printf("%c",219);
 8002138:	20db      	movs	r0, #219	; 0xdb
 800213a:	f005 f831 	bl	80071a0 <putchar>
	gotoxy(4+i,y2-1);
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	1d1a      	adds	r2, r3, #4
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	3b01      	subs	r3, #1
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f002 fc23 	bl	8004994 <gotoxy>
	printf("%c",219);
 800214e:	20db      	movs	r0, #219	; 0xdb
 8002150:	f005 f826 	bl	80071a0 <putchar>
	s++;
 8002154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002156:	3301      	adds	r3, #1
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 12; i++){
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	3301      	adds	r3, #1
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	ddc2      	ble.n	80020ec <fire+0x29c>
	} s = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 14; i++){
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e037      	b.n	80021e0 <fire+0x390>
	if(s < 3) {
 8002170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002172:	2b02      	cmp	r3, #2
 8002174:	dc02      	bgt.n	800217c <fire+0x32c>
	fgcolor(9);
 8002176:	2009      	movs	r0, #9
 8002178:	f002 fbbc 	bl	80048f4 <fgcolor>
	}
	if (s < 7 && s >= 3){
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217e:	2b06      	cmp	r3, #6
 8002180:	dc05      	bgt.n	800218e <fire+0x33e>
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	2b02      	cmp	r3, #2
 8002186:	dd02      	ble.n	800218e <fire+0x33e>
	fgcolor(11);
 8002188:	200b      	movs	r0, #11
 800218a:	f002 fbb3 	bl	80048f4 <fgcolor>
	}
	if (s < 10 && s >=7){
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	2b09      	cmp	r3, #9
 8002192:	dc05      	bgt.n	80021a0 <fire+0x350>
 8002194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002196:	2b06      	cmp	r3, #6
 8002198:	dd02      	ble.n	80021a0 <fire+0x350>
	fgcolor(15);
 800219a:	200f      	movs	r0, #15
 800219c:	f002 fbaa 	bl	80048f4 <fgcolor>
	}
	if (s < 13 && s >= 10){
 80021a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	dc05      	bgt.n	80021b2 <fire+0x362>
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	dd02      	ble.n	80021b2 <fire+0x362>
	fgcolor(12);
 80021ac:	200c      	movs	r0, #12
 80021ae:	f002 fba1 	bl	80048f4 <fgcolor>
	}
	if (s >= 13) {
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	dd02      	ble.n	80021be <fire+0x36e>
	fgcolor(4);
 80021b8:	2004      	movs	r0, #4
 80021ba:	f002 fb9b 	bl	80048f4 <fgcolor>
	}
	gotoxy(2+i,y1+2);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	1c9a      	adds	r2, r3, #2
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	3302      	adds	r3, #2
 80021c6:	4619      	mov	r1, r3
 80021c8:	4610      	mov	r0, r2
 80021ca:	f002 fbe3 	bl	8004994 <gotoxy>
	printf("%c",219);
 80021ce:	20db      	movs	r0, #219	; 0xdb
 80021d0:	f004 ffe6 	bl	80071a0 <putchar>
	s++;
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	3301      	adds	r3, #1
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 14; i++){
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b0e      	cmp	r3, #14
 80021e4:	ddc4      	ble.n	8002170 <fire+0x320>
	} s = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	ani++;
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <fire+0x3c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <fire+0x3c0>)
 80021f2:	6013      	str	r3, [r2, #0]
	if (ani == 3) {
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <fire+0x3c0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d102      	bne.n	8002202 <fire+0x3b2>
		ani = 0;
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <fire+0x3c0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
	}
	}
	resetbgcolor();
 8002202:	f002 fba5 	bl	8004950 <resetbgcolor>
}
 8002206:	bf00      	nop
 8002208:	3730      	adds	r7, #48	; 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200001b0 	.word	0x200001b0

08002214 <fireDelete>:

void fireDelete(int x1, int y1, int x2, int y2) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
	gotoxy(7,y1);
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	2007      	movs	r0, #7
 8002226:	f002 fbb5 	bl	8004994 <gotoxy>
	for (int i = 0; i <= 9; i++){
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	e005      	b.n	800223c <fireDelete+0x28>
	printf("%c",32);
 8002230:	2020      	movs	r0, #32
 8002232:	f004 ffb5 	bl	80071a0 <putchar>
	for (int i = 0; i <= 9; i++){
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	3301      	adds	r3, #1
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	2b09      	cmp	r3, #9
 8002240:	ddf6      	ble.n	8002230 <fireDelete+0x1c>
	}
	gotoxy(7,y2);
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	2007      	movs	r0, #7
 8002246:	f002 fba5 	bl	8004994 <gotoxy>
	for (int i = 0; i <= 9; i++){
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
 800224e:	e005      	b.n	800225c <fireDelete+0x48>
	printf("%c",32);
 8002250:	2020      	movs	r0, #32
 8002252:	f004 ffa5 	bl	80071a0 <putchar>
	for (int i = 0; i <= 9; i++){
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	3301      	adds	r3, #1
 800225a:	623b      	str	r3, [r7, #32]
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	2b09      	cmp	r3, #9
 8002260:	ddf6      	ble.n	8002250 <fireDelete+0x3c>
	}
	gotoxy(4,y1+1);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3301      	adds	r3, #1
 8002266:	4619      	mov	r1, r3
 8002268:	2004      	movs	r0, #4
 800226a:	f002 fb93 	bl	8004994 <gotoxy>
	for (int i = 0; i <= 12; i++){
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e005      	b.n	8002280 <fireDelete+0x6c>
	printf("%c",32);
 8002274:	2020      	movs	r0, #32
 8002276:	f004 ff93 	bl	80071a0 <putchar>
	for (int i = 0; i <= 12; i++){
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	ddf6      	ble.n	8002274 <fireDelete+0x60>
	}
	gotoxy(4,y2-1);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	3b01      	subs	r3, #1
 800228a:	4619      	mov	r1, r3
 800228c:	2004      	movs	r0, #4
 800228e:	f002 fb81 	bl	8004994 <gotoxy>
	for (int i = 0; i <= 12; i++){
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	e005      	b.n	80022a4 <fireDelete+0x90>
	printf("%c",32);
 8002298:	2020      	movs	r0, #32
 800229a:	f004 ff81 	bl	80071a0 <putchar>
	for (int i = 0; i <= 12; i++){
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	ddf6      	ble.n	8002298 <fireDelete+0x84>
	}
	gotoxy(2,y1+2);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3302      	adds	r3, #2
 80022ae:	4619      	mov	r1, r3
 80022b0:	2002      	movs	r0, #2
 80022b2:	f002 fb6f 	bl	8004994 <gotoxy>
	for (int i = 0; i <= 14; i++){
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e005      	b.n	80022c8 <fireDelete+0xb4>
	printf("%c",32);
 80022bc:	2020      	movs	r0, #32
 80022be:	f004 ff6f 	bl	80071a0 <putchar>
	for (int i = 0; i <= 14; i++){
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2b0e      	cmp	r3, #14
 80022cc:	ddf6      	ble.n	80022bc <fireDelete+0xa8>
	}
	}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <playerInShipR>:


void playerInShipR(int p,int x, int y){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d140      	bne.n	800236c <playerInShipR+0x94>
	fgcolor(15);
 80022ea:	200f      	movs	r0, #15
 80022ec:	f002 fb02 	bl	80048f4 <fgcolor>
	gotoxy(x+2,y);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	3302      	adds	r3, #2
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 fb4c 	bl	8004994 <gotoxy>
	printf("%c",254	);
 80022fc:	20fe      	movs	r0, #254	; 0xfe
 80022fe:	f004 ff4f 	bl	80071a0 <putchar>

	gotoxy(x,y+1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3301      	adds	r3, #1
 8002306:	4619      	mov	r1, r3
 8002308:	68b8      	ldr	r0, [r7, #8]
 800230a:	f002 fb43 	bl	8004994 <gotoxy>
	printf("%c",223);
 800230e:	20df      	movs	r0, #223	; 0xdf
 8002310:	f004 ff46 	bl	80071a0 <putchar>
	printf("%c",219);
 8002314:	20db      	movs	r0, #219	; 0xdb
 8002316:	f004 ff43 	bl	80071a0 <putchar>
	printf("%c",219);
 800231a:	20db      	movs	r0, #219	; 0xdb
 800231c:	f004 ff40 	bl	80071a0 <putchar>

	fgcolor(9);
 8002320:	2009      	movs	r0, #9
 8002322:	f002 fae7 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y+2);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3302      	adds	r3, #2
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f002 fb2f 	bl	8004994 <gotoxy>
	printf("%c",192);
 8002336:	20c0      	movs	r0, #192	; 0xc0
 8002338:	f004 ff32 	bl	80071a0 <putchar>
	printf("%c",192);
 800233c:	20c0      	movs	r0, #192	; 0xc0
 800233e:	f004 ff2f 	bl	80071a0 <putchar>

	fat(1);
 8002342:	2001      	movs	r0, #1
 8002344:	f001 fb42 	bl	80039cc <fat>
	fgcolor(9);
 8002348:	2009      	movs	r0, #9
 800234a:	f002 fad3 	bl	80048f4 <fgcolor>
	gotoxy(x+3,y);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	3303      	adds	r3, #3
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4618      	mov	r0, r3
 8002356:	f002 fb1d 	bl	8004994 <gotoxy>
	printf("%c",60);
 800235a:	203c      	movs	r0, #60	; 0x3c
 800235c:	f004 ff20 	bl	80071a0 <putchar>
	fgcolor(2);
 8002360:	2002      	movs	r0, #2
 8002362:	f002 fac7 	bl	80048f4 <fgcolor>
	fat(0);
 8002366:	2000      	movs	r0, #0
 8002368:	f001 fb30 	bl	80039cc <fat>
	}

	if (p == 2) {
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d140      	bne.n	80023f4 <playerInShipR+0x11c>
	fgcolor(11);
 8002372:	200b      	movs	r0, #11
 8002374:	f002 fabe 	bl	80048f4 <fgcolor>
	gotoxy(x+2,y);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3302      	adds	r3, #2
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	f002 fb08 	bl	8004994 <gotoxy>
	printf("%c",254	);
 8002384:	20fe      	movs	r0, #254	; 0xfe
 8002386:	f004 ff0b 	bl	80071a0 <putchar>

	gotoxy(x,y+1);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3301      	adds	r3, #1
 800238e:	4619      	mov	r1, r3
 8002390:	68b8      	ldr	r0, [r7, #8]
 8002392:	f002 faff 	bl	8004994 <gotoxy>
	printf("%c",223);
 8002396:	20df      	movs	r0, #223	; 0xdf
 8002398:	f004 ff02 	bl	80071a0 <putchar>
	printf("%c",219);
 800239c:	20db      	movs	r0, #219	; 0xdb
 800239e:	f004 feff 	bl	80071a0 <putchar>
	printf("%c",219);
 80023a2:	20db      	movs	r0, #219	; 0xdb
 80023a4:	f004 fefc 	bl	80071a0 <putchar>

	fgcolor(9);
 80023a8:	2009      	movs	r0, #9
 80023aa:	f002 faa3 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y+2);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3302      	adds	r3, #2
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f002 faeb 	bl	8004994 <gotoxy>
	printf("%c",192);
 80023be:	20c0      	movs	r0, #192	; 0xc0
 80023c0:	f004 feee 	bl	80071a0 <putchar>
	printf("%c",192);
 80023c4:	20c0      	movs	r0, #192	; 0xc0
 80023c6:	f004 feeb 	bl	80071a0 <putchar>

	fat(1);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f001 fafe 	bl	80039cc <fat>
	fgcolor(9);
 80023d0:	2009      	movs	r0, #9
 80023d2:	f002 fa8f 	bl	80048f4 <fgcolor>
	gotoxy(x+3,y);
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3303      	adds	r3, #3
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fad9 	bl	8004994 <gotoxy>
	printf("%c",60);
 80023e2:	203c      	movs	r0, #60	; 0x3c
 80023e4:	f004 fedc 	bl	80071a0 <putchar>
	fgcolor(2);
 80023e8:	2002      	movs	r0, #2
 80023ea:	f002 fa83 	bl	80048f4 <fgcolor>
	fat(0);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f001 faec 	bl	80039cc <fat>
	}
	resetbgcolor();
 80023f4:	f002 faac 	bl	8004950 <resetbgcolor>
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <playerInShipL>:

void playerInShipL(int p,int x, int y){
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d140      	bne.n	8002494 <playerInShipL+0x94>
	fgcolor(15);
 8002412:	200f      	movs	r0, #15
 8002414:	f002 fa6e 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	3301      	adds	r3, #1
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4618      	mov	r0, r3
 8002420:	f002 fab8 	bl	8004994 <gotoxy>
	printf("%c",254	);
 8002424:	20fe      	movs	r0, #254	; 0xfe
 8002426:	f004 febb 	bl	80071a0 <putchar>

	gotoxy(x+1,y+1);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3301      	adds	r3, #1
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f002 faad 	bl	8004994 <gotoxy>
	printf("%c",219);
 800243a:	20db      	movs	r0, #219	; 0xdb
 800243c:	f004 feb0 	bl	80071a0 <putchar>
	printf("%c",219);
 8002440:	20db      	movs	r0, #219	; 0xdb
 8002442:	f004 fead 	bl	80071a0 <putchar>
	printf("%c",223);
 8002446:	20df      	movs	r0, #223	; 0xdf
 8002448:	f004 feaa 	bl	80071a0 <putchar>

	fgcolor(9);
 800244c:	2009      	movs	r0, #9
 800244e:	f002 fa51 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y+2);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3302      	adds	r3, #2
 800245a:	4619      	mov	r1, r3
 800245c:	4610      	mov	r0, r2
 800245e:	f002 fa99 	bl	8004994 <gotoxy>
	printf("%c",217);
 8002462:	20d9      	movs	r0, #217	; 0xd9
 8002464:	f004 fe9c 	bl	80071a0 <putchar>
	printf("%c",217);
 8002468:	20d9      	movs	r0, #217	; 0xd9
 800246a:	f004 fe99 	bl	80071a0 <putchar>

	fat(1);
 800246e:	2001      	movs	r0, #1
 8002470:	f001 faac 	bl	80039cc <fat>
	fgcolor(9);
 8002474:	2009      	movs	r0, #9
 8002476:	f002 fa3d 	bl	80048f4 <fgcolor>
	gotoxy(x,y);
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	68b8      	ldr	r0, [r7, #8]
 800247e:	f002 fa89 	bl	8004994 <gotoxy>
	printf("%c",62);
 8002482:	203e      	movs	r0, #62	; 0x3e
 8002484:	f004 fe8c 	bl	80071a0 <putchar>
	fgcolor(2);
 8002488:	2002      	movs	r0, #2
 800248a:	f002 fa33 	bl	80048f4 <fgcolor>
	fat(0);
 800248e:	2000      	movs	r0, #0
 8002490:	f001 fa9c 	bl	80039cc <fat>
	}

	if (p == 2) {
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d140      	bne.n	800251c <playerInShipL+0x11c>
	fgcolor(11);
 800249a:	200b      	movs	r0, #11
 800249c:	f002 fa2a 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	3301      	adds	r3, #1
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 fa74 	bl	8004994 <gotoxy>
	printf("%c",254	);
 80024ac:	20fe      	movs	r0, #254	; 0xfe
 80024ae:	f004 fe77 	bl	80071a0 <putchar>

	gotoxy(x+1,y+1);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3301      	adds	r3, #1
 80024ba:	4619      	mov	r1, r3
 80024bc:	4610      	mov	r0, r2
 80024be:	f002 fa69 	bl	8004994 <gotoxy>
	printf("%c",219);
 80024c2:	20db      	movs	r0, #219	; 0xdb
 80024c4:	f004 fe6c 	bl	80071a0 <putchar>
	printf("%c",219);
 80024c8:	20db      	movs	r0, #219	; 0xdb
 80024ca:	f004 fe69 	bl	80071a0 <putchar>
	printf("%c",223);
 80024ce:	20df      	movs	r0, #223	; 0xdf
 80024d0:	f004 fe66 	bl	80071a0 <putchar>

	fgcolor(9);
 80024d4:	2009      	movs	r0, #9
 80024d6:	f002 fa0d 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y+2);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3302      	adds	r3, #2
 80024e2:	4619      	mov	r1, r3
 80024e4:	4610      	mov	r0, r2
 80024e6:	f002 fa55 	bl	8004994 <gotoxy>
	printf("%c",217);
 80024ea:	20d9      	movs	r0, #217	; 0xd9
 80024ec:	f004 fe58 	bl	80071a0 <putchar>
	printf("%c",217);
 80024f0:	20d9      	movs	r0, #217	; 0xd9
 80024f2:	f004 fe55 	bl	80071a0 <putchar>

	fat(1);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f001 fa68 	bl	80039cc <fat>
	fgcolor(9);
 80024fc:	2009      	movs	r0, #9
 80024fe:	f002 f9f9 	bl	80048f4 <fgcolor>
	gotoxy(x,y);
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68b8      	ldr	r0, [r7, #8]
 8002506:	f002 fa45 	bl	8004994 <gotoxy>
	printf("%c",62);
 800250a:	203e      	movs	r0, #62	; 0x3e
 800250c:	f004 fe48 	bl	80071a0 <putchar>
	fgcolor(2);
 8002510:	2002      	movs	r0, #2
 8002512:	f002 f9ef 	bl	80048f4 <fgcolor>
	fat(0);
 8002516:	2000      	movs	r0, #0
 8002518:	f001 fa58 	bl	80039cc <fat>
	}
	resetbgcolor();
 800251c:	f002 fa18 	bl	8004950 <resetbgcolor>
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <playerInSpaceR>:

void playerInSpaceR(int p, int x, int y){   //duck
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d14c      	bne.n	80025d4 <playerInSpaceR+0xac>
	fgcolor(15);
 800253a:	200f      	movs	r0, #15
 800253c:	f002 f9da 	bl	80048f4 <fgcolor>
	bgcolor(7);
 8002540:	2007      	movs	r0, #7
 8002542:	f002 f9f3 	bl	800492c <bgcolor>
	gotoxy(x+2,y);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	3302      	adds	r3, #2
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4618      	mov	r0, r3
 800254e:	f002 fa21 	bl	8004994 <gotoxy>
	printf("%c",254	);
 8002552:	20fe      	movs	r0, #254	; 0xfe
 8002554:	f004 fe24 	bl	80071a0 <putchar>
	bgcolor(0);
 8002558:	2000      	movs	r0, #0
 800255a:	f002 f9e7 	bl	800492c <bgcolor>

	gotoxy(x,y+1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3301      	adds	r3, #1
 8002562:	4619      	mov	r1, r3
 8002564:	68b8      	ldr	r0, [r7, #8]
 8002566:	f002 fa15 	bl	8004994 <gotoxy>
	printf("%c",223);
 800256a:	20df      	movs	r0, #223	; 0xdf
 800256c:	f004 fe18 	bl	80071a0 <putchar>
	printf("%c",219);
 8002570:	20db      	movs	r0, #219	; 0xdb
 8002572:	f004 fe15 	bl	80071a0 <putchar>
	printf("%c",219);
 8002576:	20db      	movs	r0, #219	; 0xdb
 8002578:	f004 fe12 	bl	80071a0 <putchar>

	fgcolor(9);
 800257c:	2009      	movs	r0, #9
 800257e:	f002 f9b9 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y+2);
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3302      	adds	r3, #2
 800258a:	4619      	mov	r1, r3
 800258c:	4610      	mov	r0, r2
 800258e:	f002 fa01 	bl	8004994 <gotoxy>
	printf("%c",192);
 8002592:	20c0      	movs	r0, #192	; 0xc0
 8002594:	f004 fe04 	bl	80071a0 <putchar>
	printf("%c",192);
 8002598:	20c0      	movs	r0, #192	; 0xc0
 800259a:	f004 fe01 	bl	80071a0 <putchar>

	fat(1);
 800259e:	2001      	movs	r0, #1
 80025a0:	f001 fa14 	bl	80039cc <fat>
	fgcolor(9);
 80025a4:	2009      	movs	r0, #9
 80025a6:	f002 f9a5 	bl	80048f4 <fgcolor>
	bgcolor(7);
 80025aa:	2007      	movs	r0, #7
 80025ac:	f002 f9be 	bl	800492c <bgcolor>
	gotoxy(x+3,y);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3303      	adds	r3, #3
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 f9ec 	bl	8004994 <gotoxy>
	printf("%c",60);
 80025bc:	203c      	movs	r0, #60	; 0x3c
 80025be:	f004 fdef 	bl	80071a0 <putchar>
	bgcolor(0);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f002 f9b2 	bl	800492c <bgcolor>
	fgcolor(2);
 80025c8:	2002      	movs	r0, #2
 80025ca:	f002 f993 	bl	80048f4 <fgcolor>
	fat(0);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f001 f9fc 	bl	80039cc <fat>
	}

	if (p == 2) {
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d14c      	bne.n	8002674 <playerInSpaceR+0x14c>
	fgcolor(11);
 80025da:	200b      	movs	r0, #11
 80025dc:	f002 f98a 	bl	80048f4 <fgcolor>
	bgcolor(7);
 80025e0:	2007      	movs	r0, #7
 80025e2:	f002 f9a3 	bl	800492c <bgcolor>
	gotoxy(x+2,y);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3302      	adds	r3, #2
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f002 f9d1 	bl	8004994 <gotoxy>
	printf("%c",254	);
 80025f2:	20fe      	movs	r0, #254	; 0xfe
 80025f4:	f004 fdd4 	bl	80071a0 <putchar>
	bgcolor(0);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f002 f997 	bl	800492c <bgcolor>

	gotoxy(x,y+1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3301      	adds	r3, #1
 8002602:	4619      	mov	r1, r3
 8002604:	68b8      	ldr	r0, [r7, #8]
 8002606:	f002 f9c5 	bl	8004994 <gotoxy>
	printf("%c",223);
 800260a:	20df      	movs	r0, #223	; 0xdf
 800260c:	f004 fdc8 	bl	80071a0 <putchar>
	printf("%c",219);
 8002610:	20db      	movs	r0, #219	; 0xdb
 8002612:	f004 fdc5 	bl	80071a0 <putchar>
	printf("%c",219);
 8002616:	20db      	movs	r0, #219	; 0xdb
 8002618:	f004 fdc2 	bl	80071a0 <putchar>

	fgcolor(9);
 800261c:	2009      	movs	r0, #9
 800261e:	f002 f969 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y+2);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3302      	adds	r3, #2
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f002 f9b1 	bl	8004994 <gotoxy>
	printf("%c",192);
 8002632:	20c0      	movs	r0, #192	; 0xc0
 8002634:	f004 fdb4 	bl	80071a0 <putchar>
	printf("%c",192);
 8002638:	20c0      	movs	r0, #192	; 0xc0
 800263a:	f004 fdb1 	bl	80071a0 <putchar>

	fat(1);
 800263e:	2001      	movs	r0, #1
 8002640:	f001 f9c4 	bl	80039cc <fat>
	fgcolor(9);
 8002644:	2009      	movs	r0, #9
 8002646:	f002 f955 	bl	80048f4 <fgcolor>
	bgcolor(7);
 800264a:	2007      	movs	r0, #7
 800264c:	f002 f96e 	bl	800492c <bgcolor>
	gotoxy(x+3,y);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	3303      	adds	r3, #3
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4618      	mov	r0, r3
 8002658:	f002 f99c 	bl	8004994 <gotoxy>
	printf("%c",60);
 800265c:	203c      	movs	r0, #60	; 0x3c
 800265e:	f004 fd9f 	bl	80071a0 <putchar>
	bgcolor(0);
 8002662:	2000      	movs	r0, #0
 8002664:	f002 f962 	bl	800492c <bgcolor>
	fgcolor(2);
 8002668:	2002      	movs	r0, #2
 800266a:	f002 f943 	bl	80048f4 <fgcolor>
	fat(0);
 800266e:	2000      	movs	r0, #0
 8002670:	f001 f9ac 	bl	80039cc <fat>
	}
	resetbgcolor();
 8002674:	f002 f96c 	bl	8004950 <resetbgcolor>
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <playerInSpaceL>:

void playerInSpaceL(int p, int x, int y){
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d14c      	bne.n	800272c <playerInSpaceL+0xac>
	fgcolor(15);
 8002692:	200f      	movs	r0, #15
 8002694:	f002 f92e 	bl	80048f4 <fgcolor>
	bgcolor(7);
 8002698:	2007      	movs	r0, #7
 800269a:	f002 f947 	bl	800492c <bgcolor>
	gotoxy(x+1,y);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3301      	adds	r3, #1
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 f975 	bl	8004994 <gotoxy>
	printf("%c",254	);
 80026aa:	20fe      	movs	r0, #254	; 0xfe
 80026ac:	f004 fd78 	bl	80071a0 <putchar>
	bgcolor(0);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f002 f93b 	bl	800492c <bgcolor>

	gotoxy(x+1,y+1);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3301      	adds	r3, #1
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f002 f967 	bl	8004994 <gotoxy>
	printf("%c",219);
 80026c6:	20db      	movs	r0, #219	; 0xdb
 80026c8:	f004 fd6a 	bl	80071a0 <putchar>
	printf("%c",219);
 80026cc:	20db      	movs	r0, #219	; 0xdb
 80026ce:	f004 fd67 	bl	80071a0 <putchar>
	printf("%c",223);
 80026d2:	20df      	movs	r0, #223	; 0xdf
 80026d4:	f004 fd64 	bl	80071a0 <putchar>

	fgcolor(9);
 80026d8:	2009      	movs	r0, #9
 80026da:	f002 f90b 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y+2);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3302      	adds	r3, #2
 80026e6:	4619      	mov	r1, r3
 80026e8:	4610      	mov	r0, r2
 80026ea:	f002 f953 	bl	8004994 <gotoxy>
	printf("%c",217);
 80026ee:	20d9      	movs	r0, #217	; 0xd9
 80026f0:	f004 fd56 	bl	80071a0 <putchar>
	printf("%c",217);
 80026f4:	20d9      	movs	r0, #217	; 0xd9
 80026f6:	f004 fd53 	bl	80071a0 <putchar>

	fat(1);
 80026fa:	2001      	movs	r0, #1
 80026fc:	f001 f966 	bl	80039cc <fat>
	fgcolor(9);
 8002700:	2009      	movs	r0, #9
 8002702:	f002 f8f7 	bl	80048f4 <fgcolor>
	bgcolor(7);
 8002706:	2007      	movs	r0, #7
 8002708:	f002 f910 	bl	800492c <bgcolor>
	gotoxy(x,y);
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	68b8      	ldr	r0, [r7, #8]
 8002710:	f002 f940 	bl	8004994 <gotoxy>
	printf("%c",62);
 8002714:	203e      	movs	r0, #62	; 0x3e
 8002716:	f004 fd43 	bl	80071a0 <putchar>
	bgcolor(0);
 800271a:	2000      	movs	r0, #0
 800271c:	f002 f906 	bl	800492c <bgcolor>
	fgcolor(2);
 8002720:	2002      	movs	r0, #2
 8002722:	f002 f8e7 	bl	80048f4 <fgcolor>
	fat(0);
 8002726:	2000      	movs	r0, #0
 8002728:	f001 f950 	bl	80039cc <fat>
	}

	if (p == 2) {
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d14c      	bne.n	80027cc <playerInSpaceL+0x14c>
	fgcolor(11);
 8002732:	200b      	movs	r0, #11
 8002734:	f002 f8de 	bl	80048f4 <fgcolor>
	bgcolor(7);
 8002738:	2007      	movs	r0, #7
 800273a:	f002 f8f7 	bl	800492c <bgcolor>
	gotoxy(x+1,y);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3301      	adds	r3, #1
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	f002 f925 	bl	8004994 <gotoxy>
	printf("%c",254	);
 800274a:	20fe      	movs	r0, #254	; 0xfe
 800274c:	f004 fd28 	bl	80071a0 <putchar>
	bgcolor(0);
 8002750:	2000      	movs	r0, #0
 8002752:	f002 f8eb 	bl	800492c <bgcolor>

	gotoxy(x+1,y+1);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3301      	adds	r3, #1
 800275e:	4619      	mov	r1, r3
 8002760:	4610      	mov	r0, r2
 8002762:	f002 f917 	bl	8004994 <gotoxy>
	printf("%c",219);
 8002766:	20db      	movs	r0, #219	; 0xdb
 8002768:	f004 fd1a 	bl	80071a0 <putchar>
	printf("%c",219);
 800276c:	20db      	movs	r0, #219	; 0xdb
 800276e:	f004 fd17 	bl	80071a0 <putchar>
	printf("%c",223);
 8002772:	20df      	movs	r0, #223	; 0xdf
 8002774:	f004 fd14 	bl	80071a0 <putchar>

	fgcolor(9);
 8002778:	2009      	movs	r0, #9
 800277a:	f002 f8bb 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y+2);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3302      	adds	r3, #2
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f002 f903 	bl	8004994 <gotoxy>
	printf("%c",217);
 800278e:	20d9      	movs	r0, #217	; 0xd9
 8002790:	f004 fd06 	bl	80071a0 <putchar>
	printf("%c",217);
 8002794:	20d9      	movs	r0, #217	; 0xd9
 8002796:	f004 fd03 	bl	80071a0 <putchar>

	fat(1);
 800279a:	2001      	movs	r0, #1
 800279c:	f001 f916 	bl	80039cc <fat>
	fgcolor(9);
 80027a0:	2009      	movs	r0, #9
 80027a2:	f002 f8a7 	bl	80048f4 <fgcolor>
	bgcolor(7);
 80027a6:	2007      	movs	r0, #7
 80027a8:	f002 f8c0 	bl	800492c <bgcolor>
	gotoxy(x,y);
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	68b8      	ldr	r0, [r7, #8]
 80027b0:	f002 f8f0 	bl	8004994 <gotoxy>
	printf("%c",62);
 80027b4:	203e      	movs	r0, #62	; 0x3e
 80027b6:	f004 fcf3 	bl	80071a0 <putchar>
	bgcolor(0);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f002 f8b6 	bl	800492c <bgcolor>
	fgcolor(2);
 80027c0:	2002      	movs	r0, #2
 80027c2:	f002 f897 	bl	80048f4 <fgcolor>
	fat(0);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f001 f900 	bl	80039cc <fat>
	}
	resetbgcolor();
 80027cc:	f002 f8c0 	bl	8004950 <resetbgcolor>
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <playerInSpaceUSDL>:

void playerInSpaceUSDL(int p, int x, int y){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d14e      	bne.n	8002888 <playerInSpaceUSDL+0xb0>
	fgcolor(15);
 80027ea:	200f      	movs	r0, #15
 80027ec:	f002 f882 	bl	80048f4 <fgcolor>
	bgcolor(7);
 80027f0:	2007      	movs	r0, #7
 80027f2:	f002 f89b 	bl	800492c <bgcolor>
	gotoxy(x+1,y+2);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3302      	adds	r3, #2
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f002 f8c7 	bl	8004994 <gotoxy>
	printf("%c",254	);
 8002806:	20fe      	movs	r0, #254	; 0xfe
 8002808:	f004 fcca 	bl	80071a0 <putchar>
	bgcolor(0);
 800280c:	2000      	movs	r0, #0
 800280e:	f002 f88d 	bl	800492c <bgcolor>

	gotoxy(x+1,y+1);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3301      	adds	r3, #1
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f002 f8b9 	bl	8004994 <gotoxy>
	printf("%c",219);
 8002822:	20db      	movs	r0, #219	; 0xdb
 8002824:	f004 fcbc 	bl	80071a0 <putchar>
	printf("%c",219);
 8002828:	20db      	movs	r0, #219	; 0xdb
 800282a:	f004 fcb9 	bl	80071a0 <putchar>
	printf("%c",220);
 800282e:	20dc      	movs	r0, #220	; 0xdc
 8002830:	f004 fcb6 	bl	80071a0 <putchar>

	fgcolor(9);
 8002834:	2009      	movs	r0, #9
 8002836:	f002 f85d 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3301      	adds	r3, #1
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4618      	mov	r0, r3
 8002842:	f002 f8a7 	bl	8004994 <gotoxy>
	printf("%c",191);
 8002846:	20bf      	movs	r0, #191	; 0xbf
 8002848:	f004 fcaa 	bl	80071a0 <putchar>
	printf("%c",191);
 800284c:	20bf      	movs	r0, #191	; 0xbf
 800284e:	f004 fca7 	bl	80071a0 <putchar>

	fat(1);
 8002852:	2001      	movs	r0, #1
 8002854:	f001 f8ba 	bl	80039cc <fat>
	fgcolor(9);
 8002858:	2009      	movs	r0, #9
 800285a:	f002 f84b 	bl	80048f4 <fgcolor>
	bgcolor(7);
 800285e:	2007      	movs	r0, #7
 8002860:	f002 f864 	bl	800492c <bgcolor>
	gotoxy(x,y+2);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3302      	adds	r3, #2
 8002868:	4619      	mov	r1, r3
 800286a:	68b8      	ldr	r0, [r7, #8]
 800286c:	f002 f892 	bl	8004994 <gotoxy>
	printf("%c",62);
 8002870:	203e      	movs	r0, #62	; 0x3e
 8002872:	f004 fc95 	bl	80071a0 <putchar>
	bgcolor(0);
 8002876:	2000      	movs	r0, #0
 8002878:	f002 f858 	bl	800492c <bgcolor>
	fgcolor(2);
 800287c:	2002      	movs	r0, #2
 800287e:	f002 f839 	bl	80048f4 <fgcolor>
	fat(0);
 8002882:	2000      	movs	r0, #0
 8002884:	f001 f8a2 	bl	80039cc <fat>
	}

	if (p == 2) {
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d14e      	bne.n	800292c <playerInSpaceUSDL+0x154>
	fgcolor(11);
 800288e:	200b      	movs	r0, #11
 8002890:	f002 f830 	bl	80048f4 <fgcolor>
	bgcolor(7);
 8002894:	2007      	movs	r0, #7
 8002896:	f002 f849 	bl	800492c <bgcolor>
	gotoxy(x+1,y+2);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3302      	adds	r3, #2
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f002 f875 	bl	8004994 <gotoxy>
	printf("%c",254	);
 80028aa:	20fe      	movs	r0, #254	; 0xfe
 80028ac:	f004 fc78 	bl	80071a0 <putchar>
	bgcolor(0);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f002 f83b 	bl	800492c <bgcolor>

	gotoxy(x+1,y+1);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3301      	adds	r3, #1
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f002 f867 	bl	8004994 <gotoxy>
	printf("%c",219);
 80028c6:	20db      	movs	r0, #219	; 0xdb
 80028c8:	f004 fc6a 	bl	80071a0 <putchar>
	printf("%c",219);
 80028cc:	20db      	movs	r0, #219	; 0xdb
 80028ce:	f004 fc67 	bl	80071a0 <putchar>
	printf("%c",220);
 80028d2:	20dc      	movs	r0, #220	; 0xdc
 80028d4:	f004 fc64 	bl	80071a0 <putchar>

	fgcolor(9);
 80028d8:	2009      	movs	r0, #9
 80028da:	f002 f80b 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3301      	adds	r3, #1
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 f855 	bl	8004994 <gotoxy>
	printf("%c",191);
 80028ea:	20bf      	movs	r0, #191	; 0xbf
 80028ec:	f004 fc58 	bl	80071a0 <putchar>
	printf("%c",191);
 80028f0:	20bf      	movs	r0, #191	; 0xbf
 80028f2:	f004 fc55 	bl	80071a0 <putchar>

	fat(1);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f001 f868 	bl	80039cc <fat>
	fgcolor(9);
 80028fc:	2009      	movs	r0, #9
 80028fe:	f001 fff9 	bl	80048f4 <fgcolor>
	bgcolor(7);
 8002902:	2007      	movs	r0, #7
 8002904:	f002 f812 	bl	800492c <bgcolor>
	gotoxy(x,y+2);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3302      	adds	r3, #2
 800290c:	4619      	mov	r1, r3
 800290e:	68b8      	ldr	r0, [r7, #8]
 8002910:	f002 f840 	bl	8004994 <gotoxy>
	printf("%c",62);
 8002914:	203e      	movs	r0, #62	; 0x3e
 8002916:	f004 fc43 	bl	80071a0 <putchar>
	bgcolor(0);
 800291a:	2000      	movs	r0, #0
 800291c:	f002 f806 	bl	800492c <bgcolor>
	fgcolor(2);
 8002920:	2002      	movs	r0, #2
 8002922:	f001 ffe7 	bl	80048f4 <fgcolor>
	fat(0);
 8002926:	2000      	movs	r0, #0
 8002928:	f001 f850 	bl	80039cc <fat>
	}
	resetbgcolor();
 800292c:	f002 f810 	bl	8004950 <resetbgcolor>
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <playerInSpaceUSDR>:

void playerInSpaceUSDR(int p, int x, int y){
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d14e      	bne.n	80029e8 <playerInSpaceUSDR+0xb0>
	fgcolor(15);
 800294a:	200f      	movs	r0, #15
 800294c:	f001 ffd2 	bl	80048f4 <fgcolor>
	bgcolor(7);
 8002950:	2007      	movs	r0, #7
 8002952:	f001 ffeb 	bl	800492c <bgcolor>
	gotoxy(x+2,y+2);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1c9a      	adds	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3302      	adds	r3, #2
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f002 f817 	bl	8004994 <gotoxy>
	printf("%c",254	);
 8002966:	20fe      	movs	r0, #254	; 0xfe
 8002968:	f004 fc1a 	bl	80071a0 <putchar>
	bgcolor(0);
 800296c:	2000      	movs	r0, #0
 800296e:	f001 ffdd 	bl	800492c <bgcolor>

	gotoxy(x,y+1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3301      	adds	r3, #1
 8002976:	4619      	mov	r1, r3
 8002978:	68b8      	ldr	r0, [r7, #8]
 800297a:	f002 f80b 	bl	8004994 <gotoxy>
	printf("%c",220);
 800297e:	20dc      	movs	r0, #220	; 0xdc
 8002980:	f004 fc0e 	bl	80071a0 <putchar>
	printf("%c",219);
 8002984:	20db      	movs	r0, #219	; 0xdb
 8002986:	f004 fc0b 	bl	80071a0 <putchar>
	printf("%c",219);
 800298a:	20db      	movs	r0, #219	; 0xdb
 800298c:	f004 fc08 	bl	80071a0 <putchar>

	fgcolor(9);
 8002990:	2009      	movs	r0, #9
 8002992:	f001 ffaf 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	3301      	adds	r3, #1
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4618      	mov	r0, r3
 800299e:	f001 fff9 	bl	8004994 <gotoxy>
	printf("%c",218);
 80029a2:	20da      	movs	r0, #218	; 0xda
 80029a4:	f004 fbfc 	bl	80071a0 <putchar>
	printf("%c",218);
 80029a8:	20da      	movs	r0, #218	; 0xda
 80029aa:	f004 fbf9 	bl	80071a0 <putchar>

	fat(1);
 80029ae:	2001      	movs	r0, #1
 80029b0:	f001 f80c 	bl	80039cc <fat>
	fgcolor(9);
 80029b4:	2009      	movs	r0, #9
 80029b6:	f001 ff9d 	bl	80048f4 <fgcolor>
	bgcolor(7);
 80029ba:	2007      	movs	r0, #7
 80029bc:	f001 ffb6 	bl	800492c <bgcolor>
	gotoxy(x+3,y+2);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	1cda      	adds	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3302      	adds	r3, #2
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f001 ffe2 	bl	8004994 <gotoxy>
	printf("%c",60);
 80029d0:	203c      	movs	r0, #60	; 0x3c
 80029d2:	f004 fbe5 	bl	80071a0 <putchar>
	bgcolor(0);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f001 ffa8 	bl	800492c <bgcolor>
	fgcolor(2);
 80029dc:	2002      	movs	r0, #2
 80029de:	f001 ff89 	bl	80048f4 <fgcolor>
	fat(0);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f000 fff2 	bl	80039cc <fat>
	}

	if (p == 2) {
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d14e      	bne.n	8002a8c <playerInSpaceUSDR+0x154>
	fgcolor(11);
 80029ee:	200b      	movs	r0, #11
 80029f0:	f001 ff80 	bl	80048f4 <fgcolor>
	bgcolor(7);
 80029f4:	2007      	movs	r0, #7
 80029f6:	f001 ff99 	bl	800492c <bgcolor>
	gotoxy(x+2,y+2);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1c9a      	adds	r2, r3, #2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3302      	adds	r3, #2
 8002a02:	4619      	mov	r1, r3
 8002a04:	4610      	mov	r0, r2
 8002a06:	f001 ffc5 	bl	8004994 <gotoxy>
	printf("%c",254	);
 8002a0a:	20fe      	movs	r0, #254	; 0xfe
 8002a0c:	f004 fbc8 	bl	80071a0 <putchar>
	bgcolor(0);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f001 ff8b 	bl	800492c <bgcolor>

	gotoxy(x,y+1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	68b8      	ldr	r0, [r7, #8]
 8002a1e:	f001 ffb9 	bl	8004994 <gotoxy>
	printf("%c",220);
 8002a22:	20dc      	movs	r0, #220	; 0xdc
 8002a24:	f004 fbbc 	bl	80071a0 <putchar>
	printf("%c",219);
 8002a28:	20db      	movs	r0, #219	; 0xdb
 8002a2a:	f004 fbb9 	bl	80071a0 <putchar>
	printf("%c",219);
 8002a2e:	20db      	movs	r0, #219	; 0xdb
 8002a30:	f004 fbb6 	bl	80071a0 <putchar>

	fgcolor(9);
 8002a34:	2009      	movs	r0, #9
 8002a36:	f001 ff5d 	bl	80048f4 <fgcolor>
	gotoxy(x+1,y);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f001 ffa7 	bl	8004994 <gotoxy>
	printf("%c",218);
 8002a46:	20da      	movs	r0, #218	; 0xda
 8002a48:	f004 fbaa 	bl	80071a0 <putchar>
	printf("%c",218);
 8002a4c:	20da      	movs	r0, #218	; 0xda
 8002a4e:	f004 fba7 	bl	80071a0 <putchar>

	fat(1);
 8002a52:	2001      	movs	r0, #1
 8002a54:	f000 ffba 	bl	80039cc <fat>
	fgcolor(9);
 8002a58:	2009      	movs	r0, #9
 8002a5a:	f001 ff4b 	bl	80048f4 <fgcolor>
	bgcolor(7);
 8002a5e:	2007      	movs	r0, #7
 8002a60:	f001 ff64 	bl	800492c <bgcolor>
	gotoxy(x+3,y+2);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1cda      	adds	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f001 ff90 	bl	8004994 <gotoxy>
	printf("%c",60);
 8002a74:	203c      	movs	r0, #60	; 0x3c
 8002a76:	f004 fb93 	bl	80071a0 <putchar>
	bgcolor(0);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f001 ff56 	bl	800492c <bgcolor>
	fgcolor(2);
 8002a80:	2002      	movs	r0, #2
 8002a82:	f001 ff37 	bl	80048f4 <fgcolor>
	fat(0);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f000 ffa0 	bl	80039cc <fat>
	}
	resetbgcolor();
 8002a8c:	f001 ff60 	bl	8004950 <resetbgcolor>
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <goDuckUP1>:

void goDuckUP1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->ud >-21){
 8002aa6:	4b7d      	ldr	r3, [pc, #500]	; (8002c9c <goDuckUP1+0x204>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b25b      	sxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d034      	beq.n	8002b1a <goDuckUP1+0x82>
 8002ab0:	4b7b      	ldr	r3, [pc, #492]	; (8002ca0 <goDuckUP1+0x208>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	b25b      	sxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d12f      	bne.n	8002b1a <goDuckUP1+0x82>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f993 3000 	ldrsb.w	r3, [r3]
 8002ac0:	f113 0f14 	cmn.w	r3, #20
 8002ac4:	db29      	blt.n	8002b1a <goDuckUP1+0x82>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	18d1      	adds	r1, r2, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff fd25 	bl	8002528 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	18d1      	adds	r1, r2, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	461a      	mov	r2, r3
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 ff85 	bl	8003a00 <playerDelete>
	(*ud)--;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	1e5a      	subs	r2, r3, #1
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	18d1      	adds	r1, r2, r3
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	461a      	mov	r2, r3
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fd07 	bl	8002528 <playerInSpaceR>
	}
	if (joy.left && !CJoy.left && D->rl >0){
 8002b1a:	4b60      	ldr	r3, [pc, #384]	; (8002c9c <goDuckUP1+0x204>)
 8002b1c:	789b      	ldrb	r3, [r3, #2]
 8002b1e:	b25b      	sxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d033      	beq.n	8002b8c <goDuckUP1+0xf4>
 8002b24:	4b5e      	ldr	r3, [pc, #376]	; (8002ca0 <goDuckUP1+0x208>)
 8002b26:	789b      	ldrb	r3, [r3, #2]
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d12e      	bne.n	8002b8c <goDuckUP1+0xf4>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	dd29      	ble.n	8002b8c <goDuckUP1+0xf4>
	playerInSpaceL(play,x+*rl,y+*ud);
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	18d1      	adds	r1, r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7ff fd98 	bl	8002680 <playerInSpaceL>
	playerDelete(play,x+*rl,y+*ud);
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	18d1      	adds	r1, r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4413      	add	r3, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 ff4c 	bl	8003a00 <playerDelete>
	(*rl)-=5;
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	1f5a      	subs	r2, r3, #5
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	601a      	str	r2, [r3, #0]
	playerInSpaceL(play,x+1+*rl,y+*ud);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	18d1      	adds	r1, r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff fd7a 	bl	8002680 <playerInSpaceL>
	}
	if (joy.right && !CJoy.right && D->rl <65){
 8002b8c:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <goDuckUP1+0x204>)
 8002b8e:	78db      	ldrb	r3, [r3, #3]
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d033      	beq.n	8002bfe <goDuckUP1+0x166>
 8002b96:	4b42      	ldr	r3, [pc, #264]	; (8002ca0 <goDuckUP1+0x208>)
 8002b98:	78db      	ldrb	r3, [r3, #3]
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d12e      	bne.n	8002bfe <goDuckUP1+0x166>
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002ba6:	2b40      	cmp	r3, #64	; 0x40
 8002ba8:	dc29      	bgt.n	8002bfe <goDuckUP1+0x166>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	18d1      	adds	r1, r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fcb3 	bl	8002528 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	18d1      	adds	r1, r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 ff13 	bl	8003a00 <playerDelete>
	(*rl)+=5;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	1d5a      	adds	r2, r3, #5
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	18d1      	adds	r1, r2, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff fc95 	bl	8002528 <playerInSpaceR>
	}
	if (joy.center && !CJoy.center && D->rl == 30){
 8002bfe:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <goDuckUP1+0x204>)
 8002c00:	791b      	ldrb	r3, [r3, #4]
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d033      	beq.n	8002c70 <goDuckUP1+0x1d8>
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <goDuckUP1+0x208>)
 8002c0a:	791b      	ldrb	r3, [r3, #4]
 8002c0c:	b25b      	sxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d12e      	bne.n	8002c70 <goDuckUP1+0x1d8>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002c18:	2b1e      	cmp	r3, #30
 8002c1a:	d129      	bne.n	8002c70 <goDuckUP1+0x1d8>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	18d1      	adds	r1, r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f7ff fc7a 	bl	8002528 <playerInSpaceR>
	playerDelete(1,x+*rl,y+*ud);
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	18d1      	adds	r1, r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4413      	add	r3, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	2001      	movs	r0, #1
 8002c48:	f000 feda 	bl	8003a00 <playerDelete>
	(*ud)+=4;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	1d1a      	adds	r2, r3, #4
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	18d1      	adds	r1, r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff fb34 	bl	80022d8 <playerInShipR>
	}
	D->ud = *ud;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	b25a      	sxtb	r2, r3
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	3b16      	subs	r3, #22
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	b25a      	sxtb	r2, r3
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	705a      	strb	r2, [r3, #1]
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000200 	.word	0x20000200
 8002ca0:	20000208 	.word	0x20000208

08002ca4 <goDuckUPMove1>:

void goDuckUPMove1(int play,int x, int y, int *ud, int *rl,duck_t * D) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
	if (joy.up){
 8002cb2:	4b33      	ldr	r3, [pc, #204]	; (8002d80 <goDuckUPMove1+0xdc>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b25b      	sxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d029      	beq.n	8002d10 <goDuckUPMove1+0x6c>
		playerInSpaceR(play,x+*rl,y+*ud);
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	18d1      	adds	r1, r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff fc2a 	bl	8002528 <playerInSpaceR>
		playerDelete(play,x+*rl,y+*ud);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	18d1      	adds	r1, r2, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fe8a 	bl	8003a00 <playerDelete>
		(*ud)--;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1e5a      	subs	r2, r3, #1
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	601a      	str	r2, [r3, #0]
		playerInSpaceR(play,x+1+*rl,y+*ud);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	18d1      	adds	r1, r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f7ff fc0c 	bl	8002528 <playerInSpaceR>
		}
	if (joy.down){
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <goDuckUPMove1+0xdc>)
 8002d12:	785b      	ldrb	r3, [r3, #1]
 8002d14:	b25b      	sxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d029      	beq.n	8002d6e <goDuckUPMove1+0xca>
		playerInSpaceR(play,x+*rl,y+*ud);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	18d1      	adds	r1, r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff fbfb 	bl	8002528 <playerInSpaceR>
		playerDelete(play,x+*rl,y+*ud);
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	18d1      	adds	r1, r2, r3
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	461a      	mov	r2, r3
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fe5b 	bl	8003a00 <playerDelete>
		(*ud)++;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	601a      	str	r2, [r3, #0]
		playerInSpaceR(play,x+1+*rl,y+*ud);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	18d1      	adds	r1, r2, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	461a      	mov	r2, r3
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff fbdd 	bl	8002528 <playerInSpaceR>
		}
	D->ud = *ud;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b25a      	sxtb	r2, r3
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	701a      	strb	r2, [r3, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000200 	.word	0x20000200

08002d84 <goDuckUP2>:


void goDuckUP2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]

	if (key.up && D->ud >-21){
 8002d92:	4b73      	ldr	r3, [pc, #460]	; (8002f60 <goDuckUP2+0x1dc>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d02f      	beq.n	8002dfc <goDuckUP2+0x78>
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8002da2:	f113 0f14 	cmn.w	r3, #20
 8002da6:	db29      	blt.n	8002dfc <goDuckUP2+0x78>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	18d1      	adds	r1, r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7ff fbb4 	bl	8002528 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	18d1      	adds	r1, r2, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fe14 	bl	8003a00 <playerDelete>
	(*ud)--;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	1e5a      	subs	r2, r3, #1
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	18d1      	adds	r1, r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff fb96 	bl	8002528 <playerInSpaceR>
	}
	if (key.left && D->rl >0){
 8002dfc:	4b58      	ldr	r3, [pc, #352]	; (8002f60 <goDuckUP2+0x1dc>)
 8002dfe:	789b      	ldrb	r3, [r3, #2]
 8002e00:	b25b      	sxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02e      	beq.n	8002e64 <goDuckUP2+0xe0>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	dd29      	ble.n	8002e64 <goDuckUP2+0xe0>
	playerInSpaceL(play,x+*rl,y+*ud);
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	18d1      	adds	r1, r2, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff fc2c 	bl	8002680 <playerInSpaceL>
	playerDelete(play,x+*rl,y+*ud);
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	18d1      	adds	r1, r2, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fde0 	bl	8003a00 <playerDelete>
	(*rl)-=5;
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1f5a      	subs	r2, r3, #5
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	601a      	str	r2, [r3, #0]
	playerInSpaceL(play,x+1+*rl,y+*ud);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	18d1      	adds	r1, r2, r3
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff fc0e 	bl	8002680 <playerInSpaceL>
	}
	if (key.right && D->rl <65){
 8002e64:	4b3e      	ldr	r3, [pc, #248]	; (8002f60 <goDuckUP2+0x1dc>)
 8002e66:	78db      	ldrb	r3, [r3, #3]
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d02e      	beq.n	8002ecc <goDuckUP2+0x148>
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	dc29      	bgt.n	8002ecc <goDuckUP2+0x148>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	18d1      	adds	r1, r2, r3
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff fb4c 	bl	8002528 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	18d1      	adds	r1, r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fdac 	bl	8003a00 <playerDelete>
	(*rl)+=5;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	1d5a      	adds	r2, r3, #5
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	18d1      	adds	r1, r2, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7ff fb2e 	bl	8002528 <playerInSpaceR>
	}
	if (key.center && D->rl == 30){
 8002ecc:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <goDuckUP2+0x1dc>)
 8002ece:	791b      	ldrb	r3, [r3, #4]
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02e      	beq.n	8002f34 <goDuckUP2+0x1b0>
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002edc:	2b1e      	cmp	r3, #30
 8002ede:	d129      	bne.n	8002f34 <goDuckUP2+0x1b0>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	18d1      	adds	r1, r2, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff fb18 	bl	8002528 <playerInSpaceR>
	playerDelete(1,x+*rl,y+*ud);
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	18d1      	adds	r1, r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f000 fd78 	bl	8003a00 <playerDelete>
	(*ud)+=4;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1d1a      	adds	r2, r3, #4
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	18d1      	adds	r1, r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7ff f9d2 	bl	80022d8 <playerInShipR>
	}
	D->ud = *ud;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	b25a      	sxtb	r2, r3
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	3b16      	subs	r3, #22
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	b25a      	sxtb	r2, r3
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	705a      	strb	r2, [r3, #1]
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200001f4 	.word	0x200001f4

08002f64 <goDuckUPMove2>:
void goDuckUPMove2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
	if (key.down || joy.down){
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <goDuckUPMove2+0x88>)
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <goDuckUPMove2+0x22>
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <goDuckUPMove2+0x8c>)
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	b25b      	sxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d029      	beq.n	8002fda <goDuckUPMove2+0x76>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	18d1      	adds	r1, r2, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	461a      	mov	r2, r3
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7ff fac5 	bl	8002528 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	18d1      	adds	r1, r2, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fd25 	bl	8003a00 <playerDelete>
	(*ud)++;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	18d1      	adds	r1, r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff faa7 	bl	8002528 <playerInSpaceR>
	}
	D->ud = *ud;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	b25a      	sxtb	r2, r3
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	701a      	strb	r2, [r3, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200001f4 	.word	0x200001f4
 8002ff0:	20000200 	.word	0x20000200

08002ff4 <goDuckMID1>:

void goDuckMID1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->rl == 30){
 8003002:	4b7c      	ldr	r3, [pc, #496]	; (80031f4 <goDuckMID1+0x200>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	b25b      	sxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d033      	beq.n	8003074 <goDuckMID1+0x80>
 800300c:	4b7a      	ldr	r3, [pc, #488]	; (80031f8 <goDuckMID1+0x204>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b25b      	sxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d12e      	bne.n	8003074 <goDuckMID1+0x80>
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800301c:	2b1e      	cmp	r3, #30
 800301e:	d129      	bne.n	8003074 <goDuckMID1+0x80>
	playerInShipR(play,x+*rl,y+*ud);
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	18d1      	adds	r1, r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	461a      	mov	r2, r3
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7ff f950 	bl	80022d8 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	18d1      	adds	r1, r2, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	461a      	mov	r2, r3
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fcd8 	bl	8003a00 <playerDelete>
	(*ud)-= 4;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	1f1a      	subs	r2, r3, #4
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	18d1      	adds	r1, r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	461a      	mov	r2, r3
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff fa5a 	bl	8002528 <playerInSpaceR>
	}
	if (joy.down && !CJoy.down  && D->rl == 30){
 8003074:	4b5f      	ldr	r3, [pc, #380]	; (80031f4 <goDuckMID1+0x200>)
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	b25b      	sxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d033      	beq.n	80030e6 <goDuckMID1+0xf2>
 800307e:	4b5e      	ldr	r3, [pc, #376]	; (80031f8 <goDuckMID1+0x204>)
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	b25b      	sxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d12e      	bne.n	80030e6 <goDuckMID1+0xf2>
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800308e:	2b1e      	cmp	r3, #30
 8003090:	d129      	bne.n	80030e6 <goDuckMID1+0xf2>
	playerInShipR(play,x+*rl,y+*ud);
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	18d1      	adds	r1, r2, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	461a      	mov	r2, r3
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff f917 	bl	80022d8 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	18d1      	adds	r1, r2, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	461a      	mov	r2, r3
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fc9f 	bl	8003a00 <playerDelete>
	(*ud)+= 4;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	1d1a      	adds	r2, r3, #4
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	18d1      	adds	r1, r2, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	461a      	mov	r2, r3
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fc29 	bl	8002938 <playerInSpaceUSDR>
	}
	if (joy.left && !CJoy.left && D->rl >0){
 80030e6:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <goDuckMID1+0x200>)
 80030e8:	789b      	ldrb	r3, [r3, #2]
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d033      	beq.n	8003158 <goDuckMID1+0x164>
 80030f0:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <goDuckMID1+0x204>)
 80030f2:	789b      	ldrb	r3, [r3, #2]
 80030f4:	b25b      	sxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d12e      	bne.n	8003158 <goDuckMID1+0x164>
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003100:	2b00      	cmp	r3, #0
 8003102:	dd29      	ble.n	8003158 <goDuckMID1+0x164>
	playerInShipL(play,x+*rl,y+*ud);
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	18d1      	adds	r1, r2, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4413      	add	r3, r2
 8003114:	461a      	mov	r2, r3
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff f972 	bl	8002400 <playerInShipL>
	playerDelete(play,x+*rl,y+*ud);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	18d1      	adds	r1, r2, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	461a      	mov	r2, r3
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fc66 	bl	8003a00 <playerDelete>
	(*rl)-=5;
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	1f5a      	subs	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	601a      	str	r2, [r3, #0]
	playerInShipL(play,x+1+*rl,y+*ud);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	18d1      	adds	r1, r2, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	461a      	mov	r2, r3
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff f954 	bl	8002400 <playerInShipL>
	}
	if (joy.right && !CJoy.right && D->rl <55){
 8003158:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <goDuckMID1+0x200>)
 800315a:	78db      	ldrb	r3, [r3, #3]
 800315c:	b25b      	sxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d033      	beq.n	80031ca <goDuckMID1+0x1d6>
 8003162:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <goDuckMID1+0x204>)
 8003164:	78db      	ldrb	r3, [r3, #3]
 8003166:	b25b      	sxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d12e      	bne.n	80031ca <goDuckMID1+0x1d6>
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003172:	2b36      	cmp	r3, #54	; 0x36
 8003174:	dc29      	bgt.n	80031ca <goDuckMID1+0x1d6>
	playerInShipR(play,x+*rl,y+*ud);
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	18d1      	adds	r1, r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	461a      	mov	r2, r3
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff f8a5 	bl	80022d8 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	18d1      	adds	r1, r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	461a      	mov	r2, r3
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fc2d 	bl	8003a00 <playerDelete>
	(*rl)+=5;
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	1d5a      	adds	r2, r3, #5
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	18d1      	adds	r1, r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	461a      	mov	r2, r3
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff f887 	bl	80022d8 <playerInShipR>
	}
	D->ud = *ud;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	b25a      	sxtb	r2, r3
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	4413      	add	r3, r2
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	3b16      	subs	r3, #22
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	b25a      	sxtb	r2, r3
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	705a      	strb	r2, [r3, #1]
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000200 	.word	0x20000200
 80031f8:	20000208 	.word	0x20000208

080031fc <goDuckMID2>:

void goDuckMID2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]

	if (key.up && D->rl == 30){
 800320a:	4b72      	ldr	r3, [pc, #456]	; (80033d4 <goDuckMID2+0x1d8>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	b25b      	sxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d02e      	beq.n	8003272 <goDuckMID2+0x76>
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800321a:	2b1e      	cmp	r3, #30
 800321c:	d129      	bne.n	8003272 <goDuckMID2+0x76>
	playerInShipR(play,x+*rl,y+*ud);
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	18d1      	adds	r1, r2, r3
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	461a      	mov	r2, r3
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7ff f851 	bl	80022d8 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	18d1      	adds	r1, r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	461a      	mov	r2, r3
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fbd9 	bl	8003a00 <playerDelete>
	(*ud)-= 4;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	1f1a      	subs	r2, r3, #4
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	18d1      	adds	r1, r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	461a      	mov	r2, r3
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff f95b 	bl	8002528 <playerInSpaceR>
	}
	if (key.down && D->rl == 30){
 8003272:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <goDuckMID2+0x1d8>)
 8003274:	785b      	ldrb	r3, [r3, #1]
 8003276:	b25b      	sxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d02e      	beq.n	80032da <goDuckMID2+0xde>
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003282:	2b1e      	cmp	r3, #30
 8003284:	d129      	bne.n	80032da <goDuckMID2+0xde>
	playerInShipR(play,x+*rl,y+*ud);
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	18d1      	adds	r1, r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	461a      	mov	r2, r3
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff f81d 	bl	80022d8 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	18d1      	adds	r1, r2, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	461a      	mov	r2, r3
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fba5 	bl	8003a00 <playerDelete>
	(*ud)+= 4;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	1d1a      	adds	r2, r3, #4
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	18d1      	adds	r1, r2, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	461a      	mov	r2, r3
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff fb2f 	bl	8002938 <playerInSpaceUSDR>
	}
	if (key.left && D->rl >0){
 80032da:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <goDuckMID2+0x1d8>)
 80032dc:	789b      	ldrb	r3, [r3, #2]
 80032de:	b25b      	sxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d02e      	beq.n	8003342 <goDuckMID2+0x146>
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	dd29      	ble.n	8003342 <goDuckMID2+0x146>
	playerInShipL(play,x+*rl,y+*ud);
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	18d1      	adds	r1, r2, r3
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	461a      	mov	r2, r3
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7ff f87d 	bl	8002400 <playerInShipL>
	playerDelete(play,x+*rl,y+*ud);
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	18d1      	adds	r1, r2, r3
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	461a      	mov	r2, r3
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fb71 	bl	8003a00 <playerDelete>
	(*rl)-=5;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1f5a      	subs	r2, r3, #5
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	601a      	str	r2, [r3, #0]
	playerInShipL(play,x+1+*rl,y+*ud);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	18d1      	adds	r1, r2, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	461a      	mov	r2, r3
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff f85f 	bl	8002400 <playerInShipL>
	}
	if (key.right && D->rl <55){
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <goDuckMID2+0x1d8>)
 8003344:	78db      	ldrb	r3, [r3, #3]
 8003346:	b25b      	sxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02e      	beq.n	80033aa <goDuckMID2+0x1ae>
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003352:	2b36      	cmp	r3, #54	; 0x36
 8003354:	dc29      	bgt.n	80033aa <goDuckMID2+0x1ae>
	playerInShipR(play,x+*rl,y+*ud);
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	18d1      	adds	r1, r2, r3
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	461a      	mov	r2, r3
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7fe ffb5 	bl	80022d8 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	18d1      	adds	r1, r2, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	461a      	mov	r2, r3
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fb3d 	bl	8003a00 <playerDelete>
	(*rl)+=5;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	1d5a      	adds	r2, r3, #5
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	18d1      	adds	r1, r2, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	461a      	mov	r2, r3
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7fe ff97 	bl	80022d8 <playerInShipR>
	}
	D->ud = *ud;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	b25a      	sxtb	r2, r3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	4413      	add	r3, r2
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	3b16      	subs	r3, #22
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	b25a      	sxtb	r2, r3
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	705a      	strb	r2, [r3, #1]
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	200001f4 	.word	0x200001f4

080033d8 <goDuckMIDMove2>:
void goDuckMIDMove2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
	if (key.up && !(key.down || joy.down)){
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <goDuckMIDMove2+0xfc>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d033      	beq.n	8003458 <goDuckMIDMove2+0x80>
 80033f0:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <goDuckMIDMove2+0xfc>)
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	b25b      	sxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d12e      	bne.n	8003458 <goDuckMIDMove2+0x80>
 80033fa:	4b37      	ldr	r3, [pc, #220]	; (80034d8 <goDuckMIDMove2+0x100>)
 80033fc:	785b      	ldrb	r3, [r3, #1]
 80033fe:	b25b      	sxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d129      	bne.n	8003458 <goDuckMIDMove2+0x80>
	playerInShipR(play,x+*rl,y+*ud);
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	18d1      	adds	r1, r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	461a      	mov	r2, r3
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7fe ff5e 	bl	80022d8 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	18d1      	adds	r1, r2, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	461a      	mov	r2, r3
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fae6 	bl	8003a00 <playerDelete>
	(*ud)--;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	1e5a      	subs	r2, r3, #1
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	18d1      	adds	r1, r2, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	461a      	mov	r2, r3
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7fe ff40 	bl	80022d8 <playerInShipR>
	}
	if (key.down || joy.down){
 8003458:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <goDuckMIDMove2+0xfc>)
 800345a:	785b      	ldrb	r3, [r3, #1]
 800345c:	b25b      	sxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d104      	bne.n	800346c <goDuckMIDMove2+0x94>
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <goDuckMIDMove2+0x100>)
 8003464:	785b      	ldrb	r3, [r3, #1]
 8003466:	b25b      	sxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d029      	beq.n	80034c0 <goDuckMIDMove2+0xe8>
	playerInShipR(play,x+*rl,y+*ud);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	18d1      	adds	r1, r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	461a      	mov	r2, r3
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f7fe ff2a 	bl	80022d8 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	18d1      	adds	r1, r2, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4413      	add	r3, r2
 8003494:	461a      	mov	r2, r3
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fab2 	bl	8003a00 <playerDelete>
	(*ud)++;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	18d1      	adds	r1, r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	461a      	mov	r2, r3
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7fe ff0c 	bl	80022d8 <playerInShipR>
	}
	D->ud = *ud;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	b25a      	sxtb	r2, r3
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	701a      	strb	r2, [r3, #0]
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200001f4 	.word	0x200001f4
 80034d8:	20000200 	.word	0x20000200

080034dc <goDuckUSD1>:

void goDuckUSD1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->ud <30){
 80034ea:	4b7c      	ldr	r3, [pc, #496]	; (80036dc <goDuckUSD1+0x200>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b25b      	sxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d033      	beq.n	800355c <goDuckUSD1+0x80>
 80034f4:	4b7a      	ldr	r3, [pc, #488]	; (80036e0 <goDuckUSD1+0x204>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b25b      	sxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d12e      	bne.n	800355c <goDuckUSD1+0x80>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f993 3000 	ldrsb.w	r3, [r3]
 8003504:	2b1d      	cmp	r3, #29
 8003506:	dc29      	bgt.n	800355c <goDuckUSD1+0x80>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	18d1      	adds	r1, r2, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	461a      	mov	r2, r3
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7ff fa0c 	bl	8002938 <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	18d1      	adds	r1, r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	461a      	mov	r2, r3
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fa64 	bl	8003a00 <playerDelete>
	(*ud)++;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	18d1      	adds	r1, r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	461a      	mov	r2, r3
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff f9ee 	bl	8002938 <playerInSpaceUSDR>
	}
	if (joy.right && !CJoy.right && D->rl >0){
 800355c:	4b5f      	ldr	r3, [pc, #380]	; (80036dc <goDuckUSD1+0x200>)
 800355e:	78db      	ldrb	r3, [r3, #3]
 8003560:	b25b      	sxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d033      	beq.n	80035ce <goDuckUSD1+0xf2>
 8003566:	4b5e      	ldr	r3, [pc, #376]	; (80036e0 <goDuckUSD1+0x204>)
 8003568:	78db      	ldrb	r3, [r3, #3]
 800356a:	b25b      	sxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d12e      	bne.n	80035ce <goDuckUSD1+0xf2>
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003576:	2b00      	cmp	r3, #0
 8003578:	dd29      	ble.n	80035ce <goDuckUSD1+0xf2>
	playerInSpaceUSDL(play,x+*rl,y+*ud);
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	18d1      	adds	r1, r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	461a      	mov	r2, r3
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7ff f923 	bl	80027d8 <playerInSpaceUSDL>
	playerDelete(play,x+*rl,y+*ud);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	18d1      	adds	r1, r2, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	461a      	mov	r2, r3
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fa2b 	bl	8003a00 <playerDelete>
	(*rl)-=5;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	1f5a      	subs	r2, r3, #5
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDL(play,x+1+*rl,y+*ud);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	18d1      	adds	r1, r2, r3
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	461a      	mov	r2, r3
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7ff f905 	bl	80027d8 <playerInSpaceUSDL>
	}
	if (joy.left && !CJoy.left && D->rl <65){
 80035ce:	4b43      	ldr	r3, [pc, #268]	; (80036dc <goDuckUSD1+0x200>)
 80035d0:	789b      	ldrb	r3, [r3, #2]
 80035d2:	b25b      	sxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d033      	beq.n	8003640 <goDuckUSD1+0x164>
 80035d8:	4b41      	ldr	r3, [pc, #260]	; (80036e0 <goDuckUSD1+0x204>)
 80035da:	789b      	ldrb	r3, [r3, #2]
 80035dc:	b25b      	sxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d12e      	bne.n	8003640 <goDuckUSD1+0x164>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	dc29      	bgt.n	8003640 <goDuckUSD1+0x164>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	18d1      	adds	r1, r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	461a      	mov	r2, r3
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f7ff f99a 	bl	8002938 <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	18d1      	adds	r1, r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	461a      	mov	r2, r3
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f9f2 	bl	8003a00 <playerDelete>
	(*rl)+=5;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1d5a      	adds	r2, r3, #5
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	18d1      	adds	r1, r2, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4413      	add	r3, r2
 8003638:	461a      	mov	r2, r3
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff f97c 	bl	8002938 <playerInSpaceUSDR>
	}
	if (joy.center && !CJoy.center && D->rl == 30){
 8003640:	4b26      	ldr	r3, [pc, #152]	; (80036dc <goDuckUSD1+0x200>)
 8003642:	791b      	ldrb	r3, [r3, #4]
 8003644:	b25b      	sxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d033      	beq.n	80036b2 <goDuckUSD1+0x1d6>
 800364a:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <goDuckUSD1+0x204>)
 800364c:	791b      	ldrb	r3, [r3, #4]
 800364e:	b25b      	sxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d12e      	bne.n	80036b2 <goDuckUSD1+0x1d6>
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800365a:	2b1e      	cmp	r3, #30
 800365c:	d129      	bne.n	80036b2 <goDuckUSD1+0x1d6>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	18d1      	adds	r1, r2, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	461a      	mov	r2, r3
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff f961 	bl	8002938 <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	18d1      	adds	r1, r2, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	461a      	mov	r2, r3
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f9b9 	bl	8003a00 <playerDelete>
	(*ud)-=4;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	1f1a      	subs	r2, r3, #4
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	18d1      	adds	r1, r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	461a      	mov	r2, r3
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7fe fe13 	bl	80022d8 <playerInShipR>
	}
	D->ud = *ud;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	b25a      	sxtb	r2, r3
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	3b16      	subs	r3, #22
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	b25a      	sxtb	r2, r3
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	705a      	strb	r2, [r3, #1]
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20000200 	.word	0x20000200
 80036e0:	20000208 	.word	0x20000208

080036e4 <goDuckUSD2>:

void goDuckUSD2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]

	if (key.up && D->ud <30){
 80036f2:	4b72      	ldr	r3, [pc, #456]	; (80038bc <goDuckUSD2+0x1d8>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b25b      	sxtb	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02e      	beq.n	800375a <goDuckUSD2+0x76>
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f993 3000 	ldrsb.w	r3, [r3]
 8003702:	2b1d      	cmp	r3, #29
 8003704:	dc29      	bgt.n	800375a <goDuckUSD2+0x76>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	18d1      	adds	r1, r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	461a      	mov	r2, r3
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7ff f90d 	bl	8002938 <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	18d1      	adds	r1, r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	461a      	mov	r2, r3
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f965 	bl	8003a00 <playerDelete>
	(*ud)++;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	18d1      	adds	r1, r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4413      	add	r3, r2
 8003752:	461a      	mov	r2, r3
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff f8ef 	bl	8002938 <playerInSpaceUSDR>
	}
	if (key.right && D->rl >0){
 800375a:	4b58      	ldr	r3, [pc, #352]	; (80038bc <goDuckUSD2+0x1d8>)
 800375c:	78db      	ldrb	r3, [r3, #3]
 800375e:	b25b      	sxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d02e      	beq.n	80037c2 <goDuckUSD2+0xde>
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800376a:	2b00      	cmp	r3, #0
 800376c:	dd29      	ble.n	80037c2 <goDuckUSD2+0xde>
	playerInSpaceUSDL(play,x+*rl,y+*ud);
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	18d1      	adds	r1, r2, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	461a      	mov	r2, r3
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff f829 	bl	80027d8 <playerInSpaceUSDL>
	playerDelete(play,x+*rl,y+*ud);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	18d1      	adds	r1, r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	461a      	mov	r2, r3
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f931 	bl	8003a00 <playerDelete>
	(*rl)-=5;
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	1f5a      	subs	r2, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDL(play,x+1+*rl,y+*ud);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	18d1      	adds	r1, r2, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	461a      	mov	r2, r3
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff f80b 	bl	80027d8 <playerInSpaceUSDL>
	}
	if (key.left && D->rl <65){
 80037c2:	4b3e      	ldr	r3, [pc, #248]	; (80038bc <goDuckUSD2+0x1d8>)
 80037c4:	789b      	ldrb	r3, [r3, #2]
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d02e      	beq.n	800382a <goDuckUSD2+0x146>
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	dc29      	bgt.n	800382a <goDuckUSD2+0x146>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	18d1      	adds	r1, r2, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	461a      	mov	r2, r3
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f7ff f8a5 	bl	8002938 <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	18d1      	adds	r1, r2, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	461a      	mov	r2, r3
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f8fd 	bl	8003a00 <playerDelete>
	(*rl)+=5;
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	1d5a      	adds	r2, r3, #5
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	18d1      	adds	r1, r2, r3
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	461a      	mov	r2, r3
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff f887 	bl	8002938 <playerInSpaceUSDR>
	}
	if (key.center && D->rl == 30){
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <goDuckUSD2+0x1d8>)
 800382c:	791b      	ldrb	r3, [r3, #4]
 800382e:	b25b      	sxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02e      	beq.n	8003892 <goDuckUSD2+0x1ae>
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800383a:	2b1e      	cmp	r3, #30
 800383c:	d129      	bne.n	8003892 <goDuckUSD2+0x1ae>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	18d1      	adds	r1, r2, r3
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	461a      	mov	r2, r3
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff f871 	bl	8002938 <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	18d1      	adds	r1, r2, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	461a      	mov	r2, r3
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f8c9 	bl	8003a00 <playerDelete>
	(*ud)-=4;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	1f1a      	subs	r2, r3, #4
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	18d1      	adds	r1, r2, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	461a      	mov	r2, r3
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7fe fd23 	bl	80022d8 <playerInShipR>
	}
	D->ud = *ud;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	b25a      	sxtb	r2, r3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	3b16      	subs	r3, #22
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	b25a      	sxtb	r2, r3
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	705a      	strb	r2, [r3, #1]
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	200001f4 	.word	0x200001f4

080038c0 <goDuckUSDMove2>:
void goDuckUSDMove2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
	if ((key.up || joy.up) && !(key.down || joy.down)){
 80038ce:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <goDuckUSDMove2+0x104>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <goDuckUSDMove2+0x22>
 80038d8:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <goDuckUSDMove2+0x108>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b25b      	sxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d033      	beq.n	800394a <goDuckUSDMove2+0x8a>
 80038e2:	4b38      	ldr	r3, [pc, #224]	; (80039c4 <goDuckUSDMove2+0x104>)
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d12e      	bne.n	800394a <goDuckUSDMove2+0x8a>
 80038ec:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <goDuckUSDMove2+0x108>)
 80038ee:	785b      	ldrb	r3, [r3, #1]
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d129      	bne.n	800394a <goDuckUSDMove2+0x8a>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	18d1      	adds	r1, r2, r3
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	461a      	mov	r2, r3
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff f815 	bl	8002938 <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	18d1      	adds	r1, r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	461a      	mov	r2, r3
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f86d 	bl	8003a00 <playerDelete>
	(*ud)--;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	1e5a      	subs	r2, r3, #1
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	18d1      	adds	r1, r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	461a      	mov	r2, r3
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7fe fff7 	bl	8002938 <playerInSpaceUSDR>
	}
	if (key.down || joy.down){
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <goDuckUSDMove2+0x104>)
 800394c:	785b      	ldrb	r3, [r3, #1]
 800394e:	b25b      	sxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d104      	bne.n	800395e <goDuckUSDMove2+0x9e>
 8003954:	4b1c      	ldr	r3, [pc, #112]	; (80039c8 <goDuckUSDMove2+0x108>)
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	b25b      	sxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d029      	beq.n	80039b2 <goDuckUSDMove2+0xf2>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	18d1      	adds	r1, r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	461a      	mov	r2, r3
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7fe ffe1 	bl	8002938 <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	18d1      	adds	r1, r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	461a      	mov	r2, r3
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f839 	bl	8003a00 <playerDelete>
	(*ud)++;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	18d1      	adds	r1, r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	461a      	mov	r2, r3
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7fe ffc3 	bl	8002938 <playerInSpaceUSDR>
	}
	D->ud = *ud;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	b25a      	sxtb	r2, r3
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	701a      	strb	r2, [r3, #0]
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	200001f4 	.word	0x200001f4
 80039c8:	20000200 	.word	0x20000200

080039cc <fat>:

void fat(int state) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	if (state) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d006      	beq.n	80039e8 <fat+0x1c>
		printf("%c[%d%c", ESC, 01, 'm');
 80039da:	236d      	movs	r3, #109	; 0x6d
 80039dc:	2201      	movs	r2, #1
 80039de:	211b      	movs	r1, #27
 80039e0:	4806      	ldr	r0, [pc, #24]	; (80039fc <fat+0x30>)
 80039e2:	f003 fbc5 	bl	8007170 <iprintf>
	} else {
		printf("%c[%d%c", ESC, 22, 'm');
	}
}
 80039e6:	e005      	b.n	80039f4 <fat+0x28>
		printf("%c[%d%c", ESC, 22, 'm');
 80039e8:	236d      	movs	r3, #109	; 0x6d
 80039ea:	2216      	movs	r2, #22
 80039ec:	211b      	movs	r1, #27
 80039ee:	4803      	ldr	r0, [pc, #12]	; (80039fc <fat+0x30>)
 80039f0:	f003 fbbe 	bl	8007170 <iprintf>
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	08008624 	.word	0x08008624

08003a00 <playerDelete>:


void playerDelete(int p,int x, int y){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]

	gotoxy(x,y);
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	68b8      	ldr	r0, [r7, #8]
 8003a10:	f000 ffc0 	bl	8004994 <gotoxy>
	for (int i = 0; i < 5; i++){
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	e005      	b.n	8003a26 <playerDelete+0x26>
		printf("%c",32);
 8003a1a:	2020      	movs	r0, #32
 8003a1c:	f003 fbc0 	bl	80071a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	3301      	adds	r3, #1
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	ddf6      	ble.n	8003a1a <playerDelete+0x1a>
	}
	gotoxy(x,y+1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	4619      	mov	r1, r3
 8003a32:	68b8      	ldr	r0, [r7, #8]
 8003a34:	f000 ffae 	bl	8004994 <gotoxy>
	for (int i = 0; i < 5; i++){
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	e005      	b.n	8003a4a <playerDelete+0x4a>
		printf("%c",32);
 8003a3e:	2020      	movs	r0, #32
 8003a40:	f003 fbae 	bl	80071a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	3301      	adds	r3, #1
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	ddf6      	ble.n	8003a3e <playerDelete+0x3e>
	}
	gotoxy(x,y+2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3302      	adds	r3, #2
 8003a54:	4619      	mov	r1, r3
 8003a56:	68b8      	ldr	r0, [r7, #8]
 8003a58:	f000 ff9c 	bl	8004994 <gotoxy>
	for (int i = 0; i < 5; i++){
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e005      	b.n	8003a6e <playerDelete+0x6e>
		printf("%c",32);
 8003a62:	2020      	movs	r0, #32
 8003a64:	f003 fb9c 	bl	80071a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	ddf6      	ble.n	8003a62 <playerDelete+0x62>
	}
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <Broken>:
}
resetbgcolor();
}


void Broken(int rand_UP,int rand_OBJ, int x1, int y1){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
	fat(1);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f7ff ff9c 	bl	80039cc <fat>
	blink(1);
 8003a94:	2001      	movs	r0, #1
 8003a96:	f000 ff8f 	bl	80049b8 <blink>

	if (rand_OBJ == 1){
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d10b      	bne.n	8003ab8 <Broken+0x38>
	bgcolor(5);
 8003aa0:	2005      	movs	r0, #5
 8003aa2:	f000 ff43 	bl	800492c <bgcolor>
	gotoxy(x1+24,y1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3318      	adds	r3, #24
 8003aaa:	6839      	ldr	r1, [r7, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 ff71 	bl	8004994 <gotoxy>
	Bup = 1;
 8003ab2:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <Broken+0x14c>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
	}
	if (rand_OBJ == 2){
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d10e      	bne.n	8003adc <Broken+0x5c>
	bgcolor(5);
 8003abe:	2005      	movs	r0, #5
 8003ac0:	f000 ff34 	bl	800492c <bgcolor>
	gotoxy(x1+24,y1+4);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f103 0218 	add.w	r2, r3, #24
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	f000 ff5f 	bl	8004994 <gotoxy>
	Bdown= 1;
 8003ad6:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <Broken+0x150>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
	}
	if (rand_OBJ == 3) {
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d10e      	bne.n	8003b00 <Broken+0x80>
	bgcolor(7);
 8003ae2:	2007      	movs	r0, #7
 8003ae4:	f000 ff22 	bl	800492c <bgcolor>
	gotoxy(x1+81,y1+2);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f103 0251 	add.w	r2, r3, #81	; 0x51
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	3302      	adds	r3, #2
 8003af2:	4619      	mov	r1, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f000 ff4d 	bl	8004994 <gotoxy>
	Bcanon = 1;
 8003afa:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <Broken+0x154>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
	}
	if (rand_OBJ == 4) {
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d10b      	bne.n	8003b1e <Broken+0x9e>
	bgcolor(1);
 8003b06:	2001      	movs	r0, #1
 8003b08:	f000 ff10 	bl	800492c <bgcolor>
	gotoxy(x1+55,y1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3337      	adds	r3, #55	; 0x37
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 ff3e 	bl	8004994 <gotoxy>
	Bship1 = 1;
 8003b18:	4b2f      	ldr	r3, [pc, #188]	; (8003bd8 <Broken+0x158>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
	}
	if (rand_OBJ == 5) {
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b05      	cmp	r3, #5
 8003b22:	d10e      	bne.n	8003b42 <Broken+0xc2>
	bgcolor(1);
 8003b24:	2001      	movs	r0, #1
 8003b26:	f000 ff01 	bl	800492c <bgcolor>
	gotoxy(x1+44,y1+4);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f000 ff2c 	bl	8004994 <gotoxy>
	Bship2 = 1;
 8003b3c:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <Broken+0x15c>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
	}
	if (rand_OBJ == 6) {
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b06      	cmp	r3, #6
 8003b46:	d10e      	bne.n	8003b66 <Broken+0xe6>
	bgcolor(1);
 8003b48:	2001      	movs	r0, #1
 8003b4a:	f000 feef 	bl	800492c <bgcolor>
	gotoxy(x1+74,y1+4);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f000 ff1a 	bl	8004994 <gotoxy>
	Bship3 = 1;
 8003b60:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <Broken+0x160>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
	}


	if (rand_UP == 1) {
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d10f      	bne.n	8003b8c <Broken+0x10c>
	fgcolor(0);
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f000 fec1 	bl	80048f4 <fgcolor>
	for(int i = 0; i<3; i++) {
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	e006      	b.n	8003b86 <Broken+0x106>
	printf("%c ",33);
 8003b78:	2121      	movs	r1, #33	; 0x21
 8003b7a:	481a      	ldr	r0, [pc, #104]	; (8003be4 <Broken+0x164>)
 8003b7c:	f003 faf8 	bl	8007170 <iprintf>
	for(int i = 0; i<3; i++) {
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3301      	adds	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	ddf5      	ble.n	8003b78 <Broken+0xf8>
	}
	}
	if (rand_UP == 2) {
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d10f      	bne.n	8003bb2 <Broken+0x132>
	fgcolor(11);
 8003b92:	200b      	movs	r0, #11
 8003b94:	f000 feae 	bl	80048f4 <fgcolor>
	for(int i = 0; i<3; i++) {
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	e006      	b.n	8003bac <Broken+0x12c>
	printf("%c ",33);
 8003b9e:	2121      	movs	r1, #33	; 0x21
 8003ba0:	4810      	ldr	r0, [pc, #64]	; (8003be4 <Broken+0x164>)
 8003ba2:	f003 fae5 	bl	8007170 <iprintf>
	for(int i = 0; i<3; i++) {
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	ddf5      	ble.n	8003b9e <Broken+0x11e>





	fat(0);
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	f7ff ff0a 	bl	80039cc <fat>
	blink(0);
 8003bb8:	2000      	movs	r0, #0
 8003bba:	f000 fefd 	bl	80049b8 <blink>
	resetbgcolor();
 8003bbe:	f000 fec7 	bl	8004950 <resetbgcolor>
	}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200001d0 	.word	0x200001d0
 8003bd0:	200001f0 	.word	0x200001f0
 8003bd4:	200001d8 	.word	0x200001d8
 8003bd8:	200001cc 	.word	0x200001cc
 8003bdc:	200001e8 	.word	0x200001e8
 8003be0:	200001d4 	.word	0x200001d4
 8003be4:	0800862c 	.word	0x0800862c

08003be8 <duckExplotion>:

void duckExplotion(int x, int y, int *ud, int *rl){
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b096      	sub	sp, #88	; 0x58
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]

//1
	fgcolor(15);
 8003bf6:	200f      	movs	r0, #15
 8003bf8:	f000 fe7c 	bl	80048f4 <fgcolor>
	gotoxy(x+2+*rl,y+1+*ud);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1c9a      	adds	r2, r3, #2
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	18d0      	adds	r0, r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4413      	add	r3, r2
 8003c10:	4619      	mov	r1, r3
 8003c12:	f000 febf 	bl	8004994 <gotoxy>
		printf("%c",219);
 8003c16:	20db      	movs	r0, #219	; 0xdb
 8003c18:	f003 fac2 	bl	80071a0 <putchar>
//2

	fgcolor(11);
 8003c1c:	200b      	movs	r0, #11
 8003c1e:	f000 fe69 	bl	80048f4 <fgcolor>
	gotoxy(x+1+*rl,y+*ud);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	18d0      	adds	r0, r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4413      	add	r3, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f000 fead 	bl	8004994 <gotoxy>
	for (int i = 0; i < 3; i++){
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c3e:	e005      	b.n	8003c4c <duckExplotion+0x64>
		printf("%c",219);
 8003c40:	20db      	movs	r0, #219	; 0xdb
 8003c42:	f003 faad 	bl	80071a0 <putchar>
	for (int i = 0; i < 3; i++){
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	3301      	adds	r3, #1
 8003c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	ddf6      	ble.n	8003c40 <duckExplotion+0x58>
	}
	gotoxy(x+1+*rl,y+1+*ud);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	18d0      	adds	r0, r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	f000 fe94 	bl	8004994 <gotoxy>
	for (int i = 0; i < 3; i++){
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c70:	e005      	b.n	8003c7e <duckExplotion+0x96>
		printf("%c",219);
 8003c72:	20db      	movs	r0, #219	; 0xdb
 8003c74:	f003 fa94 	bl	80071a0 <putchar>
	for (int i = 0; i < 3; i++){
 8003c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	ddf6      	ble.n	8003c72 <duckExplotion+0x8a>
	}
	gotoxy(x+1+*rl,y+2+*ud);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	18d0      	adds	r0, r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	1c9a      	adds	r2, r3, #2
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4413      	add	r3, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f000 fe7b 	bl	8004994 <gotoxy>
	for (int i = 0; i < 3; i++){
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca2:	e005      	b.n	8003cb0 <duckExplotion+0xc8>
		printf("%c",219);
 8003ca4:	20db      	movs	r0, #219	; 0xdb
 8003ca6:	f003 fa7b 	bl	80071a0 <putchar>
	for (int i = 0; i < 3; i++){
 8003caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cac:	3301      	adds	r3, #1
 8003cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	ddf6      	ble.n	8003ca4 <duckExplotion+0xbc>
	}



//3
	fgcolor(9);
 8003cb6:	2009      	movs	r0, #9
 8003cb8:	f000 fe1c 	bl	80048f4 <fgcolor>
	gotoxy(x+1+*rl,y-1+*ud);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	18d0      	adds	r0, r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	1e5a      	subs	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4413      	add	r3, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f000 fe5f 	bl	8004994 <gotoxy>
	for (int i = 0; i < 3; i++){
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cda:	e005      	b.n	8003ce8 <duckExplotion+0x100>
	printf("%c",219);
 8003cdc:	20db      	movs	r0, #219	; 0xdb
 8003cde:	f003 fa5f 	bl	80071a0 <putchar>
	for (int i = 0; i < 3; i++){
 8003ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	ddf6      	ble.n	8003cdc <duckExplotion+0xf4>
	}
	gotoxy(x+*rl,y+*ud);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	18d0      	adds	r0, r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	f000 fe48 	bl	8004994 <gotoxy>
	for (int i = 0; i < 5; i++){
 8003d04:	2300      	movs	r3, #0
 8003d06:	647b      	str	r3, [r7, #68]	; 0x44
 8003d08:	e005      	b.n	8003d16 <duckExplotion+0x12e>
		printf("%c",219);
 8003d0a:	20db      	movs	r0, #219	; 0xdb
 8003d0c:	f003 fa48 	bl	80071a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d12:	3301      	adds	r3, #1
 8003d14:	647b      	str	r3, [r7, #68]	; 0x44
 8003d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	ddf6      	ble.n	8003d0a <duckExplotion+0x122>
	}
	gotoxy(x+*rl,y+1+*ud);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	18d0      	adds	r0, r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f000 fe30 	bl	8004994 <gotoxy>
	for (int i = 0; i < 5; i++){
 8003d34:	2300      	movs	r3, #0
 8003d36:	643b      	str	r3, [r7, #64]	; 0x40
 8003d38:	e005      	b.n	8003d46 <duckExplotion+0x15e>
		printf("%c",219);
 8003d3a:	20db      	movs	r0, #219	; 0xdb
 8003d3c:	f003 fa30 	bl	80071a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d42:	3301      	adds	r3, #1
 8003d44:	643b      	str	r3, [r7, #64]	; 0x40
 8003d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	ddf6      	ble.n	8003d3a <duckExplotion+0x152>
	}
	gotoxy(x+*rl,y+2+*ud);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	18d0      	adds	r0, r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	1c9a      	adds	r2, r3, #2
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f000 fe18 	bl	8004994 <gotoxy>
	for (int i = 0; i < 5; i++){
 8003d64:	2300      	movs	r3, #0
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d68:	e005      	b.n	8003d76 <duckExplotion+0x18e>
		printf("%c",219);
 8003d6a:	20db      	movs	r0, #219	; 0xdb
 8003d6c:	f003 fa18 	bl	80071a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d72:	3301      	adds	r3, #1
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	ddf6      	ble.n	8003d6a <duckExplotion+0x182>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	18d0      	adds	r0, r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	1cda      	adds	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	4619      	mov	r1, r3
 8003d92:	f000 fdff 	bl	8004994 <gotoxy>
	for (int i = 0; i < 3; i++){
 8003d96:	2300      	movs	r3, #0
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d9a:	e005      	b.n	8003da8 <duckExplotion+0x1c0>
	printf("%c",219);
 8003d9c:	20db      	movs	r0, #219	; 0xdb
 8003d9e:	f003 f9ff 	bl	80071a0 <putchar>
	for (int i = 0; i < 3; i++){
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	3301      	adds	r3, #1
 8003da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	ddf6      	ble.n	8003d9c <duckExplotion+0x1b4>
	}


//4
	fgcolor(1);
 8003dae:	2001      	movs	r0, #1
 8003db0:	f000 fda0 	bl	80048f4 <fgcolor>
	gotoxy(x+1+*rl,y-1+*ud);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	18d0      	adds	r0, r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	1e5a      	subs	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f000 fde3 	bl	8004994 <gotoxy>
	for (int i = 0; i < 3; i++){
 8003dce:	2300      	movs	r3, #0
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd2:	e005      	b.n	8003de0 <duckExplotion+0x1f8>
	printf("%c",219);
 8003dd4:	20db      	movs	r0, #219	; 0xdb
 8003dd6:	f003 f9e3 	bl	80071a0 <putchar>
	for (int i = 0; i < 3; i++){
 8003dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ddc:	3301      	adds	r3, #1
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	ddf6      	ble.n	8003dd4 <duckExplotion+0x1ec>
	}
	gotoxy(x+*rl,y+*ud);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	18d0      	adds	r0, r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4413      	add	r3, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	f000 fdcc 	bl	8004994 <gotoxy>
	for (int i = 0; i < 5; i++){
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8003e00:	e005      	b.n	8003e0e <duckExplotion+0x226>
	printf("%c",219);
 8003e02:	20db      	movs	r0, #219	; 0xdb
 8003e04:	f003 f9cc 	bl	80071a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	ddf6      	ble.n	8003e02 <duckExplotion+0x21a>
	}
	gotoxy(x-1+*rl,y+1+*ud);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1e5a      	subs	r2, r3, #1
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	18d0      	adds	r0, r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4413      	add	r3, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f000 fdb3 	bl	8004994 <gotoxy>
	for (int i = 0; i < 7; i++){
 8003e2e:	2300      	movs	r3, #0
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e32:	e005      	b.n	8003e40 <duckExplotion+0x258>
	printf("%c",219);
 8003e34:	20db      	movs	r0, #219	; 0xdb
 8003e36:	f003 f9b3 	bl	80071a0 <putchar>
	for (int i = 0; i < 7; i++){
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	2b06      	cmp	r3, #6
 8003e44:	ddf6      	ble.n	8003e34 <duckExplotion+0x24c>
	}
	gotoxy(x+*rl,y+2+*ud);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	18d0      	adds	r0, r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4413      	add	r3, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f000 fd9b 	bl	8004994 <gotoxy>
	for (int i = 0; i < 5; i++){
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e62:	e005      	b.n	8003e70 <duckExplotion+0x288>
	printf("%c",219);
 8003e64:	20db      	movs	r0, #219	; 0xdb
 8003e66:	f003 f99b 	bl	80071a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	ddf6      	ble.n	8003e64 <duckExplotion+0x27c>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	18d0      	adds	r0, r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	1cda      	adds	r2, r3, #3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4413      	add	r3, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	f000 fd82 	bl	8004994 <gotoxy>
	for (int i = 0; i < 3; i++){
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
 8003e94:	e005      	b.n	8003ea2 <duckExplotion+0x2ba>
	printf("%c",219);
 8003e96:	20db      	movs	r0, #219	; 0xdb
 8003e98:	f003 f982 	bl	80071a0 <putchar>
	for (int i = 0; i < 3; i++){
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	ddf6      	ble.n	8003e96 <duckExplotion+0x2ae>
	}



//DELETE
	gotoxy(x+1+*rl,y-1+*ud);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	18d0      	adds	r0, r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	1e5a      	subs	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4413      	add	r3, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f000 fd69 	bl	8004994 <gotoxy>
	for (int i = 0; i < 3; i++){
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	623b      	str	r3, [r7, #32]
 8003ec6:	e005      	b.n	8003ed4 <duckExplotion+0x2ec>
	printf("%c",32);
 8003ec8:	2020      	movs	r0, #32
 8003eca:	f003 f969 	bl	80071a0 <putchar>
	for (int i = 0; i < 3; i++){
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	623b      	str	r3, [r7, #32]
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	ddf6      	ble.n	8003ec8 <duckExplotion+0x2e0>
	}
	gotoxy(x+*rl,y+*ud);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	18d0      	adds	r0, r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4413      	add	r3, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	f000 fd52 	bl	8004994 <gotoxy>
	for (int i = 0; i < 5; i++){
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	e005      	b.n	8003f02 <duckExplotion+0x31a>
	printf("%c",32);
 8003ef6:	2020      	movs	r0, #32
 8003ef8:	f003 f952 	bl	80071a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3301      	adds	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	ddf6      	ble.n	8003ef6 <duckExplotion+0x30e>
	}
	gotoxy(x-1+*rl,y+1+*ud);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1e5a      	subs	r2, r3, #1
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	18d0      	adds	r0, r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f000 fd39 	bl	8004994 <gotoxy>
	for (int i = 0; i < 7; i++){
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	e005      	b.n	8003f34 <duckExplotion+0x34c>
	printf("%c",32);
 8003f28:	2020      	movs	r0, #32
 8003f2a:	f003 f939 	bl	80071a0 <putchar>
	for (int i = 0; i < 7; i++){
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	3301      	adds	r3, #1
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	ddf6      	ble.n	8003f28 <duckExplotion+0x340>
	}
	gotoxy(x+*rl,y+2+*ud);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	18d0      	adds	r0, r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	1c9a      	adds	r2, r3, #2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f000 fd21 	bl	8004994 <gotoxy>
	for (int i = 0; i < 5; i++){
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	e005      	b.n	8003f64 <duckExplotion+0x37c>
	printf("%c",32);
 8003f58:	2020      	movs	r0, #32
 8003f5a:	f003 f921 	bl	80071a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	3301      	adds	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	ddf6      	ble.n	8003f58 <duckExplotion+0x370>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	18d0      	adds	r0, r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	1cda      	adds	r2, r3, #3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f000 fd08 	bl	8004994 <gotoxy>
	for (int i = 0; i < 3; i++){
 8003f84:	2300      	movs	r3, #0
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	e005      	b.n	8003f96 <duckExplotion+0x3ae>
	printf("%c",32);
 8003f8a:	2020      	movs	r0, #32
 8003f8c:	f003 f908 	bl	80071a0 <putchar>
	for (int i = 0; i < 3; i++){
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	3301      	adds	r3, #1
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	ddf6      	ble.n	8003f8a <duckExplotion+0x3a2>
	}
	resetbgcolor();
 8003f9c:	f000 fcd8 	bl	8004950 <resetbgcolor>
	}
 8003fa0:	bf00      	nop
 8003fa2:	3758      	adds	r7, #88	; 0x58
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <intiJoystick>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi_S.h"
#include "joystick.h"

void intiJoystick(){
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8003fac:	4b46      	ldr	r3, [pc, #280]	; (80040c8 <intiJoystick+0x120>)
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	4a45      	ldr	r2, [pc, #276]	; (80040c8 <intiJoystick+0x120>)
 8003fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb6:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
 8003fb8:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <intiJoystick+0x120>)
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	4a42      	ldr	r2, [pc, #264]	; (80040c8 <intiJoystick+0x120>)
 8003fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc2:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 8003fc4:	4b40      	ldr	r3, [pc, #256]	; (80040c8 <intiJoystick+0x120>)
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	4a3f      	ldr	r2, [pc, #252]	; (80040c8 <intiJoystick+0x120>)
 8003fca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fce:	6153      	str	r3, [r2, #20]

	// Set pin PC0 to input
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8003fd0:	4b3e      	ldr	r3, [pc, #248]	; (80040cc <intiJoystick+0x124>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a3d      	ldr	r2, [pc, #244]	; (80040cc <intiJoystick+0x124>)
 8003fd6:	f023 0303 	bic.w	r3, r3, #3
 8003fda:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (0 * 2));	// Set mode register
 8003fdc:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <intiJoystick+0x124>)
 8003fde:	4a3b      	ldr	r2, [pc, #236]	; (80040cc <intiJoystick+0x124>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8003fe4:	4b39      	ldr	r3, [pc, #228]	; (80040cc <intiJoystick+0x124>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a38      	ldr	r2, [pc, #224]	; (80040cc <intiJoystick+0x124>)
 8003fea:	f023 0303 	bic.w	r3, r3, #3
 8003fee:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (0 * 2));// Set push/pull register
 8003ff0:	4b36      	ldr	r3, [pc, #216]	; (80040cc <intiJoystick+0x124>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a35      	ldr	r2, [pc, #212]	; (80040cc <intiJoystick+0x124>)
 8003ff6:	f043 0302 	orr.w	r3, r3, #2
 8003ffa:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PA4 to input
	GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8003ffc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x00000000 << (4 * 2)); // Set mode register
 800400c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004010:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOA->PUPDR &= ~(0x00000003 << (4 * 2)); // Clear push/pull register
 8004018:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004026:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x00000002 << (4 * 2)); // Set push/pull register
 8004028:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004036:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB5 to input
	GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <intiJoystick+0x128>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a24      	ldr	r2, [pc, #144]	; (80040d0 <intiJoystick+0x128>)
 800403e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004042:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (5 * 2)); // Set mode register
 8004044:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <intiJoystick+0x128>)
 8004046:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <intiJoystick+0x128>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIOB->PUPDR &= ~(0x00000003 << (5 * 2)); // Clear push/pull register
 800404c:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <intiJoystick+0x128>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a1f      	ldr	r2, [pc, #124]	; (80040d0 <intiJoystick+0x128>)
 8004052:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004056:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (5 * 2)); // Set push/pull register
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <intiJoystick+0x128>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <intiJoystick+0x128>)
 800405e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004062:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PC1 to input
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8004064:	4b19      	ldr	r3, [pc, #100]	; (80040cc <intiJoystick+0x124>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a18      	ldr	r2, [pc, #96]	; (80040cc <intiJoystick+0x124>)
 800406a:	f023 030c 	bic.w	r3, r3, #12
 800406e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (1 * 2)); // Set mode register
 8004070:	4b16      	ldr	r3, [pc, #88]	; (80040cc <intiJoystick+0x124>)
 8004072:	4a16      	ldr	r2, [pc, #88]	; (80040cc <intiJoystick+0x124>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); // Clear push/pull register
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <intiJoystick+0x124>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a13      	ldr	r2, [pc, #76]	; (80040cc <intiJoystick+0x124>)
 800407e:	f023 030c 	bic.w	r3, r3, #12
 8004082:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (1 * 2)); // Set push/pull register
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <intiJoystick+0x124>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a10      	ldr	r2, [pc, #64]	; (80040cc <intiJoystick+0x124>)
 800408a:	f043 0308 	orr.w	r3, r3, #8
 800408e:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB0 to input
	GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8004090:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <intiJoystick+0x128>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <intiJoystick+0x128>)
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (0 * 2)); // Set mode register
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <intiJoystick+0x128>)
 800409e:	4a0c      	ldr	r2, [pc, #48]	; (80040d0 <intiJoystick+0x128>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <intiJoystick+0x128>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <intiJoystick+0x128>)
 80040aa:	f023 0303 	bic.w	r3, r3, #3
 80040ae:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (0 * 2)); // Set push/pull register
 80040b0:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <intiJoystick+0x128>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4a06      	ldr	r2, [pc, #24]	; (80040d0 <intiJoystick+0x128>)
 80040b6:	f043 0302 	orr.w	r3, r3, #2
 80040ba:	60d3      	str	r3, [r2, #12]
	// 0x00 - No pull
	// 0x01 - Pull-up
	// 0x02 - Pull-down

}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000
 80040cc:	48000800 	.word	0x48000800
 80040d0:	48000400 	.word	0x48000400

080040d4 <readJoystick>:


void readJoystick(){
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
	int32_t a = GPIOC->IDR & (0x0001 << 0); //Read from pin PCx - right
 80040da:	4b26      	ldr	r3, [pc, #152]	; (8004174 <readJoystick+0xa0>)
 80040dc:	8a1b      	ldrh	r3, [r3, #16]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	607b      	str	r3, [r7, #4]
	int32_t b = GPIOA->IDR & (0x0001 << 4); //Read from pin PCx - up
 80040e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040ea:	8a1b      	ldrh	r3, [r3, #16]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	617b      	str	r3, [r7, #20]
	int32_t c = GPIOB->IDR & (0x0001 << 5); //Read from pin PCx - center
 80040f4:	4b20      	ldr	r3, [pc, #128]	; (8004178 <readJoystick+0xa4>)
 80040f6:	8a1b      	ldrh	r3, [r3, #16]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	613b      	str	r3, [r7, #16]
	int32_t d = GPIOC->IDR & (0x0001 << 1); //Read from pin PCx - left
 8004100:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <readJoystick+0xa0>)
 8004102:	8a1b      	ldrh	r3, [r3, #16]
 8004104:	b29b      	uxth	r3, r3
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	60fb      	str	r3, [r7, #12]
	int32_t e = GPIOB->IDR & (0x0001 << 0); //Read from pin PCx - down
 800410c:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <readJoystick+0xa4>)
 800410e:	8a1b      	ldrh	r3, [r3, #16]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	60bb      	str	r3, [r7, #8]

	if(b){b = 1;}
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <readJoystick+0x4e>
 800411e:	2301      	movs	r3, #1
 8004120:	617b      	str	r3, [r7, #20]
	if(c){c = 1;}
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <readJoystick+0x58>
 8004128:	2301      	movs	r3, #1
 800412a:	613b      	str	r3, [r7, #16]
	if(d){d = 1;}
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <readJoystick+0x62>
 8004132:	2301      	movs	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
	if(e){e = 1;}
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <readJoystick+0x6c>
 800413c:	2301      	movs	r3, #1
 800413e:	60bb      	str	r3, [r7, #8]

	joy.right 	= a;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	b25a      	sxtb	r2, r3
 8004144:	4b0d      	ldr	r3, [pc, #52]	; (800417c <readJoystick+0xa8>)
 8004146:	70da      	strb	r2, [r3, #3]
	joy.up 		= b;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	b25a      	sxtb	r2, r3
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <readJoystick+0xa8>)
 800414e:	701a      	strb	r2, [r3, #0]
	joy.center	= c;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	b25a      	sxtb	r2, r3
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <readJoystick+0xa8>)
 8004156:	711a      	strb	r2, [r3, #4]
	joy.left	= d;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	b25a      	sxtb	r2, r3
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <readJoystick+0xa8>)
 800415e:	709a      	strb	r2, [r3, #2]
	joy.down 	= e;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	b25a      	sxtb	r2, r3
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <readJoystick+0xa8>)
 8004166:	705a      	strb	r2, [r3, #1]

}
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	48000800 	.word	0x48000800
 8004178:	48000400 	.word	0x48000400
 800417c:	20000200 	.word	0x20000200

08004180 <copyJoystick>:

void copyJoystick() {
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
	CJoy.up = joy.up;
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <copyJoystick+0x40>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	b25a      	sxtb	r2, r3
 800418a:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <copyJoystick+0x44>)
 800418c:	701a      	strb	r2, [r3, #0]
	CJoy.down = joy.down;
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <copyJoystick+0x40>)
 8004190:	785b      	ldrb	r3, [r3, #1]
 8004192:	b25a      	sxtb	r2, r3
 8004194:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <copyJoystick+0x44>)
 8004196:	705a      	strb	r2, [r3, #1]
	CJoy.left = joy.left;
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <copyJoystick+0x40>)
 800419a:	789b      	ldrb	r3, [r3, #2]
 800419c:	b25a      	sxtb	r2, r3
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <copyJoystick+0x44>)
 80041a0:	709a      	strb	r2, [r3, #2]
	CJoy.right = joy.right;
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <copyJoystick+0x40>)
 80041a4:	78db      	ldrb	r3, [r3, #3]
 80041a6:	b25a      	sxtb	r2, r3
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <copyJoystick+0x44>)
 80041aa:	70da      	strb	r2, [r3, #3]
	CJoy.center = joy.center;
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <copyJoystick+0x40>)
 80041ae:	791b      	ldrb	r3, [r3, #4]
 80041b0:	b25a      	sxtb	r2, r3
 80041b2:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <copyJoystick+0x44>)
 80041b4:	711a      	strb	r2, [r3, #4]
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	20000200 	.word	0x20000200
 80041c4:	20000208 	.word	0x20000208

080041c8 <lcd_write_string>:
#include "ansi_S.h"
#include "LCD.h"

uint8_t buffer[512];

void lcd_write_string(char slice[], uint32_t line, uint32_t place) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
	for (int j = 0; j < strlen(slice); j++) {
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	e076      	b.n	80042c8 <lcd_write_string+0x100>
		int x = slice[j];
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 5; i++) {
 80041e4:	2300      	movs	r3, #0
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	e068      	b.n	80042bc <lcd_write_string+0xf4>
			if (line == 1) {
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d114      	bne.n	800421a <lcd_write_string+0x52>
				buffer[i + place + j * 5] = character_data[x - 32][i];
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f1a3 0220 	sub.w	r2, r3, #32
 80041f6:	69b9      	ldr	r1, [r7, #24]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	18c8      	adds	r0, r1, r3
 80041fc:	69f9      	ldr	r1, [r7, #28]
 80041fe:	460b      	mov	r3, r1
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	18c1      	adds	r1, r0, r3
 8004206:	4837      	ldr	r0, [pc, #220]	; (80042e4 <lcd_write_string+0x11c>)
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	18c2      	adds	r2, r0, r3
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	4413      	add	r3, r2
 8004214:	781a      	ldrb	r2, [r3, #0]
 8004216:	4b34      	ldr	r3, [pc, #208]	; (80042e8 <lcd_write_string+0x120>)
 8004218:	545a      	strb	r2, [r3, r1]
			}
			if (line == 2) {
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d116      	bne.n	800424e <lcd_write_string+0x86>
				buffer[128 + i + place + j * 5] = character_data[x - 32][i];
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f1a3 0220 	sub.w	r2, r3, #32
 8004226:	69b9      	ldr	r1, [r7, #24]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	18c8      	adds	r0, r1, r3
 800422c:	69f9      	ldr	r1, [r7, #28]
 800422e:	460b      	mov	r3, r1
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	4403      	add	r3, r0
 8004236:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800423a:	482a      	ldr	r0, [pc, #168]	; (80042e4 <lcd_write_string+0x11c>)
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	18c2      	adds	r2, r0, r3
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	4413      	add	r3, r2
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <lcd_write_string+0x120>)
 800424c:	545a      	strb	r2, [r3, r1]
			}
			if (line == 3) {
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b03      	cmp	r3, #3
 8004252:	d116      	bne.n	8004282 <lcd_write_string+0xba>
				buffer[256 + i + place + j * 5] = character_data[x - 32][i];
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f1a3 0220 	sub.w	r2, r3, #32
 800425a:	69b9      	ldr	r1, [r7, #24]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	18c8      	adds	r0, r1, r3
 8004260:	69f9      	ldr	r1, [r7, #28]
 8004262:	460b      	mov	r3, r1
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	4403      	add	r3, r0
 800426a:	f503 7180 	add.w	r1, r3, #256	; 0x100
 800426e:	481d      	ldr	r0, [pc, #116]	; (80042e4 <lcd_write_string+0x11c>)
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	18c2      	adds	r2, r0, r3
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	4413      	add	r3, r2
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <lcd_write_string+0x120>)
 8004280:	545a      	strb	r2, [r3, r1]
			}
			if (line == 4) {
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b04      	cmp	r3, #4
 8004286:	d116      	bne.n	80042b6 <lcd_write_string+0xee>
				buffer[384 + i + place + j * 5] = character_data[x - 32][i];
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f1a3 0220 	sub.w	r2, r3, #32
 800428e:	69b9      	ldr	r1, [r7, #24]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	18c8      	adds	r0, r1, r3
 8004294:	69f9      	ldr	r1, [r7, #28]
 8004296:	460b      	mov	r3, r1
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	4403      	add	r3, r0
 800429e:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 80042a2:	4810      	ldr	r0, [pc, #64]	; (80042e4 <lcd_write_string+0x11c>)
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	18c2      	adds	r2, r0, r3
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	4413      	add	r3, r2
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <lcd_write_string+0x120>)
 80042b4:	545a      	strb	r2, [r3, r1]
		for (int i = 0; i < 5; i++) {
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	3301      	adds	r3, #1
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b04      	cmp	r3, #4
 80042c0:	dd93      	ble.n	80041ea <lcd_write_string+0x22>
	for (int j = 0; j < strlen(slice); j++) {
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3301      	adds	r3, #1
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7fb ff81 	bl	80001d0 <strlen>
 80042ce:	4602      	mov	r2, r0
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d881      	bhi.n	80041da <lcd_write_string+0x12>
			}
		}
	}
	lcd_push_buffer(buffer);
 80042d6:	4804      	ldr	r0, [pc, #16]	; (80042e8 <lcd_write_string+0x120>)
 80042d8:	f7fd f8f0 	bl	80014bc <lcd_push_buffer>
}
 80042dc:	bf00      	nop
 80042de:	3720      	adds	r7, #32
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	08008abc 	.word	0x08008abc
 80042e8:	20000214 	.word	0x20000214

080042ec <lcd_write_string_no_push>:

void lcd_write_string_no_push(char slice[], uint32_t line, uint32_t place) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
	for (int j = 0; j < strlen(slice); j++) {
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	e076      	b.n	80043ec <lcd_write_string_no_push+0x100>
		int x = slice[j];
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 5; i++) {
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e068      	b.n	80043e0 <lcd_write_string_no_push+0xf4>
			if (line == 1) {
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d114      	bne.n	800433e <lcd_write_string_no_push+0x52>
				buffer[i + place + j * 5] = character_data[x - 32][i];
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f1a3 0220 	sub.w	r2, r3, #32
 800431a:	69b9      	ldr	r1, [r7, #24]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	18c8      	adds	r0, r1, r3
 8004320:	69f9      	ldr	r1, [r7, #28]
 8004322:	460b      	mov	r3, r1
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	18c1      	adds	r1, r0, r3
 800432a:	4836      	ldr	r0, [pc, #216]	; (8004404 <lcd_write_string_no_push+0x118>)
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	18c2      	adds	r2, r0, r3
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	4413      	add	r3, r2
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	4b33      	ldr	r3, [pc, #204]	; (8004408 <lcd_write_string_no_push+0x11c>)
 800433c:	545a      	strb	r2, [r3, r1]
			}
			if (line == 2) {
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d116      	bne.n	8004372 <lcd_write_string_no_push+0x86>
				buffer[128 + i + place + j * 5] = character_data[x - 32][i];
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f1a3 0220 	sub.w	r2, r3, #32
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	18c8      	adds	r0, r1, r3
 8004350:	69f9      	ldr	r1, [r7, #28]
 8004352:	460b      	mov	r3, r1
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	4403      	add	r3, r0
 800435a:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800435e:	4829      	ldr	r0, [pc, #164]	; (8004404 <lcd_write_string_no_push+0x118>)
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	18c2      	adds	r2, r0, r3
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	4413      	add	r3, r2
 800436c:	781a      	ldrb	r2, [r3, #0]
 800436e:	4b26      	ldr	r3, [pc, #152]	; (8004408 <lcd_write_string_no_push+0x11c>)
 8004370:	545a      	strb	r2, [r3, r1]
			}
			if (line == 3) {
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d116      	bne.n	80043a6 <lcd_write_string_no_push+0xba>
				buffer[256 + i + place + j * 5] = character_data[x - 32][i];
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f1a3 0220 	sub.w	r2, r3, #32
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	18c8      	adds	r0, r1, r3
 8004384:	69f9      	ldr	r1, [r7, #28]
 8004386:	460b      	mov	r3, r1
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	4403      	add	r3, r0
 800438e:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8004392:	481c      	ldr	r0, [pc, #112]	; (8004404 <lcd_write_string_no_push+0x118>)
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	18c2      	adds	r2, r0, r3
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	4413      	add	r3, r2
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <lcd_write_string_no_push+0x11c>)
 80043a4:	545a      	strb	r2, [r3, r1]
			}
			if (line == 4) {
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d116      	bne.n	80043da <lcd_write_string_no_push+0xee>
				buffer[384 + i + place + j * 5] = character_data[x - 32][i];
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f1a3 0220 	sub.w	r2, r3, #32
 80043b2:	69b9      	ldr	r1, [r7, #24]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	18c8      	adds	r0, r1, r3
 80043b8:	69f9      	ldr	r1, [r7, #28]
 80043ba:	460b      	mov	r3, r1
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	4403      	add	r3, r0
 80043c2:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 80043c6:	480f      	ldr	r0, [pc, #60]	; (8004404 <lcd_write_string_no_push+0x118>)
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	18c2      	adds	r2, r0, r3
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	4413      	add	r3, r2
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <lcd_write_string_no_push+0x11c>)
 80043d8:	545a      	strb	r2, [r3, r1]
		for (int i = 0; i < 5; i++) {
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	3301      	adds	r3, #1
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	dd93      	ble.n	800430e <lcd_write_string_no_push+0x22>
	for (int j = 0; j < strlen(slice); j++) {
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3301      	adds	r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7fb feef 	bl	80001d0 <strlen>
 80043f2:	4602      	mov	r2, r0
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d881      	bhi.n	80042fe <lcd_write_string_no_push+0x12>
			}
		}
	}
}
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	3720      	adds	r7, #32
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	08008abc 	.word	0x08008abc
 8004408:	20000214 	.word	0x20000214

0800440c <lcd_write_string_custom>:

void lcd_write_string_custom(int character, int amount, uint32_t line, uint32_t place) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
	for (int j = 0; j < amount; j++) {
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e06d      	b.n	80044fc <lcd_write_string_custom+0xf0>
		for (int i = 0; i < 5; i++) {
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	e064      	b.n	80044f0 <lcd_write_string_custom+0xe4>
			if (line == 1) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d113      	bne.n	8004454 <lcd_write_string_custom+0x48>
				buffer[i + place + j * 5] = custom_character_data[character - 1][i];
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e5a      	subs	r2, r3, #1
 8004430:	6939      	ldr	r1, [r7, #16]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	18c8      	adds	r0, r1, r3
 8004436:	6979      	ldr	r1, [r7, #20]
 8004438:	460b      	mov	r3, r1
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	18c1      	adds	r1, r0, r3
 8004440:	4834      	ldr	r0, [pc, #208]	; (8004514 <lcd_write_string_custom+0x108>)
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	18c2      	adds	r2, r0, r3
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4413      	add	r3, r2
 800444e:	781a      	ldrb	r2, [r3, #0]
 8004450:	4b31      	ldr	r3, [pc, #196]	; (8004518 <lcd_write_string_custom+0x10c>)
 8004452:	545a      	strb	r2, [r3, r1]
			}
			if (line == 2) {
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d115      	bne.n	8004486 <lcd_write_string_custom+0x7a>
				buffer[128 + i + place + j * 5] = custom_character_data[character - 1][i];
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1e5a      	subs	r2, r3, #1
 800445e:	6939      	ldr	r1, [r7, #16]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	18c8      	adds	r0, r1, r3
 8004464:	6979      	ldr	r1, [r7, #20]
 8004466:	460b      	mov	r3, r1
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	4403      	add	r3, r0
 800446e:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8004472:	4828      	ldr	r0, [pc, #160]	; (8004514 <lcd_write_string_custom+0x108>)
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	18c2      	adds	r2, r0, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4413      	add	r3, r2
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	4b25      	ldr	r3, [pc, #148]	; (8004518 <lcd_write_string_custom+0x10c>)
 8004484:	545a      	strb	r2, [r3, r1]
			}
			if (line == 3) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d115      	bne.n	80044b8 <lcd_write_string_custom+0xac>
				buffer[256 + i + place + j * 5] = custom_character_data[character - 1][i];
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1e5a      	subs	r2, r3, #1
 8004490:	6939      	ldr	r1, [r7, #16]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	18c8      	adds	r0, r1, r3
 8004496:	6979      	ldr	r1, [r7, #20]
 8004498:	460b      	mov	r3, r1
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	4403      	add	r3, r0
 80044a0:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80044a4:	481b      	ldr	r0, [pc, #108]	; (8004514 <lcd_write_string_custom+0x108>)
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	18c2      	adds	r2, r0, r3
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4413      	add	r3, r2
 80044b2:	781a      	ldrb	r2, [r3, #0]
 80044b4:	4b18      	ldr	r3, [pc, #96]	; (8004518 <lcd_write_string_custom+0x10c>)
 80044b6:	545a      	strb	r2, [r3, r1]
			}
			if (line == 4) {
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d115      	bne.n	80044ea <lcd_write_string_custom+0xde>
				buffer[384 + i + place + j * 5] = custom_character_data[character - 1][i];
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1e5a      	subs	r2, r3, #1
 80044c2:	6939      	ldr	r1, [r7, #16]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	18c8      	adds	r0, r1, r3
 80044c8:	6979      	ldr	r1, [r7, #20]
 80044ca:	460b      	mov	r3, r1
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	4403      	add	r3, r0
 80044d2:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 80044d6:	480f      	ldr	r0, [pc, #60]	; (8004514 <lcd_write_string_custom+0x108>)
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	18c2      	adds	r2, r0, r3
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4413      	add	r3, r2
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <lcd_write_string_custom+0x10c>)
 80044e8:	545a      	strb	r2, [r3, r1]
		for (int i = 0; i < 5; i++) {
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	3301      	adds	r3, #1
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	dd97      	ble.n	8004426 <lcd_write_string_custom+0x1a>
	for (int j = 0; j < amount; j++) {
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	3301      	adds	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	db8d      	blt.n	8004420 <lcd_write_string_custom+0x14>
			}
		}
	}
	lcd_push_buffer(buffer);
 8004504:	4804      	ldr	r0, [pc, #16]	; (8004518 <lcd_write_string_custom+0x10c>)
 8004506:	f7fc ffd9 	bl	80014bc <lcd_push_buffer>
}
 800450a:	bf00      	nop
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	08008c98 	.word	0x08008c98
 8004518:	20000214 	.word	0x20000214

0800451c <draw_gameplay_start>:
		}
	}

}

void draw_gameplay_start() {
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
	lcd_write_string("Score:", 1, 36);
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	2101      	movs	r1, #1
 8004526:	480b      	ldr	r0, [pc, #44]	; (8004554 <draw_gameplay_start+0x38>)
 8004528:	f7ff fe4e 	bl	80041c8 <lcd_write_string>
	for (int i = 0; i < 128; i++) {
 800452c:	2300      	movs	r3, #0
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	e007      	b.n	8004542 <draw_gameplay_start+0x26>
		buffer[128 + i] = 0x01;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3380      	adds	r3, #128	; 0x80
 8004536:	4a08      	ldr	r2, [pc, #32]	; (8004558 <draw_gameplay_start+0x3c>)
 8004538:	2101      	movs	r1, #1
 800453a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 128; i++) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3301      	adds	r3, #1
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b7f      	cmp	r3, #127	; 0x7f
 8004546:	ddf4      	ble.n	8004532 <draw_gameplay_start+0x16>
	}
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	08008630 	.word	0x08008630
 8004558:	20000214 	.word	0x20000214

0800455c <draw_score>:

void draw_score() {
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
	char score_str[8];
	sprintf(score_str, "%d", score);
 8004562:	4b09      	ldr	r3, [pc, #36]	; (8004588 <draw_score+0x2c>)
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	461a      	mov	r2, r3
 800456a:	463b      	mov	r3, r7
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <draw_score+0x30>)
 800456e:	4618      	mov	r0, r3
 8004570:	f002 fefa 	bl	8007368 <siprintf>
	lcd_write_string(score_str, 1, 66);
 8004574:	463b      	mov	r3, r7
 8004576:	2242      	movs	r2, #66	; 0x42
 8004578:	2101      	movs	r1, #1
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fe24 	bl	80041c8 <lcd_write_string>
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000210 	.word	0x20000210
 800458c:	08008638 	.word	0x08008638

08004590 <LCD_alarm>:
			x = 1;
		}
	}
}

int LCD_alarm() {
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
	if (tid.mil == 50) {
 8004596:	4b34      	ldr	r3, [pc, #208]	; (8004668 <LCD_alarm+0xd8>)
 8004598:	789b      	ldrb	r3, [r3, #2]
 800459a:	b25b      	sxtb	r3, r3
 800459c:	2b32      	cmp	r3, #50	; 0x32
 800459e:	d13c      	bne.n	800461a <LCD_alarm+0x8a>
		while (tid.mil == 50) {
 80045a0:	bf00      	nop
 80045a2:	4b31      	ldr	r3, [pc, #196]	; (8004668 <LCD_alarm+0xd8>)
 80045a4:	789b      	ldrb	r3, [r3, #2]
 80045a6:	b25b      	sxtb	r3, r3
 80045a8:	2b32      	cmp	r3, #50	; 0x32
 80045aa:	d0fa      	beq.n	80045a2 <LCD_alarm+0x12>
		}
		lcd_write_string_custom(3, 1, 2, 58);
 80045ac:	233a      	movs	r3, #58	; 0x3a
 80045ae:	2202      	movs	r2, #2
 80045b0:	2101      	movs	r1, #1
 80045b2:	2003      	movs	r0, #3
 80045b4:	f7ff ff2a 	bl	800440c <lcd_write_string_custom>
		lcd_write_string_custom(4, 1, 2, 63);
 80045b8:	233f      	movs	r3, #63	; 0x3f
 80045ba:	2202      	movs	r2, #2
 80045bc:	2101      	movs	r1, #1
 80045be:	2004      	movs	r0, #4
 80045c0:	f7ff ff24 	bl	800440c <lcd_write_string_custom>
		lcd_write_string_custom(5, 1, 3, 58);
 80045c4:	233a      	movs	r3, #58	; 0x3a
 80045c6:	2203      	movs	r2, #3
 80045c8:	2101      	movs	r1, #1
 80045ca:	2005      	movs	r0, #5
 80045cc:	f7ff ff1e 	bl	800440c <lcd_write_string_custom>
		lcd_write_string_custom(6, 1, 3, 63);
 80045d0:	233f      	movs	r3, #63	; 0x3f
 80045d2:	2203      	movs	r2, #3
 80045d4:	2101      	movs	r1, #1
 80045d6:	2006      	movs	r0, #6
 80045d8:	f7ff ff18 	bl	800440c <lcd_write_string_custom>
		lcd_write_string_custom(7, 1, 2, 68);
 80045dc:	2344      	movs	r3, #68	; 0x44
 80045de:	2202      	movs	r2, #2
 80045e0:	2101      	movs	r1, #1
 80045e2:	2007      	movs	r0, #7
 80045e4:	f7ff ff12 	bl	800440c <lcd_write_string_custom>
		lcd_write_string_custom(8, 1, 3, 68);
 80045e8:	2344      	movs	r3, #68	; 0x44
 80045ea:	2203      	movs	r2, #3
 80045ec:	2101      	movs	r1, #1
 80045ee:	2008      	movs	r0, #8
 80045f0:	f7ff ff0c 	bl	800440c <lcd_write_string_custom>
		lcd_write_string_custom(9, 1, 2, 53);
 80045f4:	2335      	movs	r3, #53	; 0x35
 80045f6:	2202      	movs	r2, #2
 80045f8:	2101      	movs	r1, #1
 80045fa:	2009      	movs	r0, #9
 80045fc:	f7ff ff06 	bl	800440c <lcd_write_string_custom>
		lcd_write_string_custom(10, 1, 3, 53);
 8004600:	2335      	movs	r3, #53	; 0x35
 8004602:	2203      	movs	r2, #3
 8004604:	2101      	movs	r1, #1
 8004606:	200a      	movs	r0, #10
 8004608:	f7ff ff00 	bl	800440c <lcd_write_string_custom>
		lcd_write_string("hull breach !!!", 4, 26);
 800460c:	221a      	movs	r2, #26
 800460e:	2104      	movs	r1, #4
 8004610:	4816      	ldr	r0, [pc, #88]	; (800466c <LCD_alarm+0xdc>)
 8004612:	f7ff fdd9 	bl	80041c8 <lcd_write_string>
		return 0;
 8004616:	2300      	movs	r3, #0
 8004618:	e021      	b.n	800465e <LCD_alarm+0xce>
	}
	else if (tid.mil == 95) {
 800461a:	4b13      	ldr	r3, [pc, #76]	; (8004668 <LCD_alarm+0xd8>)
 800461c:	789b      	ldrb	r3, [r3, #2]
 800461e:	b25b      	sxtb	r3, r3
 8004620:	2b5f      	cmp	r3, #95	; 0x5f
 8004622:	d11b      	bne.n	800465c <LCD_alarm+0xcc>
		while (tid.mil == 95) {
 8004624:	bf00      	nop
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <LCD_alarm+0xd8>)
 8004628:	789b      	ldrb	r3, [r3, #2]
 800462a:	b25b      	sxtb	r3, r3
 800462c:	2b5f      	cmp	r3, #95	; 0x5f
 800462e:	d0fa      	beq.n	8004626 <LCD_alarm+0x96>
		}
		for (int i = 0; i < 128; i++) {
 8004630:	2300      	movs	r3, #0
 8004632:	607b      	str	r3, [r7, #4]
 8004634:	e007      	b.n	8004646 <LCD_alarm+0xb6>
			buffer[128 + i] = 0x01;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3380      	adds	r3, #128	; 0x80
 800463a:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <LCD_alarm+0xe0>)
 800463c:	2101      	movs	r1, #1
 800463e:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 128; i++) {
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3301      	adds	r3, #1
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b7f      	cmp	r3, #127	; 0x7f
 800464a:	ddf4      	ble.n	8004636 <LCD_alarm+0xa6>
		}
		lcd_write_string_custom(11, 51, 3, 0);
 800464c:	2300      	movs	r3, #0
 800464e:	2203      	movs	r2, #3
 8004650:	2133      	movs	r1, #51	; 0x33
 8004652:	200b      	movs	r0, #11
 8004654:	f7ff feda 	bl	800440c <lcd_write_string_custom>
		return 1;
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <LCD_alarm+0xce>
	} else {
		return 0;
 800465c:	2300      	movs	r3, #0
	}
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000418 	.word	0x20000418
 800466c:	0800864c 	.word	0x0800864c
 8004670:	20000214 	.word	0x20000214

08004674 <LCD_timer>:

void LCD_timer() {
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
	char milisec_str[3];
	char sec_str[2];
	char min_str[2];
	sprintf(milisec_str, "%d", tid.mil);
 800467a:	4b25      	ldr	r3, [pc, #148]	; (8004710 <LCD_timer+0x9c>)
 800467c:	789b      	ldrb	r3, [r3, #2]
 800467e:	b25b      	sxtb	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	f107 030c 	add.w	r3, r7, #12
 8004686:	4923      	ldr	r1, [pc, #140]	; (8004714 <LCD_timer+0xa0>)
 8004688:	4618      	mov	r0, r3
 800468a:	f002 fe6d 	bl	8007368 <siprintf>
	sprintf(sec_str, "%d", tid.sek);
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <LCD_timer+0x9c>)
 8004690:	785b      	ldrb	r3, [r3, #1]
 8004692:	b25b      	sxtb	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	f107 0308 	add.w	r3, r7, #8
 800469a:	491e      	ldr	r1, [pc, #120]	; (8004714 <LCD_timer+0xa0>)
 800469c:	4618      	mov	r0, r3
 800469e:	f002 fe63 	bl	8007368 <siprintf>
	sprintf(min_str, "%d", tid.min);
 80046a2:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <LCD_timer+0x9c>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	4919      	ldr	r1, [pc, #100]	; (8004714 <LCD_timer+0xa0>)
 80046ae:	4618      	mov	r0, r3
 80046b0:	f002 fe5a 	bl	8007368 <siprintf>
	lcd_write_string_no_push("0:00", 3, 55);
 80046b4:	2237      	movs	r2, #55	; 0x37
 80046b6:	2103      	movs	r1, #3
 80046b8:	4817      	ldr	r0, [pc, #92]	; (8004718 <LCD_timer+0xa4>)
 80046ba:	f7ff fe17 	bl	80042ec <lcd_write_string_no_push>
		lcd_write_string_no_push(milisec_str, 3, 73);
	} else if (t.ml <= 9) {
		lcd_write_string_no_push(milisec_str, 3, 78);
	}
	*/
	if (tid.sek >= 10) {
 80046be:	4b14      	ldr	r3, [pc, #80]	; (8004710 <LCD_timer+0x9c>)
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	b25b      	sxtb	r3, r3
 80046c4:	2b09      	cmp	r3, #9
 80046c6:	dd07      	ble.n	80046d8 <LCD_timer+0x64>
		lcd_write_string_no_push(sec_str, 3, 65);
 80046c8:	f107 0308 	add.w	r3, r7, #8
 80046cc:	2241      	movs	r2, #65	; 0x41
 80046ce:	2103      	movs	r1, #3
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fe0b 	bl	80042ec <lcd_write_string_no_push>
 80046d6:	e00b      	b.n	80046f0 <LCD_timer+0x7c>
	} else if (tid.sek <= 9) {
 80046d8:	4b0d      	ldr	r3, [pc, #52]	; (8004710 <LCD_timer+0x9c>)
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	b25b      	sxtb	r3, r3
 80046de:	2b09      	cmp	r3, #9
 80046e0:	dc06      	bgt.n	80046f0 <LCD_timer+0x7c>
		lcd_write_string_no_push(sec_str, 3, 70);
 80046e2:	f107 0308 	add.w	r3, r7, #8
 80046e6:	2246      	movs	r2, #70	; 0x46
 80046e8:	2103      	movs	r1, #3
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fdfe 	bl	80042ec <lcd_write_string_no_push>
	}
	lcd_write_string_no_push(min_str, 3, 55);
 80046f0:	1d3b      	adds	r3, r7, #4
 80046f2:	2237      	movs	r2, #55	; 0x37
 80046f4:	2103      	movs	r1, #3
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fdf8 	bl	80042ec <lcd_write_string_no_push>
	lcd_write_string(":", 3, 60);
 80046fc:	223c      	movs	r2, #60	; 0x3c
 80046fe:	2103      	movs	r1, #3
 8004700:	4806      	ldr	r0, [pc, #24]	; (800471c <LCD_timer+0xa8>)
 8004702:	f7ff fd61 	bl	80041c8 <lcd_write_string>
}
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000418 	.word	0x20000418
 8004714:	08008638 	.word	0x08008638
 8004718:	0800865c 	.word	0x0800865c
 800471c:	08008664 	.word	0x08008664

08004720 <initLed>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi_S.h"

void initLed(){
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8004724:	4b48      	ldr	r3, [pc, #288]	; (8004848 <initLed+0x128>)
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	4a47      	ldr	r2, [pc, #284]	; (8004848 <initLed+0x128>)
 800472a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800472e:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8004730:	4b45      	ldr	r3, [pc, #276]	; (8004848 <initLed+0x128>)
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	4a44      	ldr	r2, [pc, #272]	; (8004848 <initLed+0x128>)
 8004736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 800473c:	4b42      	ldr	r3, [pc, #264]	; (8004848 <initLed+0x128>)
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	4a41      	ldr	r2, [pc, #260]	; (8004848 <initLed+0x128>)
 8004742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004746:	6153      	str	r3, [r2, #20]

	// Set pin PA9 to output - BLUE LED
	GPIOA->OSPEEDR &= ~(0x00000003 << (9 * 2)); // Clear speed register
 8004748:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004752:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004756:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (9 * 2)); // set speed register
 8004758:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004766:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOA->OTYPER &= ~(0x0001 << (9 * 1)); // Clear output type register
 8004768:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800476c:	889b      	ldrh	r3, [r3, #4]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004778:	b29b      	uxth	r3, r3
 800477a:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER |= (0x0000 << (9)); // Set output type register
 800477c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004780:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004784:	8892      	ldrh	r2, [r2, #4]
 8004786:	b292      	uxth	r2, r2
 8004788:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOA->MODER &= ~(0x00000003 << (9 * 2)); // Clear mode register
 800478a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004794:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004798:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000001 << (9 * 2)); // Set mode register
 800479a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80047a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a8:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PC7 to output - GREEN LED
	GPIOC->OSPEEDR &= ~(0x00000003 << (7 * 2)); // Clear speed register
 80047aa:	4b28      	ldr	r3, [pc, #160]	; (800484c <initLed+0x12c>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	4a27      	ldr	r2, [pc, #156]	; (800484c <initLed+0x12c>)
 80047b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80047b4:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (7 * 2)); // set speed register
 80047b6:	4b25      	ldr	r3, [pc, #148]	; (800484c <initLed+0x12c>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	4a24      	ldr	r2, [pc, #144]	; (800484c <initLed+0x12c>)
 80047bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c0:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOC->OTYPER &= ~(0x0001 << (7 * 1)); // Clear output type register
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <initLed+0x12c>)
 80047c4:	889b      	ldrh	r3, [r3, #4]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	4a20      	ldr	r2, [pc, #128]	; (800484c <initLed+0x12c>)
 80047ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	8093      	strh	r3, [r2, #4]
	GPIOC->OTYPER |= (0x0000 << (7)); // Set output type register
 80047d2:	4a1e      	ldr	r2, [pc, #120]	; (800484c <initLed+0x12c>)
 80047d4:	4b1d      	ldr	r3, [pc, #116]	; (800484c <initLed+0x12c>)
 80047d6:	8892      	ldrh	r2, [r2, #4]
 80047d8:	b292      	uxth	r2, r2
 80047da:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOC->MODER &= ~(0x00000003 << (7 * 2)); // Clear mode register
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <initLed+0x12c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1a      	ldr	r2, [pc, #104]	; (800484c <initLed+0x12c>)
 80047e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80047e6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000001 << (7 * 2)); // Set mode register
 80047e8:	4b18      	ldr	r3, [pc, #96]	; (800484c <initLed+0x12c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a17      	ldr	r2, [pc, #92]	; (800484c <initLed+0x12c>)
 80047ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047f2:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PB4 to output - RED LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (4 * 2)); // Clear speed register
 80047f4:	4b16      	ldr	r3, [pc, #88]	; (8004850 <initLed+0x130>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a15      	ldr	r2, [pc, #84]	; (8004850 <initLed+0x130>)
 80047fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fe:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (4 * 2)); // set speed register
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <initLed+0x130>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a12      	ldr	r2, [pc, #72]	; (8004850 <initLed+0x130>)
 8004806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800480a:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (4 * 1)); // Clear output type register
 800480c:	4b10      	ldr	r3, [pc, #64]	; (8004850 <initLed+0x130>)
 800480e:	889b      	ldrh	r3, [r3, #4]
 8004810:	b29b      	uxth	r3, r3
 8004812:	4a0f      	ldr	r2, [pc, #60]	; (8004850 <initLed+0x130>)
 8004814:	f023 0310 	bic.w	r3, r3, #16
 8004818:	b29b      	uxth	r3, r3
 800481a:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (4)); // Set output type register
 800481c:	4a0c      	ldr	r2, [pc, #48]	; (8004850 <initLed+0x130>)
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <initLed+0x130>)
 8004820:	8892      	ldrh	r2, [r2, #4]
 8004822:	b292      	uxth	r2, r2
 8004824:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8004826:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <initLed+0x130>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <initLed+0x130>)
 800482c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004830:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000001 << (4 * 2)); // Set mode register
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <initLed+0x130>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a06      	ldr	r2, [pc, #24]	; (8004850 <initLed+0x130>)
 8004838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800483c:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
}
 800483e:	bf00      	nop
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40021000 	.word	0x40021000
 800484c:	48000800 	.word	0x48000800
 8004850:	48000400 	.word	0x48000400

08004854 <writeLed>:


void writeLed(){
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0

	// Right - Blue
	if(led.blu){
 8004858:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <writeLed+0x94>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <writeLed+0x22>
		GPIOA->ODR &= ~(0x0001 << 9); //Set pin PA9 to low - on
 8004860:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004864:	8a9b      	ldrh	r3, [r3, #20]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800486c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004870:	b29b      	uxth	r3, r3
 8004872:	8293      	strh	r3, [r2, #20]
 8004874:	e009      	b.n	800488a <writeLed+0x36>
	}
	else{
		GPIOA->ODR |= (0x0001 << 9); //Set pin PA9 to high - off
 8004876:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800487a:	8a9b      	ldrh	r3, [r3, #20]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004886:	b29b      	uxth	r3, r3
 8004888:	8293      	strh	r3, [r2, #20]
	}


	// Up - Green
	if(led.gre){
 800488a:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <writeLed+0x94>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <writeLed+0x50>
		GPIOC->ODR &= ~(0x0001 << 7); //Set pin PC7 to low - on
 8004892:	4b16      	ldr	r3, [pc, #88]	; (80048ec <writeLed+0x98>)
 8004894:	8a9b      	ldrh	r3, [r3, #20]
 8004896:	b29b      	uxth	r3, r3
 8004898:	4a14      	ldr	r2, [pc, #80]	; (80048ec <writeLed+0x98>)
 800489a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800489e:	b29b      	uxth	r3, r3
 80048a0:	8293      	strh	r3, [r2, #20]
 80048a2:	e007      	b.n	80048b4 <writeLed+0x60>
	}
	else{
		GPIOC->ODR |= (0x0001 << 7); //Set pin PC7 to high - off
 80048a4:	4b11      	ldr	r3, [pc, #68]	; (80048ec <writeLed+0x98>)
 80048a6:	8a9b      	ldrh	r3, [r3, #20]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	4a10      	ldr	r2, [pc, #64]	; (80048ec <writeLed+0x98>)
 80048ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	8293      	strh	r3, [r2, #20]
	}


	// Left - Red
	if(led.red){
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <writeLed+0x94>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <writeLed+0x7a>
		GPIOB->ODR &= ~(0x0001 << 4); //Set pin PB4 to low - on
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <writeLed+0x9c>)
 80048be:	8a9b      	ldrh	r3, [r3, #20]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	4a0b      	ldr	r2, [pc, #44]	; (80048f0 <writeLed+0x9c>)
 80048c4:	f023 0310 	bic.w	r3, r3, #16
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8293      	strh	r3, [r2, #20]
	}
	else{
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
	}

}
 80048cc:	e007      	b.n	80048de <writeLed+0x8a>
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
 80048ce:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <writeLed+0x9c>)
 80048d0:	8a9b      	ldrh	r3, [r3, #20]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <writeLed+0x9c>)
 80048d6:	f043 0310 	orr.w	r3, r3, #16
 80048da:	b29b      	uxth	r3, r3
 80048dc:	8293      	strh	r3, [r2, #20]
}
 80048de:	bf00      	nop
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	200001dc 	.word	0x200001dc
 80048ec:	48000800 	.word	0x48000800
 80048f0:	48000400 	.word	0x48000400

080048f4 <fgcolor>:
#include "ansi_S.h"

void fgcolor(uint8_t foreground) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	71fb      	strb	r3, [r7, #7]
	 4        Blue            12       Light Blue
	 5        Purple          13       Light Purple
	 6        Cyan            14       Light Cyan
	 7        Light Gray      15       White
	 */
	uint8_t type = 22;             // normal text
 80048fe:	2316      	movs	r3, #22
 8004900:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	2b07      	cmp	r3, #7
 8004906:	d904      	bls.n	8004912 <fgcolor+0x1e>
		type = 1;                // bold text
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	3b08      	subs	r3, #8
 8004910:	71fb      	strb	r3, [r7, #7]
	}
	printf("%c[%d;%dm", ESC, type, foreground + 30);
 8004912:	7bfa      	ldrb	r2, [r7, #15]
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	331e      	adds	r3, #30
 8004918:	211b      	movs	r1, #27
 800491a:	4803      	ldr	r0, [pc, #12]	; (8004928 <fgcolor+0x34>)
 800491c:	f002 fc28 	bl	8007170 <iprintf>
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	08008668 	.word	0x08008668

0800492c <bgcolor>:

void bgcolor(uint8_t background) {
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	71fb      	strb	r3, [r7, #7]
	 4        Blue
	 5        Purple
	 6        Cyan
	 7        Gray
	 */
	printf("%c[%dm", ESC, background + 40);
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	3328      	adds	r3, #40	; 0x28
 800493a:	461a      	mov	r2, r3
 800493c:	211b      	movs	r1, #27
 800493e:	4803      	ldr	r0, [pc, #12]	; (800494c <bgcolor+0x20>)
 8004940:	f002 fc16 	bl	8007170 <iprintf>
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	08008674 	.word	0x08008674

08004950 <resetbgcolor>:
		foreground -= 8;
	}
	printf("%c[%d;%d;%dm", ESC, type, foreground + 30, background + 40);
}

void resetbgcolor() {
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
 8004954:	211b      	movs	r1, #27
 8004956:	4802      	ldr	r0, [pc, #8]	; (8004960 <resetbgcolor+0x10>)
 8004958:	f002 fc0a 	bl	8007170 <iprintf>
}
 800495c:	bf00      	nop
 800495e:	bd80      	pop	{r7, pc}
 8004960:	0800868c 	.word	0x0800868c

08004964 <clrscr>:

void clrscr() {
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 8004968:	4a07      	ldr	r2, [pc, #28]	; (8004988 <clrscr+0x24>)
 800496a:	211b      	movs	r1, #27
 800496c:	4807      	ldr	r0, [pc, #28]	; (800498c <clrscr+0x28>)
 800496e:	f002 fbff 	bl	8007170 <iprintf>
	printf("%c[%s", ESC, "3J");
 8004972:	4a07      	ldr	r2, [pc, #28]	; (8004990 <clrscr+0x2c>)
 8004974:	211b      	movs	r1, #27
 8004976:	4805      	ldr	r0, [pc, #20]	; (800498c <clrscr+0x28>)
 8004978:	f002 fbfa 	bl	8007170 <iprintf>
	gotoxy(1,1);
 800497c:	2101      	movs	r1, #1
 800497e:	2001      	movs	r0, #1
 8004980:	f000 f808 	bl	8004994 <gotoxy>
}
 8004984:	bf00      	nop
 8004986:	bd80      	pop	{r7, pc}
 8004988:	08008694 	.word	0x08008694
 800498c:	08008698 	.word	0x08008698
 8004990:	080086a0 	.word	0x080086a0

08004994 <gotoxy>:

void clreol() {
	printf("%c[%s", ESC, "2k");
}

void gotoxy(int c, int r) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", ESC, r, c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	211b      	movs	r1, #27
 80049a4:	4803      	ldr	r0, [pc, #12]	; (80049b4 <gotoxy+0x20>)
 80049a6:	f002 fbe3 	bl	8007170 <iprintf>
}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	080086a8 	.word	0x080086a8

080049b8 <blink>:
	} else {
		printf("%c[%d%c", ESC, 24, 'm');
	}
}

void blink(int state) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	if (state) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <blink+0x1a>
		//printf("\x1b[5m");
		printf("%c[%dm", ESC, 5);
 80049c6:	2205      	movs	r2, #5
 80049c8:	211b      	movs	r1, #27
 80049ca:	4806      	ldr	r0, [pc, #24]	; (80049e4 <blink+0x2c>)
 80049cc:	f002 fbd0 	bl	8007170 <iprintf>
	} else {
		//printf("\x1b[25m");
		printf("%c[%dm", ESC, 25);
	}
}
 80049d0:	e004      	b.n	80049dc <blink+0x24>
		printf("%c[%dm", ESC, 25);
 80049d2:	2219      	movs	r2, #25
 80049d4:	211b      	movs	r1, #27
 80049d6:	4803      	ldr	r0, [pc, #12]	; (80049e4 <blink+0x2c>)
 80049d8:	f002 fbca 	bl	8007170 <iprintf>
}
 80049dc:	bf00      	nop
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	08008674 	.word	0x08008674

080049e8 <initAstro>:
#include "ansi_S.h"
#include "astroid.h"
#include "joystick.h"
#include "timer.h"

void initAstro(){
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
	ship.px = 30;
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <initAstro+0x58>)
 80049ee:	221e      	movs	r2, #30
 80049f0:	801a      	strh	r2, [r3, #0]
	ship.py = 39;
 80049f2:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <initAstro+0x58>)
 80049f4:	2227      	movs	r2, #39	; 0x27
 80049f6:	805a      	strh	r2, [r3, #2]
	ship.vx = 0;
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <initAstro+0x58>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	711a      	strb	r2, [r3, #4]
	ship.vy = 0;
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <initAstro+0x58>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	715a      	strb	r2, [r3, #5]

	bllt.px = 0;
 8004a04:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <initAstro+0x5c>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	801a      	strh	r2, [r3, #0]
	bllt.py = 0;
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <initAstro+0x5c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	805a      	strh	r2, [r3, #2]
	bllt.vx = 0;
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <initAstro+0x5c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	711a      	strb	r2, [r3, #4]
	bllt.vy = 0;
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <initAstro+0x5c>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	715a      	strb	r2, [r3, #5]

	ast1.px = 175;
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <initAstro+0x60>)
 8004a1e:	22af      	movs	r2, #175	; 0xaf
 8004a20:	801a      	strh	r2, [r3, #0]
	ast1.py = 29;
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <initAstro+0x60>)
 8004a24:	221d      	movs	r2, #29
 8004a26:	805a      	strh	r2, [r3, #2]
	ast1.vx = -1;
 8004a28:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <initAstro+0x60>)
 8004a2a:	22ff      	movs	r2, #255	; 0xff
 8004a2c:	711a      	strb	r2, [r3, #4]
	ast1.vy = 0;
 8004a2e:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <initAstro+0x60>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	715a      	strb	r2, [r3, #5]
//	ast2.py = 39;
//	ast2.vx = -2;
//	ast2.vy = 0;


}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000424 	.word	0x20000424
 8004a44:	2000042c 	.word	0x2000042c
 8004a48:	2000041c 	.word	0x2000041c

08004a4c <asteroidUpdate>:


void asteroidUpdate(spaceship_t *S){
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	moveBullet();
 8004a54:	f000 f822 	bl	8004a9c <moveBullet>
	asteroid1(S);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f8f1 	bl	8004c40 <asteroid1>
//	asteroid2();
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <shoot>:
		}
	}
}


void shoot(spaceship_t S){
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	7138      	strb	r0, [r7, #4]
bllt.state = 1;
 8004a70:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <shoot+0x30>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	719a      	strb	r2, [r3, #6]
bllt.px = 92;
 8004a76:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <shoot+0x30>)
 8004a78:	225c      	movs	r2, #92	; 0x5c
 8004a7a:	801a      	strh	r2, [r3, #0]
bllt.py = S.ud+29;
 8004a7c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	331d      	adds	r3, #29
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	b21a      	sxth	r2, r3
 8004a88:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <shoot+0x30>)
 8004a8a:	805a      	strh	r2, [r3, #2]
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	2000042c 	.word	0x2000042c

08004a9c <moveBullet>:

void moveBullet(){
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
	setFreq(0);
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f000 fd65 	bl	8005570 <setFreq>
	if (bllt.state){
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <moveBullet+0x48>)
 8004aa8:	799b      	ldrb	r3, [r3, #6]
 8004aaa:	b25b      	sxtb	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d004      	beq.n	8004aba <moveBullet+0x1e>
		drawBullet();
 8004ab0:	f000 f81c 	bl	8004aec <drawBullet>
		setFreq(10);
 8004ab4:	200a      	movs	r0, #10
 8004ab6:	f000 fd5b 	bl	8005570 <setFreq>
	}

	gotoxy(5,7);
 8004aba:	2107      	movs	r1, #7
 8004abc:	2005      	movs	r0, #5
 8004abe:	f7ff ff69 	bl	8004994 <gotoxy>
	printf("Bullet: %03d, %03d, %d", bllt.px, bllt.py, bllt.state);
 8004ac2:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <moveBullet+0x48>)
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b21b      	sxth	r3, r3
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <moveBullet+0x48>)
 8004acc:	885b      	ldrh	r3, [r3, #2]
 8004ace:	b21b      	sxth	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <moveBullet+0x48>)
 8004ad4:	799b      	ldrb	r3, [r3, #6]
 8004ad6:	b25b      	sxtb	r3, r3
 8004ad8:	4803      	ldr	r0, [pc, #12]	; (8004ae8 <moveBullet+0x4c>)
 8004ada:	f002 fb49 	bl	8007170 <iprintf>
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000042c 	.word	0x2000042c
 8004ae8:	080086bc 	.word	0x080086bc

08004aec <drawBullet>:

void drawBullet(){
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
	gotoxy(bllt.px,bllt.py);
 8004af2:	4b50      	ldr	r3, [pc, #320]	; (8004c34 <drawBullet+0x148>)
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b21b      	sxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b4e      	ldr	r3, [pc, #312]	; (8004c34 <drawBullet+0x148>)
 8004afc:	885b      	ldrh	r3, [r3, #2]
 8004afe:	b21b      	sxth	r3, r3
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f7ff ff46 	bl	8004994 <gotoxy>

	for (int j=0;j<9;j++){
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	e005      	b.n	8004b1a <drawBullet+0x2e>
		printf("%c",32);
 8004b0e:	2020      	movs	r0, #32
 8004b10:	f002 fb46 	bl	80071a0 <putchar>
	for (int j=0;j<9;j++){
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	3301      	adds	r3, #1
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	ddf6      	ble.n	8004b0e <drawBullet+0x22>
	}

	if (bllt.px < 183-9){
 8004b20:	4b44      	ldr	r3, [pc, #272]	; (8004c34 <drawBullet+0x148>)
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	b21b      	sxth	r3, r3
 8004b26:	2bad      	cmp	r3, #173	; 0xad
 8004b28:	dc6d      	bgt.n	8004c06 <drawBullet+0x11a>
	bllt.px += 6;
 8004b2a:	4b42      	ldr	r3, [pc, #264]	; (8004c34 <drawBullet+0x148>)
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b21b      	sxth	r3, r3
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3306      	adds	r3, #6
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	b21a      	sxth	r2, r3
 8004b38:	4b3e      	ldr	r3, [pc, #248]	; (8004c34 <drawBullet+0x148>)
 8004b3a:	801a      	strh	r2, [r3, #0]
	gotoxy(bllt.px,bllt.py);
 8004b3c:	4b3d      	ldr	r3, [pc, #244]	; (8004c34 <drawBullet+0x148>)
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b21b      	sxth	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	4b3b      	ldr	r3, [pc, #236]	; (8004c34 <drawBullet+0x148>)
 8004b46:	885b      	ldrh	r3, [r3, #2]
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	f7ff ff21 	bl	8004994 <gotoxy>

	for(int i=0; i<3;i++){
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e010      	b.n	8004b7a <drawBullet+0x8e>
		for (int j=0;j<3;j++){
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e007      	b.n	8004b6e <drawBullet+0x82>
			printf("%c",176+i);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	33b0      	adds	r3, #176	; 0xb0
 8004b62:	4618      	mov	r0, r3
 8004b64:	f002 fb1c 	bl	80071a0 <putchar>
		for (int j=0;j<3;j++){
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	ddf4      	ble.n	8004b5e <drawBullet+0x72>
	for(int i=0; i<3;i++){
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	3301      	adds	r3, #1
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	ddeb      	ble.n	8004b58 <drawBullet+0x6c>
		}
	}

//	printf("%c%c%c",176,177,178);
	if (bllt.px <= ast1.px+10 && bllt.px >= ast1.px && bllt.py >= ast1.py-3 && bllt.py <= ast1.py+3){
 8004b80:	4b2c      	ldr	r3, [pc, #176]	; (8004c34 <drawBullet+0x148>)
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b21b      	sxth	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b2b      	ldr	r3, [pc, #172]	; (8004c38 <drawBullet+0x14c>)
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b21b      	sxth	r3, r3
 8004b8e:	330a      	adds	r3, #10
 8004b90:	429a      	cmp	r2, r3
 8004b92:	dc4a      	bgt.n	8004c2a <drawBullet+0x13e>
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <drawBullet+0x148>)
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b21a      	sxth	r2, r3
 8004b9a:	4b27      	ldr	r3, [pc, #156]	; (8004c38 <drawBullet+0x14c>)
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b21b      	sxth	r3, r3
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	db42      	blt.n	8004c2a <drawBullet+0x13e>
 8004ba4:	4b23      	ldr	r3, [pc, #140]	; (8004c34 <drawBullet+0x148>)
 8004ba6:	885b      	ldrh	r3, [r3, #2]
 8004ba8:	b21b      	sxth	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	4b22      	ldr	r3, [pc, #136]	; (8004c38 <drawBullet+0x14c>)
 8004bae:	885b      	ldrh	r3, [r3, #2]
 8004bb0:	b21b      	sxth	r3, r3
 8004bb2:	3b03      	subs	r3, #3
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	db38      	blt.n	8004c2a <drawBullet+0x13e>
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <drawBullet+0x148>)
 8004bba:	885b      	ldrh	r3, [r3, #2]
 8004bbc:	b21b      	sxth	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <drawBullet+0x14c>)
 8004bc2:	885b      	ldrh	r3, [r3, #2]
 8004bc4:	b21b      	sxth	r3, r3
 8004bc6:	3303      	adds	r3, #3
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	dc2e      	bgt.n	8004c2a <drawBullet+0x13e>
		for (int j=0;j<9;j++){
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	e005      	b.n	8004bde <drawBullet+0xf2>
			printf("%c",32);
 8004bd2:	2020      	movs	r0, #32
 8004bd4:	f002 fae4 	bl	80071a0 <putchar>
		for (int j=0;j<9;j++){
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	ddf6      	ble.n	8004bd2 <drawBullet+0xe6>
		}

		gotoxy(5,6);
 8004be4:	2106      	movs	r1, #6
 8004be6:	2005      	movs	r0, #5
 8004be8:	f7ff fed4 	bl	8004994 <gotoxy>
		printf("Hit!");
 8004bec:	4813      	ldr	r0, [pc, #76]	; (8004c3c <drawBullet+0x150>)
 8004bee:	f002 fabf 	bl	8007170 <iprintf>
		ast1.state = 1;
 8004bf2:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <drawBullet+0x14c>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	719a      	strb	r2, [r3, #6]
		bllt.state = 0;
 8004bf8:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <drawBullet+0x148>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	719a      	strb	r2, [r3, #6]
		setFreq(20);
 8004bfe:	2014      	movs	r0, #20
 8004c00:	f000 fcb6 	bl	8005570 <setFreq>





}
 8004c04:	e011      	b.n	8004c2a <drawBullet+0x13e>
		for (int j=0;j<9;j++){
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	e005      	b.n	8004c18 <drawBullet+0x12c>
			printf("%c",32);
 8004c0c:	2020      	movs	r0, #32
 8004c0e:	f002 fac7 	bl	80071a0 <putchar>
		for (int j=0;j<9;j++){
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3301      	adds	r3, #1
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	ddf6      	ble.n	8004c0c <drawBullet+0x120>
		bllt.state = 0;
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <drawBullet+0x148>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	719a      	strb	r2, [r3, #6]
		bllt.px = 6;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <drawBullet+0x148>)
 8004c26:	2206      	movs	r2, #6
 8004c28:	801a      	strh	r2, [r3, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	2000042c 	.word	0x2000042c
 8004c38:	2000041c 	.word	0x2000041c
 8004c3c:	080086d4 	.word	0x080086d4

08004c40 <asteroid1>:

void asteroid1(spaceship_t ship){
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	7138      	strb	r0, [r7, #4]
	int pos = ship.ud+29;
 8004c48:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004c4c:	331d      	adds	r3, #29
 8004c4e:	60fb      	str	r3, [r7, #12]
	static int i;
	gotoxy(ast1.px,ast1.py+29);
 8004c50:	4b5e      	ldr	r3, [pc, #376]	; (8004dcc <asteroid1+0x18c>)
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b21b      	sxth	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	4b5c      	ldr	r3, [pc, #368]	; (8004dcc <asteroid1+0x18c>)
 8004c5a:	885b      	ldrh	r3, [r3, #2]
 8004c5c:	b21b      	sxth	r3, r3
 8004c5e:	331d      	adds	r3, #29
 8004c60:	4619      	mov	r1, r3
 8004c62:	4610      	mov	r0, r2
 8004c64:	f7ff fe96 	bl	8004994 <gotoxy>
	clearAsteroSmall(ast1.px, ast1.py);
 8004c68:	4b58      	ldr	r3, [pc, #352]	; (8004dcc <asteroid1+0x18c>)
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b21b      	sxth	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4b56      	ldr	r3, [pc, #344]	; (8004dcc <asteroid1+0x18c>)
 8004c72:	885b      	ldrh	r3, [r3, #2]
 8004c74:	b21b      	sxth	r3, r3
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f000 f8ad 	bl	8004dd8 <clearAsteroSmall>

	ast1.px += ast1.vx;
 8004c7e:	4b53      	ldr	r3, [pc, #332]	; (8004dcc <asteroid1+0x18c>)
 8004c80:	791b      	ldrb	r3, [r3, #4]
 8004c82:	b259      	sxtb	r1, r3
 8004c84:	4b51      	ldr	r3, [pc, #324]	; (8004dcc <asteroid1+0x18c>)
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b21b      	sxth	r3, r3
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	b28b      	uxth	r3, r1
 8004c8e:	4413      	add	r3, r2
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b21a      	sxth	r2, r3
 8004c94:	4b4d      	ldr	r3, [pc, #308]	; (8004dcc <asteroid1+0x18c>)
 8004c96:	801a      	strh	r2, [r3, #0]

	switch(i){
 8004c98:	4b4d      	ldr	r3, [pc, #308]	; (8004dd0 <asteroid1+0x190>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d13c      	bne.n	8004d1a <asteroid1+0xda>
		case 3:
			i = 0;
 8004ca0:	4b4b      	ldr	r3, [pc, #300]	; (8004dd0 <asteroid1+0x190>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

			ast1.py += ast1.vy;
 8004ca6:	4b49      	ldr	r3, [pc, #292]	; (8004dcc <asteroid1+0x18c>)
 8004ca8:	795b      	ldrb	r3, [r3, #5]
 8004caa:	b259      	sxtb	r1, r3
 8004cac:	4b47      	ldr	r3, [pc, #284]	; (8004dcc <asteroid1+0x18c>)
 8004cae:	885b      	ldrh	r3, [r3, #2]
 8004cb0:	b21b      	sxth	r3, r3
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	b28b      	uxth	r3, r1
 8004cb6:	4413      	add	r3, r2
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	b21a      	sxth	r2, r3
 8004cbc:	4b43      	ldr	r3, [pc, #268]	; (8004dcc <asteroid1+0x18c>)
 8004cbe:	805a      	strh	r2, [r3, #2]
			if(ast1.py > pos && ast1.vy != -1){
 8004cc0:	4b42      	ldr	r3, [pc, #264]	; (8004dcc <asteroid1+0x18c>)
 8004cc2:	885b      	ldrh	r3, [r3, #2]
 8004cc4:	b21b      	sxth	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	da0f      	bge.n	8004cee <asteroid1+0xae>
 8004cce:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <asteroid1+0x18c>)
 8004cd0:	795b      	ldrb	r3, [r3, #5]
 8004cd2:	b25b      	sxtb	r3, r3
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d009      	beq.n	8004cee <asteroid1+0xae>
				ast1.vy -= 1;
 8004cda:	4b3c      	ldr	r3, [pc, #240]	; (8004dcc <asteroid1+0x18c>)
 8004cdc:	795b      	ldrb	r3, [r3, #5]
 8004cde:	b25b      	sxtb	r3, r3
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	b25a      	sxtb	r2, r3
 8004ce8:	4b38      	ldr	r3, [pc, #224]	; (8004dcc <asteroid1+0x18c>)
 8004cea:	715a      	strb	r2, [r3, #5]
				ast1.vy += 1;
			}



			break;
 8004cec:	e01b      	b.n	8004d26 <asteroid1+0xe6>
			}else if (ast1.py < pos && ast1.vy != 1){
 8004cee:	4b37      	ldr	r3, [pc, #220]	; (8004dcc <asteroid1+0x18c>)
 8004cf0:	885b      	ldrh	r3, [r3, #2]
 8004cf2:	b21b      	sxth	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	dd14      	ble.n	8004d26 <asteroid1+0xe6>
 8004cfc:	4b33      	ldr	r3, [pc, #204]	; (8004dcc <asteroid1+0x18c>)
 8004cfe:	795b      	ldrb	r3, [r3, #5]
 8004d00:	b25b      	sxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d00f      	beq.n	8004d26 <asteroid1+0xe6>
				ast1.vy += 1;
 8004d06:	4b31      	ldr	r3, [pc, #196]	; (8004dcc <asteroid1+0x18c>)
 8004d08:	795b      	ldrb	r3, [r3, #5]
 8004d0a:	b25b      	sxtb	r3, r3
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	3301      	adds	r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	b25a      	sxtb	r2, r3
 8004d14:	4b2d      	ldr	r3, [pc, #180]	; (8004dcc <asteroid1+0x18c>)
 8004d16:	715a      	strb	r2, [r3, #5]
			break;
 8004d18:	e005      	b.n	8004d26 <asteroid1+0xe6>

		default:
			i++;
 8004d1a:	4b2d      	ldr	r3, [pc, #180]	; (8004dd0 <asteroid1+0x190>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	4a2b      	ldr	r2, [pc, #172]	; (8004dd0 <asteroid1+0x190>)
 8004d22:	6013      	str	r3, [r2, #0]
			break;
 8004d24:	e000      	b.n	8004d28 <asteroid1+0xe8>
			break;
 8004d26:	bf00      	nop
	}

	gotoxy(5,4);
 8004d28:	2104      	movs	r1, #4
 8004d2a:	2005      	movs	r0, #5
 8004d2c:	f7ff fe32 	bl	8004994 <gotoxy>
	printf("ast: %03d,%02d | %03d, %03d | pos: %d",ast1.px, ast1.py, ast1.vx, ast1.vy, pos);
 8004d30:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <asteroid1+0x18c>)
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	b21b      	sxth	r3, r3
 8004d36:	4619      	mov	r1, r3
 8004d38:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <asteroid1+0x18c>)
 8004d3a:	885b      	ldrh	r3, [r3, #2]
 8004d3c:	b21b      	sxth	r3, r3
 8004d3e:	4618      	mov	r0, r3
 8004d40:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <asteroid1+0x18c>)
 8004d42:	791b      	ldrb	r3, [r3, #4]
 8004d44:	b25b      	sxtb	r3, r3
 8004d46:	461c      	mov	r4, r3
 8004d48:	4b20      	ldr	r3, [pc, #128]	; (8004dcc <asteroid1+0x18c>)
 8004d4a:	795b      	ldrb	r3, [r3, #5]
 8004d4c:	b25b      	sxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	9200      	str	r2, [sp, #0]
 8004d56:	4623      	mov	r3, r4
 8004d58:	4602      	mov	r2, r0
 8004d5a:	481e      	ldr	r0, [pc, #120]	; (8004dd4 <asteroid1+0x194>)
 8004d5c:	f002 fa08 	bl	8007170 <iprintf>


	if (ast1.px <= 10 || ast1.py >= 60 || ast1.py < 5 || ast1.state){
 8004d60:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <asteroid1+0x18c>)
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b21b      	sxth	r3, r3
 8004d66:	2b0a      	cmp	r3, #10
 8004d68:	dd0e      	ble.n	8004d88 <asteroid1+0x148>
 8004d6a:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <asteroid1+0x18c>)
 8004d6c:	885b      	ldrh	r3, [r3, #2]
 8004d6e:	b21b      	sxth	r3, r3
 8004d70:	2b3b      	cmp	r3, #59	; 0x3b
 8004d72:	dc09      	bgt.n	8004d88 <asteroid1+0x148>
 8004d74:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <asteroid1+0x18c>)
 8004d76:	885b      	ldrh	r3, [r3, #2]
 8004d78:	b21b      	sxth	r3, r3
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	dd04      	ble.n	8004d88 <asteroid1+0x148>
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <asteroid1+0x18c>)
 8004d80:	799b      	ldrb	r3, [r3, #6]
 8004d82:	b25b      	sxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d011      	beq.n	8004dac <asteroid1+0x16c>
		ast1.px = 178;
 8004d88:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <asteroid1+0x18c>)
 8004d8a:	22b2      	movs	r2, #178	; 0xb2
 8004d8c:	801a      	strh	r2, [r3, #0]
		ast1.py = 29;
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <asteroid1+0x18c>)
 8004d90:	221d      	movs	r2, #29
 8004d92:	805a      	strh	r2, [r3, #2]
		ast1.vx = -1;
 8004d94:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <asteroid1+0x18c>)
 8004d96:	22ff      	movs	r2, #255	; 0xff
 8004d98:	711a      	strb	r2, [r3, #4]
		ast1.vy = 0;
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <asteroid1+0x18c>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	715a      	strb	r2, [r3, #5]
		ast1.state = 0;
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <asteroid1+0x18c>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	719a      	strb	r2, [r3, #6]
		setFreq(0);
 8004da6:	2000      	movs	r0, #0
 8004da8:	f000 fbe2 	bl	8005570 <setFreq>
	}


	drawAsteroidSmall(ast1.px, ast1.py);
 8004dac:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <asteroid1+0x18c>)
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	b21b      	sxth	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <asteroid1+0x18c>)
 8004db6:	885b      	ldrh	r3, [r3, #2]
 8004db8:	b21b      	sxth	r3, r3
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f000 f85d 	bl	8004e7c <drawAsteroidSmall>
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd90      	pop	{r4, r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	2000041c 	.word	0x2000041c
 8004dd0:	200001b4 	.word	0x200001b4
 8004dd4:	080086dc 	.word	0x080086dc

08004dd8 <clearAsteroSmall>:

}



void clearAsteroSmall(int16_t x, int16_t y) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	460a      	mov	r2, r1
 8004de2:	80fb      	strh	r3, [r7, #6]
 8004de4:	4613      	mov	r3, r2
 8004de6:	80bb      	strh	r3, [r7, #4]
    gotoxy(x - 3, y - 2);
 8004de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dec:	1eda      	subs	r2, r3, #3
 8004dee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004df2:	3b02      	subs	r3, #2
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f7ff fdcc 	bl	8004994 <gotoxy>
    printf("       ");
 8004dfc:	481c      	ldr	r0, [pc, #112]	; (8004e70 <clearAsteroSmall+0x98>)
 8004dfe:	f002 f9b7 	bl	8007170 <iprintf>
    gotoxy(x - 4, y - 1);
 8004e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e06:	1f1a      	subs	r2, r3, #4
 8004e08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f7ff fdbf 	bl	8004994 <gotoxy>
    printf("         ");
 8004e16:	4817      	ldr	r0, [pc, #92]	; (8004e74 <clearAsteroSmall+0x9c>)
 8004e18:	f002 f9aa 	bl	8007170 <iprintf>
    gotoxy(x - 5, y);
 8004e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e20:	3b05      	subs	r3, #5
 8004e22:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004e26:	4611      	mov	r1, r2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fdb3 	bl	8004994 <gotoxy>
    printf("           ");
 8004e2e:	4812      	ldr	r0, [pc, #72]	; (8004e78 <clearAsteroSmall+0xa0>)
 8004e30:	f002 f99e 	bl	8007170 <iprintf>
    gotoxy(x - 4, y + 1);
 8004e34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e38:	1f1a      	subs	r2, r3, #4
 8004e3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f7ff fda6 	bl	8004994 <gotoxy>
    printf("         ");
 8004e48:	480a      	ldr	r0, [pc, #40]	; (8004e74 <clearAsteroSmall+0x9c>)
 8004e4a:	f002 f991 	bl	8007170 <iprintf>
    gotoxy(x - 3, y + 2);
 8004e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e52:	1eda      	subs	r2, r3, #3
 8004e54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e58:	3302      	adds	r3, #2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f7ff fd99 	bl	8004994 <gotoxy>
    printf("       ");
 8004e62:	4803      	ldr	r0, [pc, #12]	; (8004e70 <clearAsteroSmall+0x98>)
 8004e64:	f002 f984 	bl	8007170 <iprintf>
}
 8004e68:	bf00      	nop
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	08008718 	.word	0x08008718
 8004e74:	08008720 	.word	0x08008720
 8004e78:	0800872c 	.word	0x0800872c

08004e7c <drawAsteroidSmall>:

void drawAsteroidSmall(int16_t x, int16_t y) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	460a      	mov	r2, r1
 8004e86:	80fb      	strh	r3, [r7, #6]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	80bb      	strh	r3, [r7, #4]
    gotoxy(x - 3, y - 2);
 8004e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e90:	1eda      	subs	r2, r3, #3
 8004e92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e96:	3b02      	subs	r3, #2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	f7ff fd7a 	bl	8004994 <gotoxy>
    printf(".-~~~-.");
 8004ea0:	481c      	ldr	r0, [pc, #112]	; (8004f14 <drawAsteroidSmall+0x98>)
 8004ea2:	f002 f965 	bl	8007170 <iprintf>

    gotoxy(x - 4, y - 1);
 8004ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eaa:	1f1a      	subs	r2, r3, #4
 8004eac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7ff fd6d 	bl	8004994 <gotoxy>
    printf("/ O     \\");
 8004eba:	4817      	ldr	r0, [pc, #92]	; (8004f18 <drawAsteroidSmall+0x9c>)
 8004ebc:	f002 f958 	bl	8007170 <iprintf>

    gotoxy(x - 5, y);
 8004ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ec4:	3b05      	subs	r3, #5
 8004ec6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff fd61 	bl	8004994 <gotoxy>
    printf(":      o  :");
 8004ed2:	4812      	ldr	r0, [pc, #72]	; (8004f1c <drawAsteroidSmall+0xa0>)
 8004ed4:	f002 f94c 	bl	8007170 <iprintf>

    gotoxy(x - 4, y + 1);
 8004ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004edc:	1f1a      	subs	r2, r3, #4
 8004ede:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7ff fd54 	bl	8004994 <gotoxy>
    printf("\\  O    /");
 8004eec:	480c      	ldr	r0, [pc, #48]	; (8004f20 <drawAsteroidSmall+0xa4>)
 8004eee:	f002 f93f 	bl	8007170 <iprintf>

    gotoxy(x - 3, y + 2);
 8004ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef6:	1eda      	subs	r2, r3, #3
 8004ef8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004efc:	3302      	adds	r3, #2
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7ff fd47 	bl	8004994 <gotoxy>
    printf("` ~~~ '");
 8004f06:	4807      	ldr	r0, [pc, #28]	; (8004f24 <drawAsteroidSmall+0xa8>)
 8004f08:	f002 f932 	bl	8007170 <iprintf>
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	08008738 	.word	0x08008738
 8004f18:	08008740 	.word	0x08008740
 8004f1c:	0800874c 	.word	0x0800874c
 8004f20:	08008758 	.word	0x08008758
 8004f24:	08008764 	.word	0x08008764

08004f28 <playTone>:

}

char ballin[] = " 2b 2b 2b 2b  3c";

void playTone(char s[]){
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	6078      	str	r0, [r7, #4]
	static int i;
	int buzzTone = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]

	int length = strlen(s);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fb f94b 	bl	80001d0 <strlen>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	60bb      	str	r3, [r7, #8]

	switch(s[i]){
 8004f3e:	4bca      	ldr	r3, [pc, #808]	; (8005268 <playTone+0x340>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4413      	add	r3, r2
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	3b31      	subs	r3, #49	; 0x31
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	f200 82d7 	bhi.w	8005500 <playTone+0x5d8>
 8004f52:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <playTone+0x30>)
 8004f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f58:	08004f6d 	.word	0x08004f6d
 8004f5c:	0800507d 	.word	0x0800507d
 8004f60:	0800519d 	.word	0x0800519d
 8004f64:	080052b1 	.word	0x080052b1
 8004f68:	080053d9 	.word	0x080053d9
	case '1':
		i++;
 8004f6c:	4bbe      	ldr	r3, [pc, #760]	; (8005268 <playTone+0x340>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	4abd      	ldr	r2, [pc, #756]	; (8005268 <playTone+0x340>)
 8004f74:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 8004f76:	4bbc      	ldr	r3, [pc, #752]	; (8005268 <playTone+0x340>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4413      	add	r3, r2
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	3b41      	subs	r3, #65	; 0x41
 8004f84:	2b26      	cmp	r3, #38	; 0x26
 8004f86:	d875      	bhi.n	8005074 <playTone+0x14c>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <playTone+0x68>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08005069 	.word	0x08005069
 8004f94:	08005075 	.word	0x08005075
 8004f98:	08005033 	.word	0x08005033
 8004f9c:	0800503f 	.word	0x0800503f
 8004fa0:	08005075 	.word	0x08005075
 8004fa4:	08005051 	.word	0x08005051
 8004fa8:	0800505d 	.word	0x0800505d
 8004fac:	08005075 	.word	0x08005075
 8004fb0:	08005075 	.word	0x08005075
 8004fb4:	08005075 	.word	0x08005075
 8004fb8:	08005075 	.word	0x08005075
 8004fbc:	08005075 	.word	0x08005075
 8004fc0:	08005075 	.word	0x08005075
 8004fc4:	08005075 	.word	0x08005075
 8004fc8:	08005075 	.word	0x08005075
 8004fcc:	08005075 	.word	0x08005075
 8004fd0:	08005075 	.word	0x08005075
 8004fd4:	08005075 	.word	0x08005075
 8004fd8:	08005075 	.word	0x08005075
 8004fdc:	08005075 	.word	0x08005075
 8004fe0:	08005075 	.word	0x08005075
 8004fe4:	08005075 	.word	0x08005075
 8004fe8:	08005075 	.word	0x08005075
 8004fec:	08005075 	.word	0x08005075
 8004ff0:	08005075 	.word	0x08005075
 8004ff4:	08005075 	.word	0x08005075
 8004ff8:	08005075 	.word	0x08005075
 8004ffc:	08005075 	.word	0x08005075
 8005000:	08005075 	.word	0x08005075
 8005004:	08005075 	.word	0x08005075
 8005008:	08005075 	.word	0x08005075
 800500c:	08005075 	.word	0x08005075
 8005010:	08005063 	.word	0x08005063
 8005014:	0800506f 	.word	0x0800506f
 8005018:	0800502d 	.word	0x0800502d
 800501c:	08005039 	.word	0x08005039
 8005020:	08005045 	.word	0x08005045
 8005024:	0800504b 	.word	0x0800504b
 8005028:	08005057 	.word	0x08005057
			case 'c':
				buzzTone = 33;
 800502c:	2321      	movs	r3, #33	; 0x21
 800502e:	60fb      	str	r3, [r7, #12]
				break;
 8005030:	e023      	b.n	800507a <playTone+0x152>
			case 'C':
				buzzTone = 35;
 8005032:	2323      	movs	r3, #35	; 0x23
 8005034:	60fb      	str	r3, [r7, #12]
				break;
 8005036:	e020      	b.n	800507a <playTone+0x152>

			case 'd':
				buzzTone = 37;
 8005038:	2325      	movs	r3, #37	; 0x25
 800503a:	60fb      	str	r3, [r7, #12]
				break;
 800503c:	e01d      	b.n	800507a <playTone+0x152>
			case 'D':
				buzzTone = 39;
 800503e:	2327      	movs	r3, #39	; 0x27
 8005040:	60fb      	str	r3, [r7, #12]
				break;
 8005042:	e01a      	b.n	800507a <playTone+0x152>

			case 'e':
				buzzTone = 41;
 8005044:	2329      	movs	r3, #41	; 0x29
 8005046:	60fb      	str	r3, [r7, #12]
				break;
 8005048:	e017      	b.n	800507a <playTone+0x152>

			case 'f':
				buzzTone = 44;
 800504a:	232c      	movs	r3, #44	; 0x2c
 800504c:	60fb      	str	r3, [r7, #12]
				break;
 800504e:	e014      	b.n	800507a <playTone+0x152>
			case 'F':
				buzzTone = 46;
 8005050:	232e      	movs	r3, #46	; 0x2e
 8005052:	60fb      	str	r3, [r7, #12]
				break;
 8005054:	e011      	b.n	800507a <playTone+0x152>

			case 'g':
				buzzTone = 49;
 8005056:	2331      	movs	r3, #49	; 0x31
 8005058:	60fb      	str	r3, [r7, #12]
				break;
 800505a:	e00e      	b.n	800507a <playTone+0x152>
			case 'G':
				buzzTone = 52;
 800505c:	2334      	movs	r3, #52	; 0x34
 800505e:	60fb      	str	r3, [r7, #12]
				break;
 8005060:	e00b      	b.n	800507a <playTone+0x152>

			case 'a':
				buzzTone = 55;
 8005062:	2337      	movs	r3, #55	; 0x37
 8005064:	60fb      	str	r3, [r7, #12]
				break;
 8005066:	e008      	b.n	800507a <playTone+0x152>
			case 'A':
				buzzTone = 58;
 8005068:	233a      	movs	r3, #58	; 0x3a
 800506a:	60fb      	str	r3, [r7, #12]
				break;
 800506c:	e005      	b.n	800507a <playTone+0x152>

			case 'b':
				buzzTone = 62;
 800506e:	233e      	movs	r3, #62	; 0x3e
 8005070:	60fb      	str	r3, [r7, #12]
				break;
 8005072:	e002      	b.n	800507a <playTone+0x152>
			default:
				buzzTone = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
				break;
 8005078:	bf00      	nop
		}
		break;
 800507a:	e244      	b.n	8005506 <playTone+0x5de>
	case '2':
		i++;
 800507c:	4b7a      	ldr	r3, [pc, #488]	; (8005268 <playTone+0x340>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3301      	adds	r3, #1
 8005082:	4a79      	ldr	r2, [pc, #484]	; (8005268 <playTone+0x340>)
 8005084:	6013      	str	r3, [r2, #0]
		printf("%c",s[i]);
 8005086:	4b78      	ldr	r3, [pc, #480]	; (8005268 <playTone+0x340>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4413      	add	r3, r2
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f002 f884 	bl	80071a0 <putchar>
		switch(s[i]){
 8005098:	4b73      	ldr	r3, [pc, #460]	; (8005268 <playTone+0x340>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	3b41      	subs	r3, #65	; 0x41
 80050a6:	2b26      	cmp	r3, #38	; 0x26
 80050a8:	d874      	bhi.n	8005194 <playTone+0x26c>
 80050aa:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <playTone+0x188>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	08005189 	.word	0x08005189
 80050b4:	08005195 	.word	0x08005195
 80050b8:	08005153 	.word	0x08005153
 80050bc:	0800515f 	.word	0x0800515f
 80050c0:	08005195 	.word	0x08005195
 80050c4:	08005171 	.word	0x08005171
 80050c8:	0800517d 	.word	0x0800517d
 80050cc:	08005195 	.word	0x08005195
 80050d0:	08005195 	.word	0x08005195
 80050d4:	08005195 	.word	0x08005195
 80050d8:	08005195 	.word	0x08005195
 80050dc:	08005195 	.word	0x08005195
 80050e0:	08005195 	.word	0x08005195
 80050e4:	08005195 	.word	0x08005195
 80050e8:	08005195 	.word	0x08005195
 80050ec:	08005195 	.word	0x08005195
 80050f0:	08005195 	.word	0x08005195
 80050f4:	08005195 	.word	0x08005195
 80050f8:	08005195 	.word	0x08005195
 80050fc:	08005195 	.word	0x08005195
 8005100:	08005195 	.word	0x08005195
 8005104:	08005195 	.word	0x08005195
 8005108:	08005195 	.word	0x08005195
 800510c:	08005195 	.word	0x08005195
 8005110:	08005195 	.word	0x08005195
 8005114:	08005195 	.word	0x08005195
 8005118:	08005195 	.word	0x08005195
 800511c:	08005195 	.word	0x08005195
 8005120:	08005195 	.word	0x08005195
 8005124:	08005195 	.word	0x08005195
 8005128:	08005195 	.word	0x08005195
 800512c:	08005195 	.word	0x08005195
 8005130:	08005183 	.word	0x08005183
 8005134:	0800518f 	.word	0x0800518f
 8005138:	0800514d 	.word	0x0800514d
 800513c:	08005159 	.word	0x08005159
 8005140:	08005165 	.word	0x08005165
 8005144:	0800516b 	.word	0x0800516b
 8005148:	08005177 	.word	0x08005177
			case 'c':
				buzzTone = 65;
 800514c:	2341      	movs	r3, #65	; 0x41
 800514e:	60fb      	str	r3, [r7, #12]
				break;
 8005150:	e023      	b.n	800519a <playTone+0x272>
			case 'C':
				buzzTone = 69;
 8005152:	2345      	movs	r3, #69	; 0x45
 8005154:	60fb      	str	r3, [r7, #12]
				break;
 8005156:	e020      	b.n	800519a <playTone+0x272>

			case 'd':
				buzzTone = 73;
 8005158:	2349      	movs	r3, #73	; 0x49
 800515a:	60fb      	str	r3, [r7, #12]
				break;
 800515c:	e01d      	b.n	800519a <playTone+0x272>
			case 'D':
				buzzTone = 78;
 800515e:	234e      	movs	r3, #78	; 0x4e
 8005160:	60fb      	str	r3, [r7, #12]
				break;
 8005162:	e01a      	b.n	800519a <playTone+0x272>

			case 'e':
				buzzTone = 82;
 8005164:	2352      	movs	r3, #82	; 0x52
 8005166:	60fb      	str	r3, [r7, #12]
				break;
 8005168:	e017      	b.n	800519a <playTone+0x272>

			case 'f':
				buzzTone = 87;
 800516a:	2357      	movs	r3, #87	; 0x57
 800516c:	60fb      	str	r3, [r7, #12]
				break;
 800516e:	e014      	b.n	800519a <playTone+0x272>
			case 'F':
				buzzTone = 93;
 8005170:	235d      	movs	r3, #93	; 0x5d
 8005172:	60fb      	str	r3, [r7, #12]
				break;
 8005174:	e011      	b.n	800519a <playTone+0x272>

			case 'g':
				buzzTone = 98;
 8005176:	2362      	movs	r3, #98	; 0x62
 8005178:	60fb      	str	r3, [r7, #12]
				break;
 800517a:	e00e      	b.n	800519a <playTone+0x272>
			case 'G':
				buzzTone = 104;
 800517c:	2368      	movs	r3, #104	; 0x68
 800517e:	60fb      	str	r3, [r7, #12]
				break;
 8005180:	e00b      	b.n	800519a <playTone+0x272>

			case 'a':
				buzzTone = 110;
 8005182:	236e      	movs	r3, #110	; 0x6e
 8005184:	60fb      	str	r3, [r7, #12]
				break;
 8005186:	e008      	b.n	800519a <playTone+0x272>
			case 'A':
				buzzTone = 117;
 8005188:	2375      	movs	r3, #117	; 0x75
 800518a:	60fb      	str	r3, [r7, #12]
				break;
 800518c:	e005      	b.n	800519a <playTone+0x272>

			case 'b':
				buzzTone = 123;
 800518e:	237b      	movs	r3, #123	; 0x7b
 8005190:	60fb      	str	r3, [r7, #12]
				break;
 8005192:	e002      	b.n	800519a <playTone+0x272>
			default:
				buzzTone = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
				break;
 8005198:	bf00      	nop
		}
	break;
 800519a:	e1b4      	b.n	8005506 <playTone+0x5de>

	case '3':
		i++;
 800519c:	4b32      	ldr	r3, [pc, #200]	; (8005268 <playTone+0x340>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4a31      	ldr	r2, [pc, #196]	; (8005268 <playTone+0x340>)
 80051a4:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 80051a6:	4b30      	ldr	r3, [pc, #192]	; (8005268 <playTone+0x340>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	3b41      	subs	r3, #65	; 0x41
 80051b4:	2b26      	cmp	r3, #38	; 0x26
 80051b6:	d877      	bhi.n	80052a8 <playTone+0x380>
 80051b8:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <playTone+0x298>)
 80051ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051be:	bf00      	nop
 80051c0:	0800529d 	.word	0x0800529d
 80051c4:	080052a9 	.word	0x080052a9
 80051c8:	08005263 	.word	0x08005263
 80051cc:	08005273 	.word	0x08005273
 80051d0:	080052a9 	.word	0x080052a9
 80051d4:	08005285 	.word	0x08005285
 80051d8:	08005291 	.word	0x08005291
 80051dc:	080052a9 	.word	0x080052a9
 80051e0:	080052a9 	.word	0x080052a9
 80051e4:	080052a9 	.word	0x080052a9
 80051e8:	080052a9 	.word	0x080052a9
 80051ec:	080052a9 	.word	0x080052a9
 80051f0:	080052a9 	.word	0x080052a9
 80051f4:	080052a9 	.word	0x080052a9
 80051f8:	080052a9 	.word	0x080052a9
 80051fc:	080052a9 	.word	0x080052a9
 8005200:	080052a9 	.word	0x080052a9
 8005204:	080052a9 	.word	0x080052a9
 8005208:	080052a9 	.word	0x080052a9
 800520c:	080052a9 	.word	0x080052a9
 8005210:	080052a9 	.word	0x080052a9
 8005214:	080052a9 	.word	0x080052a9
 8005218:	080052a9 	.word	0x080052a9
 800521c:	080052a9 	.word	0x080052a9
 8005220:	080052a9 	.word	0x080052a9
 8005224:	080052a9 	.word	0x080052a9
 8005228:	080052a9 	.word	0x080052a9
 800522c:	080052a9 	.word	0x080052a9
 8005230:	080052a9 	.word	0x080052a9
 8005234:	080052a9 	.word	0x080052a9
 8005238:	080052a9 	.word	0x080052a9
 800523c:	080052a9 	.word	0x080052a9
 8005240:	08005297 	.word	0x08005297
 8005244:	080052a3 	.word	0x080052a3
 8005248:	0800525d 	.word	0x0800525d
 800524c:	0800526d 	.word	0x0800526d
 8005250:	08005279 	.word	0x08005279
 8005254:	0800527f 	.word	0x0800527f
 8005258:	0800528b 	.word	0x0800528b
			case 'c':
				buzzTone = 131;
 800525c:	2383      	movs	r3, #131	; 0x83
 800525e:	60fb      	str	r3, [r7, #12]
				break;
 8005260:	e025      	b.n	80052ae <playTone+0x386>
			case 'C':
				buzzTone = 139;
 8005262:	238b      	movs	r3, #139	; 0x8b
 8005264:	60fb      	str	r3, [r7, #12]
				break;
 8005266:	e022      	b.n	80052ae <playTone+0x386>
 8005268:	200001b8 	.word	0x200001b8

			case 'd':
				buzzTone = 147;
 800526c:	2393      	movs	r3, #147	; 0x93
 800526e:	60fb      	str	r3, [r7, #12]
				break;
 8005270:	e01d      	b.n	80052ae <playTone+0x386>
			case 'D':
				buzzTone = 156;
 8005272:	239c      	movs	r3, #156	; 0x9c
 8005274:	60fb      	str	r3, [r7, #12]
				break;
 8005276:	e01a      	b.n	80052ae <playTone+0x386>

			case 'e':
				buzzTone = 165;
 8005278:	23a5      	movs	r3, #165	; 0xa5
 800527a:	60fb      	str	r3, [r7, #12]
				break;
 800527c:	e017      	b.n	80052ae <playTone+0x386>

			case 'f':
				buzzTone = 175;
 800527e:	23af      	movs	r3, #175	; 0xaf
 8005280:	60fb      	str	r3, [r7, #12]
				break;
 8005282:	e014      	b.n	80052ae <playTone+0x386>
			case 'F':
				buzzTone = 185;
 8005284:	23b9      	movs	r3, #185	; 0xb9
 8005286:	60fb      	str	r3, [r7, #12]
				break;
 8005288:	e011      	b.n	80052ae <playTone+0x386>

			case 'g':
				buzzTone = 196;
 800528a:	23c4      	movs	r3, #196	; 0xc4
 800528c:	60fb      	str	r3, [r7, #12]
				break;
 800528e:	e00e      	b.n	80052ae <playTone+0x386>
			case 'G':
				buzzTone = 208;
 8005290:	23d0      	movs	r3, #208	; 0xd0
 8005292:	60fb      	str	r3, [r7, #12]
				break;
 8005294:	e00b      	b.n	80052ae <playTone+0x386>

			case 'a':
				buzzTone = 220;
 8005296:	23dc      	movs	r3, #220	; 0xdc
 8005298:	60fb      	str	r3, [r7, #12]
				break;
 800529a:	e008      	b.n	80052ae <playTone+0x386>
			case 'A':
				buzzTone = 233;
 800529c:	23e9      	movs	r3, #233	; 0xe9
 800529e:	60fb      	str	r3, [r7, #12]
				break;
 80052a0:	e005      	b.n	80052ae <playTone+0x386>

			case 'b':
				buzzTone = 247;
 80052a2:	23f7      	movs	r3, #247	; 0xf7
 80052a4:	60fb      	str	r3, [r7, #12]
				break;
 80052a6:	e002      	b.n	80052ae <playTone+0x386>
			default:
				buzzTone = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
				break;
 80052ac:	bf00      	nop
		}
		break;
 80052ae:	e12a      	b.n	8005506 <playTone+0x5de>

	case '4':
		i++;
 80052b0:	4bad      	ldr	r3, [pc, #692]	; (8005568 <playTone+0x640>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	4aac      	ldr	r2, [pc, #688]	; (8005568 <playTone+0x640>)
 80052b8:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 80052ba:	4bab      	ldr	r3, [pc, #684]	; (8005568 <playTone+0x640>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4413      	add	r3, r2
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	3b41      	subs	r3, #65	; 0x41
 80052c8:	2b26      	cmp	r3, #38	; 0x26
 80052ca:	f200 8081 	bhi.w	80053d0 <playTone+0x4a8>
 80052ce:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <playTone+0x3ac>)
 80052d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d4:	080053c1 	.word	0x080053c1
 80052d8:	080053d1 	.word	0x080053d1
 80052dc:	08005379 	.word	0x08005379
 80052e0:	08005389 	.word	0x08005389
 80052e4:	080053d1 	.word	0x080053d1
 80052e8:	080053a1 	.word	0x080053a1
 80052ec:	080053b1 	.word	0x080053b1
 80052f0:	080053d1 	.word	0x080053d1
 80052f4:	080053d1 	.word	0x080053d1
 80052f8:	080053d1 	.word	0x080053d1
 80052fc:	080053d1 	.word	0x080053d1
 8005300:	080053d1 	.word	0x080053d1
 8005304:	080053d1 	.word	0x080053d1
 8005308:	080053d1 	.word	0x080053d1
 800530c:	080053d1 	.word	0x080053d1
 8005310:	080053d1 	.word	0x080053d1
 8005314:	080053d1 	.word	0x080053d1
 8005318:	080053d1 	.word	0x080053d1
 800531c:	080053d1 	.word	0x080053d1
 8005320:	080053d1 	.word	0x080053d1
 8005324:	080053d1 	.word	0x080053d1
 8005328:	080053d1 	.word	0x080053d1
 800532c:	080053d1 	.word	0x080053d1
 8005330:	080053d1 	.word	0x080053d1
 8005334:	080053d1 	.word	0x080053d1
 8005338:	080053d1 	.word	0x080053d1
 800533c:	080053d1 	.word	0x080053d1
 8005340:	080053d1 	.word	0x080053d1
 8005344:	080053d1 	.word	0x080053d1
 8005348:	080053d1 	.word	0x080053d1
 800534c:	080053d1 	.word	0x080053d1
 8005350:	080053d1 	.word	0x080053d1
 8005354:	080053b9 	.word	0x080053b9
 8005358:	080053c9 	.word	0x080053c9
 800535c:	08005371 	.word	0x08005371
 8005360:	08005381 	.word	0x08005381
 8005364:	08005391 	.word	0x08005391
 8005368:	08005399 	.word	0x08005399
 800536c:	080053a9 	.word	0x080053a9
			case 'c':
				buzzTone = 262;
 8005370:	f44f 7383 	mov.w	r3, #262	; 0x106
 8005374:	60fb      	str	r3, [r7, #12]
				break;
 8005376:	e02e      	b.n	80053d6 <playTone+0x4ae>
			case 'C':
				buzzTone = 277;
 8005378:	f240 1315 	movw	r3, #277	; 0x115
 800537c:	60fb      	str	r3, [r7, #12]
				break;
 800537e:	e02a      	b.n	80053d6 <playTone+0x4ae>

			case 'd':
				buzzTone = 294;
 8005380:	f44f 7393 	mov.w	r3, #294	; 0x126
 8005384:	60fb      	str	r3, [r7, #12]
				break;
 8005386:	e026      	b.n	80053d6 <playTone+0x4ae>
			case 'D':
				buzzTone = 311;
 8005388:	f240 1337 	movw	r3, #311	; 0x137
 800538c:	60fb      	str	r3, [r7, #12]
				break;
 800538e:	e022      	b.n	80053d6 <playTone+0x4ae>

			case 'e':
				buzzTone = 330;
 8005390:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8005394:	60fb      	str	r3, [r7, #12]
				break;
 8005396:	e01e      	b.n	80053d6 <playTone+0x4ae>

			case 'f':
				buzzTone = 349;
 8005398:	f240 135d 	movw	r3, #349	; 0x15d
 800539c:	60fb      	str	r3, [r7, #12]
				break;
 800539e:	e01a      	b.n	80053d6 <playTone+0x4ae>
			case 'F':
				buzzTone = 370;
 80053a0:	f44f 73b9 	mov.w	r3, #370	; 0x172
 80053a4:	60fb      	str	r3, [r7, #12]
				break;
 80053a6:	e016      	b.n	80053d6 <playTone+0x4ae>

			case 'g':
				buzzTone = 392;
 80053a8:	f44f 73c4 	mov.w	r3, #392	; 0x188
 80053ac:	60fb      	str	r3, [r7, #12]
				break;
 80053ae:	e012      	b.n	80053d6 <playTone+0x4ae>
			case 'G':
				buzzTone = 415;
 80053b0:	f240 139f 	movw	r3, #415	; 0x19f
 80053b4:	60fb      	str	r3, [r7, #12]
				break;
 80053b6:	e00e      	b.n	80053d6 <playTone+0x4ae>

			case 'a':
				buzzTone = 440;
 80053b8:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80053bc:	60fb      	str	r3, [r7, #12]
				break;
 80053be:	e00a      	b.n	80053d6 <playTone+0x4ae>
			case 'A':
				buzzTone = 466;
 80053c0:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 80053c4:	60fb      	str	r3, [r7, #12]
				break;
 80053c6:	e006      	b.n	80053d6 <playTone+0x4ae>

			case 'b':
				buzzTone = 494;
 80053c8:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 80053cc:	60fb      	str	r3, [r7, #12]
				break;
 80053ce:	e002      	b.n	80053d6 <playTone+0x4ae>
			default:
				buzzTone = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
				break;
 80053d4:	bf00      	nop
		}
		break;
 80053d6:	e096      	b.n	8005506 <playTone+0x5de>

	case '5':
		i++;
 80053d8:	4b63      	ldr	r3, [pc, #396]	; (8005568 <playTone+0x640>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3301      	adds	r3, #1
 80053de:	4a62      	ldr	r2, [pc, #392]	; (8005568 <playTone+0x640>)
 80053e0:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 80053e2:	4b61      	ldr	r3, [pc, #388]	; (8005568 <playTone+0x640>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4413      	add	r3, r2
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	3b41      	subs	r3, #65	; 0x41
 80053f0:	2b26      	cmp	r3, #38	; 0x26
 80053f2:	f200 8081 	bhi.w	80054f8 <playTone+0x5d0>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <playTone+0x4d4>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	080054e9 	.word	0x080054e9
 8005400:	080054f9 	.word	0x080054f9
 8005404:	080054a1 	.word	0x080054a1
 8005408:	080054b1 	.word	0x080054b1
 800540c:	080054f9 	.word	0x080054f9
 8005410:	080054c9 	.word	0x080054c9
 8005414:	080054d9 	.word	0x080054d9
 8005418:	080054f9 	.word	0x080054f9
 800541c:	080054f9 	.word	0x080054f9
 8005420:	080054f9 	.word	0x080054f9
 8005424:	080054f9 	.word	0x080054f9
 8005428:	080054f9 	.word	0x080054f9
 800542c:	080054f9 	.word	0x080054f9
 8005430:	080054f9 	.word	0x080054f9
 8005434:	080054f9 	.word	0x080054f9
 8005438:	080054f9 	.word	0x080054f9
 800543c:	080054f9 	.word	0x080054f9
 8005440:	080054f9 	.word	0x080054f9
 8005444:	080054f9 	.word	0x080054f9
 8005448:	080054f9 	.word	0x080054f9
 800544c:	080054f9 	.word	0x080054f9
 8005450:	080054f9 	.word	0x080054f9
 8005454:	080054f9 	.word	0x080054f9
 8005458:	080054f9 	.word	0x080054f9
 800545c:	080054f9 	.word	0x080054f9
 8005460:	080054f9 	.word	0x080054f9
 8005464:	080054f9 	.word	0x080054f9
 8005468:	080054f9 	.word	0x080054f9
 800546c:	080054f9 	.word	0x080054f9
 8005470:	080054f9 	.word	0x080054f9
 8005474:	080054f9 	.word	0x080054f9
 8005478:	080054f9 	.word	0x080054f9
 800547c:	080054e1 	.word	0x080054e1
 8005480:	080054f1 	.word	0x080054f1
 8005484:	08005499 	.word	0x08005499
 8005488:	080054a9 	.word	0x080054a9
 800548c:	080054b9 	.word	0x080054b9
 8005490:	080054c1 	.word	0x080054c1
 8005494:	080054d1 	.word	0x080054d1
			case 'c':
				buzzTone = 523;
 8005498:	f240 230b 	movw	r3, #523	; 0x20b
 800549c:	60fb      	str	r3, [r7, #12]
				break;
 800549e:	e02e      	b.n	80054fe <playTone+0x5d6>
			case 'C':
				buzzTone = 554;
 80054a0:	f240 232a 	movw	r3, #554	; 0x22a
 80054a4:	60fb      	str	r3, [r7, #12]
				break;
 80054a6:	e02a      	b.n	80054fe <playTone+0x5d6>

			case 'd':
				buzzTone = 587;
 80054a8:	f240 234b 	movw	r3, #587	; 0x24b
 80054ac:	60fb      	str	r3, [r7, #12]
				break;
 80054ae:	e026      	b.n	80054fe <playTone+0x5d6>
			case 'D':
				buzzTone = 622;
 80054b0:	f240 236e 	movw	r3, #622	; 0x26e
 80054b4:	60fb      	str	r3, [r7, #12]
				break;
 80054b6:	e022      	b.n	80054fe <playTone+0x5d6>

			case 'e':
				buzzTone = 659;
 80054b8:	f240 2393 	movw	r3, #659	; 0x293
 80054bc:	60fb      	str	r3, [r7, #12]
				break;
 80054be:	e01e      	b.n	80054fe <playTone+0x5d6>

			case 'f':
				buzzTone = 698;
 80054c0:	f240 23ba 	movw	r3, #698	; 0x2ba
 80054c4:	60fb      	str	r3, [r7, #12]
				break;
 80054c6:	e01a      	b.n	80054fe <playTone+0x5d6>
			case 'F':
				buzzTone = 740;
 80054c8:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 80054cc:	60fb      	str	r3, [r7, #12]
				break;
 80054ce:	e016      	b.n	80054fe <playTone+0x5d6>

			case 'g':
				buzzTone = 784;
 80054d0:	f44f 7344 	mov.w	r3, #784	; 0x310
 80054d4:	60fb      	str	r3, [r7, #12]
				break;
 80054d6:	e012      	b.n	80054fe <playTone+0x5d6>
			case 'G':
				buzzTone = 831;
 80054d8:	f240 333f 	movw	r3, #831	; 0x33f
 80054dc:	60fb      	str	r3, [r7, #12]
				break;
 80054de:	e00e      	b.n	80054fe <playTone+0x5d6>

			case 'a':
				buzzTone = 880;
 80054e0:	f44f 735c 	mov.w	r3, #880	; 0x370
 80054e4:	60fb      	str	r3, [r7, #12]
				break;
 80054e6:	e00a      	b.n	80054fe <playTone+0x5d6>
			case 'A':
				buzzTone = 932;
 80054e8:	f44f 7369 	mov.w	r3, #932	; 0x3a4
 80054ec:	60fb      	str	r3, [r7, #12]
				break;
 80054ee:	e006      	b.n	80054fe <playTone+0x5d6>

			case 'b':
				buzzTone = 988;
 80054f0:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 80054f4:	60fb      	str	r3, [r7, #12]
				break;
 80054f6:	e002      	b.n	80054fe <playTone+0x5d6>
			default:
				buzzTone = 0;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
				break;
 80054fc:	bf00      	nop
		}
		break;
 80054fe:	e002      	b.n	8005506 <playTone+0x5de>

	default:
		buzzTone = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
		break;
 8005504:	bf00      	nop
	}

	setFreq(buzzTone);
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f832 	bl	8005570 <setFreq>
	gotoxy(1,8);
 800550c:	2108      	movs	r1, #8
 800550e:	2001      	movs	r0, #1
 8005510:	f7ff fa40 	bl	8004994 <gotoxy>
	printf("Input[%02d]: %c%c, Buzz: %04d | Length: %04d",i, s[i-1], s[i], buzzTone, length);
 8005514:	4b14      	ldr	r3, [pc, #80]	; (8005568 <playTone+0x640>)
 8005516:	6819      	ldr	r1, [r3, #0]
 8005518:	4b13      	ldr	r3, [pc, #76]	; (8005568 <playTone+0x640>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3b01      	subs	r3, #1
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4413      	add	r3, r2
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	4b10      	ldr	r3, [pc, #64]	; (8005568 <playTone+0x640>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4413      	add	r3, r2
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	4613      	mov	r3, r2
 800553e:	4602      	mov	r2, r0
 8005540:	480a      	ldr	r0, [pc, #40]	; (800556c <playTone+0x644>)
 8005542:	f001 fe15 	bl	8007170 <iprintf>

	if (i > length){
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <playTone+0x640>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	da02      	bge.n	8005556 <playTone+0x62e>
		i = 0;
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <playTone+0x640>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
	}

	i++;
 8005556:	4b04      	ldr	r3, [pc, #16]	; (8005568 <playTone+0x640>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	4a02      	ldr	r2, [pc, #8]	; (8005568 <playTone+0x640>)
 800555e:	6013      	str	r3, [r2, #0]

}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	200001b8 	.word	0x200001b8
 800556c:	080087ec 	.word	0x080087ec

08005570 <setFreq>:




void setFreq(uint16_t freq)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	80fb      	strh	r3, [r7, #6]
    // Calculate the new auto-reload value based on the desired frequency
    uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	4618      	mov	r0, r3
 800557e:	f7fa ffd1 	bl	8000524 <__aeabi_i2d>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	a11c      	add	r1, pc, #112	; (adr r1, 80055f8 <setFreq+0x88>)
 8005588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800558c:	f7fb f95e 	bl	800084c <__aeabi_ddiv>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4610      	mov	r0, r2
 8005596:	4619      	mov	r1, r3
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <setFreq+0x80>)
 800559e:	f7fb f955 	bl	800084c <__aeabi_ddiv>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <setFreq+0x84>)
 80055b0:	f7fa fe6a 	bl	8000288 <__aeabi_dsub>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4610      	mov	r0, r2
 80055ba:	4619      	mov	r1, r3
 80055bc:	f7fb fa2e 	bl	8000a1c <__aeabi_d2uiz>
 80055c0:	4603      	mov	r3, r0
 80055c2:	60fb      	str	r3, [r7, #12]

    // Set the new auto-reload value
    TIM2->ARR = reload;
 80055c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Set compare register to maintain 50% duty cycle
    TIM2->CCR3 = reload / 2;
 80055cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	63d3      	str	r3, [r2, #60]	; 0x3c

    // Generate an update event to apply the new settings
    TIM2->EGR |= TIM_EGR_UG;
 80055d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	6153      	str	r3, [r2, #20]
}
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40590000 	.word	0x40590000
 80055f4:	3ff00000 	.word	0x3ff00000
 80055f8:	00000000 	.word	0x00000000
 80055fc:	418e8480 	.word	0x418e8480

08005600 <main>:
#include "LCD.h"
#include "charset.h"


int main(void)
{
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b099      	sub	sp, #100	; 0x64
 8005604:	af02      	add	r7, sp, #8
	uart_init(250000);
 8005606:	48ce      	ldr	r0, [pc, #824]	; (8005940 <main+0x340>)
 8005608:	f7fb fe0c 	bl	8001224 <uart_init>
	clrscr();
 800560c:	f7ff f9aa 	bl	8004964 <clrscr>
	intiJoystick();
 8005610:	f7fe fcca 	bl	8003fa8 <intiJoystick>
	initLed();
 8005614:	f7ff f884 	bl	8004720 <initLed>
	lcd_init();
 8005618:	f7fc f884 	bl	8001724 <lcd_init>
	initTimer();
 800561c:	f001 fa74 	bl	8006b08 <initTimer>
	refreshRate = 5;
 8005620:	4bc8      	ldr	r3, [pc, #800]	; (8005944 <main+0x344>)
 8005622:	2205      	movs	r2, #5
 8005624:	601a      	str	r2, [r3, #0]
	duck_t duck1;
	duck_t duck2;
	spaceship_t SS;
	int playermode, diff;
	memset(buffer,0x00,512);
 8005626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562a:	2100      	movs	r1, #0
 800562c:	48c6      	ldr	r0, [pc, #792]	; (8005948 <main+0x348>)
 800562e:	f001 fd97 	bl	8007160 <memset>
	menu(&playermode,&diff);
 8005632:	f107 0214 	add.w	r2, r7, #20
 8005636:	f107 0318 	add.w	r3, r7, #24
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fde1 	bl	8006204 <menu>
	startWindow(1,1,184,58);
 8005642:	233a      	movs	r3, #58	; 0x3a
 8005644:	22b8      	movs	r2, #184	; 0xb8
 8005646:	2101      	movs	r1, #1
 8005648:	2001      	movs	r0, #1
 800564a:	f7fc f9c7 	bl	80019dc <startWindow>
	spaceship(2,27,91,31);
 800564e:	231f      	movs	r3, #31
 8005650:	225b      	movs	r2, #91	; 0x5b
 8005652:	211b      	movs	r1, #27
 8005654:	2002      	movs	r0, #2
 8005656:	f7fc fa17 	bl	8001a88 <spaceship>
	playerInSpaceR(1,23,24);
 800565a:	2218      	movs	r2, #24
 800565c:	2117      	movs	r1, #23
 800565e:	2001      	movs	r0, #1
 8005660:	f7fc ff62 	bl	8002528 <playerInSpaceR>
	playerInSpaceUSDR(2,23,32);
 8005664:	2220      	movs	r2, #32
 8005666:	2117      	movs	r1, #23
 8005668:	2002      	movs	r0, #2
 800566a:	f7fd f965 	bl	8002938 <playerInSpaceUSDR>
	windowSmp(139,4,181,6);
 800566e:	2306      	movs	r3, #6
 8005670:	22b5      	movs	r2, #181	; 0xb5
 8005672:	2104      	movs	r1, #4
 8005674:	208b      	movs	r0, #139	; 0x8b
 8005676:	f001 fca5 	bl	8006fc4 <windowSmp>
	initAstro();
 800567a:	f7ff f9b5 	bl	80049e8 <initAstro>
	SS.ud = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	773b      	strb	r3, [r7, #28]
	duck1.rl=0;
 8005682:	2300      	movs	r3, #0
 8005684:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	duck1.ud=0;
 8005688:	2300      	movs	r3, #0
 800568a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	duck2.rl = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	duck2.ud = 8;
 8005694:	2308      	movs	r3, #8
 8005696:	f887 3020 	strb.w	r3, [r7, #32]

	tid.min = 2;
 800569a:	4bac      	ldr	r3, [pc, #688]	; (800594c <main+0x34c>)
 800569c:	2202      	movs	r2, #2
 800569e:	701a      	strb	r2, [r3, #0]
	tid.sek = 0;
 80056a0:	4baa      	ldr	r3, [pc, #680]	; (800594c <main+0x34c>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	705a      	strb	r2, [r3, #1]
	tid.mil = 0;
 80056a6:	4ba9      	ldr	r3, [pc, #676]	; (800594c <main+0x34c>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	709a      	strb	r2, [r3, #2]
	tid.state = 0;
 80056ac:	4ba7      	ldr	r3, [pc, #668]	; (800594c <main+0x34c>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	70da      	strb	r2, [r3, #3]

	int alarm = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	657b      	str	r3, [r7, #84]	; 0x54
	int alarm_off = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	653b      	str	r3, [r7, #80]	; 0x50

	int i=0, keyW=0, keyA=0, keyS=0, keyD=0, keyE=0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	643b      	str	r3, [r7, #64]	; 0x40
 80056be:	2300      	movs	r3, #0
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c2:	2300      	movs	r3, #0
 80056c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80056c6:	2300      	movs	r3, #0
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ca:	2300      	movs	r3, #0
 80056cc:	633b      	str	r3, [r7, #48]	; 0x30
 80056ce:	2300      	movs	r3, #0
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uart_clear();
 80056d2:	f7fb fd85 	bl	80011e0 <uart_clear>
	char random;
	int buffer_lenght;

	int ud1 =0, lr1 =0, ud2 = 8, lr2 = 0, a = 0, b=0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	2308      	movs	r3, #8
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	2300      	movs	r3, #0
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	2300      	movs	r3, #0
 80056e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ea:	2300      	movs	r3, #0
 80056ec:	647b      	str	r3, [r7, #68]	; 0x44
	draw_gameplay_start();
 80056ee:	f7fe ff15 	bl	800451c <draw_gameplay_start>

	while(1){
		drawTime();
 80056f2:	f001 fab9 	bl	8006c68 <drawTime>
		readJoystick();
 80056f6:	f7fe fced 	bl	80040d4 <readJoystick>
		if (lcdUpdate == 0){
 80056fa:	4b95      	ldr	r3, [pc, #596]	; (8005950 <main+0x350>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10d      	bne.n	800571e <main+0x11e>
					while (lcdUpdate == 0) {
 8005702:	bf00      	nop
 8005704:	4b92      	ldr	r3, [pc, #584]	; (8005950 <main+0x350>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0fb      	beq.n	8005704 <main+0x104>
					}
					score = score + 2;
 800570c:	4b91      	ldr	r3, [pc, #580]	; (8005954 <main+0x354>)
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	3302      	adds	r3, #2
 8005714:	b29a      	uxth	r2, r3
 8005716:	4b8f      	ldr	r3, [pc, #572]	; (8005954 <main+0x354>)
 8005718:	801a      	strh	r2, [r3, #0]
					draw_score();
 800571a:	f7fe ff1f 	bl	800455c <draw_score>
				}
				if (alarm == 1) {
 800571e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005720:	2b01      	cmp	r3, #1
 8005722:	d10c      	bne.n	800573e <main+0x13e>
					alarm_off += LCD_alarm();
 8005724:	f7fe ff34 	bl	8004590 <LCD_alarm>
 8005728:	4602      	mov	r2, r0
 800572a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572c:	4413      	add	r3, r2
 800572e:	653b      	str	r3, [r7, #80]	; 0x50
					if (alarm_off == 5) {
 8005730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005732:	2b05      	cmp	r3, #5
 8005734:	d103      	bne.n	800573e <main+0x13e>
						alarm_off = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	653b      	str	r3, [r7, #80]	; 0x50
						alarm = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	657b      	str	r3, [r7, #84]	; 0x54
					}
				}
				if (alarm == 0) {
 800573e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <main+0x148>
					LCD_timer();
 8005744:	f7fe ff96 	bl	8004674 <LCD_timer>
				}

		gotoxy(10,10);
 8005748:	210a      	movs	r1, #10
 800574a:	200a      	movs	r0, #10
 800574c:	f7ff f922 	bl	8004994 <gotoxy>
		printf("Duck1 ud:%d  Duck1 rl:%d  Duck2 ud:%d Duck2 rl:%d   SS.ud = %d",duck1.ud, duck1.rl, duck2.ud, duck2.rl,SS.ud);
 8005750:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005754:	4619      	mov	r1, r3
 8005756:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800575a:	4618      	mov	r0, r3
 800575c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005760:	461c      	mov	r4, r3
 8005762:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005766:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800576a:	9201      	str	r2, [sp, #4]
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	4623      	mov	r3, r4
 8005770:	4602      	mov	r2, r0
 8005772:	4879      	ldr	r0, [pc, #484]	; (8005958 <main+0x358>)
 8005774:	f001 fcfc 	bl	8007170 <iprintf>

		fire(2,27+SS.ud,91,31+SS.ud);
 8005778:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800577c:	f103 011b 	add.w	r1, r3, #27
 8005780:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005784:	331f      	adds	r3, #31
 8005786:	225b      	movs	r2, #91	; 0x5b
 8005788:	2002      	movs	r0, #2
 800578a:	f7fc fb61 	bl	8001e50 <fire>

		if(duck1.ud == SS.ud) {
 800578e:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8005792:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005796:	429a      	cmp	r2, r3
 8005798:	d177      	bne.n	800588a <main+0x28a>
			goDuckUP1(1,22,24,&ud1,&lr1,&duck1);
 800579a:	f107 0210 	add.w	r2, r7, #16
 800579e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	f107 030c 	add.w	r3, r7, #12
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	4613      	mov	r3, r2
 80057ac:	2218      	movs	r2, #24
 80057ae:	2116      	movs	r1, #22
 80057b0:	2001      	movs	r0, #1
 80057b2:	f7fd f971 	bl	8002a98 <goDuckUP1>
			if (duck1.rl == 5 && duck2.ud == SS.ud && joy.up){
 80057b6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80057ba:	2b05      	cmp	r3, #5
 80057bc:	d11d      	bne.n	80057fa <main+0x1fa>
 80057be:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80057c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d117      	bne.n	80057fa <main+0x1fa>
 80057ca:	4b64      	ldr	r3, [pc, #400]	; (800595c <main+0x35c>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	b25b      	sxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d012      	beq.n	80057fa <main+0x1fa>
				key.up = 1;
 80057d4:	4b62      	ldr	r3, [pc, #392]	; (8005960 <main+0x360>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	701a      	strb	r2, [r3, #0]
				goDuckUP2(2,22,24,&ud2,&lr2,&duck2);
 80057da:	f107 0208 	add.w	r2, r7, #8
 80057de:	f107 0320 	add.w	r3, r7, #32
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	1d3b      	adds	r3, r7, #4
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	2218      	movs	r2, #24
 80057ec:	2116      	movs	r1, #22
 80057ee:	2002      	movs	r0, #2
 80057f0:	f7fd fac8 	bl	8002d84 <goDuckUP2>
				key.up = 0;
 80057f4:	4b5a      	ldr	r3, [pc, #360]	; (8005960 <main+0x360>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
			}
			if (duck1.rl == 5 && duck2.ud == SS.ud + 4 && joy.up){
 80057fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d11f      	bne.n	8005842 <main+0x242>
 8005802:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005806:	461a      	mov	r2, r3
 8005808:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800580c:	3304      	adds	r3, #4
 800580e:	429a      	cmp	r2, r3
 8005810:	d117      	bne.n	8005842 <main+0x242>
 8005812:	4b52      	ldr	r3, [pc, #328]	; (800595c <main+0x35c>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b25b      	sxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d012      	beq.n	8005842 <main+0x242>
				key.up = 1;
 800581c:	4b50      	ldr	r3, [pc, #320]	; (8005960 <main+0x360>)
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]
				goDuckMIDMove2(2,22,24,&ud2,&lr2,&duck2);
 8005822:	f107 0208 	add.w	r2, r7, #8
 8005826:	f107 0320 	add.w	r3, r7, #32
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	1d3b      	adds	r3, r7, #4
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	2218      	movs	r2, #24
 8005834:	2116      	movs	r1, #22
 8005836:	2002      	movs	r0, #2
 8005838:	f7fd fdce 	bl	80033d8 <goDuckMIDMove2>
				key.up = 0;
 800583c:	4b48      	ldr	r3, [pc, #288]	; (8005960 <main+0x360>)
 800583e:	2200      	movs	r2, #0
 8005840:	701a      	strb	r2, [r3, #0]
			}
			if (duck1.rl == 5 && duck2.ud == SS.ud + 8 && joy.up){
 8005842:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005846:	2b05      	cmp	r3, #5
 8005848:	d11f      	bne.n	800588a <main+0x28a>
 800584a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800584e:	461a      	mov	r2, r3
 8005850:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005854:	3308      	adds	r3, #8
 8005856:	429a      	cmp	r2, r3
 8005858:	d117      	bne.n	800588a <main+0x28a>
 800585a:	4b40      	ldr	r3, [pc, #256]	; (800595c <main+0x35c>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b25b      	sxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d012      	beq.n	800588a <main+0x28a>
				key.up = 1;
 8005864:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <main+0x360>)
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
				goDuckUSDMove2(2,22,24,&ud2,&lr2,&duck2);
 800586a:	f107 0208 	add.w	r2, r7, #8
 800586e:	f107 0320 	add.w	r3, r7, #32
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	1d3b      	adds	r3, r7, #4
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	4613      	mov	r3, r2
 800587a:	2218      	movs	r2, #24
 800587c:	2116      	movs	r1, #22
 800587e:	2002      	movs	r0, #2
 8005880:	f7fe f81e 	bl	80038c0 <goDuckUSDMove2>
				key.up = 0;
 8005884:	4b36      	ldr	r3, [pc, #216]	; (8005960 <main+0x360>)
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
			}
		}

		if(duck1.ud == SS.ud + 4 || duck1.ud == SS.ud - 4){
 800588a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800588e:	461a      	mov	r2, r3
 8005890:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005894:	3304      	adds	r3, #4
 8005896:	429a      	cmp	r2, r3
 8005898:	d007      	beq.n	80058aa <main+0x2aa>
 800589a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800589e:	461a      	mov	r2, r3
 80058a0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80058a4:	3b04      	subs	r3, #4
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d120      	bne.n	80058ec <main+0x2ec>
		goDuckMID1(1,22,24,&ud1,&lr1,&duck1);
 80058aa:	f107 0210 	add.w	r2, r7, #16
 80058ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	f107 030c 	add.w	r3, r7, #12
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	4613      	mov	r3, r2
 80058bc:	2218      	movs	r2, #24
 80058be:	2116      	movs	r1, #22
 80058c0:	2001      	movs	r0, #1
 80058c2:	f7fd fb97 	bl	8002ff4 <goDuckMID1>
		if(duck1.rl == 55 && joy.right && !CJoy.right){
 80058c6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80058ca:	2b37      	cmp	r3, #55	; 0x37
 80058cc:	d10e      	bne.n	80058ec <main+0x2ec>
 80058ce:	4b23      	ldr	r3, [pc, #140]	; (800595c <main+0x35c>)
 80058d0:	78db      	ldrb	r3, [r3, #3]
 80058d2:	b25b      	sxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d009      	beq.n	80058ec <main+0x2ec>
 80058d8:	4b22      	ldr	r3, [pc, #136]	; (8005964 <main+0x364>)
 80058da:	78db      	ldrb	r3, [r3, #3]
 80058dc:	b25b      	sxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <main+0x2ec>
//			canonFire(2,SS.ud);
			shoot(SS.ud);
 80058e2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff f8be 	bl	8004a68 <shoot>
		}
		}

		if(duck1.ud == SS.ud+8) {
 80058ec:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80058f0:	461a      	mov	r2, r3
 80058f2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80058f6:	3308      	adds	r3, #8
 80058f8:	429a      	cmp	r2, r3
 80058fa:	f040 808d 	bne.w	8005a18 <main+0x418>
		goDuckUSD1(1,22,24,&ud1,&lr1,&duck1);
 80058fe:	f107 0210 	add.w	r2, r7, #16
 8005902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	f107 030c 	add.w	r3, r7, #12
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	2218      	movs	r2, #24
 8005912:	2116      	movs	r1, #22
 8005914:	2001      	movs	r0, #1
 8005916:	f7fd fde1 	bl	80034dc <goDuckUSD1>
		if (duck1.rl == 5 && duck2.ud == SS.ud && joy.up){
 800591a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800591e:	2b05      	cmp	r3, #5
 8005920:	d132      	bne.n	8005988 <main+0x388>
 8005922:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8005926:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800592a:	429a      	cmp	r2, r3
 800592c:	d12c      	bne.n	8005988 <main+0x388>
 800592e:	4b0b      	ldr	r3, [pc, #44]	; (800595c <main+0x35c>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	b25b      	sxtb	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d027      	beq.n	8005988 <main+0x388>
			key.down = 1;
 8005938:	4b09      	ldr	r3, [pc, #36]	; (8005960 <main+0x360>)
 800593a:	2201      	movs	r2, #1
 800593c:	705a      	strb	r2, [r3, #1]
 800593e:	e013      	b.n	8005968 <main+0x368>
 8005940:	0003d090 	.word	0x0003d090
 8005944:	200001fc 	.word	0x200001fc
 8005948:	20000214 	.word	0x20000214
 800594c:	20000418 	.word	0x20000418
 8005950:	200001ec 	.word	0x200001ec
 8005954:	20000210 	.word	0x20000210
 8005958:	0800881c 	.word	0x0800881c
 800595c:	20000200 	.word	0x20000200
 8005960:	200001f4 	.word	0x200001f4
 8005964:	20000208 	.word	0x20000208
			goDuckUPMove2(2,22,24,&ud2,&lr2,&duck2);
 8005968:	f107 0208 	add.w	r2, r7, #8
 800596c:	f107 0320 	add.w	r3, r7, #32
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	1d3b      	adds	r3, r7, #4
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	4613      	mov	r3, r2
 8005978:	2218      	movs	r2, #24
 800597a:	2116      	movs	r1, #22
 800597c:	2002      	movs	r0, #2
 800597e:	f7fd faf1 	bl	8002f64 <goDuckUPMove2>
			key.down = 0;
 8005982:	4bd3      	ldr	r3, [pc, #844]	; (8005cd0 <main+0x6d0>)
 8005984:	2200      	movs	r2, #0
 8005986:	705a      	strb	r2, [r3, #1]
		}
		if (duck1.rl == 5 && duck2.ud == SS.ud + 4 && joy.up){
 8005988:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800598c:	2b05      	cmp	r3, #5
 800598e:	d11f      	bne.n	80059d0 <main+0x3d0>
 8005990:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005994:	461a      	mov	r2, r3
 8005996:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800599a:	3304      	adds	r3, #4
 800599c:	429a      	cmp	r2, r3
 800599e:	d117      	bne.n	80059d0 <main+0x3d0>
 80059a0:	4bcc      	ldr	r3, [pc, #816]	; (8005cd4 <main+0x6d4>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	b25b      	sxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d012      	beq.n	80059d0 <main+0x3d0>
			key.down = 1;
 80059aa:	4bc9      	ldr	r3, [pc, #804]	; (8005cd0 <main+0x6d0>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	705a      	strb	r2, [r3, #1]
			goDuckMIDMove2(2,22,24,&ud2,&lr2,&duck2);
 80059b0:	f107 0208 	add.w	r2, r7, #8
 80059b4:	f107 0320 	add.w	r3, r7, #32
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	1d3b      	adds	r3, r7, #4
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	4613      	mov	r3, r2
 80059c0:	2218      	movs	r2, #24
 80059c2:	2116      	movs	r1, #22
 80059c4:	2002      	movs	r0, #2
 80059c6:	f7fd fd07 	bl	80033d8 <goDuckMIDMove2>
			key.down = 0;
 80059ca:	4bc1      	ldr	r3, [pc, #772]	; (8005cd0 <main+0x6d0>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	705a      	strb	r2, [r3, #1]
		}
		if (duck1.rl == 5 && duck2.ud == SS.ud + 8 && joy.up){
 80059d0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80059d4:	2b05      	cmp	r3, #5
 80059d6:	d11f      	bne.n	8005a18 <main+0x418>
 80059d8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80059dc:	461a      	mov	r2, r3
 80059de:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80059e2:	3308      	adds	r3, #8
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d117      	bne.n	8005a18 <main+0x418>
 80059e8:	4bba      	ldr	r3, [pc, #744]	; (8005cd4 <main+0x6d4>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	b25b      	sxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d012      	beq.n	8005a18 <main+0x418>
		key.down = 1;
 80059f2:	4bb7      	ldr	r3, [pc, #732]	; (8005cd0 <main+0x6d0>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	705a      	strb	r2, [r3, #1]
		goDuckUSDMove2(2,22,24,&ud2,&lr2,&duck2);
 80059f8:	f107 0208 	add.w	r2, r7, #8
 80059fc:	f107 0320 	add.w	r3, r7, #32
 8005a00:	9301      	str	r3, [sp, #4]
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	4613      	mov	r3, r2
 8005a08:	2218      	movs	r2, #24
 8005a0a:	2116      	movs	r1, #22
 8005a0c:	2002      	movs	r0, #2
 8005a0e:	f7fd ff57 	bl	80038c0 <goDuckUSDMove2>
		key.down = 0;
 8005a12:	4baf      	ldr	r3, [pc, #700]	; (8005cd0 <main+0x6d0>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	705a      	strb	r2, [r3, #1]
		}
		}

		if(duck1.rl == 5 && joy.up && !CJoy.up && SS.ud == duck1.ud+1 & SS.ud != -20){
 8005a18:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005a1c:	2b05      	cmp	r3, #5
 8005a1e:	d148      	bne.n	8005ab2 <main+0x4b2>
 8005a20:	4bac      	ldr	r3, [pc, #688]	; (8005cd4 <main+0x6d4>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	b25b      	sxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d043      	beq.n	8005ab2 <main+0x4b2>
 8005a2a:	4bab      	ldr	r3, [pc, #684]	; (8005cd8 <main+0x6d8>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b25b      	sxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d13e      	bne.n	8005ab2 <main+0x4b2>
 8005a34:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005a3e:	3301      	adds	r3, #1
 8005a40:	429a      	cmp	r2, r3
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005a4e:	f113 0f14 	cmn.w	r3, #20
 8005a52:	bf14      	ite	ne
 8005a54:	2301      	movne	r3, #1
 8005a56:	2300      	moveq	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d027      	beq.n	8005ab2 <main+0x4b2>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8005a62:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005a66:	f103 011b 	add.w	r1, r3, #27
 8005a6a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005a6e:	331f      	adds	r3, #31
 8005a70:	225b      	movs	r2, #91	; 0x5b
 8005a72:	2002      	movs	r0, #2
 8005a74:	f7fc f93e 	bl	8001cf4 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8005a78:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005a7c:	f103 011b 	add.w	r1, r3, #27
 8005a80:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005a84:	331f      	adds	r3, #31
 8005a86:	225b      	movs	r2, #91	; 0x5b
 8005a88:	2002      	movs	r0, #2
 8005a8a:	f7fc fbc3 	bl	8002214 <fireDelete>
		SS.ud -= 1;
 8005a8e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	b25b      	sxtb	r3, r3
 8005a9a:	773b      	strb	r3, [r7, #28]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 8005a9c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005aa0:	f103 011b 	add.w	r1, r3, #27
 8005aa4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005aa8:	331f      	adds	r3, #31
 8005aaa:	225b      	movs	r2, #91	; 0x5b
 8005aac:	2002      	movs	r0, #2
 8005aae:	f7fb ffeb 	bl	8001a88 <spaceship>
		}

		if(duck1.rl == 5 && joy.up && !CJoy.up && SS.ud == duck1.ud-9 && SS.ud != 21){
 8005ab2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d13d      	bne.n	8005b36 <main+0x536>
 8005aba:	4b86      	ldr	r3, [pc, #536]	; (8005cd4 <main+0x6d4>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b25b      	sxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d038      	beq.n	8005b36 <main+0x536>
 8005ac4:	4b84      	ldr	r3, [pc, #528]	; (8005cd8 <main+0x6d8>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d133      	bne.n	8005b36 <main+0x536>
 8005ace:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005ad8:	3b09      	subs	r3, #9
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d12b      	bne.n	8005b36 <main+0x536>
 8005ade:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ae2:	2b15      	cmp	r3, #21
 8005ae4:	d027      	beq.n	8005b36 <main+0x536>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8005ae6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005aea:	f103 011b 	add.w	r1, r3, #27
 8005aee:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005af2:	331f      	adds	r3, #31
 8005af4:	225b      	movs	r2, #91	; 0x5b
 8005af6:	2002      	movs	r0, #2
 8005af8:	f7fc f8fc 	bl	8001cf4 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8005afc:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005b00:	f103 011b 	add.w	r1, r3, #27
 8005b04:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005b08:	331f      	adds	r3, #31
 8005b0a:	225b      	movs	r2, #91	; 0x5b
 8005b0c:	2002      	movs	r0, #2
 8005b0e:	f7fc fb81 	bl	8002214 <fireDelete>
		SS.ud += 1;
 8005b12:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	3301      	adds	r3, #1
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	b25b      	sxtb	r3, r3
 8005b1e:	773b      	strb	r3, [r7, #28]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 8005b20:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005b24:	f103 011b 	add.w	r1, r3, #27
 8005b28:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005b2c:	331f      	adds	r3, #31
 8005b2e:	225b      	movs	r2, #91	; 0x5b
 8005b30:	2002      	movs	r0, #2
 8005b32:	f7fb ffa9 	bl	8001a88 <spaceship>
		}

		if (joy.up && duck1.rl != 5 && duck1.ud == SS.ud -1) {
 8005b36:	4b67      	ldr	r3, [pc, #412]	; (8005cd4 <main+0x6d4>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	b25b      	sxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d027      	beq.n	8005b90 <main+0x590>
 8005b40:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005b44:	2b05      	cmp	r3, #5
 8005b46:	d023      	beq.n	8005b90 <main+0x590>
 8005b48:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d11b      	bne.n	8005b90 <main+0x590>
		duckExplotion(22,24,&ud1,&lr1);
 8005b58:	f107 030c 	add.w	r3, r7, #12
 8005b5c:	f107 0210 	add.w	r2, r7, #16
 8005b60:	2118      	movs	r1, #24
 8005b62:	2016      	movs	r0, #22
 8005b64:	f7fe f840 	bl	8003be8 <duckExplotion>
		playerInSpaceR(1,23,24+SS.ud);
 8005b68:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005b6c:	3318      	adds	r3, #24
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2117      	movs	r1, #23
 8005b72:	2001      	movs	r0, #1
 8005b74:	f7fc fcd8 	bl	8002528 <playerInSpaceR>
		ud1 = SS.ud;
 8005b78:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005b7c:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
		duck1.ud = SS.ud;
 8005b82:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005b86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		duck1.rl = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		if (duck1.rl == 65){
 8005b90:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005b94:	2b41      	cmp	r3, #65	; 0x41
 8005b96:	d11b      	bne.n	8005bd0 <main+0x5d0>
		duckExplotion(22,24,&ud1,&lr1);
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	f107 0210 	add.w	r2, r7, #16
 8005ba0:	2118      	movs	r1, #24
 8005ba2:	2016      	movs	r0, #22
 8005ba4:	f7fe f820 	bl	8003be8 <duckExplotion>
		playerInSpaceR(1,23,24+SS.ud);
 8005ba8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005bac:	3318      	adds	r3, #24
 8005bae:	461a      	mov	r2, r3
 8005bb0:	2117      	movs	r1, #23
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	f7fc fcb8 	bl	8002528 <playerInSpaceR>
		ud1 = SS.ud;
 8005bb8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005bbc:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
		duck1.ud = SS.ud;
 8005bc2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005bc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		duck1.rl = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		if (joy.up && duck1.rl != 5 && duck1.ud == SS.ud +9) {
 8005bd0:	4b40      	ldr	r3, [pc, #256]	; (8005cd4 <main+0x6d4>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b25b      	sxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d027      	beq.n	8005c2a <main+0x62a>
 8005bda:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d023      	beq.n	8005c2a <main+0x62a>
 8005be2:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005be6:	461a      	mov	r2, r3
 8005be8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005bec:	3309      	adds	r3, #9
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d11b      	bne.n	8005c2a <main+0x62a>
		duckExplotion(22,24,&ud1,&lr1);
 8005bf2:	f107 030c 	add.w	r3, r7, #12
 8005bf6:	f107 0210 	add.w	r2, r7, #16
 8005bfa:	2118      	movs	r1, #24
 8005bfc:	2016      	movs	r0, #22
 8005bfe:	f7fd fff3 	bl	8003be8 <duckExplotion>
		playerInSpaceR(1,23,24+SS.ud);
 8005c02:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005c06:	3318      	adds	r3, #24
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2117      	movs	r1, #23
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	f7fc fc8b 	bl	8002528 <playerInSpaceR>
		ud1 = SS.ud;
 8005c12:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005c16:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
		duck1.ud = SS.ud;
 8005c1c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005c20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		duck1.rl = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}



		if(duck2.ud == SS.ud) {
 8005c2a:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8005c2e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	f040 8081 	bne.w	8005d3a <main+0x73a>
		goDuckUP2(2,22,24,&ud2,&lr2,&duck2);
 8005c38:	f107 0208 	add.w	r2, r7, #8
 8005c3c:	f107 0320 	add.w	r3, r7, #32
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	1d3b      	adds	r3, r7, #4
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	2218      	movs	r2, #24
 8005c4a:	2116      	movs	r1, #22
 8005c4c:	2002      	movs	r0, #2
 8005c4e:	f7fd f899 	bl	8002d84 <goDuckUP2>
		if (duck2.rl == 5 && duck1.ud == SS.ud && key.up){
 8005c52:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005c56:	2b05      	cmp	r3, #5
 8005c58:	d11e      	bne.n	8005c98 <main+0x698>
 8005c5a:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8005c5e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d118      	bne.n	8005c98 <main+0x698>
 8005c66:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <main+0x6d0>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	b25b      	sxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d013      	beq.n	8005c98 <main+0x698>
			joy.up = 1;
 8005c70:	4b18      	ldr	r3, [pc, #96]	; (8005cd4 <main+0x6d4>)
 8005c72:	2201      	movs	r2, #1
 8005c74:	701a      	strb	r2, [r3, #0]
			goDuckUPMove1(1,22,24,&ud1,&lr1,&duck1);
 8005c76:	f107 0210 	add.w	r2, r7, #16
 8005c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	f107 030c 	add.w	r3, r7, #12
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	4613      	mov	r3, r2
 8005c88:	2218      	movs	r2, #24
 8005c8a:	2116      	movs	r1, #22
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	f7fd f809 	bl	8002ca4 <goDuckUPMove1>
			joy.up = 0;
 8005c92:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <main+0x6d4>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	701a      	strb	r2, [r3, #0]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 4 && key.up){
 8005c98:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005c9c:	2b05      	cmp	r3, #5
 8005c9e:	d127      	bne.n	8005cf0 <main+0x6f0>
 8005ca0:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005caa:	3304      	adds	r3, #4
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d11f      	bne.n	8005cf0 <main+0x6f0>
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <main+0x6d0>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	b25b      	sxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01a      	beq.n	8005cf0 <main+0x6f0>
			joy.up = 1;
 8005cba:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <main+0x6d4>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	701a      	strb	r2, [r3, #0]
			goDuckMIDMove2(1,22,24,&ud1,&lr1,&duck1);
 8005cc0:	f107 0210 	add.w	r2, r7, #16
 8005cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	f107 030c 	add.w	r3, r7, #12
 8005cce:	e005      	b.n	8005cdc <main+0x6dc>
 8005cd0:	200001f4 	.word	0x200001f4
 8005cd4:	20000200 	.word	0x20000200
 8005cd8:	20000208 	.word	0x20000208
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	2218      	movs	r2, #24
 8005ce2:	2116      	movs	r1, #22
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	f7fd fb77 	bl	80033d8 <goDuckMIDMove2>
			joy.up = 0;
 8005cea:	4bd4      	ldr	r3, [pc, #848]	; (800603c <main+0xa3c>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	701a      	strb	r2, [r3, #0]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 8 && key.up){
 8005cf0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005cf4:	2b05      	cmp	r3, #5
 8005cf6:	d120      	bne.n	8005d3a <main+0x73a>
 8005cf8:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005d02:	3308      	adds	r3, #8
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d118      	bne.n	8005d3a <main+0x73a>
 8005d08:	4bcd      	ldr	r3, [pc, #820]	; (8006040 <main+0xa40>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	b25b      	sxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d013      	beq.n	8005d3a <main+0x73a>
			joy.up = 1;
 8005d12:	4bca      	ldr	r3, [pc, #808]	; (800603c <main+0xa3c>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	701a      	strb	r2, [r3, #0]
			goDuckUSDMove2(1,22,24,&ud1,&lr1,&duck1);
 8005d18:	f107 0210 	add.w	r2, r7, #16
 8005d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	f107 030c 	add.w	r3, r7, #12
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	2218      	movs	r2, #24
 8005d2c:	2116      	movs	r1, #22
 8005d2e:	2001      	movs	r0, #1
 8005d30:	f7fd fdc6 	bl	80038c0 <goDuckUSDMove2>
			joy.up = 0;
 8005d34:	4bc1      	ldr	r3, [pc, #772]	; (800603c <main+0xa3c>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
		}
		}

		if(duck2.ud == SS.ud + 4 || duck2.ud == SS.ud - 4){
 8005d3a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005d44:	3304      	adds	r3, #4
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d007      	beq.n	8005d5a <main+0x75a>
 8005d4a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005d54:	3b04      	subs	r3, #4
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d11a      	bne.n	8005d90 <main+0x790>
		goDuckMID2(2,22,24,&ud2,&lr2,&duck2);
 8005d5a:	f107 0208 	add.w	r2, r7, #8
 8005d5e:	f107 0320 	add.w	r3, r7, #32
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	1d3b      	adds	r3, r7, #4
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	2218      	movs	r2, #24
 8005d6c:	2116      	movs	r1, #22
 8005d6e:	2002      	movs	r0, #2
 8005d70:	f7fd fa44 	bl	80031fc <goDuckMID2>
		if(duck2.rl == 55 && key.right){
 8005d74:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005d78:	2b37      	cmp	r3, #55	; 0x37
 8005d7a:	d109      	bne.n	8005d90 <main+0x790>
 8005d7c:	4bb0      	ldr	r3, [pc, #704]	; (8006040 <main+0xa40>)
 8005d7e:	78db      	ldrb	r3, [r3, #3]
 8005d80:	b25b      	sxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <main+0x790>
//		canonFire(2,SS.ud);
			shoot(SS.ud);
 8005d86:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fe6c 	bl	8004a68 <shoot>
		}
		}

		if(duck2.ud == SS.ud+8) {
 8005d90:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005d94:	461a      	mov	r2, r3
 8005d96:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d179      	bne.n	8005e94 <main+0x894>
		goDuckUSD2(2,22,24,&ud2,&lr2,&duck2);
 8005da0:	f107 0208 	add.w	r2, r7, #8
 8005da4:	f107 0320 	add.w	r3, r7, #32
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	1d3b      	adds	r3, r7, #4
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	4613      	mov	r3, r2
 8005db0:	2218      	movs	r2, #24
 8005db2:	2116      	movs	r1, #22
 8005db4:	2002      	movs	r0, #2
 8005db6:	f7fd fc95 	bl	80036e4 <goDuckUSD2>
		if (duck2.rl == 5 && duck1.ud == SS.ud && key.up){
 8005dba:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005dbe:	2b05      	cmp	r3, #5
 8005dc0:	d11e      	bne.n	8005e00 <main+0x800>
 8005dc2:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8005dc6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d118      	bne.n	8005e00 <main+0x800>
 8005dce:	4b9c      	ldr	r3, [pc, #624]	; (8006040 <main+0xa40>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b25b      	sxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d013      	beq.n	8005e00 <main+0x800>
			joy.down = 1;
 8005dd8:	4b98      	ldr	r3, [pc, #608]	; (800603c <main+0xa3c>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	705a      	strb	r2, [r3, #1]
			goDuckUPMove2(1,22,24,&ud1,&lr1,&duck1);
 8005dde:	f107 0210 	add.w	r2, r7, #16
 8005de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	f107 030c 	add.w	r3, r7, #12
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	4613      	mov	r3, r2
 8005df0:	2218      	movs	r2, #24
 8005df2:	2116      	movs	r1, #22
 8005df4:	2001      	movs	r0, #1
 8005df6:	f7fd f8b5 	bl	8002f64 <goDuckUPMove2>
			joy.down = 0;
 8005dfa:	4b90      	ldr	r3, [pc, #576]	; (800603c <main+0xa3c>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	705a      	strb	r2, [r3, #1]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 4 && key.up){
 8005e00:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005e04:	2b05      	cmp	r3, #5
 8005e06:	d120      	bne.n	8005e4a <main+0x84a>
 8005e08:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005e12:	3304      	adds	r3, #4
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d118      	bne.n	8005e4a <main+0x84a>
 8005e18:	4b89      	ldr	r3, [pc, #548]	; (8006040 <main+0xa40>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	b25b      	sxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d013      	beq.n	8005e4a <main+0x84a>
			joy.down = 1;
 8005e22:	4b86      	ldr	r3, [pc, #536]	; (800603c <main+0xa3c>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	705a      	strb	r2, [r3, #1]
			goDuckMIDMove2(1,22,24,&ud1,&lr1,&duck1);
 8005e28:	f107 0210 	add.w	r2, r7, #16
 8005e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	f107 030c 	add.w	r3, r7, #12
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	2218      	movs	r2, #24
 8005e3c:	2116      	movs	r1, #22
 8005e3e:	2001      	movs	r0, #1
 8005e40:	f7fd faca 	bl	80033d8 <goDuckMIDMove2>
			joy.down = 0;
 8005e44:	4b7d      	ldr	r3, [pc, #500]	; (800603c <main+0xa3c>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	705a      	strb	r2, [r3, #1]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 8 && key.up){
 8005e4a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d120      	bne.n	8005e94 <main+0x894>
 8005e52:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005e56:	461a      	mov	r2, r3
 8005e58:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d118      	bne.n	8005e94 <main+0x894>
 8005e62:	4b77      	ldr	r3, [pc, #476]	; (8006040 <main+0xa40>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d013      	beq.n	8005e94 <main+0x894>
		joy.down = 1;
 8005e6c:	4b73      	ldr	r3, [pc, #460]	; (800603c <main+0xa3c>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	705a      	strb	r2, [r3, #1]
		goDuckUSDMove2(1,22,24,&ud1,&lr1,&duck1);
 8005e72:	f107 0210 	add.w	r2, r7, #16
 8005e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	f107 030c 	add.w	r3, r7, #12
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	2218      	movs	r2, #24
 8005e86:	2116      	movs	r1, #22
 8005e88:	2001      	movs	r0, #1
 8005e8a:	f7fd fd19 	bl	80038c0 <goDuckUSDMove2>
		joy.down = 0;
 8005e8e:	4b6b      	ldr	r3, [pc, #428]	; (800603c <main+0xa3c>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	705a      	strb	r2, [r3, #1]
		}
		}

		if(duck2.rl == 5 && key.up && SS.ud == duck2.ud+1 && SS.ud != -20){
 8005e94:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005e98:	2b05      	cmp	r3, #5
 8005e9a:	d139      	bne.n	8005f10 <main+0x910>
 8005e9c:	4b68      	ldr	r3, [pc, #416]	; (8006040 <main+0xa40>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	b25b      	sxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d034      	beq.n	8005f10 <main+0x910>
 8005ea6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d12c      	bne.n	8005f10 <main+0x910>
 8005eb6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005eba:	f113 0f14 	cmn.w	r3, #20
 8005ebe:	d027      	beq.n	8005f10 <main+0x910>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8005ec0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ec4:	f103 011b 	add.w	r1, r3, #27
 8005ec8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ecc:	331f      	adds	r3, #31
 8005ece:	225b      	movs	r2, #91	; 0x5b
 8005ed0:	2002      	movs	r0, #2
 8005ed2:	f7fb ff0f 	bl	8001cf4 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8005ed6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005eda:	f103 011b 	add.w	r1, r3, #27
 8005ede:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ee2:	331f      	adds	r3, #31
 8005ee4:	225b      	movs	r2, #91	; 0x5b
 8005ee6:	2002      	movs	r0, #2
 8005ee8:	f7fc f994 	bl	8002214 <fireDelete>
		SS.ud -= 1;
 8005eec:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	b25b      	sxtb	r3, r3
 8005ef8:	773b      	strb	r3, [r7, #28]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 8005efa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005efe:	f103 011b 	add.w	r1, r3, #27
 8005f02:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f06:	331f      	adds	r3, #31
 8005f08:	225b      	movs	r2, #91	; 0x5b
 8005f0a:	2002      	movs	r0, #2
 8005f0c:	f7fb fdbc 	bl	8001a88 <spaceship>
		}

		if(duck2.rl == 5 && key.up && SS.ud == duck2.ud-9 && SS.ud != 21){
 8005f10:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005f14:	2b05      	cmp	r3, #5
 8005f16:	d138      	bne.n	8005f8a <main+0x98a>
 8005f18:	4b49      	ldr	r3, [pc, #292]	; (8006040 <main+0xa40>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	b25b      	sxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d033      	beq.n	8005f8a <main+0x98a>
 8005f22:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005f2c:	3b09      	subs	r3, #9
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d12b      	bne.n	8005f8a <main+0x98a>
 8005f32:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f36:	2b15      	cmp	r3, #21
 8005f38:	d027      	beq.n	8005f8a <main+0x98a>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8005f3a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f3e:	f103 011b 	add.w	r1, r3, #27
 8005f42:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f46:	331f      	adds	r3, #31
 8005f48:	225b      	movs	r2, #91	; 0x5b
 8005f4a:	2002      	movs	r0, #2
 8005f4c:	f7fb fed2 	bl	8001cf4 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8005f50:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f54:	f103 011b 	add.w	r1, r3, #27
 8005f58:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f5c:	331f      	adds	r3, #31
 8005f5e:	225b      	movs	r2, #91	; 0x5b
 8005f60:	2002      	movs	r0, #2
 8005f62:	f7fc f957 	bl	8002214 <fireDelete>
		SS.ud += 1;
 8005f66:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	b25b      	sxtb	r3, r3
 8005f72:	773b      	strb	r3, [r7, #28]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 8005f74:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f78:	f103 011b 	add.w	r1, r3, #27
 8005f7c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005f80:	331f      	adds	r3, #31
 8005f82:	225b      	movs	r2, #91	; 0x5b
 8005f84:	2002      	movs	r0, #2
 8005f86:	f7fb fd7f 	bl	8001a88 <spaceship>
		}

		if (key.up && duck2.rl != 5 && duck2.ud == SS.ud -1) {
 8005f8a:	4b2d      	ldr	r3, [pc, #180]	; (8006040 <main+0xa40>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	b25b      	sxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d02b      	beq.n	8005fec <main+0x9ec>
 8005f94:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005f98:	2b05      	cmp	r3, #5
 8005f9a:	d027      	beq.n	8005fec <main+0x9ec>
 8005f9c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d11f      	bne.n	8005fec <main+0x9ec>
		duckExplotion(22,24,&ud2,&lr2);
 8005fac:	1d3b      	adds	r3, r7, #4
 8005fae:	f107 0208 	add.w	r2, r7, #8
 8005fb2:	2118      	movs	r1, #24
 8005fb4:	2016      	movs	r0, #22
 8005fb6:	f7fd fe17 	bl	8003be8 <duckExplotion>
		playerInSpaceUSDR(2,23,32+SS.ud);
 8005fba:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005fbe:	3320      	adds	r3, #32
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	2117      	movs	r1, #23
 8005fc4:	2002      	movs	r0, #2
 8005fc6:	f7fc fcb7 	bl	8002938 <playerInSpaceUSDR>
		ud2= SS.ud+8;
 8005fca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	60bb      	str	r3, [r7, #8]
		lr2=0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	607b      	str	r3, [r7, #4]
		duck2.ud = SS.ud+8;
 8005fd6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	3308      	adds	r3, #8
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	b25b      	sxtb	r3, r3
 8005fe2:	f887 3020 	strb.w	r3, [r7, #32]
		duck2.rl = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		}
		if (duck2.rl == 65){
 8005fec:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005ff0:	2b41      	cmp	r3, #65	; 0x41
 8005ff2:	d11f      	bne.n	8006034 <main+0xa34>
		duckExplotion(22,24,&ud2,&lr2);
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	f107 0208 	add.w	r2, r7, #8
 8005ffa:	2118      	movs	r1, #24
 8005ffc:	2016      	movs	r0, #22
 8005ffe:	f7fd fdf3 	bl	8003be8 <duckExplotion>
		playerInSpaceUSDR(2,23,32+SS.ud);
 8006002:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006006:	3320      	adds	r3, #32
 8006008:	461a      	mov	r2, r3
 800600a:	2117      	movs	r1, #23
 800600c:	2002      	movs	r0, #2
 800600e:	f7fc fc93 	bl	8002938 <playerInSpaceUSDR>
		ud2= SS.ud+8;
 8006012:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006016:	3308      	adds	r3, #8
 8006018:	60bb      	str	r3, [r7, #8]
		lr2=0;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
		duck2.ud = SS.ud+8;
 800601e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	3308      	adds	r3, #8
 8006026:	b2db      	uxtb	r3, r3
 8006028:	b25b      	sxtb	r3, r3
 800602a:	f887 3020 	strb.w	r3, [r7, #32]
		duck2.rl = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		}
		if (key.up && duck2.rl != 5 && duck2.ud == SS.ud + 9) {
 8006034:	4b02      	ldr	r3, [pc, #8]	; (8006040 <main+0xa40>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b25b      	sxtb	r3, r3
 800603a:	e003      	b.n	8006044 <main+0xa44>
 800603c:	20000200 	.word	0x20000200
 8006040:	200001f4 	.word	0x200001f4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d02b      	beq.n	80060a0 <main+0xaa0>
 8006048:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800604c:	2b05      	cmp	r3, #5
 800604e:	d027      	beq.n	80060a0 <main+0xaa0>
 8006050:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006054:	461a      	mov	r2, r3
 8006056:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800605a:	3309      	adds	r3, #9
 800605c:	429a      	cmp	r2, r3
 800605e:	d11f      	bne.n	80060a0 <main+0xaa0>
		duckExplotion(22,24,&ud2,&lr2);
 8006060:	1d3b      	adds	r3, r7, #4
 8006062:	f107 0208 	add.w	r2, r7, #8
 8006066:	2118      	movs	r1, #24
 8006068:	2016      	movs	r0, #22
 800606a:	f7fd fdbd 	bl	8003be8 <duckExplotion>
		playerInSpaceUSDR(2,23,32+SS.ud);
 800606e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006072:	3320      	adds	r3, #32
 8006074:	461a      	mov	r2, r3
 8006076:	2117      	movs	r1, #23
 8006078:	2002      	movs	r0, #2
 800607a:	f7fc fc5d 	bl	8002938 <playerInSpaceUSDR>
		ud2= SS.ud+8;
 800607e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006082:	3308      	adds	r3, #8
 8006084:	60bb      	str	r3, [r7, #8]
		lr2=0;
 8006086:	2300      	movs	r3, #0
 8006088:	607b      	str	r3, [r7, #4]
		duck2.ud = SS.ud+8;
 800608a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	3308      	adds	r3, #8
 8006092:	b2db      	uxtb	r3, r3
 8006094:	b25b      	sxtb	r3, r3
 8006096:	f887 3020 	strb.w	r3, [r7, #32]
		duck2.rl = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		}

		buffer_lenght = uart_get_count();
 80060a0:	f7fb f8b4 	bl	800120c <uart_get_count>
 80060a4:	4603      	mov	r3, r0
 80060a6:	62bb      	str	r3, [r7, #40]	; 0x28
		gotoxy(30,10);
 80060a8:	210a      	movs	r1, #10
 80060aa:	201e      	movs	r0, #30
 80060ac:	f7fe fc72 	bl	8004994 <gotoxy>
		printf("%d", buffer_lenght);
 80060b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060b2:	484d      	ldr	r0, [pc, #308]	; (80061e8 <main+0xbe8>)
 80060b4:	f001 f85c 	bl	8007170 <iprintf>

		if (lcdUpdate > 0){
 80060b8:	4b4c      	ldr	r3, [pc, #304]	; (80061ec <main+0xbec>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	dd4c      	ble.n	800615a <main+0xb5a>
		//Keyboard input

		if (buffer_lenght > 0) {
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	dd0d      	ble.n	80060e2 <main+0xae2>
			random = uart_get_char();
 80060c6:	f7fa ffe7 	bl	8001098 <uart_get_char>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			gotoxy(10,10);
 80060d0:	210a      	movs	r1, #10
 80060d2:	200a      	movs	r0, #10
 80060d4:	f7fe fc5e 	bl	8004994 <gotoxy>
			printf("%c", random);
 80060d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80060dc:	4618      	mov	r0, r3
 80060de:	f001 f85f 	bl	80071a0 <putchar>
		}
		resetbgcolor();
 80060e2:	f7fe fc35 	bl	8004950 <resetbgcolor>


		if (random == 'w'){
 80060e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80060ea:	2b77      	cmp	r3, #119	; 0x77
 80060ec:	d103      	bne.n	80060f6 <main+0xaf6>
			key.up = 1;
 80060ee:	4b40      	ldr	r3, [pc, #256]	; (80061f0 <main+0xbf0>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]
 80060f4:	e002      	b.n	80060fc <main+0xafc>
		}
		else {key.up = 0;}
 80060f6:	4b3e      	ldr	r3, [pc, #248]	; (80061f0 <main+0xbf0>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	701a      	strb	r2, [r3, #0]

		if (random == 'a'){
 80060fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006100:	2b61      	cmp	r3, #97	; 0x61
 8006102:	d103      	bne.n	800610c <main+0xb0c>
			key.left = 1;
 8006104:	4b3a      	ldr	r3, [pc, #232]	; (80061f0 <main+0xbf0>)
 8006106:	2201      	movs	r2, #1
 8006108:	709a      	strb	r2, [r3, #2]
 800610a:	e002      	b.n	8006112 <main+0xb12>
		}
		else {key.left = 0;}
 800610c:	4b38      	ldr	r3, [pc, #224]	; (80061f0 <main+0xbf0>)
 800610e:	2200      	movs	r2, #0
 8006110:	709a      	strb	r2, [r3, #2]

		if (random == 's'){
 8006112:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006116:	2b73      	cmp	r3, #115	; 0x73
 8006118:	d103      	bne.n	8006122 <main+0xb22>
			key.down = 1;
 800611a:	4b35      	ldr	r3, [pc, #212]	; (80061f0 <main+0xbf0>)
 800611c:	2201      	movs	r2, #1
 800611e:	705a      	strb	r2, [r3, #1]
 8006120:	e002      	b.n	8006128 <main+0xb28>
		}
		else {key.down = 0;}
 8006122:	4b33      	ldr	r3, [pc, #204]	; (80061f0 <main+0xbf0>)
 8006124:	2200      	movs	r2, #0
 8006126:	705a      	strb	r2, [r3, #1]

		if (random == 'd'){
 8006128:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800612c:	2b64      	cmp	r3, #100	; 0x64
 800612e:	d103      	bne.n	8006138 <main+0xb38>
			key.right = 1;
 8006130:	4b2f      	ldr	r3, [pc, #188]	; (80061f0 <main+0xbf0>)
 8006132:	2201      	movs	r2, #1
 8006134:	70da      	strb	r2, [r3, #3]
 8006136:	e002      	b.n	800613e <main+0xb3e>
		}
		else {key.right = 0;}
 8006138:	4b2d      	ldr	r3, [pc, #180]	; (80061f0 <main+0xbf0>)
 800613a:	2200      	movs	r2, #0
 800613c:	70da      	strb	r2, [r3, #3]

		if (random == 'e'){
 800613e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006142:	2b65      	cmp	r3, #101	; 0x65
 8006144:	d103      	bne.n	800614e <main+0xb4e>
			key.center = 1;
 8006146:	4b2a      	ldr	r3, [pc, #168]	; (80061f0 <main+0xbf0>)
 8006148:	2201      	movs	r2, #1
 800614a:	711a      	strb	r2, [r3, #4]
 800614c:	e002      	b.n	8006154 <main+0xb54>
		}
		else {key.center = 0;}
 800614e:	4b28      	ldr	r3, [pc, #160]	; (80061f0 <main+0xbf0>)
 8006150:	2200      	movs	r2, #0
 8006152:	711a      	strb	r2, [r3, #4]

		random = " ";
 8006154:	4b27      	ldr	r3, [pc, #156]	; (80061f4 <main+0xbf4>)
 8006156:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		}

			b++;
 800615a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615c:	3301      	adds	r3, #1
 800615e:	647b      	str	r3, [r7, #68]	; 0x44
			if(b>6) {
 8006160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006162:	2b06      	cmp	r3, #6
 8006164:	dd01      	ble.n	800616a <main+0xb6a>
				b = 0;
 8006166:	2300      	movs	r3, #0
 8006168:	647b      	str	r3, [r7, #68]	; 0x44
			}
			a++;
 800616a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800616c:	3301      	adds	r3, #1
 800616e:	64bb      	str	r3, [r7, #72]	; 0x48
			if(a>4) {
 8006170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006172:	2b04      	cmp	r3, #4
 8006174:	dd01      	ble.n	800617a <main+0xb7a>
				a = 0;
 8006176:	2300      	movs	r3, #0
 8006178:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if(ast1.px-7 < 91 && ast1.py >= SS.ud+24 && ast1.py <= SS.ud+34){
 800617a:	4b1f      	ldr	r3, [pc, #124]	; (80061f8 <main+0xbf8>)
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b21b      	sxth	r3, r3
 8006180:	2b61      	cmp	r3, #97	; 0x61
 8006182:	dc1d      	bgt.n	80061c0 <main+0xbc0>
 8006184:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8006188:	3317      	adds	r3, #23
 800618a:	4a1b      	ldr	r2, [pc, #108]	; (80061f8 <main+0xbf8>)
 800618c:	8852      	ldrh	r2, [r2, #2]
 800618e:	b212      	sxth	r2, r2
 8006190:	4293      	cmp	r3, r2
 8006192:	da15      	bge.n	80061c0 <main+0xbc0>
 8006194:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <main+0xbf8>)
 8006196:	885b      	ldrh	r3, [r3, #2]
 8006198:	b21b      	sxth	r3, r3
 800619a:	461a      	mov	r2, r3
 800619c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80061a0:	3322      	adds	r3, #34	; 0x22
 80061a2:	429a      	cmp	r2, r3
 80061a4:	dc0c      	bgt.n	80061c0 <main+0xbc0>
			collision(a,b,SS.ud);
 80061a6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80061aa:	461a      	mov	r2, r3
 80061ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061ae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80061b0:	f000 fa6c 	bl	800668c <collision>
			tid.state = 1;
 80061b4:	4b11      	ldr	r3, [pc, #68]	; (80061fc <main+0xbfc>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	70da      	strb	r2, [r3, #3]
			ast1.state = 1;
 80061ba:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <main+0xbf8>)
 80061bc:	2201      	movs	r2, #1
 80061be:	719a      	strb	r2, [r3, #6]
			}

			gotoxy(5,2);
 80061c0:	2102      	movs	r1, #2
 80061c2:	2005      	movs	r0, #5
 80061c4:	f7fe fbe6 	bl	8004994 <gotoxy>
			printf("a:%d  b:%d",a,b);
 80061c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80061cc:	480c      	ldr	r0, [pc, #48]	; (8006200 <main+0xc00>)
 80061ce:	f000 ffcf 	bl	8007170 <iprintf>

		asteroidUpdate(SS.ud);
 80061d2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fe fc38 	bl	8004a4c <asteroidUpdate>
		copyJoystick();
 80061dc:	f7fd ffd0 	bl	8004180 <copyJoystick>

		writeLed();
 80061e0:	f7fe fb38 	bl	8004854 <writeLed>
	while(1){
 80061e4:	f7ff ba85 	b.w	80056f2 <main+0xf2>
 80061e8:	0800885c 	.word	0x0800885c
 80061ec:	200001ec 	.word	0x200001ec
 80061f0:	200001f4 	.word	0x200001f4
 80061f4:	08008860 	.word	0x08008860
 80061f8:	2000041c 	.word	0x2000041c
 80061fc:	20000418 	.word	0x20000418
 8006200:	08008864 	.word	0x08008864

08006204 <menu>:
#include "ansi_S.h"
#include "joystick.h"
#include "LCD.h"

void menu(int *players, int *dif) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
	draw_main_menu();
 800620e:	f000 fa07 	bl	8006620 <draw_main_menu>
	int selection = 1;
 8006212:	2301      	movs	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
	int gameinit = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	60bb      	str	r3, [r7, #8]
	*players = 0;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
	*dif = 0;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]

	while (gameinit == 0) {
 8006226:	e0ad      	b.n	8006384 <menu+0x180>
		readJoystick();
 8006228:	f7fd ff54 	bl	80040d4 <readJoystick>
		if (joy.up == 1) {
 800622c:	4b5c      	ldr	r3, [pc, #368]	; (80063a0 <menu+0x19c>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	b25b      	sxtb	r3, r3
 8006232:	2b01      	cmp	r3, #1
 8006234:	d110      	bne.n	8006258 <menu+0x54>
			while (joy.up == 1) {
 8006236:	e001      	b.n	800623c <menu+0x38>
				readJoystick();
 8006238:	f7fd ff4c 	bl	80040d4 <readJoystick>
			while (joy.up == 1) {
 800623c:	4b58      	ldr	r3, [pc, #352]	; (80063a0 <menu+0x19c>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	b25b      	sxtb	r3, r3
 8006242:	2b01      	cmp	r3, #1
 8006244:	d0f8      	beq.n	8006238 <menu+0x34>
			}
			if (selection > 1 && selection <= 4 ) {
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b01      	cmp	r3, #1
 800624a:	dd05      	ble.n	8006258 <menu+0x54>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b04      	cmp	r3, #4
 8006250:	dc02      	bgt.n	8006258 <menu+0x54>
				selection--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3b01      	subs	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]
			}
		}

		if (joy.down == 1) {
 8006258:	4b51      	ldr	r3, [pc, #324]	; (80063a0 <menu+0x19c>)
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	b25b      	sxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d110      	bne.n	8006284 <menu+0x80>
			while (joy.down == 1) {
 8006262:	e001      	b.n	8006268 <menu+0x64>
				readJoystick();
 8006264:	f7fd ff36 	bl	80040d4 <readJoystick>
			while (joy.down == 1) {
 8006268:	4b4d      	ldr	r3, [pc, #308]	; (80063a0 <menu+0x19c>)
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	b25b      	sxtb	r3, r3
 800626e:	2b01      	cmp	r3, #1
 8006270:	d0f8      	beq.n	8006264 <menu+0x60>
			}
			if (selection >= 1 && selection < 4 ) {
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	dd05      	ble.n	8006284 <menu+0x80>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b03      	cmp	r3, #3
 800627c:	dc02      	bgt.n	8006284 <menu+0x80>
				selection++;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
			}
		}
		if (selection == 1) {
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d11b      	bne.n	80062c2 <menu+0xbe>
			lcd_write_string("  ", 2, 1);
 800628a:	2201      	movs	r2, #1
 800628c:	2102      	movs	r1, #2
 800628e:	4845      	ldr	r0, [pc, #276]	; (80063a4 <menu+0x1a0>)
 8006290:	f7fd ff9a 	bl	80041c8 <lcd_write_string>
			lcd_write_string("->", 1, 1);
 8006294:	2201      	movs	r2, #1
 8006296:	2101      	movs	r1, #1
 8006298:	4843      	ldr	r0, [pc, #268]	; (80063a8 <menu+0x1a4>)
 800629a:	f7fd ff95 	bl	80041c8 <lcd_write_string>
			if (joy.center == 1) {
 800629e:	4b40      	ldr	r3, [pc, #256]	; (80063a0 <menu+0x19c>)
 80062a0:	791b      	ldrb	r3, [r3, #4]
 80062a2:	b25b      	sxtb	r3, r3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d10c      	bne.n	80062c2 <menu+0xbe>
				while (joy.center == 1) {
 80062a8:	e001      	b.n	80062ae <menu+0xaa>
					readJoystick();
 80062aa:	f7fd ff13 	bl	80040d4 <readJoystick>
				while (joy.center == 1) {
 80062ae:	4b3c      	ldr	r3, [pc, #240]	; (80063a0 <menu+0x19c>)
 80062b0:	791b      	ldrb	r3, [r3, #4]
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d0f8      	beq.n	80062aa <menu+0xa6>
				}
				*players = player_selection();
 80062b8:	f000 f87a 	bl	80063b0 <player_selection>
 80062bc:	4602      	mov	r2, r0
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	601a      	str	r2, [r3, #0]
			}
		}
		if (selection == 2) {
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d120      	bne.n	800630a <menu+0x106>
			lcd_write_string("  ", 1, 1);
 80062c8:	2201      	movs	r2, #1
 80062ca:	2101      	movs	r1, #1
 80062cc:	4835      	ldr	r0, [pc, #212]	; (80063a4 <menu+0x1a0>)
 80062ce:	f7fd ff7b 	bl	80041c8 <lcd_write_string>
			lcd_write_string("  ", 3, 1);
 80062d2:	2201      	movs	r2, #1
 80062d4:	2103      	movs	r1, #3
 80062d6:	4833      	ldr	r0, [pc, #204]	; (80063a4 <menu+0x1a0>)
 80062d8:	f7fd ff76 	bl	80041c8 <lcd_write_string>
			lcd_write_string("->", 2, 1);
 80062dc:	2201      	movs	r2, #1
 80062de:	2102      	movs	r1, #2
 80062e0:	4831      	ldr	r0, [pc, #196]	; (80063a8 <menu+0x1a4>)
 80062e2:	f7fd ff71 	bl	80041c8 <lcd_write_string>
			if (joy.center == 1) {
 80062e6:	4b2e      	ldr	r3, [pc, #184]	; (80063a0 <menu+0x19c>)
 80062e8:	791b      	ldrb	r3, [r3, #4]
 80062ea:	b25b      	sxtb	r3, r3
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d10c      	bne.n	800630a <menu+0x106>
				while (joy.center == 1) {
 80062f0:	e001      	b.n	80062f6 <menu+0xf2>
					readJoystick();
 80062f2:	f7fd feef 	bl	80040d4 <readJoystick>
				while (joy.center == 1) {
 80062f6:	4b2a      	ldr	r3, [pc, #168]	; (80063a0 <menu+0x19c>)
 80062f8:	791b      	ldrb	r3, [r3, #4]
 80062fa:	b25b      	sxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d0f8      	beq.n	80062f2 <menu+0xee>
				}
				*dif = difficulty();
 8006300:	f000 f8be 	bl	8006480 <difficulty>
 8006304:	4602      	mov	r2, r0
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	601a      	str	r2, [r3, #0]
			}
		}
		if (selection == 3) {
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b03      	cmp	r3, #3
 800630e:	d11d      	bne.n	800634c <menu+0x148>
			lcd_write_string("  ", 2, 1);
 8006310:	2201      	movs	r2, #1
 8006312:	2102      	movs	r1, #2
 8006314:	4823      	ldr	r0, [pc, #140]	; (80063a4 <menu+0x1a0>)
 8006316:	f7fd ff57 	bl	80041c8 <lcd_write_string>
			lcd_write_string("  ", 4, 1);
 800631a:	2201      	movs	r2, #1
 800631c:	2104      	movs	r1, #4
 800631e:	4821      	ldr	r0, [pc, #132]	; (80063a4 <menu+0x1a0>)
 8006320:	f7fd ff52 	bl	80041c8 <lcd_write_string>
			lcd_write_string("->", 3, 1);
 8006324:	2201      	movs	r2, #1
 8006326:	2103      	movs	r1, #3
 8006328:	481f      	ldr	r0, [pc, #124]	; (80063a8 <menu+0x1a4>)
 800632a:	f7fd ff4d 	bl	80041c8 <lcd_write_string>
			if (joy.center == 1) {
 800632e:	4b1c      	ldr	r3, [pc, #112]	; (80063a0 <menu+0x19c>)
 8006330:	791b      	ldrb	r3, [r3, #4]
 8006332:	b25b      	sxtb	r3, r3
 8006334:	2b01      	cmp	r3, #1
 8006336:	d109      	bne.n	800634c <menu+0x148>
				while (joy.center == 1) {
 8006338:	e001      	b.n	800633e <menu+0x13a>
					readJoystick();
 800633a:	f7fd fecb 	bl	80040d4 <readJoystick>
				while (joy.center == 1) {
 800633e:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <menu+0x19c>)
 8006340:	791b      	ldrb	r3, [r3, #4]
 8006342:	b25b      	sxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d0f8      	beq.n	800633a <menu+0x136>
				}
				help_menu();
 8006348:	f000 f942 	bl	80065d0 <help_menu>
			}
		}
		if (selection == 4) {
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b04      	cmp	r3, #4
 8006350:	d118      	bne.n	8006384 <menu+0x180>
			lcd_write_string("  ", 3, 1);
 8006352:	2201      	movs	r2, #1
 8006354:	2103      	movs	r1, #3
 8006356:	4813      	ldr	r0, [pc, #76]	; (80063a4 <menu+0x1a0>)
 8006358:	f7fd ff36 	bl	80041c8 <lcd_write_string>
			lcd_write_string("->", 4, 1);
 800635c:	2201      	movs	r2, #1
 800635e:	2104      	movs	r1, #4
 8006360:	4811      	ldr	r0, [pc, #68]	; (80063a8 <menu+0x1a4>)
 8006362:	f7fd ff31 	bl	80041c8 <lcd_write_string>
			if (joy.center == 1) {
 8006366:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <menu+0x19c>)
 8006368:	791b      	ldrb	r3, [r3, #4]
 800636a:	b25b      	sxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d109      	bne.n	8006384 <menu+0x180>
				while (joy.center == 1) {
 8006370:	e001      	b.n	8006376 <menu+0x172>
					readJoystick();
 8006372:	f7fd feaf 	bl	80040d4 <readJoystick>
				while (joy.center == 1) {
 8006376:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <menu+0x19c>)
 8006378:	791b      	ldrb	r3, [r3, #4]
 800637a:	b25b      	sxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d0f8      	beq.n	8006372 <menu+0x16e>
				}
				gameinit = 1;
 8006380:	2301      	movs	r3, #1
 8006382:	60bb      	str	r3, [r7, #8]
	while (gameinit == 0) {
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f43f af4e 	beq.w	8006228 <menu+0x24>
			}

		}

	}
	memset(buffer, 0x00, 512);
 800638c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006390:	2100      	movs	r1, #0
 8006392:	4806      	ldr	r0, [pc, #24]	; (80063ac <menu+0x1a8>)
 8006394:	f000 fee4 	bl	8007160 <memset>
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000200 	.word	0x20000200
 80063a4:	08008870 	.word	0x08008870
 80063a8:	08008874 	.word	0x08008874
 80063ac:	20000214 	.word	0x20000214

080063b0 <player_selection>:

int player_selection() {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
	int x = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	607b      	str	r3, [r7, #4]
	int a;
	lcd_write_string("                   ", 1, 12);
 80063ba:	220c      	movs	r2, #12
 80063bc:	2101      	movs	r1, #1
 80063be:	4829      	ldr	r0, [pc, #164]	; (8006464 <player_selection+0xb4>)
 80063c0:	f7fd ff02 	bl	80041c8 <lcd_write_string>
	while (x == 0) {
 80063c4:	e03e      	b.n	8006444 <player_selection+0x94>
		readJoystick();
 80063c6:	f7fd fe85 	bl	80040d4 <readJoystick>

		if (joy.right == 1) {
 80063ca:	4b27      	ldr	r3, [pc, #156]	; (8006468 <player_selection+0xb8>)
 80063cc:	78db      	ldrb	r3, [r3, #3]
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d102      	bne.n	80063da <player_selection+0x2a>
			a = 1;
 80063d4:	2301      	movs	r3, #1
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	e006      	b.n	80063e8 <player_selection+0x38>
		} else if (joy.left == 1) {
 80063da:	4b23      	ldr	r3, [pc, #140]	; (8006468 <player_selection+0xb8>)
 80063dc:	789b      	ldrb	r3, [r3, #2]
 80063de:	b25b      	sxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <player_selection+0x38>
			a = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	603b      	str	r3, [r7, #0]
		}
		if (a == 0) {
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d105      	bne.n	80063fa <player_selection+0x4a>
			lcd_write_string("<1 Player>", 1, 12);
 80063ee:	220c      	movs	r2, #12
 80063f0:	2101      	movs	r1, #1
 80063f2:	481e      	ldr	r0, [pc, #120]	; (800646c <player_selection+0xbc>)
 80063f4:	f7fd fee8 	bl	80041c8 <lcd_write_string>
 80063f8:	e007      	b.n	800640a <player_selection+0x5a>
		} else if (a == 1) {
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d104      	bne.n	800640a <player_selection+0x5a>
			lcd_write_string("<2 Player>", 1, 12);
 8006400:	220c      	movs	r2, #12
 8006402:	2101      	movs	r1, #1
 8006404:	481a      	ldr	r0, [pc, #104]	; (8006470 <player_selection+0xc0>)
 8006406:	f7fd fedf 	bl	80041c8 <lcd_write_string>
		}
		if (joy.center == 1 ) {
 800640a:	4b17      	ldr	r3, [pc, #92]	; (8006468 <player_selection+0xb8>)
 800640c:	791b      	ldrb	r3, [r3, #4]
 800640e:	b25b      	sxtb	r3, r3
 8006410:	2b01      	cmp	r3, #1
 8006412:	d117      	bne.n	8006444 <player_selection+0x94>
			lcd_write_string("Player Selection", 1, 12);
 8006414:	220c      	movs	r2, #12
 8006416:	2101      	movs	r1, #1
 8006418:	4816      	ldr	r0, [pc, #88]	; (8006474 <player_selection+0xc4>)
 800641a:	f7fd fed5 	bl	80041c8 <lcd_write_string>
			if (a == 0) {
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d105      	bne.n	8006430 <player_selection+0x80>
				lcd_write_string("<P1>", 1, 108);
 8006424:	226c      	movs	r2, #108	; 0x6c
 8006426:	2101      	movs	r1, #1
 8006428:	4813      	ldr	r0, [pc, #76]	; (8006478 <player_selection+0xc8>)
 800642a:	f7fd fecd 	bl	80041c8 <lcd_write_string>
 800642e:	e007      	b.n	8006440 <player_selection+0x90>
			} else if (a == 1) {
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d104      	bne.n	8006440 <player_selection+0x90>
				lcd_write_string("<P2>", 1, 108);
 8006436:	226c      	movs	r2, #108	; 0x6c
 8006438:	2101      	movs	r1, #1
 800643a:	4810      	ldr	r0, [pc, #64]	; (800647c <player_selection+0xcc>)
 800643c:	f7fd fec4 	bl	80041c8 <lcd_write_string>
			}
			x = 1;
 8006440:	2301      	movs	r3, #1
 8006442:	607b      	str	r3, [r7, #4]
	while (x == 0) {
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0bd      	beq.n	80063c6 <player_selection+0x16>
		}
	}
	while (joy.center == 1 ) {
 800644a:	e001      	b.n	8006450 <player_selection+0xa0>
		readJoystick();
 800644c:	f7fd fe42 	bl	80040d4 <readJoystick>
	while (joy.center == 1 ) {
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <player_selection+0xb8>)
 8006452:	791b      	ldrb	r3, [r3, #4]
 8006454:	b25b      	sxtb	r3, r3
 8006456:	2b01      	cmp	r3, #1
 8006458:	d0f8      	beq.n	800644c <player_selection+0x9c>
	}
	return a;
 800645a:	683b      	ldr	r3, [r7, #0]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	08008878 	.word	0x08008878
 8006468:	20000200 	.word	0x20000200
 800646c:	0800888c 	.word	0x0800888c
 8006470:	08008898 	.word	0x08008898
 8006474:	080088a4 	.word	0x080088a4
 8006478:	080088b8 	.word	0x080088b8
 800647c:	080088c0 	.word	0x080088c0

08006480 <difficulty>:


int difficulty() {
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
	int x = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	607b      	str	r3, [r7, #4]
	int a = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	603b      	str	r3, [r7, #0]
	lcd_write_string("                ", 2, 12);
 800648e:	220c      	movs	r2, #12
 8006490:	2102      	movs	r1, #2
 8006492:	4846      	ldr	r0, [pc, #280]	; (80065ac <difficulty+0x12c>)
 8006494:	f7fd fe98 	bl	80041c8 <lcd_write_string>
	lcd_write_string("<Easy>", 2, 12);
 8006498:	220c      	movs	r2, #12
 800649a:	2102      	movs	r1, #2
 800649c:	4844      	ldr	r0, [pc, #272]	; (80065b0 <difficulty+0x130>)
 800649e:	f7fd fe93 	bl	80041c8 <lcd_write_string>
	while (x == 0) {
 80064a2:	e072      	b.n	800658a <difficulty+0x10a>
		readJoystick();
 80064a4:	f7fd fe16 	bl	80040d4 <readJoystick>
		if (joy.right == 1 && a <= 1) {
 80064a8:	4b42      	ldr	r3, [pc, #264]	; (80065b4 <difficulty+0x134>)
 80064aa:	78db      	ldrb	r3, [r3, #3]
 80064ac:	b25b      	sxtb	r3, r3
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d10e      	bne.n	80064d0 <difficulty+0x50>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	dc0b      	bgt.n	80064d0 <difficulty+0x50>
			while (joy.right == 1) {
 80064b8:	e001      	b.n	80064be <difficulty+0x3e>
				readJoystick();
 80064ba:	f7fd fe0b 	bl	80040d4 <readJoystick>
			while (joy.right == 1) {
 80064be:	4b3d      	ldr	r3, [pc, #244]	; (80065b4 <difficulty+0x134>)
 80064c0:	78db      	ldrb	r3, [r3, #3]
 80064c2:	b25b      	sxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d0f8      	beq.n	80064ba <difficulty+0x3a>
			}
			a++;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	603b      	str	r3, [r7, #0]
 80064ce:	e012      	b.n	80064f6 <difficulty+0x76>
		} else if (joy.left == 1 && a >= 1) {
 80064d0:	4b38      	ldr	r3, [pc, #224]	; (80065b4 <difficulty+0x134>)
 80064d2:	789b      	ldrb	r3, [r3, #2]
 80064d4:	b25b      	sxtb	r3, r3
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d10d      	bne.n	80064f6 <difficulty+0x76>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	dd0a      	ble.n	80064f6 <difficulty+0x76>
			while (joy.left == 1) {
 80064e0:	e001      	b.n	80064e6 <difficulty+0x66>
				readJoystick();
 80064e2:	f7fd fdf7 	bl	80040d4 <readJoystick>
			while (joy.left == 1) {
 80064e6:	4b33      	ldr	r3, [pc, #204]	; (80065b4 <difficulty+0x134>)
 80064e8:	789b      	ldrb	r3, [r3, #2]
 80064ea:	b25b      	sxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d0f8      	beq.n	80064e2 <difficulty+0x62>
			}
			a--;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	603b      	str	r3, [r7, #0]
		}
		if (a == 0 ) {
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <difficulty+0x92>
			lcd_write_string_no_push("        ", 2, 12);
 80064fc:	220c      	movs	r2, #12
 80064fe:	2102      	movs	r1, #2
 8006500:	482d      	ldr	r0, [pc, #180]	; (80065b8 <difficulty+0x138>)
 8006502:	f7fd fef3 	bl	80042ec <lcd_write_string_no_push>
			lcd_write_string("<easy>", 2, 12);
 8006506:	220c      	movs	r2, #12
 8006508:	2102      	movs	r1, #2
 800650a:	482c      	ldr	r0, [pc, #176]	; (80065bc <difficulty+0x13c>)
 800650c:	f7fd fe5c 	bl	80041c8 <lcd_write_string>
 8006510:	e015      	b.n	800653e <difficulty+0xbe>
		} else if (a == 1 ) {
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d105      	bne.n	8006524 <difficulty+0xa4>
			lcd_write_string("<normal>", 2, 12);
 8006518:	220c      	movs	r2, #12
 800651a:	2102      	movs	r1, #2
 800651c:	4828      	ldr	r0, [pc, #160]	; (80065c0 <difficulty+0x140>)
 800651e:	f7fd fe53 	bl	80041c8 <lcd_write_string>
 8006522:	e00c      	b.n	800653e <difficulty+0xbe>
		} else if (a == 2 ) {
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d109      	bne.n	800653e <difficulty+0xbe>
			lcd_write_string_no_push("        ", 2, 12);
 800652a:	220c      	movs	r2, #12
 800652c:	2102      	movs	r1, #2
 800652e:	4822      	ldr	r0, [pc, #136]	; (80065b8 <difficulty+0x138>)
 8006530:	f7fd fedc 	bl	80042ec <lcd_write_string_no_push>
			lcd_write_string("<hard>", 2, 12);
 8006534:	220c      	movs	r2, #12
 8006536:	2102      	movs	r1, #2
 8006538:	4822      	ldr	r0, [pc, #136]	; (80065c4 <difficulty+0x144>)
 800653a:	f7fd fe45 	bl	80041c8 <lcd_write_string>
		}
		if (joy.center == 1 ) {
 800653e:	4b1d      	ldr	r3, [pc, #116]	; (80065b4 <difficulty+0x134>)
 8006540:	791b      	ldrb	r3, [r3, #4]
 8006542:	b25b      	sxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d120      	bne.n	800658a <difficulty+0x10a>
			lcd_write_string("Difficulty", 2, 12);
 8006548:	220c      	movs	r2, #12
 800654a:	2102      	movs	r1, #2
 800654c:	481e      	ldr	r0, [pc, #120]	; (80065c8 <difficulty+0x148>)
 800654e:	f7fd fe3b 	bl	80041c8 <lcd_write_string>
			if (a == 0) {
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d105      	bne.n	8006564 <difficulty+0xe4>
				lcd_write_string("<easy>", 2, 98);
 8006558:	2262      	movs	r2, #98	; 0x62
 800655a:	2102      	movs	r1, #2
 800655c:	4817      	ldr	r0, [pc, #92]	; (80065bc <difficulty+0x13c>)
 800655e:	f7fd fe33 	bl	80041c8 <lcd_write_string>
 8006562:	e010      	b.n	8006586 <difficulty+0x106>
			} else if (a == 1) {
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d105      	bne.n	8006576 <difficulty+0xf6>
				lcd_write_string("<norm>", 2, 98);
 800656a:	2262      	movs	r2, #98	; 0x62
 800656c:	2102      	movs	r1, #2
 800656e:	4817      	ldr	r0, [pc, #92]	; (80065cc <difficulty+0x14c>)
 8006570:	f7fd fe2a 	bl	80041c8 <lcd_write_string>
 8006574:	e007      	b.n	8006586 <difficulty+0x106>
			} else if (a == 2) {
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b02      	cmp	r3, #2
 800657a:	d104      	bne.n	8006586 <difficulty+0x106>
				lcd_write_string("<hard>", 2, 98);
 800657c:	2262      	movs	r2, #98	; 0x62
 800657e:	2102      	movs	r1, #2
 8006580:	4810      	ldr	r0, [pc, #64]	; (80065c4 <difficulty+0x144>)
 8006582:	f7fd fe21 	bl	80041c8 <lcd_write_string>
			}
			x = 1;
 8006586:	2301      	movs	r3, #1
 8006588:	607b      	str	r3, [r7, #4]
	while (x == 0) {
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d089      	beq.n	80064a4 <difficulty+0x24>
		}
	}
	while (joy.center == 1 ) {
 8006590:	e001      	b.n	8006596 <difficulty+0x116>
		readJoystick();
 8006592:	f7fd fd9f 	bl	80040d4 <readJoystick>
	while (joy.center == 1 ) {
 8006596:	4b07      	ldr	r3, [pc, #28]	; (80065b4 <difficulty+0x134>)
 8006598:	791b      	ldrb	r3, [r3, #4]
 800659a:	b25b      	sxtb	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	d0f8      	beq.n	8006592 <difficulty+0x112>
	}
	return a;
 80065a0:	683b      	ldr	r3, [r7, #0]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	080088c8 	.word	0x080088c8
 80065b0:	080088dc 	.word	0x080088dc
 80065b4:	20000200 	.word	0x20000200
 80065b8:	080088e4 	.word	0x080088e4
 80065bc:	080088f0 	.word	0x080088f0
 80065c0:	080088f8 	.word	0x080088f8
 80065c4:	08008904 	.word	0x08008904
 80065c8:	0800890c 	.word	0x0800890c
 80065cc:	08008918 	.word	0x08008918

080065d0 <help_menu>:

void help_menu() {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
	int x = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	607b      	str	r3, [r7, #4]
	lcd_write_string("!Help window on screen!", 3, 12);
 80065da:	220c      	movs	r2, #12
 80065dc:	2103      	movs	r1, #3
 80065de:	480d      	ldr	r0, [pc, #52]	; (8006614 <help_menu+0x44>)
 80065e0:	f7fd fdf2 	bl	80041c8 <lcd_write_string>
	windowSmp(5,5,80,35);
 80065e4:	2323      	movs	r3, #35	; 0x23
 80065e6:	2250      	movs	r2, #80	; 0x50
 80065e8:	2105      	movs	r1, #5
 80065ea:	2005      	movs	r0, #5
 80065ec:	f000 fcea 	bl	8006fc4 <windowSmp>
	gotoxy(10,7);
 80065f0:	2107      	movs	r1, #7
 80065f2:	200a      	movs	r0, #10
 80065f4:	f7fe f9ce 	bl	8004994 <gotoxy>
	printf("Player 1 uses the joystick to move and center to shoot");
 80065f8:	4807      	ldr	r0, [pc, #28]	; (8006618 <help_menu+0x48>)
 80065fa:	f000 fdb9 	bl	8007170 <iprintf>
	gotoxy(10,10);
 80065fe:	210a      	movs	r1, #10
 8006600:	200a      	movs	r0, #10
 8006602:	f7fe f9c7 	bl	8004994 <gotoxy>
	printf("Player 2 uses WASD to move and E to shoot");
 8006606:	4805      	ldr	r0, [pc, #20]	; (800661c <help_menu+0x4c>)
 8006608:	f000 fdb2 	bl	8007170 <iprintf>
}
 800660c:	bf00      	nop
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	08008920 	.word	0x08008920
 8006618:	08008938 	.word	0x08008938
 800661c:	08008970 	.word	0x08008970

08006620 <draw_main_menu>:

void draw_main_menu() {
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
	lcd_write_string("Player Selection", 1, 12);
 8006624:	220c      	movs	r2, #12
 8006626:	2101      	movs	r1, #1
 8006628:	4811      	ldr	r0, [pc, #68]	; (8006670 <draw_main_menu+0x50>)
 800662a:	f7fd fdcd 	bl	80041c8 <lcd_write_string>
	lcd_write_string("<P1>", 1, 108);
 800662e:	226c      	movs	r2, #108	; 0x6c
 8006630:	2101      	movs	r1, #1
 8006632:	4810      	ldr	r0, [pc, #64]	; (8006674 <draw_main_menu+0x54>)
 8006634:	f7fd fdc8 	bl	80041c8 <lcd_write_string>
	lcd_write_string("Difficulty", 2, 12);
 8006638:	220c      	movs	r2, #12
 800663a:	2102      	movs	r1, #2
 800663c:	480e      	ldr	r0, [pc, #56]	; (8006678 <draw_main_menu+0x58>)
 800663e:	f7fd fdc3 	bl	80041c8 <lcd_write_string>
	lcd_write_string("<easy>", 2, 98);
 8006642:	2262      	movs	r2, #98	; 0x62
 8006644:	2102      	movs	r1, #2
 8006646:	480d      	ldr	r0, [pc, #52]	; (800667c <draw_main_menu+0x5c>)
 8006648:	f7fd fdbe 	bl	80041c8 <lcd_write_string>
	lcd_write_string("Help Menu", 3, 12);
 800664c:	220c      	movs	r2, #12
 800664e:	2103      	movs	r1, #3
 8006650:	480b      	ldr	r0, [pc, #44]	; (8006680 <draw_main_menu+0x60>)
 8006652:	f7fd fdb9 	bl	80041c8 <lcd_write_string>
	lcd_write_string("Start Game", 4, 12);
 8006656:	220c      	movs	r2, #12
 8006658:	2104      	movs	r1, #4
 800665a:	480a      	ldr	r0, [pc, #40]	; (8006684 <draw_main_menu+0x64>)
 800665c:	f7fd fdb4 	bl	80041c8 <lcd_write_string>
	lcd_write_string("->", 1, 1);
 8006660:	2201      	movs	r2, #1
 8006662:	2101      	movs	r1, #1
 8006664:	4808      	ldr	r0, [pc, #32]	; (8006688 <draw_main_menu+0x68>)
 8006666:	f7fd fdaf 	bl	80041c8 <lcd_write_string>
}
 800666a:	bf00      	nop
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	080088a4 	.word	0x080088a4
 8006674:	080088b8 	.word	0x080088b8
 8006678:	0800890c 	.word	0x0800890c
 800667c:	080088f0 	.word	0x080088f0
 8006680:	0800899c 	.word	0x0800899c
 8006684:	080089a8 	.word	0x080089a8
 8006688:	08008874 	.word	0x08008874

0800668c <collision>:
#include "ansi_S.h"

void collision(int a,int b,int SS) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]

switch (a) {
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b04      	cmp	r3, #4
 800669c:	d166      	bne.n	800676c <collision+0xe0>
		case 4:
			a=0;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
			fgcolor(11);
 80066a2:	200b      	movs	r0, #11
 80066a4:	f7fe f926 	bl	80048f4 <fgcolor>
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	2b05      	cmp	r3, #5
 80066ae:	d850      	bhi.n	8006752 <collision+0xc6>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <collision+0x2c>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066d1 	.word	0x080066d1
 80066bc:	080066e7 	.word	0x080066e7
 80066c0:	080066fd 	.word	0x080066fd
 80066c4:	08006713 	.word	0x08006713
 80066c8:	08006729 	.word	0x08006729
 80066cc:	0800673f 	.word	0x0800673f
			switch(b) {
			case 1:
				Broken(2,1,2,27+SS);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	331b      	adds	r3, #27
 80066d4:	2202      	movs	r2, #2
 80066d6:	2101      	movs	r1, #1
 80066d8:	2002      	movs	r0, #2
 80066da:	f7fd f9d1 	bl	8003a80 <Broken>
				if (Bup){
 80066de:	4b59      	ldr	r3, [pc, #356]	; (8006844 <collision+0x1b8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d137      	bne.n	8006756 <collision+0xca>
				break;
				}
			case 2:
				Broken(2,2,2,27+SS);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	331b      	adds	r3, #27
 80066ea:	2202      	movs	r2, #2
 80066ec:	2102      	movs	r1, #2
 80066ee:	2002      	movs	r0, #2
 80066f0:	f7fd f9c6 	bl	8003a80 <Broken>
				if (Bdown){
 80066f4:	4b54      	ldr	r3, [pc, #336]	; (8006848 <collision+0x1bc>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d12e      	bne.n	800675a <collision+0xce>
				break;
				}
			case 3:
				Broken(2,3,2,27+SS);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	331b      	adds	r3, #27
 8006700:	2202      	movs	r2, #2
 8006702:	2103      	movs	r1, #3
 8006704:	2002      	movs	r0, #2
 8006706:	f7fd f9bb 	bl	8003a80 <Broken>
				if (Bcanon){
 800670a:	4b50      	ldr	r3, [pc, #320]	; (800684c <collision+0x1c0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d125      	bne.n	800675e <collision+0xd2>
				break;
				}
			case 4:
				Broken(2,4,2,27+SS);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	331b      	adds	r3, #27
 8006716:	2202      	movs	r2, #2
 8006718:	2104      	movs	r1, #4
 800671a:	2002      	movs	r0, #2
 800671c:	f7fd f9b0 	bl	8003a80 <Broken>
				if (Bship1) {
 8006720:	4b4b      	ldr	r3, [pc, #300]	; (8006850 <collision+0x1c4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d11c      	bne.n	8006762 <collision+0xd6>
				break;
				}
			case 5:
				Broken(2,5,2,27+SS);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	331b      	adds	r3, #27
 800672c:	2202      	movs	r2, #2
 800672e:	2105      	movs	r1, #5
 8006730:	2002      	movs	r0, #2
 8006732:	f7fd f9a5 	bl	8003a80 <Broken>
				if (Bship2) {
 8006736:	4b47      	ldr	r3, [pc, #284]	; (8006854 <collision+0x1c8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d113      	bne.n	8006766 <collision+0xda>
				break;
				}
			case 6:
				Broken(2,6,2,27+SS);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	331b      	adds	r3, #27
 8006742:	2202      	movs	r2, #2
 8006744:	2106      	movs	r1, #6
 8006746:	2002      	movs	r0, #2
 8006748:	f7fd f99a 	bl	8003a80 <Broken>
				if (Bship3) {
 800674c:	4b42      	ldr	r3, [pc, #264]	; (8006858 <collision+0x1cc>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
				break;
				}
			default: //timer - 10
				break;
 8006752:	bf00      	nop
 8006754:	e008      	b.n	8006768 <collision+0xdc>
				break;
 8006756:	bf00      	nop
 8006758:	e006      	b.n	8006768 <collision+0xdc>
				break;
 800675a:	bf00      	nop
 800675c:	e004      	b.n	8006768 <collision+0xdc>
				break;
 800675e:	bf00      	nop
 8006760:	e002      	b.n	8006768 <collision+0xdc>
				break;
 8006762:	bf00      	nop
 8006764:	e000      	b.n	8006768 <collision+0xdc>
				break;
 8006766:	bf00      	nop
			}
			resetbgcolor();
 8006768:	f7fe f8f2 	bl	8004950 <resetbgcolor>
		default:
			a>4 ? a=0:a++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b04      	cmp	r3, #4
 8006770:	dd02      	ble.n	8006778 <collision+0xec>
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e002      	b.n	800677e <collision+0xf2>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	3b01      	subs	r3, #1
 8006782:	2b05      	cmp	r3, #5
 8006784:	d84f      	bhi.n	8006826 <collision+0x19a>
 8006786:	a201      	add	r2, pc, #4	; (adr r2, 800678c <collision+0x100>)
 8006788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678c:	080067a5 	.word	0x080067a5
 8006790:	080067bb 	.word	0x080067bb
 8006794:	080067d1 	.word	0x080067d1
 8006798:	080067e7 	.word	0x080067e7
 800679c:	080067fd 	.word	0x080067fd
 80067a0:	08006813 	.word	0x08006813
			switch(b) {
				case 1:
					Broken(1,1,2,27+SS);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	331b      	adds	r3, #27
 80067a8:	2202      	movs	r2, #2
 80067aa:	2101      	movs	r1, #1
 80067ac:	2001      	movs	r0, #1
 80067ae:	f7fd f967 	bl	8003a80 <Broken>
					if (Bup){
 80067b2:	4b24      	ldr	r3, [pc, #144]	; (8006844 <collision+0x1b8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d137      	bne.n	800682a <collision+0x19e>
					break;
					}
				case 2:
					Broken(1,2,2,27+SS);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	331b      	adds	r3, #27
 80067be:	2202      	movs	r2, #2
 80067c0:	2102      	movs	r1, #2
 80067c2:	2001      	movs	r0, #1
 80067c4:	f7fd f95c 	bl	8003a80 <Broken>
					if (Bdown){
 80067c8:	4b1f      	ldr	r3, [pc, #124]	; (8006848 <collision+0x1bc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d12e      	bne.n	800682e <collision+0x1a2>
					break;
					}
				case 3:
					Broken(1,3,2,27+SS);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	331b      	adds	r3, #27
 80067d4:	2202      	movs	r2, #2
 80067d6:	2103      	movs	r1, #3
 80067d8:	2001      	movs	r0, #1
 80067da:	f7fd f951 	bl	8003a80 <Broken>
					if (Bcanon){
 80067de:	4b1b      	ldr	r3, [pc, #108]	; (800684c <collision+0x1c0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d125      	bne.n	8006832 <collision+0x1a6>
					break;
					}
				case 4:
					Broken(1,4,2,27+SS);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	331b      	adds	r3, #27
 80067ea:	2202      	movs	r2, #2
 80067ec:	2104      	movs	r1, #4
 80067ee:	2001      	movs	r0, #1
 80067f0:	f7fd f946 	bl	8003a80 <Broken>
					if (Bship1) {
 80067f4:	4b16      	ldr	r3, [pc, #88]	; (8006850 <collision+0x1c4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d11c      	bne.n	8006836 <collision+0x1aa>
					break;
					}
				case 5:
					Broken(1,5,2,27+SS);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	331b      	adds	r3, #27
 8006800:	2202      	movs	r2, #2
 8006802:	2105      	movs	r1, #5
 8006804:	2001      	movs	r0, #1
 8006806:	f7fd f93b 	bl	8003a80 <Broken>
					if (Bship2) {
 800680a:	4b12      	ldr	r3, [pc, #72]	; (8006854 <collision+0x1c8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d113      	bne.n	800683a <collision+0x1ae>
					break;
					}
				case 6:
					Broken(1,6,2,27+SS);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	331b      	adds	r3, #27
 8006816:	2202      	movs	r2, #2
 8006818:	2106      	movs	r1, #6
 800681a:	2001      	movs	r0, #1
 800681c:	f7fd f930 	bl	8003a80 <Broken>
					if (Bship3) {
 8006820:	4b0d      	ldr	r3, [pc, #52]	; (8006858 <collision+0x1cc>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
					break;
					}
				default: //timer - 10
					break;
 8006826:	bf00      	nop
 8006828:	e008      	b.n	800683c <collision+0x1b0>
					break;
 800682a:	bf00      	nop
 800682c:	e006      	b.n	800683c <collision+0x1b0>
					break;
 800682e:	bf00      	nop
 8006830:	e004      	b.n	800683c <collision+0x1b0>
					break;
 8006832:	bf00      	nop
 8006834:	e002      	b.n	800683c <collision+0x1b0>
					break;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <collision+0x1b0>
					break;
 800683a:	bf00      	nop
				}
		}
}
 800683c:	bf00      	nop
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	200001d0 	.word	0x200001d0
 8006848:	200001f0 	.word	0x200001f0
 800684c:	200001d8 	.word	0x200001d8
 8006850:	200001cc 	.word	0x200001cc
 8006854:	200001e8 	.word	0x200001e8
 8006858:	200001d4 	.word	0x200001d4

0800685c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e00a      	b.n	8006884 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800686e:	f3af 8000 	nop.w
 8006872:	4601      	mov	r1, r0
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	60ba      	str	r2, [r7, #8]
 800687a:	b2ca      	uxtb	r2, r1
 800687c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	3301      	adds	r3, #1
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	429a      	cmp	r2, r3
 800688a:	dbf0      	blt.n	800686e <_read+0x12>
	}

return len;
 800688c:	687b      	ldr	r3, [r7, #4]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <_close>:
	}
	return len;
}

int _close(int file)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
	return -1;
 800689e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068be:	605a      	str	r2, [r3, #4]
	return 0;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <_isatty>:

int _isatty(int file)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
	return 1;
 80068d6:	2301      	movs	r3, #1
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
	return 0;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
	...

08006900 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006908:	4b11      	ldr	r3, [pc, #68]	; (8006950 <_sbrk+0x50>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d102      	bne.n	8006916 <_sbrk+0x16>
		heap_end = &end;
 8006910:	4b0f      	ldr	r3, [pc, #60]	; (8006950 <_sbrk+0x50>)
 8006912:	4a10      	ldr	r2, [pc, #64]	; (8006954 <_sbrk+0x54>)
 8006914:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006916:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <_sbrk+0x50>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800691c:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <_sbrk+0x50>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4413      	add	r3, r2
 8006924:	466a      	mov	r2, sp
 8006926:	4293      	cmp	r3, r2
 8006928:	d907      	bls.n	800693a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800692a:	f000 fbe1 	bl	80070f0 <__errno>
 800692e:	4603      	mov	r3, r0
 8006930:	220c      	movs	r2, #12
 8006932:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006934:	f04f 33ff 	mov.w	r3, #4294967295
 8006938:	e006      	b.n	8006948 <_sbrk+0x48>
	}

	heap_end += incr;
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <_sbrk+0x50>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4413      	add	r3, r2
 8006942:	4a03      	ldr	r2, [pc, #12]	; (8006950 <_sbrk+0x50>)
 8006944:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006946:	68fb      	ldr	r3, [r7, #12]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	200001bc 	.word	0x200001bc
 8006954:	20000458 	.word	0x20000458

08006958 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800695c:	4b1f      	ldr	r3, [pc, #124]	; (80069dc <SystemInit+0x84>)
 800695e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006962:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <SystemInit+0x84>)
 8006964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800696c:	4b1c      	ldr	r3, [pc, #112]	; (80069e0 <SystemInit+0x88>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1b      	ldr	r2, [pc, #108]	; (80069e0 <SystemInit+0x88>)
 8006972:	f043 0301 	orr.w	r3, r3, #1
 8006976:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8006978:	4b19      	ldr	r3, [pc, #100]	; (80069e0 <SystemInit+0x88>)
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	4918      	ldr	r1, [pc, #96]	; (80069e0 <SystemInit+0x88>)
 800697e:	4b19      	ldr	r3, [pc, #100]	; (80069e4 <SystemInit+0x8c>)
 8006980:	4013      	ands	r3, r2
 8006982:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006984:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <SystemInit+0x88>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <SystemInit+0x88>)
 800698a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800698e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006992:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006994:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <SystemInit+0x88>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <SystemInit+0x88>)
 800699a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800699e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80069a0:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <SystemInit+0x88>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	4a0e      	ldr	r2, [pc, #56]	; (80069e0 <SystemInit+0x88>)
 80069a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80069aa:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80069ac:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <SystemInit+0x88>)
 80069ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b0:	4a0b      	ldr	r2, [pc, #44]	; (80069e0 <SystemInit+0x88>)
 80069b2:	f023 030f 	bic.w	r3, r3, #15
 80069b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <SystemInit+0x88>)
 80069ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069bc:	4908      	ldr	r1, [pc, #32]	; (80069e0 <SystemInit+0x88>)
 80069be:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <SystemInit+0x90>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <SystemInit+0x88>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80069ca:	f000 f80f 	bl	80069ec <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80069ce:	4b03      	ldr	r3, [pc, #12]	; (80069dc <SystemInit+0x84>)
 80069d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069d4:	609a      	str	r2, [r3, #8]
#endif  
}
 80069d6:	bf00      	nop
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	e000ed00 	.word	0xe000ed00
 80069e0:	40021000 	.word	0x40021000
 80069e4:	f87fc00c 	.word	0xf87fc00c
 80069e8:	ff00fccc 	.word	0xff00fccc

080069ec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80069f0:	4b21      	ldr	r3, [pc, #132]	; (8006a78 <SetSysClock+0x8c>)
 80069f2:	2212      	movs	r2, #18
 80069f4:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80069f6:	4b21      	ldr	r3, [pc, #132]	; (8006a7c <SetSysClock+0x90>)
 80069f8:	4a20      	ldr	r2, [pc, #128]	; (8006a7c <SetSysClock+0x90>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80069fe:	4b1f      	ldr	r3, [pc, #124]	; (8006a7c <SetSysClock+0x90>)
 8006a00:	4a1e      	ldr	r2, [pc, #120]	; (8006a7c <SetSysClock+0x90>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8006a06:	4b1d      	ldr	r3, [pc, #116]	; (8006a7c <SetSysClock+0x90>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	4a1c      	ldr	r2, [pc, #112]	; (8006a7c <SetSysClock+0x90>)
 8006a0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a10:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8006a12:	4b1a      	ldr	r3, [pc, #104]	; (8006a7c <SetSysClock+0x90>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	4a19      	ldr	r2, [pc, #100]	; (8006a7c <SetSysClock+0x90>)
 8006a18:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006a1c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8006a1e:	4b17      	ldr	r3, [pc, #92]	; (8006a7c <SetSysClock+0x90>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	4a16      	ldr	r2, [pc, #88]	; (8006a7c <SetSysClock+0x90>)
 8006a24:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8006a28:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8006a2a:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <SetSysClock+0x90>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <SetSysClock+0x90>)
 8006a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a34:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8006a36:	bf00      	nop
 8006a38:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <SetSysClock+0x90>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0f9      	beq.n	8006a38 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006a44:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <SetSysClock+0x90>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	4a0c      	ldr	r2, [pc, #48]	; (8006a7c <SetSysClock+0x90>)
 8006a4a:	f023 0303 	bic.w	r3, r3, #3
 8006a4e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <SetSysClock+0x90>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <SetSysClock+0x90>)
 8006a56:	f043 0302 	orr.w	r3, r3, #2
 8006a5a:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8006a5c:	bf00      	nop
 8006a5e:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <SetSysClock+0x90>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f003 030c 	and.w	r3, r3, #12
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d1f9      	bne.n	8006a5e <SetSysClock+0x72>
  {
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	bf00      	nop
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40022000 	.word	0x40022000
 8006a7c:	40021000 	.word	0x40021000

08006a80 <NVIC_EnableIRQ>:
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	f003 031f 	and.w	r3, r3, #31
 8006a90:	2201      	movs	r2, #1
 8006a92:	fa02 f103 	lsl.w	r1, r2, r3
 8006a96:	4a06      	ldr	r2, [pc, #24]	; (8006ab0 <NVIC_EnableIRQ+0x30>)
 8006a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	e000e100 	.word	0xe000e100

08006ab4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	6039      	str	r1, [r7, #0]
 8006abe:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8006ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	da0b      	bge.n	8006ae0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	490c      	ldr	r1, [pc, #48]	; (8006b00 <NVIC_SetPriority+0x4c>)
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	3b04      	subs	r3, #4
 8006ad6:	0112      	lsls	r2, r2, #4
 8006ad8:	b2d2      	uxtb	r2, r2
 8006ada:	440b      	add	r3, r1
 8006adc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8006ade:	e009      	b.n	8006af4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	4907      	ldr	r1, [pc, #28]	; (8006b04 <NVIC_SetPriority+0x50>)
 8006ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aea:	0112      	lsls	r2, r2, #4
 8006aec:	b2d2      	uxtb	r2, r2
 8006aee:	440b      	add	r3, r1
 8006af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	e000ed00 	.word	0xe000ed00
 8006b04:	e000e100 	.word	0xe000e100

08006b08 <initTimer>:
//TIM15->CR1 to disable the timer and configure the mode.
//TIM15->ARR to set the reload value.
//TIM15->PSC to set the prescaler.
// Write to TIM15->CR1 to enable the timer and begin counting

void initTimer(){
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8006b0c:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <initTimer+0x48>)
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	4a0f      	ldr	r2, [pc, #60]	; (8006b50 <initTimer+0x48>)
 8006b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b16:	6193      	str	r3, [r2, #24]
TIM15->CR1 = 0x0000; // Configure timer 15
 8006b18:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <initTimer+0x4c>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	801a      	strh	r2, [r3, #0]
TIM15->ARR = 0xF9FF; // Set reload value
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <initTimer+0x4c>)
 8006b20:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8006b24:	62da      	str	r2, [r3, #44]	; 0x2c
TIM15->PSC = 0x0009; // Set prescale value
 8006b26:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <initTimer+0x4c>)
 8006b28:	2209      	movs	r2, #9
 8006b2a:	851a      	strh	r2, [r3, #40]	; 0x28
TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <initTimer+0x4c>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	4a08      	ldr	r2, [pc, #32]	; (8006b54 <initTimer+0x4c>)
 8006b32:	f043 0301 	orr.w	r3, r3, #1
 8006b36:	60d3      	str	r3, [r2, #12]
TIM15->CR1 = 0x0001;
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <initTimer+0x4c>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	801a      	strh	r2, [r3, #0]
NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8006b3e:	2100      	movs	r1, #0
 8006b40:	2018      	movs	r0, #24
 8006b42:	f7ff ffb7 	bl	8006ab4 <NVIC_SetPriority>
NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 8006b46:	2018      	movs	r0, #24
 8006b48:	f7ff ff9a 	bl	8006a80 <NVIC_EnableIRQ>
}
 8006b4c:	bf00      	nop
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	40021000 	.word	0x40021000
 8006b54:	40014000 	.word	0x40014000

08006b58 <TIM2_IRQHandler>:

	NVIC_SetPriority(TIM2_IRQn, 1); // Set interrupt priority
	NVIC_EnableIRQ(TIM2_IRQn); // Enable interrupt
}

void TIM2_IRQHandler(void) {
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
	printf("This is Tim2: %d",i);
	i++;
*/

//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM2->SR &= ~0x0001; // Clear interrupt bit
 8006b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	6113      	str	r3, [r2, #16]
}
 8006b6c:	bf00      	nop
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
	...

08006b78 <TIM1_BRK_TIM15_IRQHandler>:
}
void initTimerStart(){
NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
TIM15->CR1 = 0x0001; // Configure timer 15
}
void TIM1_BRK_TIM15_IRQHandler(void) {
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0

	lcdUpdate++;
 8006b7c:	4b35      	ldr	r3, [pc, #212]	; (8006c54 <TIM1_BRK_TIM15_IRQHandler+0xdc>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	4a34      	ldr	r2, [pc, #208]	; (8006c54 <TIM1_BRK_TIM15_IRQHandler+0xdc>)
 8006b84:	6013      	str	r3, [r2, #0]
	if (lcdUpdate >= refreshRate){
 8006b86:	4b33      	ldr	r3, [pc, #204]	; (8006c54 <TIM1_BRK_TIM15_IRQHandler+0xdc>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4b33      	ldr	r3, [pc, #204]	; (8006c58 <TIM1_BRK_TIM15_IRQHandler+0xe0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	db13      	blt.n	8006bba <TIM1_BRK_TIM15_IRQHandler+0x42>

		if (timeState == 0){
 8006b92:	4b32      	ldr	r3, [pc, #200]	; (8006c5c <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	b25b      	sxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d103      	bne.n	8006ba4 <TIM1_BRK_TIM15_IRQHandler+0x2c>
			timeState = 1;
 8006b9c:	4b2f      	ldr	r3, [pc, #188]	; (8006c5c <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	e007      	b.n	8006bb4 <TIM1_BRK_TIM15_IRQHandler+0x3c>
		}
		else if (timeState == 1){
 8006ba4:	4b2d      	ldr	r3, [pc, #180]	; (8006c5c <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	b25b      	sxtb	r3, r3
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d102      	bne.n	8006bb4 <TIM1_BRK_TIM15_IRQHandler+0x3c>
			timeState = 0;
 8006bae:	4b2b      	ldr	r3, [pc, #172]	; (8006c5c <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
		}
		lcdUpdate = 0;
 8006bb4:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <TIM1_BRK_TIM15_IRQHandler+0xdc>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
	}

	if(tid.state){
 8006bba:	4b29      	ldr	r3, [pc, #164]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006bbc:	78db      	ldrb	r3, [r3, #3]
 8006bbe:	b25b      	sxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d03b      	beq.n	8006c3c <TIM1_BRK_TIM15_IRQHandler+0xc4>
		if (tid.mil <= 0){
 8006bc4:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006bc6:	789b      	ldrb	r3, [r3, #2]
 8006bc8:	b25b      	sxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dc0b      	bgt.n	8006be6 <TIM1_BRK_TIM15_IRQHandler+0x6e>
			tid.mil = 99;
 8006bce:	4b24      	ldr	r3, [pc, #144]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006bd0:	2263      	movs	r2, #99	; 0x63
 8006bd2:	709a      	strb	r2, [r3, #2]
			tid.sek--;
 8006bd4:	4b22      	ldr	r3, [pc, #136]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006bd6:	785b      	ldrb	r3, [r3, #1]
 8006bd8:	b25b      	sxtb	r3, r3
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	b25a      	sxtb	r2, r3
 8006be2:	4b1f      	ldr	r3, [pc, #124]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006be4:	705a      	strb	r2, [r3, #1]
		}
		if (tid.sek < 0){
 8006be6:	4b1e      	ldr	r3, [pc, #120]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	da0b      	bge.n	8006c08 <TIM1_BRK_TIM15_IRQHandler+0x90>
			tid.sek = 59;
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006bf2:	223b      	movs	r2, #59	; 0x3b
 8006bf4:	705a      	strb	r2, [r3, #1]
			tid.min--;
 8006bf6:	4b1a      	ldr	r3, [pc, #104]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	b25b      	sxtb	r3, r3
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	b25a      	sxtb	r2, r3
 8006c04:	4b16      	ldr	r3, [pc, #88]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006c06:	701a      	strb	r2, [r3, #0]
		}
		tid.mil--;
 8006c08:	4b15      	ldr	r3, [pc, #84]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006c0a:	789b      	ldrb	r3, [r3, #2]
 8006c0c:	b25b      	sxtb	r3, r3
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	b25a      	sxtb	r2, r3
 8006c16:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006c18:	709a      	strb	r2, [r3, #2]
		if (tid.min < 0){
 8006c1a:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	b25b      	sxtb	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	da0b      	bge.n	8006c3c <TIM1_BRK_TIM15_IRQHandler+0xc4>
			tid.state = 0;
 8006c24:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	70da      	strb	r2, [r3, #3]
			tid.min = 0;
 8006c2a:	4b0d      	ldr	r3, [pc, #52]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	701a      	strb	r2, [r3, #0]
			tid.sek = 0;
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	705a      	strb	r2, [r3, #1]
			tid.mil = 0;
 8006c36:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	709a      	strb	r2, [r3, #2]
		}

	}

//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM15->SR &= ~0x0001; // Clear interrupt bit
 8006c3c:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	4a08      	ldr	r2, [pc, #32]	; (8006c64 <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	6113      	str	r3, [r2, #16]
}
 8006c48:	bf00      	nop
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	200001ec 	.word	0x200001ec
 8006c58:	200001fc 	.word	0x200001fc
 8006c5c:	20000414 	.word	0x20000414
 8006c60:	20000418 	.word	0x20000418
 8006c64:	40014000 	.word	0x40014000

08006c68 <drawTime>:


void drawTime(){
 8006c68:	b5b0      	push	{r4, r5, r7, lr}
 8006c6a:	b0c6      	sub	sp, #280	; 0x118
 8006c6c:	af02      	add	r7, sp, #8
	static int hp;
	int red = 0, green = 0, yellow = 0, x = tid.sek + (tid.min * 60);
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c74:	2300      	movs	r3, #0
 8006c76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c80:	4bc4      	ldr	r3, [pc, #784]	; (8006f94 <drawTime+0x32c>)
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	b25b      	sxtb	r3, r3
 8006c86:	4619      	mov	r1, r3
 8006c88:	4bc2      	ldr	r3, [pc, #776]	; (8006f94 <drawTime+0x32c>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	b25b      	sxtb	r3, r3
 8006c8e:	461a      	mov	r2, r3
 8006c90:	4613      	mov	r3, r2
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	1a9b      	subs	r3, r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	440b      	add	r3, r1
 8006c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

	char greenS[] = "1G  1f 1G  1f 1G  1f 1G  1f 1G 1f 1D 1e 1f 1G  1f 1G  1f 1G  1f 1G  1f 1G 1f 1D1e1f 2c  1G 2c  1G 2c  1G 2c  1G 2c 1G 1g1g1G 2c  1G 2c  1G 2c  1G 2c  1G 2c 1G 1g1g1G  ";
 8006c9e:	4abe      	ldr	r2, [pc, #760]	; (8006f98 <drawTime+0x330>)
 8006ca0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	22a8      	movs	r2, #168	; 0xa8
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fa4b 	bl	8007144 <memcpy>
	char yellowS[] = " 2G2G2G2A2B2B2A2G2G2A2B2B2A2G";
 8006cae:	4bbb      	ldr	r3, [pc, #748]	; (8006f9c <drawTime+0x334>)
 8006cb0:	f107 0420 	add.w	r4, r7, #32
 8006cb4:	461d      	mov	r5, r3
 8006cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006cbe:	c407      	stmia	r4!, {r0, r1, r2}
 8006cc0:	8023      	strh	r3, [r4, #0]
	char redS[] = " 3C3C3C3D3E3E3D3C3C3D3E3E3D3C";
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	4ab6      	ldr	r2, [pc, #728]	; (8006fa0 <drawTime+0x338>)
 8006cc6:	461c      	mov	r4, r3
 8006cc8:	4615      	mov	r5, r2
 8006cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006cd2:	c407      	stmia	r4!, {r0, r1, r2}
 8006cd4:	8023      	strh	r3, [r4, #0]


	gotoxy(152,3);
 8006cd6:	2103      	movs	r1, #3
 8006cd8:	2098      	movs	r0, #152	; 0x98
 8006cda:	f7fd fe5b 	bl	8004994 <gotoxy>
	printf("%02d:%02d:%02d | %d | %03d", tid.min, tid.sek, tid.mil, tid.state,x);
 8006cde:	4bad      	ldr	r3, [pc, #692]	; (8006f94 <drawTime+0x32c>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	b25b      	sxtb	r3, r3
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4bab      	ldr	r3, [pc, #684]	; (8006f94 <drawTime+0x32c>)
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	b25b      	sxtb	r3, r3
 8006cec:	4618      	mov	r0, r3
 8006cee:	4ba9      	ldr	r3, [pc, #676]	; (8006f94 <drawTime+0x32c>)
 8006cf0:	789b      	ldrb	r3, [r3, #2]
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	461c      	mov	r4, r3
 8006cf6:	4ba7      	ldr	r3, [pc, #668]	; (8006f94 <drawTime+0x32c>)
 8006cf8:	78db      	ldrb	r3, [r3, #3]
 8006cfa:	b25b      	sxtb	r3, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	9200      	str	r2, [sp, #0]
 8006d06:	4623      	mov	r3, r4
 8006d08:	4602      	mov	r2, r0
 8006d0a:	48a6      	ldr	r0, [pc, #664]	; (8006fa4 <drawTime+0x33c>)
 8006d0c:	f000 fa30 	bl	8007170 <iprintf>

	gotoxy(140,5);
 8006d10:	2105      	movs	r1, #5
 8006d12:	208c      	movs	r0, #140	; 0x8c
 8006d14:	f7fd fe3e 	bl	8004994 <gotoxy>
	tid.state ? blink(1): blink(0);
 8006d18:	4b9e      	ldr	r3, [pc, #632]	; (8006f94 <drawTime+0x32c>)
 8006d1a:	78db      	ldrb	r3, [r3, #3]
 8006d1c:	b25b      	sxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <drawTime+0xc2>
 8006d22:	2001      	movs	r0, #1
 8006d24:	f7fd fe48 	bl	80049b8 <blink>
 8006d28:	e002      	b.n	8006d30 <drawTime+0xc8>
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	f7fd fe44 	bl	80049b8 <blink>
	if (x>=80){
 8006d30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d34:	2b4f      	cmp	r3, #79	; 0x4f
 8006d36:	dd2e      	ble.n	8006d96 <drawTime+0x12e>
		hp = 1;
 8006d38:	4b9b      	ldr	r3, [pc, #620]	; (8006fa8 <drawTime+0x340>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
		fgcolor(2); // green
 8006d3e:	2002      	movs	r0, #2
 8006d40:	f7fd fdd8 	bl	80048f4 <fgcolor>
		for (int i = 0; i < x-80; i++){
 8006d44:	2300      	movs	r3, #0
 8006d46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d4a:	e007      	b.n	8006d5c <drawTime+0xf4>
			printf("%c",178);
 8006d4c:	20b2      	movs	r0, #178	; 0xb2
 8006d4e:	f000 fa27 	bl	80071a0 <putchar>
		for (int i = 0; i < x-80; i++){
 8006d52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d56:	3301      	adds	r3, #1
 8006d58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d60:	3b50      	subs	r3, #80	; 0x50
 8006d62:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8006d66:	429a      	cmp	r2, r3
 8006d68:	dbf0      	blt.n	8006d4c <drawTime+0xe4>
		}
		fgcolor(11); // yellow
 8006d6a:	200b      	movs	r0, #11
 8006d6c:	f7fd fdc2 	bl	80048f4 <fgcolor>
		for (int i = x-80; i < 40; i++){
 8006d70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d74:	3b50      	subs	r3, #80	; 0x50
 8006d76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d7a:	e007      	b.n	8006d8c <drawTime+0x124>
			printf("%c",178);
 8006d7c:	20b2      	movs	r0, #178	; 0xb2
 8006d7e:	f000 fa0f 	bl	80071a0 <putchar>
		for (int i = x-80; i < 40; i++){
 8006d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d86:	3301      	adds	r3, #1
 8006d88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d90:	2b27      	cmp	r3, #39	; 0x27
 8006d92:	ddf3      	ble.n	8006d7c <drawTime+0x114>
 8006d94:	e073      	b.n	8006e7e <drawTime+0x216>
		}
	}
	else if (x>=40){
 8006d96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d9a:	2b27      	cmp	r3, #39	; 0x27
 8006d9c:	dd2e      	ble.n	8006dfc <drawTime+0x194>
		hp = 2;
 8006d9e:	4b82      	ldr	r3, [pc, #520]	; (8006fa8 <drawTime+0x340>)
 8006da0:	2202      	movs	r2, #2
 8006da2:	601a      	str	r2, [r3, #0]
		fgcolor(11); // yellow
 8006da4:	200b      	movs	r0, #11
 8006da6:	f7fd fda5 	bl	80048f4 <fgcolor>
		for (int i = 0; i < x-40; i++){
 8006daa:	2300      	movs	r3, #0
 8006dac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006db0:	e007      	b.n	8006dc2 <drawTime+0x15a>
			printf("%c",178);
 8006db2:	20b2      	movs	r0, #178	; 0xb2
 8006db4:	f000 f9f4 	bl	80071a0 <putchar>
		for (int i = 0; i < x-40; i++){
 8006db8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006dc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dc6:	3b28      	subs	r3, #40	; 0x28
 8006dc8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	dbf0      	blt.n	8006db2 <drawTime+0x14a>
		}
		fgcolor(1); // red
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	f7fd fd8f 	bl	80048f4 <fgcolor>
		for (int i = x-40; i < 40; i++){
 8006dd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dda:	3b28      	subs	r3, #40	; 0x28
 8006ddc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006de0:	e007      	b.n	8006df2 <drawTime+0x18a>
			printf("%c",178);
 8006de2:	20b2      	movs	r0, #178	; 0xb2
 8006de4:	f000 f9dc 	bl	80071a0 <putchar>
		for (int i = x-40; i < 40; i++){
 8006de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dec:	3301      	adds	r3, #1
 8006dee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df6:	2b27      	cmp	r3, #39	; 0x27
 8006df8:	ddf3      	ble.n	8006de2 <drawTime+0x17a>
 8006dfa:	e040      	b.n	8006e7e <drawTime+0x216>
		}
	}
	else if (x<40){
 8006dfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e00:	2b27      	cmp	r3, #39	; 0x27
 8006e02:	dc32      	bgt.n	8006e6a <drawTime+0x202>
		hp = 3;
 8006e04:	4b68      	ldr	r3, [pc, #416]	; (8006fa8 <drawTime+0x340>)
 8006e06:	2203      	movs	r2, #3
 8006e08:	601a      	str	r2, [r3, #0]

		led.red = tid.state;
 8006e0a:	4b62      	ldr	r3, [pc, #392]	; (8006f94 <drawTime+0x32c>)
 8006e0c:	78db      	ldrb	r3, [r3, #3]
 8006e0e:	b25b      	sxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	4b66      	ldr	r3, [pc, #408]	; (8006fac <drawTime+0x344>)
 8006e14:	601a      	str	r2, [r3, #0]
		fgcolor(1); // red
 8006e16:	2001      	movs	r0, #1
 8006e18:	f7fd fd6c 	bl	80048f4 <fgcolor>
		for (int i = 0; i < x; i++){
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e22:	e007      	b.n	8006e34 <drawTime+0x1cc>
			printf("%c",178);
 8006e24:	20b2      	movs	r0, #178	; 0xb2
 8006e26:	f000 f9bb 	bl	80071a0 <putchar>
		for (int i = 0; i < x; i++){
 8006e2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e2e:	3301      	adds	r3, #1
 8006e30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e34:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8006e38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	dbf1      	blt.n	8006e24 <drawTime+0x1bc>
		}
		blink(0);
 8006e40:	2000      	movs	r0, #0
 8006e42:	f7fd fdb9 	bl	80049b8 <blink>
		for (int i = x; i < 40; i++){
 8006e46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e4e:	e007      	b.n	8006e60 <drawTime+0x1f8>
			printf("%c",32);
 8006e50:	2020      	movs	r0, #32
 8006e52:	f000 f9a5 	bl	80071a0 <putchar>
		for (int i = x; i < 40; i++){
 8006e56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e64:	2b27      	cmp	r3, #39	; 0x27
 8006e66:	ddf3      	ble.n	8006e50 <drawTime+0x1e8>
 8006e68:	e009      	b.n	8006e7e <drawTime+0x216>
		}
	}
	else if (x = 0){
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <drawTime+0x216>
		hp = 0;
 8006e78:	4b4b      	ldr	r3, [pc, #300]	; (8006fa8 <drawTime+0x340>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
	}

	blink(0);
 8006e7e:	2000      	movs	r0, #0
 8006e80:	f7fd fd9a 	bl	80049b8 <blink>
	resetbgcolor();
 8006e84:	f7fd fd64 	bl	8004950 <resetbgcolor>

	switch(hp){
 8006e88:	4b47      	ldr	r3, [pc, #284]	; (8006fa8 <drawTime+0x340>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d842      	bhi.n	8006f16 <drawTime+0x2ae>
 8006e90:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <drawTime+0x230>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ea9 	.word	0x08006ea9
 8006e9c:	08006eb7 	.word	0x08006eb7
 8006ea0:	08006ed7 	.word	0x08006ed7
 8006ea4:	08006ef7 	.word	0x08006ef7
		case 0:
			red = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			green = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			break;
 8006eb4:	e02f      	b.n	8006f16 <drawTime+0x2ae>
		case 1:
			green = !tid.state | timeState;
 8006eb6:	4b37      	ldr	r3, [pc, #220]	; (8006f94 <drawTime+0x32c>)
 8006eb8:	78db      	ldrb	r3, [r3, #3]
 8006eba:	b25b      	sxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	4b39      	ldr	r3, [pc, #228]	; (8006fb0 <drawTime+0x348>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	b25b      	sxtb	r3, r3
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			break;
 8006ed4:	e01f      	b.n	8006f16 <drawTime+0x2ae>
		case 2:
			yellow = !tid.state | timeState;
 8006ed6:	4b2f      	ldr	r3, [pc, #188]	; (8006f94 <drawTime+0x32c>)
 8006ed8:	78db      	ldrb	r3, [r3, #3]
 8006eda:	b25b      	sxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bf0c      	ite	eq
 8006ee0:	2301      	moveq	r3, #1
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <drawTime+0x348>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	b25b      	sxtb	r3, r3
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			break;
 8006ef4:	e00f      	b.n	8006f16 <drawTime+0x2ae>
		case 3:
			red = !tid.state | timeState;
 8006ef6:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <drawTime+0x32c>)
 8006ef8:	78db      	ldrb	r3, [r3, #3]
 8006efa:	b25b      	sxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	bf0c      	ite	eq
 8006f00:	2301      	moveq	r3, #1
 8006f02:	2300      	movne	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	4b29      	ldr	r3, [pc, #164]	; (8006fb0 <drawTime+0x348>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	b25b      	sxtb	r3, r3
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8006f14:	bf00      	nop
	}

	led.gre = green | yellow;
 8006f16:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8006f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	4a22      	ldr	r2, [pc, #136]	; (8006fac <drawTime+0x344>)
 8006f22:	6093      	str	r3, [r2, #8]
	led.red = red | yellow;
 8006f24:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <drawTime+0x344>)
 8006f30:	6013      	str	r3, [r2, #0]

	if (tid.state){
 8006f32:	4b18      	ldr	r3, [pc, #96]	; (8006f94 <drawTime+0x32c>)
 8006f34:	78db      	ldrb	r3, [r3, #3]
 8006f36:	b25b      	sxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d03b      	beq.n	8006fb4 <drawTime+0x34c>
		if(green & timeState ){
 8006f3c:	4b1c      	ldr	r3, [pc, #112]	; (8006fb0 <drawTime+0x348>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	b25b      	sxtb	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d005      	beq.n	8006f5a <drawTime+0x2f2>
			playTone(greenS);
 8006f4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fd ffe8 	bl	8004f28 <playTone>
	}
	else {
		setFreq(0);
	}

}
 8006f58:	e02f      	b.n	8006fba <drawTime+0x352>
		else if(yellow & timeState ){
 8006f5a:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <drawTime+0x348>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b25b      	sxtb	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f66:	4013      	ands	r3, r2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <drawTime+0x310>
			playTone(yellowS);
 8006f6c:	f107 0320 	add.w	r3, r7, #32
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fd ffd9 	bl	8004f28 <playTone>
}
 8006f76:	e020      	b.n	8006fba <drawTime+0x352>
		else if(red & timeState){
 8006f78:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <drawTime+0x348>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	b25b      	sxtb	r3, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d017      	beq.n	8006fba <drawTime+0x352>
			playTone(redS);
 8006f8a:	463b      	mov	r3, r7
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fd ffcb 	bl	8004f28 <playTone>
}
 8006f92:	e012      	b.n	8006fba <drawTime+0x352>
 8006f94:	20000418 	.word	0x20000418
 8006f98:	080089d0 	.word	0x080089d0
 8006f9c:	08008a78 	.word	0x08008a78
 8006fa0:	08008a98 	.word	0x08008a98
 8006fa4:	080089b4 	.word	0x080089b4
 8006fa8:	200001c0 	.word	0x200001c0
 8006fac:	200001dc 	.word	0x200001dc
 8006fb0:	20000414 	.word	0x20000414
		setFreq(0);
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	f7fe fadb 	bl	8005570 <setFreq>
}
 8006fba:	bf00      	nop
 8006fbc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bdb0      	pop	{r4, r5, r7, pc}

08006fc4 <windowSmp>:
#include "ansi_s.h"

void windowSmp(int x1, int y1, int x2, int y2) {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b090      	sub	sp, #64	; 0x40
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]

		int tl = 218; 	// ┌
 8006fd2:	23da      	movs	r3, #218	; 0xda
 8006fd4:	633b      	str	r3, [r7, #48]	; 0x30
		int lsd = 180; 	// ┤
 8006fd6:	23b4      	movs	r3, #180	; 0xb4
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
		int bl = 192;	// └
 8006fda:	23c0      	movs	r3, #192	; 0xc0
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
		int wll = 179;	// │
 8006fde:	23b3      	movs	r3, #179	; 0xb3
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
		int btt = 196; 	// ─
 8006fe2:	23c4      	movs	r3, #196	; 0xc4
 8006fe4:	623b      	str	r3, [r7, #32]
		int tr = 191; 	// ┐
 8006fe6:	23bf      	movs	r3, #191	; 0xbf
 8006fe8:	61fb      	str	r3, [r7, #28]
		int rsd = 195;	// ├
 8006fea:	23c3      	movs	r3, #195	; 0xc3
 8006fec:	61bb      	str	r3, [r7, #24]
		int br = 217;	// ┘
 8006fee:	23d9      	movs	r3, #217	; 0xd9
 8006ff0:	617b      	str	r3, [r7, #20]

		//Top ┌──────┐
		gotoxy(x1, y1);
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7fd fccd 	bl	8004994 <gotoxy>
		printf("%c", tl);
 8006ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ffc:	f000 f8d0 	bl	80071a0 <putchar>
		for (int i=x1+1;i<x2-1;i++){
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	3301      	adds	r3, #1
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007006:	e005      	b.n	8007014 <windowSmp+0x50>
			printf("%c",btt);
 8007008:	6a38      	ldr	r0, [r7, #32]
 800700a:	f000 f8c9 	bl	80071a0 <putchar>
		for (int i=x1+1;i<x2-1;i++){
 800700e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007010:	3301      	adds	r3, #1
 8007012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3b01      	subs	r3, #1
 8007018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800701a:	429a      	cmp	r2, r3
 800701c:	dbf4      	blt.n	8007008 <windowSmp+0x44>
		}


		printf("%c\n", tr);
 800701e:	69f9      	ldr	r1, [r7, #28]
 8007020:	481d      	ldr	r0, [pc, #116]	; (8007098 <windowSmp+0xd4>)
 8007022:	f000 f8a5 	bl	8007170 <iprintf>

		//Mid │        │
		for (int i = y1+1; i < y2; i++) {
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	3301      	adds	r3, #1
 800702a:	63bb      	str	r3, [r7, #56]	; 0x38
 800702c:	e012      	b.n	8007054 <windowSmp+0x90>
			gotoxy(x1, i);
 800702e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f7fd fcaf 	bl	8004994 <gotoxy>
			printf("%c", wll);
 8007036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007038:	f000 f8b2 	bl	80071a0 <putchar>
			gotoxy(x2-1,i);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3b01      	subs	r3, #1
 8007040:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007042:	4618      	mov	r0, r3
 8007044:	f7fd fca6 	bl	8004994 <gotoxy>
			printf("%c", wll);
 8007048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800704a:	f000 f8a9 	bl	80071a0 <putchar>
		for (int i = y1+1; i < y2; i++) {
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	3301      	adds	r3, #1
 8007052:	63bb      	str	r3, [r7, #56]	; 0x38
 8007054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	dbe8      	blt.n	800702e <windowSmp+0x6a>
		}

		//Bottom  └─────────┘
		gotoxy(x1,y2);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f7fd fc98 	bl	8004994 <gotoxy>
		printf("%c", bl);
 8007064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007066:	f000 f89b 	bl	80071a0 <putchar>
		for (int i=x1; i < x2-2; i++){
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	637b      	str	r3, [r7, #52]	; 0x34
 800706e:	e005      	b.n	800707c <windowSmp+0xb8>
			printf("%c", btt);
 8007070:	6a38      	ldr	r0, [r7, #32]
 8007072:	f000 f895 	bl	80071a0 <putchar>
		for (int i=x1; i < x2-2; i++){
 8007076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007078:	3301      	adds	r3, #1
 800707a:	637b      	str	r3, [r7, #52]	; 0x34
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3b02      	subs	r3, #2
 8007080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007082:	429a      	cmp	r2, r3
 8007084:	dbf4      	blt.n	8007070 <windowSmp+0xac>
		}
		printf("%c\n", br);
 8007086:	6979      	ldr	r1, [r7, #20]
 8007088:	4803      	ldr	r0, [pc, #12]	; (8007098 <windowSmp+0xd4>)
 800708a:	f000 f871 	bl	8007170 <iprintf>
	}
 800708e:	bf00      	nop
 8007090:	3740      	adds	r7, #64	; 0x40
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	08008ab8 	.word	0x08008ab8

0800709c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800709c:	480d      	ldr	r0, [pc, #52]	; (80070d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800709e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80070a0:	480d      	ldr	r0, [pc, #52]	; (80070d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80070a2:	490e      	ldr	r1, [pc, #56]	; (80070dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80070a4:	4a0e      	ldr	r2, [pc, #56]	; (80070e0 <LoopForever+0xe>)
  movs r3, #0
 80070a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80070a8:	e002      	b.n	80070b0 <LoopCopyDataInit>

080070aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80070aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80070ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80070ae:	3304      	adds	r3, #4

080070b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80070b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80070b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80070b4:	d3f9      	bcc.n	80070aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80070b6:	4a0b      	ldr	r2, [pc, #44]	; (80070e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80070b8:	4c0b      	ldr	r4, [pc, #44]	; (80070e8 <LoopForever+0x16>)
  movs r3, #0
 80070ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070bc:	e001      	b.n	80070c2 <LoopFillZerobss>

080070be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070c0:	3204      	adds	r2, #4

080070c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80070c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070c4:	d3fb      	bcc.n	80070be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80070c6:	f7ff fc47 	bl	8006958 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80070ca:	f000 f817 	bl	80070fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80070ce:	f7fe fa97 	bl	8005600 <main>

080070d2 <LoopForever>:

LoopForever:
    b LoopForever
 80070d2:	e7fe      	b.n	80070d2 <LoopForever>
  ldr   r0, =_estack
 80070d4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80070d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80070dc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80070e0:	08008d70 	.word	0x08008d70
  ldr r2, =_sbss
 80070e4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80070e8:	20000458 	.word	0x20000458

080070ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80070ec:	e7fe      	b.n	80070ec <ADC1_2_IRQHandler>
	...

080070f0 <__errno>:
 80070f0:	4b01      	ldr	r3, [pc, #4]	; (80070f8 <__errno+0x8>)
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	2000002c 	.word	0x2000002c

080070fc <__libc_init_array>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	4d0d      	ldr	r5, [pc, #52]	; (8007134 <__libc_init_array+0x38>)
 8007100:	4c0d      	ldr	r4, [pc, #52]	; (8007138 <__libc_init_array+0x3c>)
 8007102:	1b64      	subs	r4, r4, r5
 8007104:	10a4      	asrs	r4, r4, #2
 8007106:	2600      	movs	r6, #0
 8007108:	42a6      	cmp	r6, r4
 800710a:	d109      	bne.n	8007120 <__libc_init_array+0x24>
 800710c:	4d0b      	ldr	r5, [pc, #44]	; (800713c <__libc_init_array+0x40>)
 800710e:	4c0c      	ldr	r4, [pc, #48]	; (8007140 <__libc_init_array+0x44>)
 8007110:	f001 fa6a 	bl	80085e8 <_init>
 8007114:	1b64      	subs	r4, r4, r5
 8007116:	10a4      	asrs	r4, r4, #2
 8007118:	2600      	movs	r6, #0
 800711a:	42a6      	cmp	r6, r4
 800711c:	d105      	bne.n	800712a <__libc_init_array+0x2e>
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	f855 3b04 	ldr.w	r3, [r5], #4
 8007124:	4798      	blx	r3
 8007126:	3601      	adds	r6, #1
 8007128:	e7ee      	b.n	8007108 <__libc_init_array+0xc>
 800712a:	f855 3b04 	ldr.w	r3, [r5], #4
 800712e:	4798      	blx	r3
 8007130:	3601      	adds	r6, #1
 8007132:	e7f2      	b.n	800711a <__libc_init_array+0x1e>
 8007134:	08008d68 	.word	0x08008d68
 8007138:	08008d68 	.word	0x08008d68
 800713c:	08008d68 	.word	0x08008d68
 8007140:	08008d6c 	.word	0x08008d6c

08007144 <memcpy>:
 8007144:	440a      	add	r2, r1
 8007146:	4291      	cmp	r1, r2
 8007148:	f100 33ff 	add.w	r3, r0, #4294967295
 800714c:	d100      	bne.n	8007150 <memcpy+0xc>
 800714e:	4770      	bx	lr
 8007150:	b510      	push	{r4, lr}
 8007152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800715a:	4291      	cmp	r1, r2
 800715c:	d1f9      	bne.n	8007152 <memcpy+0xe>
 800715e:	bd10      	pop	{r4, pc}

08007160 <memset>:
 8007160:	4402      	add	r2, r0
 8007162:	4603      	mov	r3, r0
 8007164:	4293      	cmp	r3, r2
 8007166:	d100      	bne.n	800716a <memset+0xa>
 8007168:	4770      	bx	lr
 800716a:	f803 1b01 	strb.w	r1, [r3], #1
 800716e:	e7f9      	b.n	8007164 <memset+0x4>

08007170 <iprintf>:
 8007170:	b40f      	push	{r0, r1, r2, r3}
 8007172:	4b0a      	ldr	r3, [pc, #40]	; (800719c <iprintf+0x2c>)
 8007174:	b513      	push	{r0, r1, r4, lr}
 8007176:	681c      	ldr	r4, [r3, #0]
 8007178:	b124      	cbz	r4, 8007184 <iprintf+0x14>
 800717a:	69a3      	ldr	r3, [r4, #24]
 800717c:	b913      	cbnz	r3, 8007184 <iprintf+0x14>
 800717e:	4620      	mov	r0, r4
 8007180:	f000 fa2c 	bl	80075dc <__sinit>
 8007184:	ab05      	add	r3, sp, #20
 8007186:	9a04      	ldr	r2, [sp, #16]
 8007188:	68a1      	ldr	r1, [r4, #8]
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fd61 	bl	8007c54 <_vfiprintf_r>
 8007192:	b002      	add	sp, #8
 8007194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007198:	b004      	add	sp, #16
 800719a:	4770      	bx	lr
 800719c:	2000002c 	.word	0x2000002c

080071a0 <putchar>:
 80071a0:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <putchar+0x28>)
 80071a2:	b513      	push	{r0, r1, r4, lr}
 80071a4:	681c      	ldr	r4, [r3, #0]
 80071a6:	4601      	mov	r1, r0
 80071a8:	b134      	cbz	r4, 80071b8 <putchar+0x18>
 80071aa:	69a3      	ldr	r3, [r4, #24]
 80071ac:	b923      	cbnz	r3, 80071b8 <putchar+0x18>
 80071ae:	9001      	str	r0, [sp, #4]
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fa13 	bl	80075dc <__sinit>
 80071b6:	9901      	ldr	r1, [sp, #4]
 80071b8:	68a2      	ldr	r2, [r4, #8]
 80071ba:	4620      	mov	r0, r4
 80071bc:	b002      	add	sp, #8
 80071be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c2:	f001 b80b 	b.w	80081dc <_putc_r>
 80071c6:	bf00      	nop
 80071c8:	2000002c 	.word	0x2000002c

080071cc <setbuf>:
 80071cc:	2900      	cmp	r1, #0
 80071ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071d2:	bf0c      	ite	eq
 80071d4:	2202      	moveq	r2, #2
 80071d6:	2200      	movne	r2, #0
 80071d8:	f000 b800 	b.w	80071dc <setvbuf>

080071dc <setvbuf>:
 80071dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071e0:	461d      	mov	r5, r3
 80071e2:	4b5d      	ldr	r3, [pc, #372]	; (8007358 <setvbuf+0x17c>)
 80071e4:	681f      	ldr	r7, [r3, #0]
 80071e6:	4604      	mov	r4, r0
 80071e8:	460e      	mov	r6, r1
 80071ea:	4690      	mov	r8, r2
 80071ec:	b127      	cbz	r7, 80071f8 <setvbuf+0x1c>
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	b913      	cbnz	r3, 80071f8 <setvbuf+0x1c>
 80071f2:	4638      	mov	r0, r7
 80071f4:	f000 f9f2 	bl	80075dc <__sinit>
 80071f8:	4b58      	ldr	r3, [pc, #352]	; (800735c <setvbuf+0x180>)
 80071fa:	429c      	cmp	r4, r3
 80071fc:	d167      	bne.n	80072ce <setvbuf+0xf2>
 80071fe:	687c      	ldr	r4, [r7, #4]
 8007200:	f1b8 0f02 	cmp.w	r8, #2
 8007204:	d006      	beq.n	8007214 <setvbuf+0x38>
 8007206:	f1b8 0f01 	cmp.w	r8, #1
 800720a:	f200 809f 	bhi.w	800734c <setvbuf+0x170>
 800720e:	2d00      	cmp	r5, #0
 8007210:	f2c0 809c 	blt.w	800734c <setvbuf+0x170>
 8007214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007216:	07db      	lsls	r3, r3, #31
 8007218:	d405      	bmi.n	8007226 <setvbuf+0x4a>
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	0598      	lsls	r0, r3, #22
 800721e:	d402      	bmi.n	8007226 <setvbuf+0x4a>
 8007220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007222:	f000 fa79 	bl	8007718 <__retarget_lock_acquire_recursive>
 8007226:	4621      	mov	r1, r4
 8007228:	4638      	mov	r0, r7
 800722a:	f000 f943 	bl	80074b4 <_fflush_r>
 800722e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007230:	b141      	cbz	r1, 8007244 <setvbuf+0x68>
 8007232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007236:	4299      	cmp	r1, r3
 8007238:	d002      	beq.n	8007240 <setvbuf+0x64>
 800723a:	4638      	mov	r0, r7
 800723c:	f000 fada 	bl	80077f4 <_free_r>
 8007240:	2300      	movs	r3, #0
 8007242:	6363      	str	r3, [r4, #52]	; 0x34
 8007244:	2300      	movs	r3, #0
 8007246:	61a3      	str	r3, [r4, #24]
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	89a3      	ldrh	r3, [r4, #12]
 800724c:	0619      	lsls	r1, r3, #24
 800724e:	d503      	bpl.n	8007258 <setvbuf+0x7c>
 8007250:	6921      	ldr	r1, [r4, #16]
 8007252:	4638      	mov	r0, r7
 8007254:	f000 face 	bl	80077f4 <_free_r>
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800725e:	f023 0303 	bic.w	r3, r3, #3
 8007262:	f1b8 0f02 	cmp.w	r8, #2
 8007266:	81a3      	strh	r3, [r4, #12]
 8007268:	d06c      	beq.n	8007344 <setvbuf+0x168>
 800726a:	ab01      	add	r3, sp, #4
 800726c:	466a      	mov	r2, sp
 800726e:	4621      	mov	r1, r4
 8007270:	4638      	mov	r0, r7
 8007272:	f000 fa53 	bl	800771c <__swhatbuf_r>
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	4318      	orrs	r0, r3
 800727a:	81a0      	strh	r0, [r4, #12]
 800727c:	2d00      	cmp	r5, #0
 800727e:	d130      	bne.n	80072e2 <setvbuf+0x106>
 8007280:	9d00      	ldr	r5, [sp, #0]
 8007282:	4628      	mov	r0, r5
 8007284:	f000 faae 	bl	80077e4 <malloc>
 8007288:	4606      	mov	r6, r0
 800728a:	2800      	cmp	r0, #0
 800728c:	d155      	bne.n	800733a <setvbuf+0x15e>
 800728e:	f8dd 9000 	ldr.w	r9, [sp]
 8007292:	45a9      	cmp	r9, r5
 8007294:	d14a      	bne.n	800732c <setvbuf+0x150>
 8007296:	f04f 35ff 	mov.w	r5, #4294967295
 800729a:	2200      	movs	r2, #0
 800729c:	60a2      	str	r2, [r4, #8]
 800729e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80072a2:	6022      	str	r2, [r4, #0]
 80072a4:	6122      	str	r2, [r4, #16]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ac:	6162      	str	r2, [r4, #20]
 80072ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072b0:	f043 0302 	orr.w	r3, r3, #2
 80072b4:	07d2      	lsls	r2, r2, #31
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	d405      	bmi.n	80072c6 <setvbuf+0xea>
 80072ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80072be:	d102      	bne.n	80072c6 <setvbuf+0xea>
 80072c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072c2:	f000 fa2a 	bl	800771a <__retarget_lock_release_recursive>
 80072c6:	4628      	mov	r0, r5
 80072c8:	b003      	add	sp, #12
 80072ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072ce:	4b24      	ldr	r3, [pc, #144]	; (8007360 <setvbuf+0x184>)
 80072d0:	429c      	cmp	r4, r3
 80072d2:	d101      	bne.n	80072d8 <setvbuf+0xfc>
 80072d4:	68bc      	ldr	r4, [r7, #8]
 80072d6:	e793      	b.n	8007200 <setvbuf+0x24>
 80072d8:	4b22      	ldr	r3, [pc, #136]	; (8007364 <setvbuf+0x188>)
 80072da:	429c      	cmp	r4, r3
 80072dc:	bf08      	it	eq
 80072de:	68fc      	ldreq	r4, [r7, #12]
 80072e0:	e78e      	b.n	8007200 <setvbuf+0x24>
 80072e2:	2e00      	cmp	r6, #0
 80072e4:	d0cd      	beq.n	8007282 <setvbuf+0xa6>
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	b913      	cbnz	r3, 80072f0 <setvbuf+0x114>
 80072ea:	4638      	mov	r0, r7
 80072ec:	f000 f976 	bl	80075dc <__sinit>
 80072f0:	f1b8 0f01 	cmp.w	r8, #1
 80072f4:	bf08      	it	eq
 80072f6:	89a3      	ldrheq	r3, [r4, #12]
 80072f8:	6026      	str	r6, [r4, #0]
 80072fa:	bf04      	itt	eq
 80072fc:	f043 0301 	orreq.w	r3, r3, #1
 8007300:	81a3      	strheq	r3, [r4, #12]
 8007302:	89a2      	ldrh	r2, [r4, #12]
 8007304:	f012 0308 	ands.w	r3, r2, #8
 8007308:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800730c:	d01c      	beq.n	8007348 <setvbuf+0x16c>
 800730e:	07d3      	lsls	r3, r2, #31
 8007310:	bf41      	itttt	mi
 8007312:	2300      	movmi	r3, #0
 8007314:	426d      	negmi	r5, r5
 8007316:	60a3      	strmi	r3, [r4, #8]
 8007318:	61a5      	strmi	r5, [r4, #24]
 800731a:	bf58      	it	pl
 800731c:	60a5      	strpl	r5, [r4, #8]
 800731e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007320:	f015 0501 	ands.w	r5, r5, #1
 8007324:	d115      	bne.n	8007352 <setvbuf+0x176>
 8007326:	f412 7f00 	tst.w	r2, #512	; 0x200
 800732a:	e7c8      	b.n	80072be <setvbuf+0xe2>
 800732c:	4648      	mov	r0, r9
 800732e:	f000 fa59 	bl	80077e4 <malloc>
 8007332:	4606      	mov	r6, r0
 8007334:	2800      	cmp	r0, #0
 8007336:	d0ae      	beq.n	8007296 <setvbuf+0xba>
 8007338:	464d      	mov	r5, r9
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	e7d0      	b.n	80072e6 <setvbuf+0x10a>
 8007344:	2500      	movs	r5, #0
 8007346:	e7a8      	b.n	800729a <setvbuf+0xbe>
 8007348:	60a3      	str	r3, [r4, #8]
 800734a:	e7e8      	b.n	800731e <setvbuf+0x142>
 800734c:	f04f 35ff 	mov.w	r5, #4294967295
 8007350:	e7b9      	b.n	80072c6 <setvbuf+0xea>
 8007352:	2500      	movs	r5, #0
 8007354:	e7b7      	b.n	80072c6 <setvbuf+0xea>
 8007356:	bf00      	nop
 8007358:	2000002c 	.word	0x2000002c
 800735c:	08008cf4 	.word	0x08008cf4
 8007360:	08008d14 	.word	0x08008d14
 8007364:	08008cd4 	.word	0x08008cd4

08007368 <siprintf>:
 8007368:	b40e      	push	{r1, r2, r3}
 800736a:	b500      	push	{lr}
 800736c:	b09c      	sub	sp, #112	; 0x70
 800736e:	ab1d      	add	r3, sp, #116	; 0x74
 8007370:	9002      	str	r0, [sp, #8]
 8007372:	9006      	str	r0, [sp, #24]
 8007374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007378:	4809      	ldr	r0, [pc, #36]	; (80073a0 <siprintf+0x38>)
 800737a:	9107      	str	r1, [sp, #28]
 800737c:	9104      	str	r1, [sp, #16]
 800737e:	4909      	ldr	r1, [pc, #36]	; (80073a4 <siprintf+0x3c>)
 8007380:	f853 2b04 	ldr.w	r2, [r3], #4
 8007384:	9105      	str	r1, [sp, #20]
 8007386:	6800      	ldr	r0, [r0, #0]
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	a902      	add	r1, sp, #8
 800738c:	f000 fb38 	bl	8007a00 <_svfiprintf_r>
 8007390:	9b02      	ldr	r3, [sp, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	b01c      	add	sp, #112	; 0x70
 8007398:	f85d eb04 	ldr.w	lr, [sp], #4
 800739c:	b003      	add	sp, #12
 800739e:	4770      	bx	lr
 80073a0:	2000002c 	.word	0x2000002c
 80073a4:	ffff0208 	.word	0xffff0208

080073a8 <__sflush_r>:
 80073a8:	898a      	ldrh	r2, [r1, #12]
 80073aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ae:	4605      	mov	r5, r0
 80073b0:	0710      	lsls	r0, r2, #28
 80073b2:	460c      	mov	r4, r1
 80073b4:	d458      	bmi.n	8007468 <__sflush_r+0xc0>
 80073b6:	684b      	ldr	r3, [r1, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	dc05      	bgt.n	80073c8 <__sflush_r+0x20>
 80073bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073be:	2b00      	cmp	r3, #0
 80073c0:	dc02      	bgt.n	80073c8 <__sflush_r+0x20>
 80073c2:	2000      	movs	r0, #0
 80073c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	d0f9      	beq.n	80073c2 <__sflush_r+0x1a>
 80073ce:	2300      	movs	r3, #0
 80073d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073d4:	682f      	ldr	r7, [r5, #0]
 80073d6:	602b      	str	r3, [r5, #0]
 80073d8:	d032      	beq.n	8007440 <__sflush_r+0x98>
 80073da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	075a      	lsls	r2, r3, #29
 80073e0:	d505      	bpl.n	80073ee <__sflush_r+0x46>
 80073e2:	6863      	ldr	r3, [r4, #4]
 80073e4:	1ac0      	subs	r0, r0, r3
 80073e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073e8:	b10b      	cbz	r3, 80073ee <__sflush_r+0x46>
 80073ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073ec:	1ac0      	subs	r0, r0, r3
 80073ee:	2300      	movs	r3, #0
 80073f0:	4602      	mov	r2, r0
 80073f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073f4:	6a21      	ldr	r1, [r4, #32]
 80073f6:	4628      	mov	r0, r5
 80073f8:	47b0      	blx	r6
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	d106      	bne.n	800740e <__sflush_r+0x66>
 8007400:	6829      	ldr	r1, [r5, #0]
 8007402:	291d      	cmp	r1, #29
 8007404:	d82c      	bhi.n	8007460 <__sflush_r+0xb8>
 8007406:	4a2a      	ldr	r2, [pc, #168]	; (80074b0 <__sflush_r+0x108>)
 8007408:	40ca      	lsrs	r2, r1
 800740a:	07d6      	lsls	r6, r2, #31
 800740c:	d528      	bpl.n	8007460 <__sflush_r+0xb8>
 800740e:	2200      	movs	r2, #0
 8007410:	6062      	str	r2, [r4, #4]
 8007412:	04d9      	lsls	r1, r3, #19
 8007414:	6922      	ldr	r2, [r4, #16]
 8007416:	6022      	str	r2, [r4, #0]
 8007418:	d504      	bpl.n	8007424 <__sflush_r+0x7c>
 800741a:	1c42      	adds	r2, r0, #1
 800741c:	d101      	bne.n	8007422 <__sflush_r+0x7a>
 800741e:	682b      	ldr	r3, [r5, #0]
 8007420:	b903      	cbnz	r3, 8007424 <__sflush_r+0x7c>
 8007422:	6560      	str	r0, [r4, #84]	; 0x54
 8007424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007426:	602f      	str	r7, [r5, #0]
 8007428:	2900      	cmp	r1, #0
 800742a:	d0ca      	beq.n	80073c2 <__sflush_r+0x1a>
 800742c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007430:	4299      	cmp	r1, r3
 8007432:	d002      	beq.n	800743a <__sflush_r+0x92>
 8007434:	4628      	mov	r0, r5
 8007436:	f000 f9dd 	bl	80077f4 <_free_r>
 800743a:	2000      	movs	r0, #0
 800743c:	6360      	str	r0, [r4, #52]	; 0x34
 800743e:	e7c1      	b.n	80073c4 <__sflush_r+0x1c>
 8007440:	6a21      	ldr	r1, [r4, #32]
 8007442:	2301      	movs	r3, #1
 8007444:	4628      	mov	r0, r5
 8007446:	47b0      	blx	r6
 8007448:	1c41      	adds	r1, r0, #1
 800744a:	d1c7      	bne.n	80073dc <__sflush_r+0x34>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0c4      	beq.n	80073dc <__sflush_r+0x34>
 8007452:	2b1d      	cmp	r3, #29
 8007454:	d001      	beq.n	800745a <__sflush_r+0xb2>
 8007456:	2b16      	cmp	r3, #22
 8007458:	d101      	bne.n	800745e <__sflush_r+0xb6>
 800745a:	602f      	str	r7, [r5, #0]
 800745c:	e7b1      	b.n	80073c2 <__sflush_r+0x1a>
 800745e:	89a3      	ldrh	r3, [r4, #12]
 8007460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007464:	81a3      	strh	r3, [r4, #12]
 8007466:	e7ad      	b.n	80073c4 <__sflush_r+0x1c>
 8007468:	690f      	ldr	r7, [r1, #16]
 800746a:	2f00      	cmp	r7, #0
 800746c:	d0a9      	beq.n	80073c2 <__sflush_r+0x1a>
 800746e:	0793      	lsls	r3, r2, #30
 8007470:	680e      	ldr	r6, [r1, #0]
 8007472:	bf08      	it	eq
 8007474:	694b      	ldreq	r3, [r1, #20]
 8007476:	600f      	str	r7, [r1, #0]
 8007478:	bf18      	it	ne
 800747a:	2300      	movne	r3, #0
 800747c:	eba6 0807 	sub.w	r8, r6, r7
 8007480:	608b      	str	r3, [r1, #8]
 8007482:	f1b8 0f00 	cmp.w	r8, #0
 8007486:	dd9c      	ble.n	80073c2 <__sflush_r+0x1a>
 8007488:	6a21      	ldr	r1, [r4, #32]
 800748a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800748c:	4643      	mov	r3, r8
 800748e:	463a      	mov	r2, r7
 8007490:	4628      	mov	r0, r5
 8007492:	47b0      	blx	r6
 8007494:	2800      	cmp	r0, #0
 8007496:	dc06      	bgt.n	80074a6 <__sflush_r+0xfe>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800749e:	81a3      	strh	r3, [r4, #12]
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	e78e      	b.n	80073c4 <__sflush_r+0x1c>
 80074a6:	4407      	add	r7, r0
 80074a8:	eba8 0800 	sub.w	r8, r8, r0
 80074ac:	e7e9      	b.n	8007482 <__sflush_r+0xda>
 80074ae:	bf00      	nop
 80074b0:	20400001 	.word	0x20400001

080074b4 <_fflush_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	690b      	ldr	r3, [r1, #16]
 80074b8:	4605      	mov	r5, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	b913      	cbnz	r3, 80074c4 <_fflush_r+0x10>
 80074be:	2500      	movs	r5, #0
 80074c0:	4628      	mov	r0, r5
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	b118      	cbz	r0, 80074ce <_fflush_r+0x1a>
 80074c6:	6983      	ldr	r3, [r0, #24]
 80074c8:	b90b      	cbnz	r3, 80074ce <_fflush_r+0x1a>
 80074ca:	f000 f887 	bl	80075dc <__sinit>
 80074ce:	4b14      	ldr	r3, [pc, #80]	; (8007520 <_fflush_r+0x6c>)
 80074d0:	429c      	cmp	r4, r3
 80074d2:	d11b      	bne.n	800750c <_fflush_r+0x58>
 80074d4:	686c      	ldr	r4, [r5, #4]
 80074d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0ef      	beq.n	80074be <_fflush_r+0xa>
 80074de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074e0:	07d0      	lsls	r0, r2, #31
 80074e2:	d404      	bmi.n	80074ee <_fflush_r+0x3a>
 80074e4:	0599      	lsls	r1, r3, #22
 80074e6:	d402      	bmi.n	80074ee <_fflush_r+0x3a>
 80074e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ea:	f000 f915 	bl	8007718 <__retarget_lock_acquire_recursive>
 80074ee:	4628      	mov	r0, r5
 80074f0:	4621      	mov	r1, r4
 80074f2:	f7ff ff59 	bl	80073a8 <__sflush_r>
 80074f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074f8:	07da      	lsls	r2, r3, #31
 80074fa:	4605      	mov	r5, r0
 80074fc:	d4e0      	bmi.n	80074c0 <_fflush_r+0xc>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	059b      	lsls	r3, r3, #22
 8007502:	d4dd      	bmi.n	80074c0 <_fflush_r+0xc>
 8007504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007506:	f000 f908 	bl	800771a <__retarget_lock_release_recursive>
 800750a:	e7d9      	b.n	80074c0 <_fflush_r+0xc>
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <_fflush_r+0x70>)
 800750e:	429c      	cmp	r4, r3
 8007510:	d101      	bne.n	8007516 <_fflush_r+0x62>
 8007512:	68ac      	ldr	r4, [r5, #8]
 8007514:	e7df      	b.n	80074d6 <_fflush_r+0x22>
 8007516:	4b04      	ldr	r3, [pc, #16]	; (8007528 <_fflush_r+0x74>)
 8007518:	429c      	cmp	r4, r3
 800751a:	bf08      	it	eq
 800751c:	68ec      	ldreq	r4, [r5, #12]
 800751e:	e7da      	b.n	80074d6 <_fflush_r+0x22>
 8007520:	08008cf4 	.word	0x08008cf4
 8007524:	08008d14 	.word	0x08008d14
 8007528:	08008cd4 	.word	0x08008cd4

0800752c <std>:
 800752c:	2300      	movs	r3, #0
 800752e:	b510      	push	{r4, lr}
 8007530:	4604      	mov	r4, r0
 8007532:	e9c0 3300 	strd	r3, r3, [r0]
 8007536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800753a:	6083      	str	r3, [r0, #8]
 800753c:	8181      	strh	r1, [r0, #12]
 800753e:	6643      	str	r3, [r0, #100]	; 0x64
 8007540:	81c2      	strh	r2, [r0, #14]
 8007542:	6183      	str	r3, [r0, #24]
 8007544:	4619      	mov	r1, r3
 8007546:	2208      	movs	r2, #8
 8007548:	305c      	adds	r0, #92	; 0x5c
 800754a:	f7ff fe09 	bl	8007160 <memset>
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <std+0x38>)
 8007550:	6263      	str	r3, [r4, #36]	; 0x24
 8007552:	4b05      	ldr	r3, [pc, #20]	; (8007568 <std+0x3c>)
 8007554:	62a3      	str	r3, [r4, #40]	; 0x28
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <std+0x40>)
 8007558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800755a:	4b05      	ldr	r3, [pc, #20]	; (8007570 <std+0x44>)
 800755c:	6224      	str	r4, [r4, #32]
 800755e:	6323      	str	r3, [r4, #48]	; 0x30
 8007560:	bd10      	pop	{r4, pc}
 8007562:	bf00      	nop
 8007564:	0800828d 	.word	0x0800828d
 8007568:	080082af 	.word	0x080082af
 800756c:	080082e7 	.word	0x080082e7
 8007570:	0800830b 	.word	0x0800830b

08007574 <_cleanup_r>:
 8007574:	4901      	ldr	r1, [pc, #4]	; (800757c <_cleanup_r+0x8>)
 8007576:	f000 b8af 	b.w	80076d8 <_fwalk_reent>
 800757a:	bf00      	nop
 800757c:	080074b5 	.word	0x080074b5

08007580 <__sfmoreglue>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	1e4a      	subs	r2, r1, #1
 8007584:	2568      	movs	r5, #104	; 0x68
 8007586:	4355      	muls	r5, r2
 8007588:	460e      	mov	r6, r1
 800758a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800758e:	f000 f981 	bl	8007894 <_malloc_r>
 8007592:	4604      	mov	r4, r0
 8007594:	b140      	cbz	r0, 80075a8 <__sfmoreglue+0x28>
 8007596:	2100      	movs	r1, #0
 8007598:	e9c0 1600 	strd	r1, r6, [r0]
 800759c:	300c      	adds	r0, #12
 800759e:	60a0      	str	r0, [r4, #8]
 80075a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075a4:	f7ff fddc 	bl	8007160 <memset>
 80075a8:	4620      	mov	r0, r4
 80075aa:	bd70      	pop	{r4, r5, r6, pc}

080075ac <__sfp_lock_acquire>:
 80075ac:	4801      	ldr	r0, [pc, #4]	; (80075b4 <__sfp_lock_acquire+0x8>)
 80075ae:	f000 b8b3 	b.w	8007718 <__retarget_lock_acquire_recursive>
 80075b2:	bf00      	nop
 80075b4:	20000450 	.word	0x20000450

080075b8 <__sfp_lock_release>:
 80075b8:	4801      	ldr	r0, [pc, #4]	; (80075c0 <__sfp_lock_release+0x8>)
 80075ba:	f000 b8ae 	b.w	800771a <__retarget_lock_release_recursive>
 80075be:	bf00      	nop
 80075c0:	20000450 	.word	0x20000450

080075c4 <__sinit_lock_acquire>:
 80075c4:	4801      	ldr	r0, [pc, #4]	; (80075cc <__sinit_lock_acquire+0x8>)
 80075c6:	f000 b8a7 	b.w	8007718 <__retarget_lock_acquire_recursive>
 80075ca:	bf00      	nop
 80075cc:	2000044b 	.word	0x2000044b

080075d0 <__sinit_lock_release>:
 80075d0:	4801      	ldr	r0, [pc, #4]	; (80075d8 <__sinit_lock_release+0x8>)
 80075d2:	f000 b8a2 	b.w	800771a <__retarget_lock_release_recursive>
 80075d6:	bf00      	nop
 80075d8:	2000044b 	.word	0x2000044b

080075dc <__sinit>:
 80075dc:	b510      	push	{r4, lr}
 80075de:	4604      	mov	r4, r0
 80075e0:	f7ff fff0 	bl	80075c4 <__sinit_lock_acquire>
 80075e4:	69a3      	ldr	r3, [r4, #24]
 80075e6:	b11b      	cbz	r3, 80075f0 <__sinit+0x14>
 80075e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ec:	f7ff bff0 	b.w	80075d0 <__sinit_lock_release>
 80075f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075f4:	6523      	str	r3, [r4, #80]	; 0x50
 80075f6:	4b13      	ldr	r3, [pc, #76]	; (8007644 <__sinit+0x68>)
 80075f8:	4a13      	ldr	r2, [pc, #76]	; (8007648 <__sinit+0x6c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80075fe:	42a3      	cmp	r3, r4
 8007600:	bf04      	itt	eq
 8007602:	2301      	moveq	r3, #1
 8007604:	61a3      	streq	r3, [r4, #24]
 8007606:	4620      	mov	r0, r4
 8007608:	f000 f820 	bl	800764c <__sfp>
 800760c:	6060      	str	r0, [r4, #4]
 800760e:	4620      	mov	r0, r4
 8007610:	f000 f81c 	bl	800764c <__sfp>
 8007614:	60a0      	str	r0, [r4, #8]
 8007616:	4620      	mov	r0, r4
 8007618:	f000 f818 	bl	800764c <__sfp>
 800761c:	2200      	movs	r2, #0
 800761e:	60e0      	str	r0, [r4, #12]
 8007620:	2104      	movs	r1, #4
 8007622:	6860      	ldr	r0, [r4, #4]
 8007624:	f7ff ff82 	bl	800752c <std>
 8007628:	68a0      	ldr	r0, [r4, #8]
 800762a:	2201      	movs	r2, #1
 800762c:	2109      	movs	r1, #9
 800762e:	f7ff ff7d 	bl	800752c <std>
 8007632:	68e0      	ldr	r0, [r4, #12]
 8007634:	2202      	movs	r2, #2
 8007636:	2112      	movs	r1, #18
 8007638:	f7ff ff78 	bl	800752c <std>
 800763c:	2301      	movs	r3, #1
 800763e:	61a3      	str	r3, [r4, #24]
 8007640:	e7d2      	b.n	80075e8 <__sinit+0xc>
 8007642:	bf00      	nop
 8007644:	08008cd0 	.word	0x08008cd0
 8007648:	08007575 	.word	0x08007575

0800764c <__sfp>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	4607      	mov	r7, r0
 8007650:	f7ff ffac 	bl	80075ac <__sfp_lock_acquire>
 8007654:	4b1e      	ldr	r3, [pc, #120]	; (80076d0 <__sfp+0x84>)
 8007656:	681e      	ldr	r6, [r3, #0]
 8007658:	69b3      	ldr	r3, [r6, #24]
 800765a:	b913      	cbnz	r3, 8007662 <__sfp+0x16>
 800765c:	4630      	mov	r0, r6
 800765e:	f7ff ffbd 	bl	80075dc <__sinit>
 8007662:	3648      	adds	r6, #72	; 0x48
 8007664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007668:	3b01      	subs	r3, #1
 800766a:	d503      	bpl.n	8007674 <__sfp+0x28>
 800766c:	6833      	ldr	r3, [r6, #0]
 800766e:	b30b      	cbz	r3, 80076b4 <__sfp+0x68>
 8007670:	6836      	ldr	r6, [r6, #0]
 8007672:	e7f7      	b.n	8007664 <__sfp+0x18>
 8007674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007678:	b9d5      	cbnz	r5, 80076b0 <__sfp+0x64>
 800767a:	4b16      	ldr	r3, [pc, #88]	; (80076d4 <__sfp+0x88>)
 800767c:	60e3      	str	r3, [r4, #12]
 800767e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007682:	6665      	str	r5, [r4, #100]	; 0x64
 8007684:	f000 f847 	bl	8007716 <__retarget_lock_init_recursive>
 8007688:	f7ff ff96 	bl	80075b8 <__sfp_lock_release>
 800768c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007690:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007694:	6025      	str	r5, [r4, #0]
 8007696:	61a5      	str	r5, [r4, #24]
 8007698:	2208      	movs	r2, #8
 800769a:	4629      	mov	r1, r5
 800769c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076a0:	f7ff fd5e 	bl	8007160 <memset>
 80076a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076ac:	4620      	mov	r0, r4
 80076ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076b0:	3468      	adds	r4, #104	; 0x68
 80076b2:	e7d9      	b.n	8007668 <__sfp+0x1c>
 80076b4:	2104      	movs	r1, #4
 80076b6:	4638      	mov	r0, r7
 80076b8:	f7ff ff62 	bl	8007580 <__sfmoreglue>
 80076bc:	4604      	mov	r4, r0
 80076be:	6030      	str	r0, [r6, #0]
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d1d5      	bne.n	8007670 <__sfp+0x24>
 80076c4:	f7ff ff78 	bl	80075b8 <__sfp_lock_release>
 80076c8:	230c      	movs	r3, #12
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	e7ee      	b.n	80076ac <__sfp+0x60>
 80076ce:	bf00      	nop
 80076d0:	08008cd0 	.word	0x08008cd0
 80076d4:	ffff0001 	.word	0xffff0001

080076d8 <_fwalk_reent>:
 80076d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076dc:	4606      	mov	r6, r0
 80076de:	4688      	mov	r8, r1
 80076e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076e4:	2700      	movs	r7, #0
 80076e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076ea:	f1b9 0901 	subs.w	r9, r9, #1
 80076ee:	d505      	bpl.n	80076fc <_fwalk_reent+0x24>
 80076f0:	6824      	ldr	r4, [r4, #0]
 80076f2:	2c00      	cmp	r4, #0
 80076f4:	d1f7      	bne.n	80076e6 <_fwalk_reent+0xe>
 80076f6:	4638      	mov	r0, r7
 80076f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fc:	89ab      	ldrh	r3, [r5, #12]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d907      	bls.n	8007712 <_fwalk_reent+0x3a>
 8007702:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007706:	3301      	adds	r3, #1
 8007708:	d003      	beq.n	8007712 <_fwalk_reent+0x3a>
 800770a:	4629      	mov	r1, r5
 800770c:	4630      	mov	r0, r6
 800770e:	47c0      	blx	r8
 8007710:	4307      	orrs	r7, r0
 8007712:	3568      	adds	r5, #104	; 0x68
 8007714:	e7e9      	b.n	80076ea <_fwalk_reent+0x12>

08007716 <__retarget_lock_init_recursive>:
 8007716:	4770      	bx	lr

08007718 <__retarget_lock_acquire_recursive>:
 8007718:	4770      	bx	lr

0800771a <__retarget_lock_release_recursive>:
 800771a:	4770      	bx	lr

0800771c <__swhatbuf_r>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	460e      	mov	r6, r1
 8007720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007724:	2900      	cmp	r1, #0
 8007726:	b096      	sub	sp, #88	; 0x58
 8007728:	4614      	mov	r4, r2
 800772a:	461d      	mov	r5, r3
 800772c:	da07      	bge.n	800773e <__swhatbuf_r+0x22>
 800772e:	2300      	movs	r3, #0
 8007730:	602b      	str	r3, [r5, #0]
 8007732:	89b3      	ldrh	r3, [r6, #12]
 8007734:	061a      	lsls	r2, r3, #24
 8007736:	d410      	bmi.n	800775a <__swhatbuf_r+0x3e>
 8007738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800773c:	e00e      	b.n	800775c <__swhatbuf_r+0x40>
 800773e:	466a      	mov	r2, sp
 8007740:	f000 feb8 	bl	80084b4 <_fstat_r>
 8007744:	2800      	cmp	r0, #0
 8007746:	dbf2      	blt.n	800772e <__swhatbuf_r+0x12>
 8007748:	9a01      	ldr	r2, [sp, #4]
 800774a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800774e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007752:	425a      	negs	r2, r3
 8007754:	415a      	adcs	r2, r3
 8007756:	602a      	str	r2, [r5, #0]
 8007758:	e7ee      	b.n	8007738 <__swhatbuf_r+0x1c>
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	2000      	movs	r0, #0
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	b016      	add	sp, #88	; 0x58
 8007762:	bd70      	pop	{r4, r5, r6, pc}

08007764 <__smakebuf_r>:
 8007764:	898b      	ldrh	r3, [r1, #12]
 8007766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007768:	079d      	lsls	r5, r3, #30
 800776a:	4606      	mov	r6, r0
 800776c:	460c      	mov	r4, r1
 800776e:	d507      	bpl.n	8007780 <__smakebuf_r+0x1c>
 8007770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	6123      	str	r3, [r4, #16]
 8007778:	2301      	movs	r3, #1
 800777a:	6163      	str	r3, [r4, #20]
 800777c:	b002      	add	sp, #8
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	ab01      	add	r3, sp, #4
 8007782:	466a      	mov	r2, sp
 8007784:	f7ff ffca 	bl	800771c <__swhatbuf_r>
 8007788:	9900      	ldr	r1, [sp, #0]
 800778a:	4605      	mov	r5, r0
 800778c:	4630      	mov	r0, r6
 800778e:	f000 f881 	bl	8007894 <_malloc_r>
 8007792:	b948      	cbnz	r0, 80077a8 <__smakebuf_r+0x44>
 8007794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007798:	059a      	lsls	r2, r3, #22
 800779a:	d4ef      	bmi.n	800777c <__smakebuf_r+0x18>
 800779c:	f023 0303 	bic.w	r3, r3, #3
 80077a0:	f043 0302 	orr.w	r3, r3, #2
 80077a4:	81a3      	strh	r3, [r4, #12]
 80077a6:	e7e3      	b.n	8007770 <__smakebuf_r+0xc>
 80077a8:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <__smakebuf_r+0x7c>)
 80077aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	6020      	str	r0, [r4, #0]
 80077b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b4:	81a3      	strh	r3, [r4, #12]
 80077b6:	9b00      	ldr	r3, [sp, #0]
 80077b8:	6163      	str	r3, [r4, #20]
 80077ba:	9b01      	ldr	r3, [sp, #4]
 80077bc:	6120      	str	r0, [r4, #16]
 80077be:	b15b      	cbz	r3, 80077d8 <__smakebuf_r+0x74>
 80077c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077c4:	4630      	mov	r0, r6
 80077c6:	f000 fe87 	bl	80084d8 <_isatty_r>
 80077ca:	b128      	cbz	r0, 80077d8 <__smakebuf_r+0x74>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f023 0303 	bic.w	r3, r3, #3
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	89a0      	ldrh	r0, [r4, #12]
 80077da:	4305      	orrs	r5, r0
 80077dc:	81a5      	strh	r5, [r4, #12]
 80077de:	e7cd      	b.n	800777c <__smakebuf_r+0x18>
 80077e0:	08007575 	.word	0x08007575

080077e4 <malloc>:
 80077e4:	4b02      	ldr	r3, [pc, #8]	; (80077f0 <malloc+0xc>)
 80077e6:	4601      	mov	r1, r0
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	f000 b853 	b.w	8007894 <_malloc_r>
 80077ee:	bf00      	nop
 80077f0:	2000002c 	.word	0x2000002c

080077f4 <_free_r>:
 80077f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077f6:	2900      	cmp	r1, #0
 80077f8:	d048      	beq.n	800788c <_free_r+0x98>
 80077fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077fe:	9001      	str	r0, [sp, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f1a1 0404 	sub.w	r4, r1, #4
 8007806:	bfb8      	it	lt
 8007808:	18e4      	addlt	r4, r4, r3
 800780a:	f000 fea1 	bl	8008550 <__malloc_lock>
 800780e:	4a20      	ldr	r2, [pc, #128]	; (8007890 <_free_r+0x9c>)
 8007810:	9801      	ldr	r0, [sp, #4]
 8007812:	6813      	ldr	r3, [r2, #0]
 8007814:	4615      	mov	r5, r2
 8007816:	b933      	cbnz	r3, 8007826 <_free_r+0x32>
 8007818:	6063      	str	r3, [r4, #4]
 800781a:	6014      	str	r4, [r2, #0]
 800781c:	b003      	add	sp, #12
 800781e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007822:	f000 be9b 	b.w	800855c <__malloc_unlock>
 8007826:	42a3      	cmp	r3, r4
 8007828:	d90b      	bls.n	8007842 <_free_r+0x4e>
 800782a:	6821      	ldr	r1, [r4, #0]
 800782c:	1862      	adds	r2, r4, r1
 800782e:	4293      	cmp	r3, r2
 8007830:	bf04      	itt	eq
 8007832:	681a      	ldreq	r2, [r3, #0]
 8007834:	685b      	ldreq	r3, [r3, #4]
 8007836:	6063      	str	r3, [r4, #4]
 8007838:	bf04      	itt	eq
 800783a:	1852      	addeq	r2, r2, r1
 800783c:	6022      	streq	r2, [r4, #0]
 800783e:	602c      	str	r4, [r5, #0]
 8007840:	e7ec      	b.n	800781c <_free_r+0x28>
 8007842:	461a      	mov	r2, r3
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	b10b      	cbz	r3, 800784c <_free_r+0x58>
 8007848:	42a3      	cmp	r3, r4
 800784a:	d9fa      	bls.n	8007842 <_free_r+0x4e>
 800784c:	6811      	ldr	r1, [r2, #0]
 800784e:	1855      	adds	r5, r2, r1
 8007850:	42a5      	cmp	r5, r4
 8007852:	d10b      	bne.n	800786c <_free_r+0x78>
 8007854:	6824      	ldr	r4, [r4, #0]
 8007856:	4421      	add	r1, r4
 8007858:	1854      	adds	r4, r2, r1
 800785a:	42a3      	cmp	r3, r4
 800785c:	6011      	str	r1, [r2, #0]
 800785e:	d1dd      	bne.n	800781c <_free_r+0x28>
 8007860:	681c      	ldr	r4, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	6053      	str	r3, [r2, #4]
 8007866:	4421      	add	r1, r4
 8007868:	6011      	str	r1, [r2, #0]
 800786a:	e7d7      	b.n	800781c <_free_r+0x28>
 800786c:	d902      	bls.n	8007874 <_free_r+0x80>
 800786e:	230c      	movs	r3, #12
 8007870:	6003      	str	r3, [r0, #0]
 8007872:	e7d3      	b.n	800781c <_free_r+0x28>
 8007874:	6825      	ldr	r5, [r4, #0]
 8007876:	1961      	adds	r1, r4, r5
 8007878:	428b      	cmp	r3, r1
 800787a:	bf04      	itt	eq
 800787c:	6819      	ldreq	r1, [r3, #0]
 800787e:	685b      	ldreq	r3, [r3, #4]
 8007880:	6063      	str	r3, [r4, #4]
 8007882:	bf04      	itt	eq
 8007884:	1949      	addeq	r1, r1, r5
 8007886:	6021      	streq	r1, [r4, #0]
 8007888:	6054      	str	r4, [r2, #4]
 800788a:	e7c7      	b.n	800781c <_free_r+0x28>
 800788c:	b003      	add	sp, #12
 800788e:	bd30      	pop	{r4, r5, pc}
 8007890:	200001c4 	.word	0x200001c4

08007894 <_malloc_r>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	1ccd      	adds	r5, r1, #3
 8007898:	f025 0503 	bic.w	r5, r5, #3
 800789c:	3508      	adds	r5, #8
 800789e:	2d0c      	cmp	r5, #12
 80078a0:	bf38      	it	cc
 80078a2:	250c      	movcc	r5, #12
 80078a4:	2d00      	cmp	r5, #0
 80078a6:	4606      	mov	r6, r0
 80078a8:	db01      	blt.n	80078ae <_malloc_r+0x1a>
 80078aa:	42a9      	cmp	r1, r5
 80078ac:	d903      	bls.n	80078b6 <_malloc_r+0x22>
 80078ae:	230c      	movs	r3, #12
 80078b0:	6033      	str	r3, [r6, #0]
 80078b2:	2000      	movs	r0, #0
 80078b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b6:	f000 fe4b 	bl	8008550 <__malloc_lock>
 80078ba:	4921      	ldr	r1, [pc, #132]	; (8007940 <_malloc_r+0xac>)
 80078bc:	680a      	ldr	r2, [r1, #0]
 80078be:	4614      	mov	r4, r2
 80078c0:	b99c      	cbnz	r4, 80078ea <_malloc_r+0x56>
 80078c2:	4f20      	ldr	r7, [pc, #128]	; (8007944 <_malloc_r+0xb0>)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	b923      	cbnz	r3, 80078d2 <_malloc_r+0x3e>
 80078c8:	4621      	mov	r1, r4
 80078ca:	4630      	mov	r0, r6
 80078cc:	f000 fcce 	bl	800826c <_sbrk_r>
 80078d0:	6038      	str	r0, [r7, #0]
 80078d2:	4629      	mov	r1, r5
 80078d4:	4630      	mov	r0, r6
 80078d6:	f000 fcc9 	bl	800826c <_sbrk_r>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	d123      	bne.n	8007926 <_malloc_r+0x92>
 80078de:	230c      	movs	r3, #12
 80078e0:	6033      	str	r3, [r6, #0]
 80078e2:	4630      	mov	r0, r6
 80078e4:	f000 fe3a 	bl	800855c <__malloc_unlock>
 80078e8:	e7e3      	b.n	80078b2 <_malloc_r+0x1e>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	1b5b      	subs	r3, r3, r5
 80078ee:	d417      	bmi.n	8007920 <_malloc_r+0x8c>
 80078f0:	2b0b      	cmp	r3, #11
 80078f2:	d903      	bls.n	80078fc <_malloc_r+0x68>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	441c      	add	r4, r3
 80078f8:	6025      	str	r5, [r4, #0]
 80078fa:	e004      	b.n	8007906 <_malloc_r+0x72>
 80078fc:	6863      	ldr	r3, [r4, #4]
 80078fe:	42a2      	cmp	r2, r4
 8007900:	bf0c      	ite	eq
 8007902:	600b      	streq	r3, [r1, #0]
 8007904:	6053      	strne	r3, [r2, #4]
 8007906:	4630      	mov	r0, r6
 8007908:	f000 fe28 	bl	800855c <__malloc_unlock>
 800790c:	f104 000b 	add.w	r0, r4, #11
 8007910:	1d23      	adds	r3, r4, #4
 8007912:	f020 0007 	bic.w	r0, r0, #7
 8007916:	1ac2      	subs	r2, r0, r3
 8007918:	d0cc      	beq.n	80078b4 <_malloc_r+0x20>
 800791a:	1a1b      	subs	r3, r3, r0
 800791c:	50a3      	str	r3, [r4, r2]
 800791e:	e7c9      	b.n	80078b4 <_malloc_r+0x20>
 8007920:	4622      	mov	r2, r4
 8007922:	6864      	ldr	r4, [r4, #4]
 8007924:	e7cc      	b.n	80078c0 <_malloc_r+0x2c>
 8007926:	1cc4      	adds	r4, r0, #3
 8007928:	f024 0403 	bic.w	r4, r4, #3
 800792c:	42a0      	cmp	r0, r4
 800792e:	d0e3      	beq.n	80078f8 <_malloc_r+0x64>
 8007930:	1a21      	subs	r1, r4, r0
 8007932:	4630      	mov	r0, r6
 8007934:	f000 fc9a 	bl	800826c <_sbrk_r>
 8007938:	3001      	adds	r0, #1
 800793a:	d1dd      	bne.n	80078f8 <_malloc_r+0x64>
 800793c:	e7cf      	b.n	80078de <_malloc_r+0x4a>
 800793e:	bf00      	nop
 8007940:	200001c4 	.word	0x200001c4
 8007944:	200001c8 	.word	0x200001c8

08007948 <__ssputs_r>:
 8007948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794c:	688e      	ldr	r6, [r1, #8]
 800794e:	429e      	cmp	r6, r3
 8007950:	4682      	mov	sl, r0
 8007952:	460c      	mov	r4, r1
 8007954:	4690      	mov	r8, r2
 8007956:	461f      	mov	r7, r3
 8007958:	d838      	bhi.n	80079cc <__ssputs_r+0x84>
 800795a:	898a      	ldrh	r2, [r1, #12]
 800795c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007960:	d032      	beq.n	80079c8 <__ssputs_r+0x80>
 8007962:	6825      	ldr	r5, [r4, #0]
 8007964:	6909      	ldr	r1, [r1, #16]
 8007966:	eba5 0901 	sub.w	r9, r5, r1
 800796a:	6965      	ldr	r5, [r4, #20]
 800796c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007970:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007974:	3301      	adds	r3, #1
 8007976:	444b      	add	r3, r9
 8007978:	106d      	asrs	r5, r5, #1
 800797a:	429d      	cmp	r5, r3
 800797c:	bf38      	it	cc
 800797e:	461d      	movcc	r5, r3
 8007980:	0553      	lsls	r3, r2, #21
 8007982:	d531      	bpl.n	80079e8 <__ssputs_r+0xa0>
 8007984:	4629      	mov	r1, r5
 8007986:	f7ff ff85 	bl	8007894 <_malloc_r>
 800798a:	4606      	mov	r6, r0
 800798c:	b950      	cbnz	r0, 80079a4 <__ssputs_r+0x5c>
 800798e:	230c      	movs	r3, #12
 8007990:	f8ca 3000 	str.w	r3, [sl]
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800799a:	81a3      	strh	r3, [r4, #12]
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a4:	6921      	ldr	r1, [r4, #16]
 80079a6:	464a      	mov	r2, r9
 80079a8:	f7ff fbcc 	bl	8007144 <memcpy>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	6126      	str	r6, [r4, #16]
 80079ba:	6165      	str	r5, [r4, #20]
 80079bc:	444e      	add	r6, r9
 80079be:	eba5 0509 	sub.w	r5, r5, r9
 80079c2:	6026      	str	r6, [r4, #0]
 80079c4:	60a5      	str	r5, [r4, #8]
 80079c6:	463e      	mov	r6, r7
 80079c8:	42be      	cmp	r6, r7
 80079ca:	d900      	bls.n	80079ce <__ssputs_r+0x86>
 80079cc:	463e      	mov	r6, r7
 80079ce:	4632      	mov	r2, r6
 80079d0:	6820      	ldr	r0, [r4, #0]
 80079d2:	4641      	mov	r1, r8
 80079d4:	f000 fda2 	bl	800851c <memmove>
 80079d8:	68a3      	ldr	r3, [r4, #8]
 80079da:	6822      	ldr	r2, [r4, #0]
 80079dc:	1b9b      	subs	r3, r3, r6
 80079de:	4432      	add	r2, r6
 80079e0:	60a3      	str	r3, [r4, #8]
 80079e2:	6022      	str	r2, [r4, #0]
 80079e4:	2000      	movs	r0, #0
 80079e6:	e7db      	b.n	80079a0 <__ssputs_r+0x58>
 80079e8:	462a      	mov	r2, r5
 80079ea:	f000 fdbd 	bl	8008568 <_realloc_r>
 80079ee:	4606      	mov	r6, r0
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d1e1      	bne.n	80079b8 <__ssputs_r+0x70>
 80079f4:	6921      	ldr	r1, [r4, #16]
 80079f6:	4650      	mov	r0, sl
 80079f8:	f7ff fefc 	bl	80077f4 <_free_r>
 80079fc:	e7c7      	b.n	800798e <__ssputs_r+0x46>
	...

08007a00 <_svfiprintf_r>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	4698      	mov	r8, r3
 8007a06:	898b      	ldrh	r3, [r1, #12]
 8007a08:	061b      	lsls	r3, r3, #24
 8007a0a:	b09d      	sub	sp, #116	; 0x74
 8007a0c:	4607      	mov	r7, r0
 8007a0e:	460d      	mov	r5, r1
 8007a10:	4614      	mov	r4, r2
 8007a12:	d50e      	bpl.n	8007a32 <_svfiprintf_r+0x32>
 8007a14:	690b      	ldr	r3, [r1, #16]
 8007a16:	b963      	cbnz	r3, 8007a32 <_svfiprintf_r+0x32>
 8007a18:	2140      	movs	r1, #64	; 0x40
 8007a1a:	f7ff ff3b 	bl	8007894 <_malloc_r>
 8007a1e:	6028      	str	r0, [r5, #0]
 8007a20:	6128      	str	r0, [r5, #16]
 8007a22:	b920      	cbnz	r0, 8007a2e <_svfiprintf_r+0x2e>
 8007a24:	230c      	movs	r3, #12
 8007a26:	603b      	str	r3, [r7, #0]
 8007a28:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2c:	e0d1      	b.n	8007bd2 <_svfiprintf_r+0x1d2>
 8007a2e:	2340      	movs	r3, #64	; 0x40
 8007a30:	616b      	str	r3, [r5, #20]
 8007a32:	2300      	movs	r3, #0
 8007a34:	9309      	str	r3, [sp, #36]	; 0x24
 8007a36:	2320      	movs	r3, #32
 8007a38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a40:	2330      	movs	r3, #48	; 0x30
 8007a42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bec <_svfiprintf_r+0x1ec>
 8007a46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a4a:	f04f 0901 	mov.w	r9, #1
 8007a4e:	4623      	mov	r3, r4
 8007a50:	469a      	mov	sl, r3
 8007a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a56:	b10a      	cbz	r2, 8007a5c <_svfiprintf_r+0x5c>
 8007a58:	2a25      	cmp	r2, #37	; 0x25
 8007a5a:	d1f9      	bne.n	8007a50 <_svfiprintf_r+0x50>
 8007a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a60:	d00b      	beq.n	8007a7a <_svfiprintf_r+0x7a>
 8007a62:	465b      	mov	r3, fp
 8007a64:	4622      	mov	r2, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f7ff ff6d 	bl	8007948 <__ssputs_r>
 8007a6e:	3001      	adds	r0, #1
 8007a70:	f000 80aa 	beq.w	8007bc8 <_svfiprintf_r+0x1c8>
 8007a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a76:	445a      	add	r2, fp
 8007a78:	9209      	str	r2, [sp, #36]	; 0x24
 8007a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 80a2 	beq.w	8007bc8 <_svfiprintf_r+0x1c8>
 8007a84:	2300      	movs	r3, #0
 8007a86:	f04f 32ff 	mov.w	r2, #4294967295
 8007a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a8e:	f10a 0a01 	add.w	sl, sl, #1
 8007a92:	9304      	str	r3, [sp, #16]
 8007a94:	9307      	str	r3, [sp, #28]
 8007a96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a9c:	4654      	mov	r4, sl
 8007a9e:	2205      	movs	r2, #5
 8007aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa4:	4851      	ldr	r0, [pc, #324]	; (8007bec <_svfiprintf_r+0x1ec>)
 8007aa6:	f7f8 fb9b 	bl	80001e0 <memchr>
 8007aaa:	9a04      	ldr	r2, [sp, #16]
 8007aac:	b9d8      	cbnz	r0, 8007ae6 <_svfiprintf_r+0xe6>
 8007aae:	06d0      	lsls	r0, r2, #27
 8007ab0:	bf44      	itt	mi
 8007ab2:	2320      	movmi	r3, #32
 8007ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ab8:	0711      	lsls	r1, r2, #28
 8007aba:	bf44      	itt	mi
 8007abc:	232b      	movmi	r3, #43	; 0x2b
 8007abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac8:	d015      	beq.n	8007af6 <_svfiprintf_r+0xf6>
 8007aca:	9a07      	ldr	r2, [sp, #28]
 8007acc:	4654      	mov	r4, sl
 8007ace:	2000      	movs	r0, #0
 8007ad0:	f04f 0c0a 	mov.w	ip, #10
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ada:	3b30      	subs	r3, #48	; 0x30
 8007adc:	2b09      	cmp	r3, #9
 8007ade:	d94e      	bls.n	8007b7e <_svfiprintf_r+0x17e>
 8007ae0:	b1b0      	cbz	r0, 8007b10 <_svfiprintf_r+0x110>
 8007ae2:	9207      	str	r2, [sp, #28]
 8007ae4:	e014      	b.n	8007b10 <_svfiprintf_r+0x110>
 8007ae6:	eba0 0308 	sub.w	r3, r0, r8
 8007aea:	fa09 f303 	lsl.w	r3, r9, r3
 8007aee:	4313      	orrs	r3, r2
 8007af0:	9304      	str	r3, [sp, #16]
 8007af2:	46a2      	mov	sl, r4
 8007af4:	e7d2      	b.n	8007a9c <_svfiprintf_r+0x9c>
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	1d19      	adds	r1, r3, #4
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	9103      	str	r1, [sp, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	bfbb      	ittet	lt
 8007b02:	425b      	neglt	r3, r3
 8007b04:	f042 0202 	orrlt.w	r2, r2, #2
 8007b08:	9307      	strge	r3, [sp, #28]
 8007b0a:	9307      	strlt	r3, [sp, #28]
 8007b0c:	bfb8      	it	lt
 8007b0e:	9204      	strlt	r2, [sp, #16]
 8007b10:	7823      	ldrb	r3, [r4, #0]
 8007b12:	2b2e      	cmp	r3, #46	; 0x2e
 8007b14:	d10c      	bne.n	8007b30 <_svfiprintf_r+0x130>
 8007b16:	7863      	ldrb	r3, [r4, #1]
 8007b18:	2b2a      	cmp	r3, #42	; 0x2a
 8007b1a:	d135      	bne.n	8007b88 <_svfiprintf_r+0x188>
 8007b1c:	9b03      	ldr	r3, [sp, #12]
 8007b1e:	1d1a      	adds	r2, r3, #4
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	9203      	str	r2, [sp, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bfb8      	it	lt
 8007b28:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b2c:	3402      	adds	r4, #2
 8007b2e:	9305      	str	r3, [sp, #20]
 8007b30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bfc <_svfiprintf_r+0x1fc>
 8007b34:	7821      	ldrb	r1, [r4, #0]
 8007b36:	2203      	movs	r2, #3
 8007b38:	4650      	mov	r0, sl
 8007b3a:	f7f8 fb51 	bl	80001e0 <memchr>
 8007b3e:	b140      	cbz	r0, 8007b52 <_svfiprintf_r+0x152>
 8007b40:	2340      	movs	r3, #64	; 0x40
 8007b42:	eba0 000a 	sub.w	r0, r0, sl
 8007b46:	fa03 f000 	lsl.w	r0, r3, r0
 8007b4a:	9b04      	ldr	r3, [sp, #16]
 8007b4c:	4303      	orrs	r3, r0
 8007b4e:	3401      	adds	r4, #1
 8007b50:	9304      	str	r3, [sp, #16]
 8007b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b56:	4826      	ldr	r0, [pc, #152]	; (8007bf0 <_svfiprintf_r+0x1f0>)
 8007b58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b5c:	2206      	movs	r2, #6
 8007b5e:	f7f8 fb3f 	bl	80001e0 <memchr>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d038      	beq.n	8007bd8 <_svfiprintf_r+0x1d8>
 8007b66:	4b23      	ldr	r3, [pc, #140]	; (8007bf4 <_svfiprintf_r+0x1f4>)
 8007b68:	bb1b      	cbnz	r3, 8007bb2 <_svfiprintf_r+0x1b2>
 8007b6a:	9b03      	ldr	r3, [sp, #12]
 8007b6c:	3307      	adds	r3, #7
 8007b6e:	f023 0307 	bic.w	r3, r3, #7
 8007b72:	3308      	adds	r3, #8
 8007b74:	9303      	str	r3, [sp, #12]
 8007b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b78:	4433      	add	r3, r6
 8007b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7c:	e767      	b.n	8007a4e <_svfiprintf_r+0x4e>
 8007b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b82:	460c      	mov	r4, r1
 8007b84:	2001      	movs	r0, #1
 8007b86:	e7a5      	b.n	8007ad4 <_svfiprintf_r+0xd4>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	3401      	adds	r4, #1
 8007b8c:	9305      	str	r3, [sp, #20]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	f04f 0c0a 	mov.w	ip, #10
 8007b94:	4620      	mov	r0, r4
 8007b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b9a:	3a30      	subs	r2, #48	; 0x30
 8007b9c:	2a09      	cmp	r2, #9
 8007b9e:	d903      	bls.n	8007ba8 <_svfiprintf_r+0x1a8>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d0c5      	beq.n	8007b30 <_svfiprintf_r+0x130>
 8007ba4:	9105      	str	r1, [sp, #20]
 8007ba6:	e7c3      	b.n	8007b30 <_svfiprintf_r+0x130>
 8007ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bac:	4604      	mov	r4, r0
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e7f0      	b.n	8007b94 <_svfiprintf_r+0x194>
 8007bb2:	ab03      	add	r3, sp, #12
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	4b0f      	ldr	r3, [pc, #60]	; (8007bf8 <_svfiprintf_r+0x1f8>)
 8007bba:	a904      	add	r1, sp, #16
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f3af 8000 	nop.w
 8007bc2:	1c42      	adds	r2, r0, #1
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	d1d6      	bne.n	8007b76 <_svfiprintf_r+0x176>
 8007bc8:	89ab      	ldrh	r3, [r5, #12]
 8007bca:	065b      	lsls	r3, r3, #25
 8007bcc:	f53f af2c 	bmi.w	8007a28 <_svfiprintf_r+0x28>
 8007bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bd2:	b01d      	add	sp, #116	; 0x74
 8007bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd8:	ab03      	add	r3, sp, #12
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	462a      	mov	r2, r5
 8007bde:	4b06      	ldr	r3, [pc, #24]	; (8007bf8 <_svfiprintf_r+0x1f8>)
 8007be0:	a904      	add	r1, sp, #16
 8007be2:	4638      	mov	r0, r7
 8007be4:	f000 f9d4 	bl	8007f90 <_printf_i>
 8007be8:	e7eb      	b.n	8007bc2 <_svfiprintf_r+0x1c2>
 8007bea:	bf00      	nop
 8007bec:	08008d34 	.word	0x08008d34
 8007bf0:	08008d3e 	.word	0x08008d3e
 8007bf4:	00000000 	.word	0x00000000
 8007bf8:	08007949 	.word	0x08007949
 8007bfc:	08008d3a 	.word	0x08008d3a

08007c00 <__sfputc_r>:
 8007c00:	6893      	ldr	r3, [r2, #8]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	b410      	push	{r4}
 8007c08:	6093      	str	r3, [r2, #8]
 8007c0a:	da08      	bge.n	8007c1e <__sfputc_r+0x1e>
 8007c0c:	6994      	ldr	r4, [r2, #24]
 8007c0e:	42a3      	cmp	r3, r4
 8007c10:	db01      	blt.n	8007c16 <__sfputc_r+0x16>
 8007c12:	290a      	cmp	r1, #10
 8007c14:	d103      	bne.n	8007c1e <__sfputc_r+0x1e>
 8007c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c1a:	f000 bb7b 	b.w	8008314 <__swbuf_r>
 8007c1e:	6813      	ldr	r3, [r2, #0]
 8007c20:	1c58      	adds	r0, r3, #1
 8007c22:	6010      	str	r0, [r2, #0]
 8007c24:	7019      	strb	r1, [r3, #0]
 8007c26:	4608      	mov	r0, r1
 8007c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <__sfputs_r>:
 8007c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c30:	4606      	mov	r6, r0
 8007c32:	460f      	mov	r7, r1
 8007c34:	4614      	mov	r4, r2
 8007c36:	18d5      	adds	r5, r2, r3
 8007c38:	42ac      	cmp	r4, r5
 8007c3a:	d101      	bne.n	8007c40 <__sfputs_r+0x12>
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	e007      	b.n	8007c50 <__sfputs_r+0x22>
 8007c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c44:	463a      	mov	r2, r7
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff ffda 	bl	8007c00 <__sfputc_r>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d1f3      	bne.n	8007c38 <__sfputs_r+0xa>
 8007c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c54 <_vfiprintf_r>:
 8007c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c58:	460d      	mov	r5, r1
 8007c5a:	b09d      	sub	sp, #116	; 0x74
 8007c5c:	4614      	mov	r4, r2
 8007c5e:	4698      	mov	r8, r3
 8007c60:	4606      	mov	r6, r0
 8007c62:	b118      	cbz	r0, 8007c6c <_vfiprintf_r+0x18>
 8007c64:	6983      	ldr	r3, [r0, #24]
 8007c66:	b90b      	cbnz	r3, 8007c6c <_vfiprintf_r+0x18>
 8007c68:	f7ff fcb8 	bl	80075dc <__sinit>
 8007c6c:	4b89      	ldr	r3, [pc, #548]	; (8007e94 <_vfiprintf_r+0x240>)
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	d11b      	bne.n	8007caa <_vfiprintf_r+0x56>
 8007c72:	6875      	ldr	r5, [r6, #4]
 8007c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c76:	07d9      	lsls	r1, r3, #31
 8007c78:	d405      	bmi.n	8007c86 <_vfiprintf_r+0x32>
 8007c7a:	89ab      	ldrh	r3, [r5, #12]
 8007c7c:	059a      	lsls	r2, r3, #22
 8007c7e:	d402      	bmi.n	8007c86 <_vfiprintf_r+0x32>
 8007c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c82:	f7ff fd49 	bl	8007718 <__retarget_lock_acquire_recursive>
 8007c86:	89ab      	ldrh	r3, [r5, #12]
 8007c88:	071b      	lsls	r3, r3, #28
 8007c8a:	d501      	bpl.n	8007c90 <_vfiprintf_r+0x3c>
 8007c8c:	692b      	ldr	r3, [r5, #16]
 8007c8e:	b9eb      	cbnz	r3, 8007ccc <_vfiprintf_r+0x78>
 8007c90:	4629      	mov	r1, r5
 8007c92:	4630      	mov	r0, r6
 8007c94:	f000 fb90 	bl	80083b8 <__swsetup_r>
 8007c98:	b1c0      	cbz	r0, 8007ccc <_vfiprintf_r+0x78>
 8007c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c9c:	07dc      	lsls	r4, r3, #31
 8007c9e:	d50e      	bpl.n	8007cbe <_vfiprintf_r+0x6a>
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca4:	b01d      	add	sp, #116	; 0x74
 8007ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007caa:	4b7b      	ldr	r3, [pc, #492]	; (8007e98 <_vfiprintf_r+0x244>)
 8007cac:	429d      	cmp	r5, r3
 8007cae:	d101      	bne.n	8007cb4 <_vfiprintf_r+0x60>
 8007cb0:	68b5      	ldr	r5, [r6, #8]
 8007cb2:	e7df      	b.n	8007c74 <_vfiprintf_r+0x20>
 8007cb4:	4b79      	ldr	r3, [pc, #484]	; (8007e9c <_vfiprintf_r+0x248>)
 8007cb6:	429d      	cmp	r5, r3
 8007cb8:	bf08      	it	eq
 8007cba:	68f5      	ldreq	r5, [r6, #12]
 8007cbc:	e7da      	b.n	8007c74 <_vfiprintf_r+0x20>
 8007cbe:	89ab      	ldrh	r3, [r5, #12]
 8007cc0:	0598      	lsls	r0, r3, #22
 8007cc2:	d4ed      	bmi.n	8007ca0 <_vfiprintf_r+0x4c>
 8007cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cc6:	f7ff fd28 	bl	800771a <__retarget_lock_release_recursive>
 8007cca:	e7e9      	b.n	8007ca0 <_vfiprintf_r+0x4c>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd0:	2320      	movs	r3, #32
 8007cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cda:	2330      	movs	r3, #48	; 0x30
 8007cdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ea0 <_vfiprintf_r+0x24c>
 8007ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ce4:	f04f 0901 	mov.w	r9, #1
 8007ce8:	4623      	mov	r3, r4
 8007cea:	469a      	mov	sl, r3
 8007cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf0:	b10a      	cbz	r2, 8007cf6 <_vfiprintf_r+0xa2>
 8007cf2:	2a25      	cmp	r2, #37	; 0x25
 8007cf4:	d1f9      	bne.n	8007cea <_vfiprintf_r+0x96>
 8007cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8007cfa:	d00b      	beq.n	8007d14 <_vfiprintf_r+0xc0>
 8007cfc:	465b      	mov	r3, fp
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7ff ff93 	bl	8007c2e <__sfputs_r>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	f000 80aa 	beq.w	8007e62 <_vfiprintf_r+0x20e>
 8007d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d10:	445a      	add	r2, fp
 8007d12:	9209      	str	r2, [sp, #36]	; 0x24
 8007d14:	f89a 3000 	ldrb.w	r3, [sl]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80a2 	beq.w	8007e62 <_vfiprintf_r+0x20e>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f04f 32ff 	mov.w	r2, #4294967295
 8007d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d28:	f10a 0a01 	add.w	sl, sl, #1
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	9307      	str	r3, [sp, #28]
 8007d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d34:	931a      	str	r3, [sp, #104]	; 0x68
 8007d36:	4654      	mov	r4, sl
 8007d38:	2205      	movs	r2, #5
 8007d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3e:	4858      	ldr	r0, [pc, #352]	; (8007ea0 <_vfiprintf_r+0x24c>)
 8007d40:	f7f8 fa4e 	bl	80001e0 <memchr>
 8007d44:	9a04      	ldr	r2, [sp, #16]
 8007d46:	b9d8      	cbnz	r0, 8007d80 <_vfiprintf_r+0x12c>
 8007d48:	06d1      	lsls	r1, r2, #27
 8007d4a:	bf44      	itt	mi
 8007d4c:	2320      	movmi	r3, #32
 8007d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d52:	0713      	lsls	r3, r2, #28
 8007d54:	bf44      	itt	mi
 8007d56:	232b      	movmi	r3, #43	; 0x2b
 8007d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d60:	2b2a      	cmp	r3, #42	; 0x2a
 8007d62:	d015      	beq.n	8007d90 <_vfiprintf_r+0x13c>
 8007d64:	9a07      	ldr	r2, [sp, #28]
 8007d66:	4654      	mov	r4, sl
 8007d68:	2000      	movs	r0, #0
 8007d6a:	f04f 0c0a 	mov.w	ip, #10
 8007d6e:	4621      	mov	r1, r4
 8007d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d74:	3b30      	subs	r3, #48	; 0x30
 8007d76:	2b09      	cmp	r3, #9
 8007d78:	d94e      	bls.n	8007e18 <_vfiprintf_r+0x1c4>
 8007d7a:	b1b0      	cbz	r0, 8007daa <_vfiprintf_r+0x156>
 8007d7c:	9207      	str	r2, [sp, #28]
 8007d7e:	e014      	b.n	8007daa <_vfiprintf_r+0x156>
 8007d80:	eba0 0308 	sub.w	r3, r0, r8
 8007d84:	fa09 f303 	lsl.w	r3, r9, r3
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	9304      	str	r3, [sp, #16]
 8007d8c:	46a2      	mov	sl, r4
 8007d8e:	e7d2      	b.n	8007d36 <_vfiprintf_r+0xe2>
 8007d90:	9b03      	ldr	r3, [sp, #12]
 8007d92:	1d19      	adds	r1, r3, #4
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	9103      	str	r1, [sp, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	bfbb      	ittet	lt
 8007d9c:	425b      	neglt	r3, r3
 8007d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8007da2:	9307      	strge	r3, [sp, #28]
 8007da4:	9307      	strlt	r3, [sp, #28]
 8007da6:	bfb8      	it	lt
 8007da8:	9204      	strlt	r2, [sp, #16]
 8007daa:	7823      	ldrb	r3, [r4, #0]
 8007dac:	2b2e      	cmp	r3, #46	; 0x2e
 8007dae:	d10c      	bne.n	8007dca <_vfiprintf_r+0x176>
 8007db0:	7863      	ldrb	r3, [r4, #1]
 8007db2:	2b2a      	cmp	r3, #42	; 0x2a
 8007db4:	d135      	bne.n	8007e22 <_vfiprintf_r+0x1ce>
 8007db6:	9b03      	ldr	r3, [sp, #12]
 8007db8:	1d1a      	adds	r2, r3, #4
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	9203      	str	r2, [sp, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	bfb8      	it	lt
 8007dc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dc6:	3402      	adds	r4, #2
 8007dc8:	9305      	str	r3, [sp, #20]
 8007dca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007eb0 <_vfiprintf_r+0x25c>
 8007dce:	7821      	ldrb	r1, [r4, #0]
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	4650      	mov	r0, sl
 8007dd4:	f7f8 fa04 	bl	80001e0 <memchr>
 8007dd8:	b140      	cbz	r0, 8007dec <_vfiprintf_r+0x198>
 8007dda:	2340      	movs	r3, #64	; 0x40
 8007ddc:	eba0 000a 	sub.w	r0, r0, sl
 8007de0:	fa03 f000 	lsl.w	r0, r3, r0
 8007de4:	9b04      	ldr	r3, [sp, #16]
 8007de6:	4303      	orrs	r3, r0
 8007de8:	3401      	adds	r4, #1
 8007dea:	9304      	str	r3, [sp, #16]
 8007dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df0:	482c      	ldr	r0, [pc, #176]	; (8007ea4 <_vfiprintf_r+0x250>)
 8007df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007df6:	2206      	movs	r2, #6
 8007df8:	f7f8 f9f2 	bl	80001e0 <memchr>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d03f      	beq.n	8007e80 <_vfiprintf_r+0x22c>
 8007e00:	4b29      	ldr	r3, [pc, #164]	; (8007ea8 <_vfiprintf_r+0x254>)
 8007e02:	bb1b      	cbnz	r3, 8007e4c <_vfiprintf_r+0x1f8>
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	3307      	adds	r3, #7
 8007e08:	f023 0307 	bic.w	r3, r3, #7
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	9303      	str	r3, [sp, #12]
 8007e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e12:	443b      	add	r3, r7
 8007e14:	9309      	str	r3, [sp, #36]	; 0x24
 8007e16:	e767      	b.n	8007ce8 <_vfiprintf_r+0x94>
 8007e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	2001      	movs	r0, #1
 8007e20:	e7a5      	b.n	8007d6e <_vfiprintf_r+0x11a>
 8007e22:	2300      	movs	r3, #0
 8007e24:	3401      	adds	r4, #1
 8007e26:	9305      	str	r3, [sp, #20]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f04f 0c0a 	mov.w	ip, #10
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e34:	3a30      	subs	r2, #48	; 0x30
 8007e36:	2a09      	cmp	r2, #9
 8007e38:	d903      	bls.n	8007e42 <_vfiprintf_r+0x1ee>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0c5      	beq.n	8007dca <_vfiprintf_r+0x176>
 8007e3e:	9105      	str	r1, [sp, #20]
 8007e40:	e7c3      	b.n	8007dca <_vfiprintf_r+0x176>
 8007e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e46:	4604      	mov	r4, r0
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e7f0      	b.n	8007e2e <_vfiprintf_r+0x1da>
 8007e4c:	ab03      	add	r3, sp, #12
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	462a      	mov	r2, r5
 8007e52:	4b16      	ldr	r3, [pc, #88]	; (8007eac <_vfiprintf_r+0x258>)
 8007e54:	a904      	add	r1, sp, #16
 8007e56:	4630      	mov	r0, r6
 8007e58:	f3af 8000 	nop.w
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	1c78      	adds	r0, r7, #1
 8007e60:	d1d6      	bne.n	8007e10 <_vfiprintf_r+0x1bc>
 8007e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e64:	07d9      	lsls	r1, r3, #31
 8007e66:	d405      	bmi.n	8007e74 <_vfiprintf_r+0x220>
 8007e68:	89ab      	ldrh	r3, [r5, #12]
 8007e6a:	059a      	lsls	r2, r3, #22
 8007e6c:	d402      	bmi.n	8007e74 <_vfiprintf_r+0x220>
 8007e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e70:	f7ff fc53 	bl	800771a <__retarget_lock_release_recursive>
 8007e74:	89ab      	ldrh	r3, [r5, #12]
 8007e76:	065b      	lsls	r3, r3, #25
 8007e78:	f53f af12 	bmi.w	8007ca0 <_vfiprintf_r+0x4c>
 8007e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e7e:	e711      	b.n	8007ca4 <_vfiprintf_r+0x50>
 8007e80:	ab03      	add	r3, sp, #12
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	462a      	mov	r2, r5
 8007e86:	4b09      	ldr	r3, [pc, #36]	; (8007eac <_vfiprintf_r+0x258>)
 8007e88:	a904      	add	r1, sp, #16
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f000 f880 	bl	8007f90 <_printf_i>
 8007e90:	e7e4      	b.n	8007e5c <_vfiprintf_r+0x208>
 8007e92:	bf00      	nop
 8007e94:	08008cf4 	.word	0x08008cf4
 8007e98:	08008d14 	.word	0x08008d14
 8007e9c:	08008cd4 	.word	0x08008cd4
 8007ea0:	08008d34 	.word	0x08008d34
 8007ea4:	08008d3e 	.word	0x08008d3e
 8007ea8:	00000000 	.word	0x00000000
 8007eac:	08007c2f 	.word	0x08007c2f
 8007eb0:	08008d3a 	.word	0x08008d3a

08007eb4 <_printf_common>:
 8007eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb8:	4616      	mov	r6, r2
 8007eba:	4699      	mov	r9, r3
 8007ebc:	688a      	ldr	r2, [r1, #8]
 8007ebe:	690b      	ldr	r3, [r1, #16]
 8007ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	bfb8      	it	lt
 8007ec8:	4613      	movlt	r3, r2
 8007eca:	6033      	str	r3, [r6, #0]
 8007ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	b10a      	cbz	r2, 8007eda <_printf_common+0x26>
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	0699      	lsls	r1, r3, #26
 8007ede:	bf42      	ittt	mi
 8007ee0:	6833      	ldrmi	r3, [r6, #0]
 8007ee2:	3302      	addmi	r3, #2
 8007ee4:	6033      	strmi	r3, [r6, #0]
 8007ee6:	6825      	ldr	r5, [r4, #0]
 8007ee8:	f015 0506 	ands.w	r5, r5, #6
 8007eec:	d106      	bne.n	8007efc <_printf_common+0x48>
 8007eee:	f104 0a19 	add.w	sl, r4, #25
 8007ef2:	68e3      	ldr	r3, [r4, #12]
 8007ef4:	6832      	ldr	r2, [r6, #0]
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	42ab      	cmp	r3, r5
 8007efa:	dc26      	bgt.n	8007f4a <_printf_common+0x96>
 8007efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f00:	1e13      	subs	r3, r2, #0
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	bf18      	it	ne
 8007f06:	2301      	movne	r3, #1
 8007f08:	0692      	lsls	r2, r2, #26
 8007f0a:	d42b      	bmi.n	8007f64 <_printf_common+0xb0>
 8007f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f10:	4649      	mov	r1, r9
 8007f12:	4638      	mov	r0, r7
 8007f14:	47c0      	blx	r8
 8007f16:	3001      	adds	r0, #1
 8007f18:	d01e      	beq.n	8007f58 <_printf_common+0xa4>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	68e5      	ldr	r5, [r4, #12]
 8007f1e:	6832      	ldr	r2, [r6, #0]
 8007f20:	f003 0306 	and.w	r3, r3, #6
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	bf08      	it	eq
 8007f28:	1aad      	subeq	r5, r5, r2
 8007f2a:	68a3      	ldr	r3, [r4, #8]
 8007f2c:	6922      	ldr	r2, [r4, #16]
 8007f2e:	bf0c      	ite	eq
 8007f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f34:	2500      	movne	r5, #0
 8007f36:	4293      	cmp	r3, r2
 8007f38:	bfc4      	itt	gt
 8007f3a:	1a9b      	subgt	r3, r3, r2
 8007f3c:	18ed      	addgt	r5, r5, r3
 8007f3e:	2600      	movs	r6, #0
 8007f40:	341a      	adds	r4, #26
 8007f42:	42b5      	cmp	r5, r6
 8007f44:	d11a      	bne.n	8007f7c <_printf_common+0xc8>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e008      	b.n	8007f5c <_printf_common+0xa8>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4652      	mov	r2, sl
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4638      	mov	r0, r7
 8007f52:	47c0      	blx	r8
 8007f54:	3001      	adds	r0, #1
 8007f56:	d103      	bne.n	8007f60 <_printf_common+0xac>
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f60:	3501      	adds	r5, #1
 8007f62:	e7c6      	b.n	8007ef2 <_printf_common+0x3e>
 8007f64:	18e1      	adds	r1, r4, r3
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	2030      	movs	r0, #48	; 0x30
 8007f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f6e:	4422      	add	r2, r4
 8007f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f78:	3302      	adds	r3, #2
 8007f7a:	e7c7      	b.n	8007f0c <_printf_common+0x58>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	4622      	mov	r2, r4
 8007f80:	4649      	mov	r1, r9
 8007f82:	4638      	mov	r0, r7
 8007f84:	47c0      	blx	r8
 8007f86:	3001      	adds	r0, #1
 8007f88:	d0e6      	beq.n	8007f58 <_printf_common+0xa4>
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	e7d9      	b.n	8007f42 <_printf_common+0x8e>
	...

08007f90 <_printf_i>:
 8007f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	460c      	mov	r4, r1
 8007f96:	4691      	mov	r9, r2
 8007f98:	7e27      	ldrb	r7, [r4, #24]
 8007f9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f9c:	2f78      	cmp	r7, #120	; 0x78
 8007f9e:	4680      	mov	r8, r0
 8007fa0:	469a      	mov	sl, r3
 8007fa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fa6:	d807      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fa8:	2f62      	cmp	r7, #98	; 0x62
 8007faa:	d80a      	bhi.n	8007fc2 <_printf_i+0x32>
 8007fac:	2f00      	cmp	r7, #0
 8007fae:	f000 80d8 	beq.w	8008162 <_printf_i+0x1d2>
 8007fb2:	2f58      	cmp	r7, #88	; 0x58
 8007fb4:	f000 80a3 	beq.w	80080fe <_printf_i+0x16e>
 8007fb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fc0:	e03a      	b.n	8008038 <_printf_i+0xa8>
 8007fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fc6:	2b15      	cmp	r3, #21
 8007fc8:	d8f6      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fca:	a001      	add	r0, pc, #4	; (adr r0, 8007fd0 <_printf_i+0x40>)
 8007fcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007fd0:	08008029 	.word	0x08008029
 8007fd4:	0800803d 	.word	0x0800803d
 8007fd8:	08007fb9 	.word	0x08007fb9
 8007fdc:	08007fb9 	.word	0x08007fb9
 8007fe0:	08007fb9 	.word	0x08007fb9
 8007fe4:	08007fb9 	.word	0x08007fb9
 8007fe8:	0800803d 	.word	0x0800803d
 8007fec:	08007fb9 	.word	0x08007fb9
 8007ff0:	08007fb9 	.word	0x08007fb9
 8007ff4:	08007fb9 	.word	0x08007fb9
 8007ff8:	08007fb9 	.word	0x08007fb9
 8007ffc:	08008149 	.word	0x08008149
 8008000:	0800806d 	.word	0x0800806d
 8008004:	0800812b 	.word	0x0800812b
 8008008:	08007fb9 	.word	0x08007fb9
 800800c:	08007fb9 	.word	0x08007fb9
 8008010:	0800816b 	.word	0x0800816b
 8008014:	08007fb9 	.word	0x08007fb9
 8008018:	0800806d 	.word	0x0800806d
 800801c:	08007fb9 	.word	0x08007fb9
 8008020:	08007fb9 	.word	0x08007fb9
 8008024:	08008133 	.word	0x08008133
 8008028:	680b      	ldr	r3, [r1, #0]
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	600a      	str	r2, [r1, #0]
 8008030:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008038:	2301      	movs	r3, #1
 800803a:	e0a3      	b.n	8008184 <_printf_i+0x1f4>
 800803c:	6825      	ldr	r5, [r4, #0]
 800803e:	6808      	ldr	r0, [r1, #0]
 8008040:	062e      	lsls	r6, r5, #24
 8008042:	f100 0304 	add.w	r3, r0, #4
 8008046:	d50a      	bpl.n	800805e <_printf_i+0xce>
 8008048:	6805      	ldr	r5, [r0, #0]
 800804a:	600b      	str	r3, [r1, #0]
 800804c:	2d00      	cmp	r5, #0
 800804e:	da03      	bge.n	8008058 <_printf_i+0xc8>
 8008050:	232d      	movs	r3, #45	; 0x2d
 8008052:	426d      	negs	r5, r5
 8008054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008058:	485e      	ldr	r0, [pc, #376]	; (80081d4 <_printf_i+0x244>)
 800805a:	230a      	movs	r3, #10
 800805c:	e019      	b.n	8008092 <_printf_i+0x102>
 800805e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008062:	6805      	ldr	r5, [r0, #0]
 8008064:	600b      	str	r3, [r1, #0]
 8008066:	bf18      	it	ne
 8008068:	b22d      	sxthne	r5, r5
 800806a:	e7ef      	b.n	800804c <_printf_i+0xbc>
 800806c:	680b      	ldr	r3, [r1, #0]
 800806e:	6825      	ldr	r5, [r4, #0]
 8008070:	1d18      	adds	r0, r3, #4
 8008072:	6008      	str	r0, [r1, #0]
 8008074:	0628      	lsls	r0, r5, #24
 8008076:	d501      	bpl.n	800807c <_printf_i+0xec>
 8008078:	681d      	ldr	r5, [r3, #0]
 800807a:	e002      	b.n	8008082 <_printf_i+0xf2>
 800807c:	0669      	lsls	r1, r5, #25
 800807e:	d5fb      	bpl.n	8008078 <_printf_i+0xe8>
 8008080:	881d      	ldrh	r5, [r3, #0]
 8008082:	4854      	ldr	r0, [pc, #336]	; (80081d4 <_printf_i+0x244>)
 8008084:	2f6f      	cmp	r7, #111	; 0x6f
 8008086:	bf0c      	ite	eq
 8008088:	2308      	moveq	r3, #8
 800808a:	230a      	movne	r3, #10
 800808c:	2100      	movs	r1, #0
 800808e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008092:	6866      	ldr	r6, [r4, #4]
 8008094:	60a6      	str	r6, [r4, #8]
 8008096:	2e00      	cmp	r6, #0
 8008098:	bfa2      	ittt	ge
 800809a:	6821      	ldrge	r1, [r4, #0]
 800809c:	f021 0104 	bicge.w	r1, r1, #4
 80080a0:	6021      	strge	r1, [r4, #0]
 80080a2:	b90d      	cbnz	r5, 80080a8 <_printf_i+0x118>
 80080a4:	2e00      	cmp	r6, #0
 80080a6:	d04d      	beq.n	8008144 <_printf_i+0x1b4>
 80080a8:	4616      	mov	r6, r2
 80080aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80080ae:	fb03 5711 	mls	r7, r3, r1, r5
 80080b2:	5dc7      	ldrb	r7, [r0, r7]
 80080b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080b8:	462f      	mov	r7, r5
 80080ba:	42bb      	cmp	r3, r7
 80080bc:	460d      	mov	r5, r1
 80080be:	d9f4      	bls.n	80080aa <_printf_i+0x11a>
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d10b      	bne.n	80080dc <_printf_i+0x14c>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	07df      	lsls	r7, r3, #31
 80080c8:	d508      	bpl.n	80080dc <_printf_i+0x14c>
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	6861      	ldr	r1, [r4, #4]
 80080ce:	4299      	cmp	r1, r3
 80080d0:	bfde      	ittt	le
 80080d2:	2330      	movle	r3, #48	; 0x30
 80080d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080dc:	1b92      	subs	r2, r2, r6
 80080de:	6122      	str	r2, [r4, #16]
 80080e0:	f8cd a000 	str.w	sl, [sp]
 80080e4:	464b      	mov	r3, r9
 80080e6:	aa03      	add	r2, sp, #12
 80080e8:	4621      	mov	r1, r4
 80080ea:	4640      	mov	r0, r8
 80080ec:	f7ff fee2 	bl	8007eb4 <_printf_common>
 80080f0:	3001      	adds	r0, #1
 80080f2:	d14c      	bne.n	800818e <_printf_i+0x1fe>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	b004      	add	sp, #16
 80080fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fe:	4835      	ldr	r0, [pc, #212]	; (80081d4 <_printf_i+0x244>)
 8008100:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	680e      	ldr	r6, [r1, #0]
 8008108:	061f      	lsls	r7, r3, #24
 800810a:	f856 5b04 	ldr.w	r5, [r6], #4
 800810e:	600e      	str	r6, [r1, #0]
 8008110:	d514      	bpl.n	800813c <_printf_i+0x1ac>
 8008112:	07d9      	lsls	r1, r3, #31
 8008114:	bf44      	itt	mi
 8008116:	f043 0320 	orrmi.w	r3, r3, #32
 800811a:	6023      	strmi	r3, [r4, #0]
 800811c:	b91d      	cbnz	r5, 8008126 <_printf_i+0x196>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f023 0320 	bic.w	r3, r3, #32
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	2310      	movs	r3, #16
 8008128:	e7b0      	b.n	800808c <_printf_i+0xfc>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	f043 0320 	orr.w	r3, r3, #32
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	2378      	movs	r3, #120	; 0x78
 8008134:	4828      	ldr	r0, [pc, #160]	; (80081d8 <_printf_i+0x248>)
 8008136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800813a:	e7e3      	b.n	8008104 <_printf_i+0x174>
 800813c:	065e      	lsls	r6, r3, #25
 800813e:	bf48      	it	mi
 8008140:	b2ad      	uxthmi	r5, r5
 8008142:	e7e6      	b.n	8008112 <_printf_i+0x182>
 8008144:	4616      	mov	r6, r2
 8008146:	e7bb      	b.n	80080c0 <_printf_i+0x130>
 8008148:	680b      	ldr	r3, [r1, #0]
 800814a:	6826      	ldr	r6, [r4, #0]
 800814c:	6960      	ldr	r0, [r4, #20]
 800814e:	1d1d      	adds	r5, r3, #4
 8008150:	600d      	str	r5, [r1, #0]
 8008152:	0635      	lsls	r5, r6, #24
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	d501      	bpl.n	800815c <_printf_i+0x1cc>
 8008158:	6018      	str	r0, [r3, #0]
 800815a:	e002      	b.n	8008162 <_printf_i+0x1d2>
 800815c:	0671      	lsls	r1, r6, #25
 800815e:	d5fb      	bpl.n	8008158 <_printf_i+0x1c8>
 8008160:	8018      	strh	r0, [r3, #0]
 8008162:	2300      	movs	r3, #0
 8008164:	6123      	str	r3, [r4, #16]
 8008166:	4616      	mov	r6, r2
 8008168:	e7ba      	b.n	80080e0 <_printf_i+0x150>
 800816a:	680b      	ldr	r3, [r1, #0]
 800816c:	1d1a      	adds	r2, r3, #4
 800816e:	600a      	str	r2, [r1, #0]
 8008170:	681e      	ldr	r6, [r3, #0]
 8008172:	6862      	ldr	r2, [r4, #4]
 8008174:	2100      	movs	r1, #0
 8008176:	4630      	mov	r0, r6
 8008178:	f7f8 f832 	bl	80001e0 <memchr>
 800817c:	b108      	cbz	r0, 8008182 <_printf_i+0x1f2>
 800817e:	1b80      	subs	r0, r0, r6
 8008180:	6060      	str	r0, [r4, #4]
 8008182:	6863      	ldr	r3, [r4, #4]
 8008184:	6123      	str	r3, [r4, #16]
 8008186:	2300      	movs	r3, #0
 8008188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800818c:	e7a8      	b.n	80080e0 <_printf_i+0x150>
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	4632      	mov	r2, r6
 8008192:	4649      	mov	r1, r9
 8008194:	4640      	mov	r0, r8
 8008196:	47d0      	blx	sl
 8008198:	3001      	adds	r0, #1
 800819a:	d0ab      	beq.n	80080f4 <_printf_i+0x164>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	079b      	lsls	r3, r3, #30
 80081a0:	d413      	bmi.n	80081ca <_printf_i+0x23a>
 80081a2:	68e0      	ldr	r0, [r4, #12]
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	4298      	cmp	r0, r3
 80081a8:	bfb8      	it	lt
 80081aa:	4618      	movlt	r0, r3
 80081ac:	e7a4      	b.n	80080f8 <_printf_i+0x168>
 80081ae:	2301      	movs	r3, #1
 80081b0:	4632      	mov	r2, r6
 80081b2:	4649      	mov	r1, r9
 80081b4:	4640      	mov	r0, r8
 80081b6:	47d0      	blx	sl
 80081b8:	3001      	adds	r0, #1
 80081ba:	d09b      	beq.n	80080f4 <_printf_i+0x164>
 80081bc:	3501      	adds	r5, #1
 80081be:	68e3      	ldr	r3, [r4, #12]
 80081c0:	9903      	ldr	r1, [sp, #12]
 80081c2:	1a5b      	subs	r3, r3, r1
 80081c4:	42ab      	cmp	r3, r5
 80081c6:	dcf2      	bgt.n	80081ae <_printf_i+0x21e>
 80081c8:	e7eb      	b.n	80081a2 <_printf_i+0x212>
 80081ca:	2500      	movs	r5, #0
 80081cc:	f104 0619 	add.w	r6, r4, #25
 80081d0:	e7f5      	b.n	80081be <_printf_i+0x22e>
 80081d2:	bf00      	nop
 80081d4:	08008d45 	.word	0x08008d45
 80081d8:	08008d56 	.word	0x08008d56

080081dc <_putc_r>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	460d      	mov	r5, r1
 80081e0:	4614      	mov	r4, r2
 80081e2:	4606      	mov	r6, r0
 80081e4:	b118      	cbz	r0, 80081ee <_putc_r+0x12>
 80081e6:	6983      	ldr	r3, [r0, #24]
 80081e8:	b90b      	cbnz	r3, 80081ee <_putc_r+0x12>
 80081ea:	f7ff f9f7 	bl	80075dc <__sinit>
 80081ee:	4b1c      	ldr	r3, [pc, #112]	; (8008260 <_putc_r+0x84>)
 80081f0:	429c      	cmp	r4, r3
 80081f2:	d124      	bne.n	800823e <_putc_r+0x62>
 80081f4:	6874      	ldr	r4, [r6, #4]
 80081f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081f8:	07d8      	lsls	r0, r3, #31
 80081fa:	d405      	bmi.n	8008208 <_putc_r+0x2c>
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	0599      	lsls	r1, r3, #22
 8008200:	d402      	bmi.n	8008208 <_putc_r+0x2c>
 8008202:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008204:	f7ff fa88 	bl	8007718 <__retarget_lock_acquire_recursive>
 8008208:	68a3      	ldr	r3, [r4, #8]
 800820a:	3b01      	subs	r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	60a3      	str	r3, [r4, #8]
 8008210:	da05      	bge.n	800821e <_putc_r+0x42>
 8008212:	69a2      	ldr	r2, [r4, #24]
 8008214:	4293      	cmp	r3, r2
 8008216:	db1c      	blt.n	8008252 <_putc_r+0x76>
 8008218:	b2eb      	uxtb	r3, r5
 800821a:	2b0a      	cmp	r3, #10
 800821c:	d019      	beq.n	8008252 <_putc_r+0x76>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	6022      	str	r2, [r4, #0]
 8008224:	701d      	strb	r5, [r3, #0]
 8008226:	b2ed      	uxtb	r5, r5
 8008228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800822a:	07da      	lsls	r2, r3, #31
 800822c:	d405      	bmi.n	800823a <_putc_r+0x5e>
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	059b      	lsls	r3, r3, #22
 8008232:	d402      	bmi.n	800823a <_putc_r+0x5e>
 8008234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008236:	f7ff fa70 	bl	800771a <__retarget_lock_release_recursive>
 800823a:	4628      	mov	r0, r5
 800823c:	bd70      	pop	{r4, r5, r6, pc}
 800823e:	4b09      	ldr	r3, [pc, #36]	; (8008264 <_putc_r+0x88>)
 8008240:	429c      	cmp	r4, r3
 8008242:	d101      	bne.n	8008248 <_putc_r+0x6c>
 8008244:	68b4      	ldr	r4, [r6, #8]
 8008246:	e7d6      	b.n	80081f6 <_putc_r+0x1a>
 8008248:	4b07      	ldr	r3, [pc, #28]	; (8008268 <_putc_r+0x8c>)
 800824a:	429c      	cmp	r4, r3
 800824c:	bf08      	it	eq
 800824e:	68f4      	ldreq	r4, [r6, #12]
 8008250:	e7d1      	b.n	80081f6 <_putc_r+0x1a>
 8008252:	4629      	mov	r1, r5
 8008254:	4622      	mov	r2, r4
 8008256:	4630      	mov	r0, r6
 8008258:	f000 f85c 	bl	8008314 <__swbuf_r>
 800825c:	4605      	mov	r5, r0
 800825e:	e7e3      	b.n	8008228 <_putc_r+0x4c>
 8008260:	08008cf4 	.word	0x08008cf4
 8008264:	08008d14 	.word	0x08008d14
 8008268:	08008cd4 	.word	0x08008cd4

0800826c <_sbrk_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d06      	ldr	r5, [pc, #24]	; (8008288 <_sbrk_r+0x1c>)
 8008270:	2300      	movs	r3, #0
 8008272:	4604      	mov	r4, r0
 8008274:	4608      	mov	r0, r1
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	f7fe fb42 	bl	8006900 <_sbrk>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_sbrk_r+0x1a>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_sbrk_r+0x1a>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	20000454 	.word	0x20000454

0800828c <__sread>:
 800828c:	b510      	push	{r4, lr}
 800828e:	460c      	mov	r4, r1
 8008290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008294:	f000 f98e 	bl	80085b4 <_read_r>
 8008298:	2800      	cmp	r0, #0
 800829a:	bfab      	itete	ge
 800829c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800829e:	89a3      	ldrhlt	r3, [r4, #12]
 80082a0:	181b      	addge	r3, r3, r0
 80082a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082a6:	bfac      	ite	ge
 80082a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80082aa:	81a3      	strhlt	r3, [r4, #12]
 80082ac:	bd10      	pop	{r4, pc}

080082ae <__swrite>:
 80082ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b2:	461f      	mov	r7, r3
 80082b4:	898b      	ldrh	r3, [r1, #12]
 80082b6:	05db      	lsls	r3, r3, #23
 80082b8:	4605      	mov	r5, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	4616      	mov	r6, r2
 80082be:	d505      	bpl.n	80082cc <__swrite+0x1e>
 80082c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c4:	2302      	movs	r3, #2
 80082c6:	2200      	movs	r2, #0
 80082c8:	f000 f916 	bl	80084f8 <_lseek_r>
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082d6:	81a3      	strh	r3, [r4, #12]
 80082d8:	4632      	mov	r2, r6
 80082da:	463b      	mov	r3, r7
 80082dc:	4628      	mov	r0, r5
 80082de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082e2:	f7f8 bf1d 	b.w	8001120 <_write_r>

080082e6 <__sseek>:
 80082e6:	b510      	push	{r4, lr}
 80082e8:	460c      	mov	r4, r1
 80082ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ee:	f000 f903 	bl	80084f8 <_lseek_r>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	bf15      	itete	ne
 80082f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80082fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008302:	81a3      	strheq	r3, [r4, #12]
 8008304:	bf18      	it	ne
 8008306:	81a3      	strhne	r3, [r4, #12]
 8008308:	bd10      	pop	{r4, pc}

0800830a <__sclose>:
 800830a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830e:	f000 b8c1 	b.w	8008494 <_close_r>
	...

08008314 <__swbuf_r>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	460e      	mov	r6, r1
 8008318:	4614      	mov	r4, r2
 800831a:	4605      	mov	r5, r0
 800831c:	b118      	cbz	r0, 8008326 <__swbuf_r+0x12>
 800831e:	6983      	ldr	r3, [r0, #24]
 8008320:	b90b      	cbnz	r3, 8008326 <__swbuf_r+0x12>
 8008322:	f7ff f95b 	bl	80075dc <__sinit>
 8008326:	4b21      	ldr	r3, [pc, #132]	; (80083ac <__swbuf_r+0x98>)
 8008328:	429c      	cmp	r4, r3
 800832a:	d12b      	bne.n	8008384 <__swbuf_r+0x70>
 800832c:	686c      	ldr	r4, [r5, #4]
 800832e:	69a3      	ldr	r3, [r4, #24]
 8008330:	60a3      	str	r3, [r4, #8]
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	071a      	lsls	r2, r3, #28
 8008336:	d52f      	bpl.n	8008398 <__swbuf_r+0x84>
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	b36b      	cbz	r3, 8008398 <__swbuf_r+0x84>
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	6820      	ldr	r0, [r4, #0]
 8008340:	1ac0      	subs	r0, r0, r3
 8008342:	6963      	ldr	r3, [r4, #20]
 8008344:	b2f6      	uxtb	r6, r6
 8008346:	4283      	cmp	r3, r0
 8008348:	4637      	mov	r7, r6
 800834a:	dc04      	bgt.n	8008356 <__swbuf_r+0x42>
 800834c:	4621      	mov	r1, r4
 800834e:	4628      	mov	r0, r5
 8008350:	f7ff f8b0 	bl	80074b4 <_fflush_r>
 8008354:	bb30      	cbnz	r0, 80083a4 <__swbuf_r+0x90>
 8008356:	68a3      	ldr	r3, [r4, #8]
 8008358:	3b01      	subs	r3, #1
 800835a:	60a3      	str	r3, [r4, #8]
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	6022      	str	r2, [r4, #0]
 8008362:	701e      	strb	r6, [r3, #0]
 8008364:	6963      	ldr	r3, [r4, #20]
 8008366:	3001      	adds	r0, #1
 8008368:	4283      	cmp	r3, r0
 800836a:	d004      	beq.n	8008376 <__swbuf_r+0x62>
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	07db      	lsls	r3, r3, #31
 8008370:	d506      	bpl.n	8008380 <__swbuf_r+0x6c>
 8008372:	2e0a      	cmp	r6, #10
 8008374:	d104      	bne.n	8008380 <__swbuf_r+0x6c>
 8008376:	4621      	mov	r1, r4
 8008378:	4628      	mov	r0, r5
 800837a:	f7ff f89b 	bl	80074b4 <_fflush_r>
 800837e:	b988      	cbnz	r0, 80083a4 <__swbuf_r+0x90>
 8008380:	4638      	mov	r0, r7
 8008382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008384:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <__swbuf_r+0x9c>)
 8008386:	429c      	cmp	r4, r3
 8008388:	d101      	bne.n	800838e <__swbuf_r+0x7a>
 800838a:	68ac      	ldr	r4, [r5, #8]
 800838c:	e7cf      	b.n	800832e <__swbuf_r+0x1a>
 800838e:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <__swbuf_r+0xa0>)
 8008390:	429c      	cmp	r4, r3
 8008392:	bf08      	it	eq
 8008394:	68ec      	ldreq	r4, [r5, #12]
 8008396:	e7ca      	b.n	800832e <__swbuf_r+0x1a>
 8008398:	4621      	mov	r1, r4
 800839a:	4628      	mov	r0, r5
 800839c:	f000 f80c 	bl	80083b8 <__swsetup_r>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d0cb      	beq.n	800833c <__swbuf_r+0x28>
 80083a4:	f04f 37ff 	mov.w	r7, #4294967295
 80083a8:	e7ea      	b.n	8008380 <__swbuf_r+0x6c>
 80083aa:	bf00      	nop
 80083ac:	08008cf4 	.word	0x08008cf4
 80083b0:	08008d14 	.word	0x08008d14
 80083b4:	08008cd4 	.word	0x08008cd4

080083b8 <__swsetup_r>:
 80083b8:	4b32      	ldr	r3, [pc, #200]	; (8008484 <__swsetup_r+0xcc>)
 80083ba:	b570      	push	{r4, r5, r6, lr}
 80083bc:	681d      	ldr	r5, [r3, #0]
 80083be:	4606      	mov	r6, r0
 80083c0:	460c      	mov	r4, r1
 80083c2:	b125      	cbz	r5, 80083ce <__swsetup_r+0x16>
 80083c4:	69ab      	ldr	r3, [r5, #24]
 80083c6:	b913      	cbnz	r3, 80083ce <__swsetup_r+0x16>
 80083c8:	4628      	mov	r0, r5
 80083ca:	f7ff f907 	bl	80075dc <__sinit>
 80083ce:	4b2e      	ldr	r3, [pc, #184]	; (8008488 <__swsetup_r+0xd0>)
 80083d0:	429c      	cmp	r4, r3
 80083d2:	d10f      	bne.n	80083f4 <__swsetup_r+0x3c>
 80083d4:	686c      	ldr	r4, [r5, #4]
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083dc:	0719      	lsls	r1, r3, #28
 80083de:	d42c      	bmi.n	800843a <__swsetup_r+0x82>
 80083e0:	06dd      	lsls	r5, r3, #27
 80083e2:	d411      	bmi.n	8008408 <__swsetup_r+0x50>
 80083e4:	2309      	movs	r3, #9
 80083e6:	6033      	str	r3, [r6, #0]
 80083e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083ec:	81a3      	strh	r3, [r4, #12]
 80083ee:	f04f 30ff 	mov.w	r0, #4294967295
 80083f2:	e03e      	b.n	8008472 <__swsetup_r+0xba>
 80083f4:	4b25      	ldr	r3, [pc, #148]	; (800848c <__swsetup_r+0xd4>)
 80083f6:	429c      	cmp	r4, r3
 80083f8:	d101      	bne.n	80083fe <__swsetup_r+0x46>
 80083fa:	68ac      	ldr	r4, [r5, #8]
 80083fc:	e7eb      	b.n	80083d6 <__swsetup_r+0x1e>
 80083fe:	4b24      	ldr	r3, [pc, #144]	; (8008490 <__swsetup_r+0xd8>)
 8008400:	429c      	cmp	r4, r3
 8008402:	bf08      	it	eq
 8008404:	68ec      	ldreq	r4, [r5, #12]
 8008406:	e7e6      	b.n	80083d6 <__swsetup_r+0x1e>
 8008408:	0758      	lsls	r0, r3, #29
 800840a:	d512      	bpl.n	8008432 <__swsetup_r+0x7a>
 800840c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800840e:	b141      	cbz	r1, 8008422 <__swsetup_r+0x6a>
 8008410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008414:	4299      	cmp	r1, r3
 8008416:	d002      	beq.n	800841e <__swsetup_r+0x66>
 8008418:	4630      	mov	r0, r6
 800841a:	f7ff f9eb 	bl	80077f4 <_free_r>
 800841e:	2300      	movs	r3, #0
 8008420:	6363      	str	r3, [r4, #52]	; 0x34
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008428:	81a3      	strh	r3, [r4, #12]
 800842a:	2300      	movs	r3, #0
 800842c:	6063      	str	r3, [r4, #4]
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	f043 0308 	orr.w	r3, r3, #8
 8008438:	81a3      	strh	r3, [r4, #12]
 800843a:	6923      	ldr	r3, [r4, #16]
 800843c:	b94b      	cbnz	r3, 8008452 <__swsetup_r+0x9a>
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008448:	d003      	beq.n	8008452 <__swsetup_r+0x9a>
 800844a:	4621      	mov	r1, r4
 800844c:	4630      	mov	r0, r6
 800844e:	f7ff f989 	bl	8007764 <__smakebuf_r>
 8008452:	89a0      	ldrh	r0, [r4, #12]
 8008454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008458:	f010 0301 	ands.w	r3, r0, #1
 800845c:	d00a      	beq.n	8008474 <__swsetup_r+0xbc>
 800845e:	2300      	movs	r3, #0
 8008460:	60a3      	str	r3, [r4, #8]
 8008462:	6963      	ldr	r3, [r4, #20]
 8008464:	425b      	negs	r3, r3
 8008466:	61a3      	str	r3, [r4, #24]
 8008468:	6923      	ldr	r3, [r4, #16]
 800846a:	b943      	cbnz	r3, 800847e <__swsetup_r+0xc6>
 800846c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008470:	d1ba      	bne.n	80083e8 <__swsetup_r+0x30>
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	0781      	lsls	r1, r0, #30
 8008476:	bf58      	it	pl
 8008478:	6963      	ldrpl	r3, [r4, #20]
 800847a:	60a3      	str	r3, [r4, #8]
 800847c:	e7f4      	b.n	8008468 <__swsetup_r+0xb0>
 800847e:	2000      	movs	r0, #0
 8008480:	e7f7      	b.n	8008472 <__swsetup_r+0xba>
 8008482:	bf00      	nop
 8008484:	2000002c 	.word	0x2000002c
 8008488:	08008cf4 	.word	0x08008cf4
 800848c:	08008d14 	.word	0x08008d14
 8008490:	08008cd4 	.word	0x08008cd4

08008494 <_close_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d06      	ldr	r5, [pc, #24]	; (80084b0 <_close_r+0x1c>)
 8008498:	2300      	movs	r3, #0
 800849a:	4604      	mov	r4, r0
 800849c:	4608      	mov	r0, r1
 800849e:	602b      	str	r3, [r5, #0]
 80084a0:	f7fe f9f9 	bl	8006896 <_close>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d102      	bne.n	80084ae <_close_r+0x1a>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	b103      	cbz	r3, 80084ae <_close_r+0x1a>
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	20000454 	.word	0x20000454

080084b4 <_fstat_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4d07      	ldr	r5, [pc, #28]	; (80084d4 <_fstat_r+0x20>)
 80084b8:	2300      	movs	r3, #0
 80084ba:	4604      	mov	r4, r0
 80084bc:	4608      	mov	r0, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	f7fe f9f4 	bl	80068ae <_fstat>
 80084c6:	1c43      	adds	r3, r0, #1
 80084c8:	d102      	bne.n	80084d0 <_fstat_r+0x1c>
 80084ca:	682b      	ldr	r3, [r5, #0]
 80084cc:	b103      	cbz	r3, 80084d0 <_fstat_r+0x1c>
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	bd38      	pop	{r3, r4, r5, pc}
 80084d2:	bf00      	nop
 80084d4:	20000454 	.word	0x20000454

080084d8 <_isatty_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4d06      	ldr	r5, [pc, #24]	; (80084f4 <_isatty_r+0x1c>)
 80084dc:	2300      	movs	r3, #0
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	602b      	str	r3, [r5, #0]
 80084e4:	f7fe f9f3 	bl	80068ce <_isatty>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d102      	bne.n	80084f2 <_isatty_r+0x1a>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	b103      	cbz	r3, 80084f2 <_isatty_r+0x1a>
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	20000454 	.word	0x20000454

080084f8 <_lseek_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	4d07      	ldr	r5, [pc, #28]	; (8008518 <_lseek_r+0x20>)
 80084fc:	4604      	mov	r4, r0
 80084fe:	4608      	mov	r0, r1
 8008500:	4611      	mov	r1, r2
 8008502:	2200      	movs	r2, #0
 8008504:	602a      	str	r2, [r5, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	f7fe f9ec 	bl	80068e4 <_lseek>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d102      	bne.n	8008516 <_lseek_r+0x1e>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	b103      	cbz	r3, 8008516 <_lseek_r+0x1e>
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	20000454 	.word	0x20000454

0800851c <memmove>:
 800851c:	4288      	cmp	r0, r1
 800851e:	b510      	push	{r4, lr}
 8008520:	eb01 0402 	add.w	r4, r1, r2
 8008524:	d902      	bls.n	800852c <memmove+0x10>
 8008526:	4284      	cmp	r4, r0
 8008528:	4623      	mov	r3, r4
 800852a:	d807      	bhi.n	800853c <memmove+0x20>
 800852c:	1e43      	subs	r3, r0, #1
 800852e:	42a1      	cmp	r1, r4
 8008530:	d008      	beq.n	8008544 <memmove+0x28>
 8008532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800853a:	e7f8      	b.n	800852e <memmove+0x12>
 800853c:	4402      	add	r2, r0
 800853e:	4601      	mov	r1, r0
 8008540:	428a      	cmp	r2, r1
 8008542:	d100      	bne.n	8008546 <memmove+0x2a>
 8008544:	bd10      	pop	{r4, pc}
 8008546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800854a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800854e:	e7f7      	b.n	8008540 <memmove+0x24>

08008550 <__malloc_lock>:
 8008550:	4801      	ldr	r0, [pc, #4]	; (8008558 <__malloc_lock+0x8>)
 8008552:	f7ff b8e1 	b.w	8007718 <__retarget_lock_acquire_recursive>
 8008556:	bf00      	nop
 8008558:	2000044c 	.word	0x2000044c

0800855c <__malloc_unlock>:
 800855c:	4801      	ldr	r0, [pc, #4]	; (8008564 <__malloc_unlock+0x8>)
 800855e:	f7ff b8dc 	b.w	800771a <__retarget_lock_release_recursive>
 8008562:	bf00      	nop
 8008564:	2000044c 	.word	0x2000044c

08008568 <_realloc_r>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	4607      	mov	r7, r0
 800856c:	4614      	mov	r4, r2
 800856e:	460e      	mov	r6, r1
 8008570:	b921      	cbnz	r1, 800857c <_realloc_r+0x14>
 8008572:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008576:	4611      	mov	r1, r2
 8008578:	f7ff b98c 	b.w	8007894 <_malloc_r>
 800857c:	b922      	cbnz	r2, 8008588 <_realloc_r+0x20>
 800857e:	f7ff f939 	bl	80077f4 <_free_r>
 8008582:	4625      	mov	r5, r4
 8008584:	4628      	mov	r0, r5
 8008586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008588:	f000 f826 	bl	80085d8 <_malloc_usable_size_r>
 800858c:	42a0      	cmp	r0, r4
 800858e:	d20f      	bcs.n	80085b0 <_realloc_r+0x48>
 8008590:	4621      	mov	r1, r4
 8008592:	4638      	mov	r0, r7
 8008594:	f7ff f97e 	bl	8007894 <_malloc_r>
 8008598:	4605      	mov	r5, r0
 800859a:	2800      	cmp	r0, #0
 800859c:	d0f2      	beq.n	8008584 <_realloc_r+0x1c>
 800859e:	4631      	mov	r1, r6
 80085a0:	4622      	mov	r2, r4
 80085a2:	f7fe fdcf 	bl	8007144 <memcpy>
 80085a6:	4631      	mov	r1, r6
 80085a8:	4638      	mov	r0, r7
 80085aa:	f7ff f923 	bl	80077f4 <_free_r>
 80085ae:	e7e9      	b.n	8008584 <_realloc_r+0x1c>
 80085b0:	4635      	mov	r5, r6
 80085b2:	e7e7      	b.n	8008584 <_realloc_r+0x1c>

080085b4 <_read_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	4d07      	ldr	r5, [pc, #28]	; (80085d4 <_read_r+0x20>)
 80085b8:	4604      	mov	r4, r0
 80085ba:	4608      	mov	r0, r1
 80085bc:	4611      	mov	r1, r2
 80085be:	2200      	movs	r2, #0
 80085c0:	602a      	str	r2, [r5, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	f7fe f94a 	bl	800685c <_read>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d102      	bne.n	80085d2 <_read_r+0x1e>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	b103      	cbz	r3, 80085d2 <_read_r+0x1e>
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	20000454 	.word	0x20000454

080085d8 <_malloc_usable_size_r>:
 80085d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085dc:	1f18      	subs	r0, r3, #4
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bfbc      	itt	lt
 80085e2:	580b      	ldrlt	r3, [r1, r0]
 80085e4:	18c0      	addlt	r0, r0, r3
 80085e6:	4770      	bx	lr

080085e8 <_init>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr

080085f4 <_fini>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr
