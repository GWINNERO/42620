
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005adc  08005adc  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08005adc  08005adc  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005adc  08005adc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005adc  08005adc  00015adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000090  08005b74  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08005b74  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b96d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6d  00000000  00000000  0002ba2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0002d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000600  00000000  00000000  0002dd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000042b6  00000000  00000000  0002e378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098e4  00000000  00000000  0003262e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a328  00000000  00000000  0003bf12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009623a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000235c  00000000  00000000  00096290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005960 	.word	0x08005960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08005960 	.word	0x08005960

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000270:	b480      	push	{r7}
 8000272:	b08b      	sub	sp, #44	; 0x2c
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000298:	4b91      	ldr	r3, [pc, #580]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	f003 030c 	and.w	r3, r3, #12
 80002a0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	2b08      	cmp	r3, #8
 80002a6:	d011      	beq.n	80002cc <RCC_GetClocksFreq+0x5c>
 80002a8:	6a3b      	ldr	r3, [r7, #32]
 80002aa:	2b08      	cmp	r3, #8
 80002ac:	d837      	bhi.n	800031e <RCC_GetClocksFreq+0xae>
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d003      	beq.n	80002bc <RCC_GetClocksFreq+0x4c>
 80002b4:	6a3b      	ldr	r3, [r7, #32]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d004      	beq.n	80002c4 <RCC_GetClocksFreq+0x54>
 80002ba:	e030      	b.n	800031e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a89      	ldr	r2, [pc, #548]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c0:	601a      	str	r2, [r3, #0]
      break;
 80002c2:	e030      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a87      	ldr	r2, [pc, #540]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c8:	601a      	str	r2, [r3, #0]
      break;
 80002ca:	e02c      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002cc:	4b84      	ldr	r3, [pc, #528]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002d4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002d6:	4b82      	ldr	r3, [pc, #520]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002de:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	0c9b      	lsrs	r3, r3, #18
 80002e4:	3302      	adds	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4a7d      	ldr	r2, [pc, #500]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80002f2:	fb02 f303 	mul.w	r3, r2, r3
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
 80002f8:	e00d      	b.n	8000316 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80002fa:	4b79      	ldr	r3, [pc, #484]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000306:	4a77      	ldr	r2, [pc, #476]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fbb2 f2f3 	udiv	r2, r2, r3
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	fb02 f303 	mul.w	r3, r2, r3
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800031a:	601a      	str	r2, [r3, #0]
      break;
 800031c:	e003      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a70      	ldr	r2, [pc, #448]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000322:	601a      	str	r2, [r3, #0]
      break;
 8000324:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000326:	4b6e      	ldr	r3, [pc, #440]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800032e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000330:	6a3b      	ldr	r3, [r7, #32]
 8000332:	091b      	lsrs	r3, r3, #4
 8000334:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000336:	4a6d      	ldr	r2, [pc, #436]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000338:	6a3b      	ldr	r3, [r7, #32]
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	40da      	lsrs	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800034e:	4b64      	ldr	r3, [pc, #400]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000356:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000358:	6a3b      	ldr	r3, [r7, #32]
 800035a:	0a1b      	lsrs	r3, r3, #8
 800035c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800035e:	4a63      	ldr	r2, [pc, #396]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	40da      	lsrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000376:	4b5a      	ldr	r3, [pc, #360]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800037e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000380:	6a3b      	ldr	r3, [r7, #32]
 8000382:	0adb      	lsrs	r3, r3, #11
 8000384:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000386:	4a59      	ldr	r2, [pc, #356]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000388:	6a3b      	ldr	r3, [r7, #32]
 800038a:	4413      	add	r3, r2
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	40da      	lsrs	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800039e:	4b50      	ldr	r3, [pc, #320]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003a8:	6a3b      	ldr	r3, [r7, #32]
 80003aa:	091b      	lsrs	r3, r3, #4
 80003ac:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ae:	4a50      	ldr	r2, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d006      	beq.n	80003d2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	e003      	b.n	80003da <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003da:	4b41      	ldr	r3, [pc, #260]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003de:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	0a5b      	lsrs	r3, r3, #9
 80003e8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ea:	4a41      	ldr	r2, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	fbb2 f2f3 	udiv	r2, r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	e003      	b.n	8000416 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000416:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	f003 0310 	and.w	r3, r3, #16
 800041e:	2b10      	cmp	r3, #16
 8000420:	d003      	beq.n	800042a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000426:	619a      	str	r2, [r3, #24]
 8000428:	e003      	b.n	8000432 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	f003 0320 	and.w	r3, r3, #32
 800043a:	2b20      	cmp	r3, #32
 800043c:	d003      	beq.n	8000446 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a28      	ldr	r2, [pc, #160]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000442:	61da      	str	r2, [r3, #28]
 8000444:	e003      	b.n	800044e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800045a:	d10d      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000462:	429a      	cmp	r2, r3
 8000464:	d108      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	429a      	cmp	r2, r3
 800046c:	d104      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000470:	005a      	lsls	r2, r3, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	621a      	str	r2, [r3, #32]
 8000476:	e003      	b.n	8000480 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800048c:	d10d      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000494:	429a      	cmp	r2, r3
 8000496:	d108      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	429a      	cmp	r2, r3
 800049e:	d104      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a2:	005a      	lsls	r2, r3, #1
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	625a      	str	r2, [r3, #36]	; 0x24
 80004a8:	e003      	b.n	80004b2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d104      	bne.n	80004c8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
 80004c6:	e029      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d10f      	bne.n	80004f4 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	629a      	str	r2, [r3, #40]	; 0x28
 80004dc:	e01e      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	007a1200 	.word	0x007a1200
 80004e8:	003d0900 	.word	0x003d0900
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80004f4:	4b66      	ldr	r3, [pc, #408]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	f003 0303 	and.w	r3, r3, #3
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d104      	bne.n	800050a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
 8000508:	e008      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800050a:	4b61      	ldr	r3, [pc, #388]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	2b03      	cmp	r3, #3
 8000514:	d102      	bne.n	800051c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a5e      	ldr	r2, [pc, #376]	; (8000694 <RCC_GetClocksFreq+0x424>)
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800051c:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689a      	ldr	r2, [r3, #8]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000530:	e021      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000532:	4b57      	ldr	r3, [pc, #348]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800053a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800053e:	d104      	bne.n	800054a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
 8000548:	e015      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800054a:	4b51      	ldr	r3, [pc, #324]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000556:	d104      	bne.n	8000562 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000560:	e009      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000562:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800056a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800056e:	d102      	bne.n	8000576 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a48      	ldr	r2, [pc, #288]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000576:	4b46      	ldr	r3, [pc, #280]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d104      	bne.n	800058c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
 800058a:	e021      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000598:	d104      	bne.n	80005a4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	631a      	str	r2, [r3, #48]	; 0x30
 80005a2:	e015      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005b0:	d104      	bne.n	80005bc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ba:	e009      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005bc:	4b34      	ldr	r3, [pc, #208]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005c8:	d102      	bne.n	80005d0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a31      	ldr	r2, [pc, #196]	; (8000694 <RCC_GetClocksFreq+0x424>)
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005d0:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d104      	bne.n	80005e6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
 80005e4:	e021      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80005f2:	d104      	bne.n	80005fe <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
 80005fc:	e015      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800060a:	d104      	bne.n	8000616 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
 8000614:	e009      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800061e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000622:	d102      	bne.n	800062a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d104      	bne.n	8000640 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800063e:	e021      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800064c:	d104      	bne.n	8000658 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000656:	e015      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000664:	d104      	bne.n	8000670 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800066c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800066e:	e009      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000678:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800067c:	d102      	bne.n	8000684 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000682:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000684:	bf00      	nop
 8000686:	372c      	adds	r7, #44	; 0x2c
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	007a1200 	.word	0x007a1200

08000698 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006ee:	2201      	movs	r2, #1
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d103      	bne.n	8000706 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e005      	b.n	8000712 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d102      	bne.n	8000712 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3308      	adds	r3, #8
 8000710:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d006      	beq.n	8000726 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	430a      	orrs	r2, r1
 8000722:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000724:	e006      	b.n	8000734 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	43da      	mvns	r2, r3
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	400a      	ands	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	3724      	adds	r7, #36	; 0x24
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4013      	ands	r3, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000772:	b480      	push	{r7}
 8000774:	b087      	sub	sp, #28
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b29b      	uxth	r3, r3
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800079c:	2201      	movs	r2, #1
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d105      	bne.n	80007b8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	4013      	ands	r3, r2
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	e00d      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d105      	bne.n	80007ca <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	4013      	ands	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e004      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4013      	ands	r3, r2
 80007d2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	0c1b      	lsrs	r3, r3, #16
 80007d8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007da:	2201      	movs	r2, #1
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <USART_GetITStatus+0x8e>
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80007fa:	2301      	movs	r3, #1
 80007fc:	74fb      	strb	r3, [r7, #19]
 80007fe:	e001      	b.n	8000804 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000804:	7cfb      	ldrb	r3, [r7, #19]
}
 8000806:	4618      	mov	r0, r3
 8000808:	371c      	adds	r7, #28
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	2201      	movs	r2, #1
 8000826:	fa02 f103 	lsl.w	r1, r2, r3
 800082a:	4a06      	ldr	r2, [pc, #24]	; (8000844 <NVIC_EnableIRQ+0x30>)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	095b      	lsrs	r3, r3, #5
 8000832:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <uart_get_char+0x48>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d011      	beq.n	8000880 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <uart_get_char+0x4c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	b2d1      	uxtb	r1, r2
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <uart_get_char+0x4c>)
 8000868:	7011      	strb	r1, [r2, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <uart_get_char+0x50>)
 800086e:	5c9b      	ldrb	r3, [r3, r2]
 8000870:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <uart_get_char+0x48>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	3b01      	subs	r3, #1
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <uart_get_char+0x48>)
 800087e:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8000880:	79fb      	ldrb	r3, [r7, #7]
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	200001ae 	.word	0x200001ae
 8000894:	200001ad 	.word	0x200001ad
 8000898:	200000ac 	.word	0x200000ac

0800089c <uart_put_char>:

void uart_put_char(uint8_t c) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	4619      	mov	r1, r3
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <uart_put_char+0x30>)
 80008ae:	f7ff fef3 	bl	8000698 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80008b2:	bf00      	nop
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <uart_put_char+0x30>)
 80008b8:	f7ff ff42 	bl	8000740 <USART_GetFlagStatus>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f8      	beq.n	80008b4 <uart_put_char+0x18>
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40004400 	.word	0x40004400

080008d0 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e012      	b.n	800090a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b0a      	cmp	r3, #10
 80008ee:	d102      	bne.n	80008f6 <_write_r+0x26>
            uart_put_char('\r');
 80008f0:	200d      	movs	r0, #13
 80008f2:	f7ff ffd3 	bl	800089c <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffcc 	bl	800089c <uart_put_char>
    for (n = 0; n < len; n++) {
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	dbe8      	blt.n	80008e4 <_write_r+0x14>
    }

    return len;
 8000912:	683b      	ldr	r3, [r7, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000920:	4915      	ldr	r1, [pc, #84]	; (8000978 <USART2_IRQHandler+0x5c>)
 8000922:	4816      	ldr	r0, [pc, #88]	; (800097c <USART2_IRQHandler+0x60>)
 8000924:	f7ff ff25 	bl	8000772 <USART_GetITStatus>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d021      	beq.n	8000972 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <USART2_IRQHandler+0x60>)
 8000930:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000932:	b299      	uxth	r1, r3
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <USART2_IRQHandler+0x64>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	b2d0      	uxtb	r0, r2
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <USART2_IRQHandler+0x64>)
 8000940:	7010      	strb	r0, [r2, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	b2c9      	uxtb	r1, r1
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <USART2_IRQHandler+0x68>)
 8000948:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <USART2_IRQHandler+0x6c>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2bff      	cmp	r3, #255	; 0xff
 8000952:	d107      	bne.n	8000964 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <USART2_IRQHandler+0x70>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	3301      	adds	r3, #1
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <USART2_IRQHandler+0x70>)
 8000960:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000962:	e006      	b.n	8000972 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <USART2_IRQHandler+0x6c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <USART2_IRQHandler+0x6c>)
 8000970:	701a      	strb	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	00050105 	.word	0x00050105
 800097c:	40004400 	.word	0x40004400
 8000980:	200001ac 	.word	0x200001ac
 8000984:	200000ac 	.word	0x200000ac
 8000988:	200001ae 	.word	0x200001ae
 800098c:	200001ad 	.word	0x200001ad

08000990 <uart_clear>:

void uart_clear(){
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
    UART_START_IDX = 0;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <uart_clear+0x20>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
    UART_END_IDX = 0;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <uart_clear+0x24>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
    UART_COUNT = 0;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <uart_clear+0x28>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	200001ad 	.word	0x200001ad
 80009b4:	200001ac 	.word	0x200001ac
 80009b8:	200001ae 	.word	0x200001ae

080009bc <uart_get_count>:

uint8_t uart_get_count(){
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
    return UART_COUNT;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <uart_get_count+0x14>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	200001ae 	.word	0x200001ae

080009d4 <uart_init>:

void uart_init(uint32_t baud) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80009dc:	4b86      	ldr	r3, [pc, #536]	; (8000bf8 <uart_init+0x224>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 ff71 	bl	80048cc <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80009ea:	4b83      	ldr	r3, [pc, #524]	; (8000bf8 <uart_init+0x224>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 ff6a 	bl	80048cc <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80009f8:	4b80      	ldr	r3, [pc, #512]	; (8000bfc <uart_init+0x228>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	4a7f      	ldr	r2, [pc, #508]	; (8000bfc <uart_init+0x228>)
 80009fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a02:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000a04:	4b7d      	ldr	r3, [pc, #500]	; (8000bfc <uart_init+0x228>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	4a7c      	ldr	r2, [pc, #496]	; (8000bfc <uart_init+0x228>)
 8000a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000a10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a14:	6a1b      	ldr	r3, [r3, #32]
 8000a16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a1e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000a20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a24:	6a1b      	ldr	r3, [r3, #32]
 8000a26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a2e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000a30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000a3e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000a40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a44:	6a1b      	ldr	r3, [r3, #32]
 8000a46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a4a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a4e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000a50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a5e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000a60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a6a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a6e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000a70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a7c:	f023 030c 	bic.w	r3, r3, #12
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000a84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a8c:	8892      	ldrh	r2, [r2, #4]
 8000a8e:	b292      	uxth	r2, r2
 8000a90:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000a92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aa0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000aa2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aac:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000ab0:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000ab2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000abc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ac0:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000ac2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000acc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000ad0:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000ad2:	4b4b      	ldr	r3, [pc, #300]	; (8000c00 <uart_init+0x22c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a4a      	ldr	r2, [pc, #296]	; (8000c00 <uart_init+0x22c>)
 8000ad8:	f023 0301 	bic.w	r3, r3, #1
 8000adc:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000ade:	4b48      	ldr	r3, [pc, #288]	; (8000c00 <uart_init+0x22c>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <uart_init+0x22c>)
 8000ae4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ae8:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000aea:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <uart_init+0x22c>)
 8000aec:	4a44      	ldr	r2, [pc, #272]	; (8000c00 <uart_init+0x22c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000af2:	4b43      	ldr	r3, [pc, #268]	; (8000c00 <uart_init+0x22c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a42      	ldr	r2, [pc, #264]	; (8000c00 <uart_init+0x22c>)
 8000af8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000afc:	f023 030c 	bic.w	r3, r3, #12
 8000b00:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000b02:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <uart_init+0x22c>)
 8000b04:	4a3e      	ldr	r2, [pc, #248]	; (8000c00 <uart_init+0x22c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000b0a:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <uart_init+0x22c>)
 8000b0c:	4a3c      	ldr	r2, [pc, #240]	; (8000c00 <uart_init+0x22c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000b12:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <uart_init+0x22c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a3a      	ldr	r2, [pc, #232]	; (8000c00 <uart_init+0x22c>)
 8000b18:	f043 030c 	orr.w	r3, r3, #12
 8000b1c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000b1e:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <uart_init+0x22c>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	4a37      	ldr	r2, [pc, #220]	; (8000c00 <uart_init+0x22c>)
 8000b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b28:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000b2a:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <uart_init+0x22c>)
 8000b2c:	4a34      	ldr	r2, [pc, #208]	; (8000c00 <uart_init+0x22c>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b36:	2300      	movs	r3, #0
 8000b38:	647b      	str	r3, [r7, #68]	; 0x44
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb94 	bl	8000270 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b4a:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <uart_init+0x22c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d010      	beq.n	8000b7a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b5a:	005a      	lsls	r2, r3, #1
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	fb01 f202 	mul.w	r2, r1, r2
 8000b74:	1a9b      	subs	r3, r3, r2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b78:	e00d      	b.n	8000b96 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	fb01 f202 	mul.w	r2, r1, r2
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	085b      	lsrs	r3, r3, #1
 8000b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d302      	bcc.n	8000ba6 <uart_init+0x1d2>
        divider++;
 8000ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <uart_init+0x22c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00b      	beq.n	8000bca <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb4:	085b      	lsrs	r3, r3, #1
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000bbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bbe:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <uart_init+0x22c>)
 8000bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bce:	b292      	uxth	r2, r2
 8000bd0:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <uart_init+0x22c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <uart_init+0x22c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000bde:	2201      	movs	r2, #1
 8000be0:	4908      	ldr	r1, [pc, #32]	; (8000c04 <uart_init+0x230>)
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <uart_init+0x22c>)
 8000be4:	f7ff fd6a 	bl	80006bc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000be8:	2026      	movs	r0, #38	; 0x26
 8000bea:	f7ff fe13 	bl	8000814 <NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000002c 	.word	0x2000002c
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40004400 	.word	0x40004400
 8000c04:	00050105 	.word	0x00050105

08000c08 <startWindow>:
#include "ansi_S.h"
#include "joystick.h"
void startWindow(int x1, int y1, int x2, int y2) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	603b      	str	r3, [r7, #0]

//TOP
	gotoxy(x1, y1);
 8000c16:	68b9      	ldr	r1, [r7, #8]
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f002 fd7f 	bl	800371c <gotoxy>
	printf("%c", 201);
 8000c1e:	20c9      	movs	r0, #201	; 0xc9
 8000c20:	f003 fe3e 	bl	80048a0 <putchar>
	for (int i=x1+1;i<x2;i++){
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	e005      	b.n	8000c38 <startWindow+0x30>
		printf("%c",205);
 8000c2c:	20cd      	movs	r0, #205	; 0xcd
 8000c2e:	f003 fe37 	bl	80048a0 <putchar>
	for (int i=x1+1;i<x2;i++){
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	69fa      	ldr	r2, [r7, #28]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbf5      	blt.n	8000c2c <startWindow+0x24>
	}
	printf("%c", 187);
 8000c40:	20bb      	movs	r0, #187	; 0xbb
 8000c42:	f003 fe2d 	bl	80048a0 <putchar>

//SIDES
	for(int i = 1; i<y2-1; i++){
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	e016      	b.n	8000c7a <startWindow+0x72>
		gotoxy(x1, y1+i);
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4413      	add	r3, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f002 fd61 	bl	800371c <gotoxy>
		printf("%c", 186);
 8000c5a:	20ba      	movs	r0, #186	; 0xba
 8000c5c:	f003 fe20 	bl	80048a0 <putchar>
		gotoxy(x2, y1+i);
 8000c60:	68ba      	ldr	r2, [r7, #8]
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4413      	add	r3, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f002 fd57 	bl	800371c <gotoxy>
		printf("%c", 186);
 8000c6e:	20ba      	movs	r0, #186	; 0xba
 8000c70:	f003 fe16 	bl	80048a0 <putchar>
	for(int i = 1; i<y2-1; i++){
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	3301      	adds	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbe3      	blt.n	8000c4c <startWindow+0x44>
	}

//BUTTOM
	printf("%c",200);
 8000c84:	20c8      	movs	r0, #200	; 0xc8
 8000c86:	f003 fe0b 	bl	80048a0 <putchar>
	for (int i=x1+1;i<x2;i++){
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	e005      	b.n	8000c9e <startWindow+0x96>
		printf("%c",205);
 8000c92:	20cd      	movs	r0, #205	; 0xcd
 8000c94:	f003 fe04 	bl	80048a0 <putchar>
	for (int i=x1+1;i<x2;i++){
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dbf5      	blt.n	8000c92 <startWindow+0x8a>
	}
	printf("%c", 188);
 8000ca6:	20bc      	movs	r0, #188	; 0xbc
 8000ca8:	f003 fdfa 	bl	80048a0 <putchar>
}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <spaceship>:

int ani = 0;

void spaceship(int x1, int y1, int x2, int y2) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b090      	sub	sp, #64	; 0x40
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	603b      	str	r3, [r7, #0]

	fgcolor(1);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f002 fce4 	bl	8003690 <fgcolor>
	int ex = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
	gotoxy(x1+15, y1);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	330f      	adds	r3, #15
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fd22 	bl	800371c <gotoxy>
	for(int i = 0; i <9; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cdc:	e005      	b.n	8000cea <spaceship+0x36>
	printf("%c",219);
 8000cde:	20db      	movs	r0, #219	; 0xdb
 8000ce0:	f003 fdde 	bl	80048a0 <putchar>
	for(int i = 0; i <9; i++) {
 8000ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	ddf6      	ble.n	8000cde <spaceship+0x2a>
	}
	bgcolor(5);
 8000cf0:	2005      	movs	r0, #5
 8000cf2:	f002 fce9 	bl	80036c8 <bgcolor>
	fgcolor(0);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f002 fcca 	bl	8003690 <fgcolor>
	printf("  UP  ");
 8000cfc:	4880      	ldr	r0, [pc, #512]	; (8000f00 <spaceship+0x24c>)
 8000cfe:	f003 fdb7 	bl	8004870 <iprintf>
	bgcolor(0);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f002 fce0 	bl	80036c8 <bgcolor>
	fgcolor(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f002 fcc1 	bl	8003690 <fgcolor>
	for(int i = 0; i <20; i++) {
 8000d0e:	2300      	movs	r3, #0
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
 8000d12:	e005      	b.n	8000d20 <spaceship+0x6c>
	printf("%c",219);
 8000d14:	20db      	movs	r0, #219	; 0xdb
 8000d16:	f003 fdc3 	bl	80048a0 <putchar>
	for(int i = 0; i <20; i++) {
 8000d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8000d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d22:	2b13      	cmp	r3, #19
 8000d24:	ddf6      	ble.n	8000d14 <spaceship+0x60>
	}
	bgcolor(6);
 8000d26:	2006      	movs	r0, #6
 8000d28:	f002 fcce 	bl	80036c8 <bgcolor>
	fgcolor(0);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f002 fcaf 	bl	8003690 <fgcolor>
	printf("HATCH");
 8000d32:	4874      	ldr	r0, [pc, #464]	; (8000f04 <spaceship+0x250>)
 8000d34:	f003 fd9c 	bl	8004870 <iprintf>
	fgcolor(1);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f002 fca9 	bl	8003690 <fgcolor>
	for(int i = 0; i <29; i++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
 8000d42:	e005      	b.n	8000d50 <spaceship+0x9c>
	printf("%c",219);
 8000d44:	20db      	movs	r0, #219	; 0xdb
 8000d46:	f003 fdab 	bl	80048a0 <putchar>
	for(int i = 0; i <29; i++) {
 8000d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8000d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d52:	2b1c      	cmp	r3, #28
 8000d54:	ddf6      	ble.n	8000d44 <spaceship+0x90>
	}
	gotoxy(x1+15, y1+4);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f103 020f 	add.w	r2, r3, #15
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	3304      	adds	r3, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4610      	mov	r0, r2
 8000d64:	f002 fcda 	bl	800371c <gotoxy>
	for(int i = 0; i <9; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d6c:	e005      	b.n	8000d7a <spaceship+0xc6>
	printf("%c",219);
 8000d6e:	20db      	movs	r0, #219	; 0xdb
 8000d70:	f003 fd96 	bl	80048a0 <putchar>
	for(int i = 0; i <9; i++) {
 8000d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d76:	3301      	adds	r3, #1
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	ddf6      	ble.n	8000d6e <spaceship+0xba>
	}
	bgcolor(5);
 8000d80:	2005      	movs	r0, #5
 8000d82:	f002 fca1 	bl	80036c8 <bgcolor>
	fgcolor(0);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f002 fc82 	bl	8003690 <fgcolor>
	printf(" DOWN ");
 8000d8c:	485e      	ldr	r0, [pc, #376]	; (8000f08 <spaceship+0x254>)
 8000d8e:	f003 fd6f 	bl	8004870 <iprintf>
	bgcolor(0);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f002 fc98 	bl	80036c8 <bgcolor>
	fgcolor(1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f002 fc79 	bl	8003690 <fgcolor>
	for(int i = 0; i <20; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000da2:	e005      	b.n	8000db0 <spaceship+0xfc>
	printf("%c",219);
 8000da4:	20db      	movs	r0, #219	; 0xdb
 8000da6:	f003 fd7b 	bl	80048a0 <putchar>
	for(int i = 0; i <20; i++) {
 8000daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dac:	3301      	adds	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	2b13      	cmp	r3, #19
 8000db4:	ddf6      	ble.n	8000da4 <spaceship+0xf0>
	}
	bgcolor(6);
 8000db6:	2006      	movs	r0, #6
 8000db8:	f002 fc86 	bl	80036c8 <bgcolor>
	fgcolor(0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f002 fc67 	bl	8003690 <fgcolor>
	printf("HATCH");
 8000dc2:	4850      	ldr	r0, [pc, #320]	; (8000f04 <spaceship+0x250>)
 8000dc4:	f003 fd54 	bl	8004870 <iprintf>
	fgcolor(1);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f002 fc61 	bl	8003690 <fgcolor>
	for(int i = 0; i <29; i++) {
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd2:	e005      	b.n	8000de0 <spaceship+0x12c>
	printf("%c",219);
 8000dd4:	20db      	movs	r0, #219	; 0xdb
 8000dd6:	f003 fd63 	bl	80048a0 <putchar>
	for(int i = 0; i <29; i++) {
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	3301      	adds	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	2b1c      	cmp	r3, #28
 8000de4:	ddf6      	ble.n	8000dd4 <spaceship+0x120>
	}
	int a = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	e030      	b.n	8000e52 <spaceship+0x19e>
	for(int i = 0; i < 7; i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	e024      	b.n	8000e40 <spaceship+0x18c>
	gotoxy(x1+9+i+a, y1-3+j);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f103 0209 	add.w	r2, r3, #9
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	441a      	add	r2, r3
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	18d0      	adds	r0, r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1eda      	subs	r2, r3, #3
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f002 fc85 	bl	800371c <gotoxy>
	printf("%c",219);
 8000e12:	20db      	movs	r0, #219	; 0xdb
 8000e14:	f003 fd44 	bl	80048a0 <putchar>
	gotoxy(x1+9+i+a, y1+7-j);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f103 0209 	add.w	r2, r3, #9
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	441a      	add	r2, r3
 8000e22:	6a3b      	ldr	r3, [r7, #32]
 8000e24:	18d0      	adds	r0, r2, r3
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1dda      	adds	r2, r3, #7
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f002 fc74 	bl	800371c <gotoxy>
	printf("%c",219);
 8000e34:	20db      	movs	r0, #219	; 0xdb
 8000e36:	f003 fd33 	bl	80048a0 <putchar>
	for(int i = 0; i < 7; i++){
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	ddd7      	ble.n	8000df6 <spaceship+0x142>
	} a+=2;
 8000e46:	6a3b      	ldr	r3, [r7, #32]
 8000e48:	3302      	adds	r3, #2
 8000e4a:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	ddcb      	ble.n	8000df0 <spaceship+0x13c>
	}
	for(int i = 1; i < 4; i++) {
 8000e58:	2301      	movs	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e039      	b.n	8000ed2 <spaceship+0x21e>
	gotoxy(x1+15, y1+i);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f103 000f 	add.w	r0, r3, #15
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f002 fc56 	bl	800371c <gotoxy>
	printf("%c",219);
 8000e70:	20db      	movs	r0, #219	; 0xdb
 8000e72:	f003 fd15 	bl	80048a0 <putchar>
	for(int j = 0; j < 6; j++){
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	e024      	b.n	8000ec6 <spaceship+0x212>
	gotoxy(x2-8+j, y1+i);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f1a3 0208 	sub.w	r2, r3, #8
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	18d0      	adds	r0, r2, r3
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f002 fc45 	bl	800371c <gotoxy>
	printf("%c",219);
 8000e92:	20db      	movs	r0, #219	; 0xdb
 8000e94:	f003 fd04 	bl	80048a0 <putchar>
	ex++;
 8000e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (ex < 5){
 8000e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	dc0d      	bgt.n	8000ec0 <spaceship+0x20c>
	gotoxy(x2-3+j, y1+i+1);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	1eda      	subs	r2, r3, #3
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	18d0      	adds	r0, r2, r3
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f002 fc31 	bl	800371c <gotoxy>
	printf("%c",219);
 8000eba:	20db      	movs	r0, #219	; 0xdb
 8000ebc:	f003 fcf0 	bl	80048a0 <putchar>
	for(int j = 0; j < 6; j++){
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	ddd7      	ble.n	8000e7c <spaceship+0x1c8>
	for(int i = 1; i < 4; i++) {
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	ddc2      	ble.n	8000e5e <spaceship+0x1aa>
	}
	}
	}
	gotoxy(83,y1+2);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3302      	adds	r3, #2
 8000edc:	4619      	mov	r1, r3
 8000ede:	2053      	movs	r0, #83	; 0x53
 8000ee0:	f002 fc1c 	bl	800371c <gotoxy>
	fgcolor(0);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f002 fbd3 	bl	8003690 <fgcolor>
	bgcolor(7);
 8000eea:	2007      	movs	r0, #7
 8000eec:	f002 fbec 	bl	80036c8 <bgcolor>
	printf(" CANON   ");
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <spaceship+0x258>)
 8000ef2:	f003 fcbd 	bl	8004870 <iprintf>
}
 8000ef6:	bf00      	nop
 8000ef8:	3740      	adds	r7, #64	; 0x40
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	08005978 	.word	0x08005978
 8000f04:	08005980 	.word	0x08005980
 8000f08:	08005988 	.word	0x08005988
 8000f0c:	08005990 	.word	0x08005990

08000f10 <spaceshipDelete>:

void spaceshipDelete(int x1, int y1, int x2, int y2) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	603b      	str	r3, [r7, #0]

	int ex = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
	gotoxy(x1+15, y1);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	330f      	adds	r3, #15
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fbf7 	bl	800371c <gotoxy>
	for(int i = 0; i <69; i++) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f32:	e005      	b.n	8000f40 <spaceshipDelete+0x30>
	printf("%c",32);
 8000f34:	2020      	movs	r0, #32
 8000f36:	f003 fcb3 	bl	80048a0 <putchar>
	for(int i = 0; i <69; i++) {
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	2b44      	cmp	r3, #68	; 0x44
 8000f44:	ddf6      	ble.n	8000f34 <spaceshipDelete+0x24>
	}
	gotoxy(x1+15, y1+4);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f103 020f 	add.w	r2, r3, #15
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4610      	mov	r0, r2
 8000f54:	f002 fbe2 	bl	800371c <gotoxy>
	for(int i = 0; i <69; i++) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5c:	e005      	b.n	8000f6a <spaceshipDelete+0x5a>
	printf("%c",32);
 8000f5e:	2020      	movs	r0, #32
 8000f60:	f003 fc9e 	bl	80048a0 <putchar>
	for(int i = 0; i <69; i++) {
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	3301      	adds	r3, #1
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	2b44      	cmp	r3, #68	; 0x44
 8000f6e:	ddf6      	ble.n	8000f5e <spaceshipDelete+0x4e>
	}
	int a = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	e030      	b.n	8000fdc <spaceshipDelete+0xcc>
	for(int i = 0; i < 7; i++){
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	e024      	b.n	8000fca <spaceshipDelete+0xba>
	gotoxy(x1+9+i+a, y1-3+j);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f103 0209 	add.w	r2, r3, #9
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	441a      	add	r2, r3
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	18d0      	adds	r0, r2, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1eda      	subs	r2, r3, #3
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	4413      	add	r3, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f002 fbc0 	bl	800371c <gotoxy>
	printf("%c",32);
 8000f9c:	2020      	movs	r0, #32
 8000f9e:	f003 fc7f 	bl	80048a0 <putchar>
	gotoxy(x1+9+i+a, y1+7-j);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f103 0209 	add.w	r2, r3, #9
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	441a      	add	r2, r3
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	18d0      	adds	r0, r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1dda      	adds	r2, r3, #7
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f002 fbaf 	bl	800371c <gotoxy>
	printf("%c",32);
 8000fbe:	2020      	movs	r0, #32
 8000fc0:	f003 fc6e 	bl	80048a0 <putchar>
	for(int i = 0; i < 7; i++){
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	2b06      	cmp	r3, #6
 8000fce:	ddd7      	ble.n	8000f80 <spaceshipDelete+0x70>
	} a+=2;
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	ddcb      	ble.n	8000f7a <spaceshipDelete+0x6a>
	}
	for(int i = 1; i < 4; i++) {
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e039      	b.n	800105c <spaceshipDelete+0x14c>
	gotoxy(x1+15, y1+i);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f103 000f 	add.w	r0, r3, #15
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f002 fb91 	bl	800371c <gotoxy>
	printf("%c",32);
 8000ffa:	2020      	movs	r0, #32
 8000ffc:	f003 fc50 	bl	80048a0 <putchar>
	for(int j = 0; j < 6; j++){
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e024      	b.n	8001050 <spaceshipDelete+0x140>
	gotoxy(x2-8+j, y1+i);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f1a3 0208 	sub.w	r2, r3, #8
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	18d0      	adds	r0, r2, r3
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	4413      	add	r3, r2
 8001016:	4619      	mov	r1, r3
 8001018:	f002 fb80 	bl	800371c <gotoxy>
	printf("%c",32);
 800101c:	2020      	movs	r0, #32
 800101e:	f003 fc3f 	bl	80048a0 <putchar>
	ex++;
 8001022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001024:	3301      	adds	r3, #1
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (ex < 5){
 8001028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102a:	2b04      	cmp	r3, #4
 800102c:	dc0d      	bgt.n	800104a <spaceshipDelete+0x13a>
	gotoxy(x2-3+j, y1+i+1);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	1eda      	subs	r2, r3, #3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	18d0      	adds	r0, r2, r3
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	4413      	add	r3, r2
 800103c:	3301      	adds	r3, #1
 800103e:	4619      	mov	r1, r3
 8001040:	f002 fb6c 	bl	800371c <gotoxy>
	printf("%c",32);
 8001044:	2020      	movs	r0, #32
 8001046:	f003 fc2b 	bl	80048a0 <putchar>
	for(int j = 0; j < 6; j++){
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	2b05      	cmp	r3, #5
 8001054:	ddd7      	ble.n	8001006 <spaceshipDelete+0xf6>
	for(int i = 1; i < 4; i++) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b03      	cmp	r3, #3
 8001060:	ddc2      	ble.n	8000fe8 <spaceshipDelete+0xd8>
	}
	}
	}
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	; 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <fire>:

void fire(int x1, int y1, int x2, int y2) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
	int s = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (ani < 2) {
 800107e:	4ba1      	ldr	r3, [pc, #644]	; (8001304 <fire+0x298>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	f300 8101 	bgt.w	800128a <fire+0x21e>
	for (int i = 0; i <= 8; i++){
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
 800108c:	e044      	b.n	8001118 <fire+0xac>
	if (s == 0){
 800108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d114      	bne.n	80010be <fire+0x52>
	fgcolor(0);
 8001094:	2000      	movs	r0, #0
 8001096:	f002 fafb 	bl	8003690 <fgcolor>
	gotoxy(7+i,y1);
 800109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109c:	3307      	adds	r3, #7
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fb3b 	bl	800371c <gotoxy>
	printf("%c",219);
 80010a6:	20db      	movs	r0, #219	; 0xdb
 80010a8:	f003 fbfa 	bl	80048a0 <putchar>
	gotoxy(7+i,y2);
 80010ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ae:	3307      	adds	r3, #7
 80010b0:	6839      	ldr	r1, [r7, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fb32 	bl	800371c <gotoxy>
	printf("%c",219);
 80010b8:	20db      	movs	r0, #219	; 0xdb
 80010ba:	f003 fbf1 	bl	80048a0 <putchar>
	}
	if (s < 3){
 80010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	dc02      	bgt.n	80010ca <fire+0x5e>
	fgcolor(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f002 fae3 	bl	8003690 <fgcolor>
	}
	if (s < 6 && s >= 3){
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	dc05      	bgt.n	80010dc <fire+0x70>
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	dd02      	ble.n	80010dc <fire+0x70>
	fgcolor(9);
 80010d6:	2009      	movs	r0, #9
 80010d8:	f002 fada 	bl	8003690 <fgcolor>
	}
	if (s >= 6){
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	2b05      	cmp	r3, #5
 80010e0:	dd02      	ble.n	80010e8 <fire+0x7c>
	fgcolor(11);
 80010e2:	200b      	movs	r0, #11
 80010e4:	f002 fad4 	bl	8003690 <fgcolor>
	}
	gotoxy(8+i,y1);
 80010e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ea:	3308      	adds	r3, #8
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fb14 	bl	800371c <gotoxy>
	printf("%c",219);
 80010f4:	20db      	movs	r0, #219	; 0xdb
 80010f6:	f003 fbd3 	bl	80048a0 <putchar>
	gotoxy(8+i,y2);
 80010fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fc:	3308      	adds	r3, #8
 80010fe:	6839      	ldr	r1, [r7, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fb0b 	bl	800371c <gotoxy>
	printf("%c",219);
 8001106:	20db      	movs	r0, #219	; 0xdb
 8001108:	f003 fbca 	bl	80048a0 <putchar>
	s++;
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	3301      	adds	r3, #1
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 8; i++){
 8001112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001114:	3301      	adds	r3, #1
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	2b08      	cmp	r3, #8
 800111c:	ddb7      	ble.n	800108e <fire+0x22>
	} s = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 11; i++){
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
 8001126:	e055      	b.n	80011d4 <fire+0x168>
	if (s == 0){
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	2b00      	cmp	r3, #0
 800112c:	d118      	bne.n	8001160 <fire+0xf4>
	fgcolor(0);
 800112e:	2000      	movs	r0, #0
 8001130:	f002 faae 	bl	8003690 <fgcolor>
	gotoxy(4+i,y1+1);
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	1d1a      	adds	r2, r3, #4
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	3301      	adds	r3, #1
 800113c:	4619      	mov	r1, r3
 800113e:	4610      	mov	r0, r2
 8001140:	f002 faec 	bl	800371c <gotoxy>
	printf("%c",219);
 8001144:	20db      	movs	r0, #219	; 0xdb
 8001146:	f003 fbab 	bl	80048a0 <putchar>
	gotoxy(4+i,y2-1);
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	1d1a      	adds	r2, r3, #4
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3b01      	subs	r3, #1
 8001152:	4619      	mov	r1, r3
 8001154:	4610      	mov	r0, r2
 8001156:	f002 fae1 	bl	800371c <gotoxy>
	printf("%c",219);
 800115a:	20db      	movs	r0, #219	; 0xdb
 800115c:	f003 fba0 	bl	80048a0 <putchar>
	}
	if (s < 4){
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	2b03      	cmp	r3, #3
 8001164:	dc02      	bgt.n	800116c <fire+0x100>
	fgcolor(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f002 fa92 	bl	8003690 <fgcolor>
	}
	if (s < 7 && s >= 4){
 800116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116e:	2b06      	cmp	r3, #6
 8001170:	dc05      	bgt.n	800117e <fire+0x112>
 8001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001174:	2b03      	cmp	r3, #3
 8001176:	dd02      	ble.n	800117e <fire+0x112>
	fgcolor(9);
 8001178:	2009      	movs	r0, #9
 800117a:	f002 fa89 	bl	8003690 <fgcolor>
	}
	if (s < 10 && s >= 7){
 800117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001180:	2b09      	cmp	r3, #9
 8001182:	dc05      	bgt.n	8001190 <fire+0x124>
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	2b06      	cmp	r3, #6
 8001188:	dd02      	ble.n	8001190 <fire+0x124>
	fgcolor(11);
 800118a:	200b      	movs	r0, #11
 800118c:	f002 fa80 	bl	8003690 <fgcolor>
	}
	if (s >= 10){
 8001190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001192:	2b09      	cmp	r3, #9
 8001194:	dd02      	ble.n	800119c <fire+0x130>
	fgcolor(15);
 8001196:	200f      	movs	r0, #15
 8001198:	f002 fa7a 	bl	8003690 <fgcolor>
	}
	gotoxy(5+i,y1+1);
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	1d5a      	adds	r2, r3, #5
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4619      	mov	r1, r3
 80011a6:	4610      	mov	r0, r2
 80011a8:	f002 fab8 	bl	800371c <gotoxy>
	printf("%c",219);
 80011ac:	20db      	movs	r0, #219	; 0xdb
 80011ae:	f003 fb77 	bl	80048a0 <putchar>
	gotoxy(5+i,y2-1);
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	1d5a      	adds	r2, r3, #5
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	4610      	mov	r0, r2
 80011be:	f002 faad 	bl	800371c <gotoxy>
	printf("%c",219);
 80011c2:	20db      	movs	r0, #219	; 0xdb
 80011c4:	f003 fb6c 	bl	80048a0 <putchar>
	s++;
 80011c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ca:	3301      	adds	r3, #1
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 11; i++){
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	3301      	adds	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	2b0b      	cmp	r3, #11
 80011d8:	dda6      	ble.n	8001128 <fire+0xbc>
	} s = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 13; i++){
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
 80011e2:	e048      	b.n	8001276 <fire+0x20a>
	if (s == 0){
 80011e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10d      	bne.n	8001206 <fire+0x19a>
	fgcolor(0);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f002 fa50 	bl	8003690 <fgcolor>
	gotoxy(2+i,y1+2);
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	1c9a      	adds	r2, r3, #2
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	3302      	adds	r3, #2
 80011f8:	4619      	mov	r1, r3
 80011fa:	4610      	mov	r0, r2
 80011fc:	f002 fa8e 	bl	800371c <gotoxy>
	printf("%c",219);
 8001200:	20db      	movs	r0, #219	; 0xdb
 8001202:	f003 fb4d 	bl	80048a0 <putchar>
	}
	if(s < 3) {
 8001206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001208:	2b02      	cmp	r3, #2
 800120a:	dc02      	bgt.n	8001212 <fire+0x1a6>
	fgcolor(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f002 fa3f 	bl	8003690 <fgcolor>
	}
	if (s < 7 && s >= 3){
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	2b06      	cmp	r3, #6
 8001216:	dc05      	bgt.n	8001224 <fire+0x1b8>
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	2b02      	cmp	r3, #2
 800121c:	dd02      	ble.n	8001224 <fire+0x1b8>
	fgcolor(9);
 800121e:	2009      	movs	r0, #9
 8001220:	f002 fa36 	bl	8003690 <fgcolor>
	}
	if (s < 10 && s >=7){
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	2b09      	cmp	r3, #9
 8001228:	dc05      	bgt.n	8001236 <fire+0x1ca>
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	2b06      	cmp	r3, #6
 800122e:	dd02      	ble.n	8001236 <fire+0x1ca>
	fgcolor(11);
 8001230:	200b      	movs	r0, #11
 8001232:	f002 fa2d 	bl	8003690 <fgcolor>
	}
	if (s < 13 && s >= 10){
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	2b0c      	cmp	r3, #12
 800123a:	dc05      	bgt.n	8001248 <fire+0x1dc>
 800123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123e:	2b09      	cmp	r3, #9
 8001240:	dd02      	ble.n	8001248 <fire+0x1dc>
	fgcolor(15);
 8001242:	200f      	movs	r0, #15
 8001244:	f002 fa24 	bl	8003690 <fgcolor>
	}
	if (s >= 13) {
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	2b0c      	cmp	r3, #12
 800124c:	dd02      	ble.n	8001254 <fire+0x1e8>
	fgcolor(12);
 800124e:	200c      	movs	r0, #12
 8001250:	f002 fa1e 	bl	8003690 <fgcolor>
	}
	gotoxy(3+i,y1+2);
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	1cda      	adds	r2, r3, #3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	3302      	adds	r3, #2
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f002 fa5c 	bl	800371c <gotoxy>
	printf("%c",219);
 8001264:	20db      	movs	r0, #219	; 0xdb
 8001266:	f003 fb1b 	bl	80048a0 <putchar>
	s++;
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	3301      	adds	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 13; i++){
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	3301      	adds	r3, #1
 8001274:	623b      	str	r3, [r7, #32]
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	2b0d      	cmp	r3, #13
 800127a:	ddb3      	ble.n	80011e4 <fire+0x178>
	} s = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
	ani++;
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <fire+0x298>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <fire+0x298>)
 8001288:	6013      	str	r3, [r2, #0]
	}

	if (ani >= 2) {
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <fire+0x298>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	f340 80c5 	ble.w	800141e <fire+0x3b2>
	for (int i = 0; i <= 9; i++){
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	e02c      	b.n	80012f4 <fire+0x288>
	if (s < 3){
 800129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129c:	2b02      	cmp	r3, #2
 800129e:	dc02      	bgt.n	80012a6 <fire+0x23a>
	fgcolor(9);
 80012a0:	2009      	movs	r0, #9
 80012a2:	f002 f9f5 	bl	8003690 <fgcolor>
	}
	if (s < 6 && s >= 3){
 80012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	dc05      	bgt.n	80012b8 <fire+0x24c>
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	dd02      	ble.n	80012b8 <fire+0x24c>
	fgcolor(11);
 80012b2:	200b      	movs	r0, #11
 80012b4:	f002 f9ec 	bl	8003690 <fgcolor>
	}
	if (s >= 6){
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	dd02      	ble.n	80012c4 <fire+0x258>
	fgcolor(15);
 80012be:	200f      	movs	r0, #15
 80012c0:	f002 f9e6 	bl	8003690 <fgcolor>
	}
	gotoxy(7+i,y1);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	3307      	adds	r3, #7
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 fa26 	bl	800371c <gotoxy>
	printf("%c",219);
 80012d0:	20db      	movs	r0, #219	; 0xdb
 80012d2:	f003 fae5 	bl	80048a0 <putchar>
	gotoxy(7+i,y2);
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3307      	adds	r3, #7
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 fa1d 	bl	800371c <gotoxy>
	printf("%c",219);
 80012e2:	20db      	movs	r0, #219	; 0xdb
 80012e4:	f003 fadc 	bl	80048a0 <putchar>
	s++;
 80012e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ea:	3301      	adds	r3, #1
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 9; i++){
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	2b09      	cmp	r3, #9
 80012f8:	ddcf      	ble.n	800129a <fire+0x22e>
	} s = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 12; i++){
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	e03b      	b.n	800137c <fire+0x310>
 8001304:	200001b0 	.word	0x200001b0
	if (s < 4){
 8001308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130a:	2b03      	cmp	r3, #3
 800130c:	dc02      	bgt.n	8001314 <fire+0x2a8>
	fgcolor(9);
 800130e:	2009      	movs	r0, #9
 8001310:	f002 f9be 	bl	8003690 <fgcolor>
	}
	if (s < 7 && s >= 4){
 8001314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001316:	2b06      	cmp	r3, #6
 8001318:	dc05      	bgt.n	8001326 <fire+0x2ba>
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	2b03      	cmp	r3, #3
 800131e:	dd02      	ble.n	8001326 <fire+0x2ba>
	fgcolor(11);
 8001320:	200b      	movs	r0, #11
 8001322:	f002 f9b5 	bl	8003690 <fgcolor>
	}
	if (s < 10 && s >= 7){
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001328:	2b09      	cmp	r3, #9
 800132a:	dc05      	bgt.n	8001338 <fire+0x2cc>
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	2b06      	cmp	r3, #6
 8001330:	dd02      	ble.n	8001338 <fire+0x2cc>
	fgcolor(15);
 8001332:	200f      	movs	r0, #15
 8001334:	f002 f9ac 	bl	8003690 <fgcolor>
	}
	if (s >= 10){
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	2b09      	cmp	r3, #9
 800133c:	dd02      	ble.n	8001344 <fire+0x2d8>
	fgcolor(12);
 800133e:	200c      	movs	r0, #12
 8001340:	f002 f9a6 	bl	8003690 <fgcolor>
	}
	gotoxy(4+i,y1+1);
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	1d1a      	adds	r2, r3, #4
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3301      	adds	r3, #1
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f002 f9e4 	bl	800371c <gotoxy>
	printf("%c",219);
 8001354:	20db      	movs	r0, #219	; 0xdb
 8001356:	f003 faa3 	bl	80048a0 <putchar>
	gotoxy(4+i,y2-1);
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	1d1a      	adds	r2, r3, #4
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	4619      	mov	r1, r3
 8001364:	4610      	mov	r0, r2
 8001366:	f002 f9d9 	bl	800371c <gotoxy>
	printf("%c",219);
 800136a:	20db      	movs	r0, #219	; 0xdb
 800136c:	f003 fa98 	bl	80048a0 <putchar>
	s++;
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	3301      	adds	r3, #1
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 12; i++){
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	3301      	adds	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b0c      	cmp	r3, #12
 8001380:	ddc2      	ble.n	8001308 <fire+0x29c>
	} s = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 14; i++){
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e037      	b.n	80013fc <fire+0x390>
	if(s < 3) {
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	2b02      	cmp	r3, #2
 8001390:	dc02      	bgt.n	8001398 <fire+0x32c>
	fgcolor(9);
 8001392:	2009      	movs	r0, #9
 8001394:	f002 f97c 	bl	8003690 <fgcolor>
	}
	if (s < 7 && s >= 3){
 8001398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139a:	2b06      	cmp	r3, #6
 800139c:	dc05      	bgt.n	80013aa <fire+0x33e>
 800139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	dd02      	ble.n	80013aa <fire+0x33e>
	fgcolor(11);
 80013a4:	200b      	movs	r0, #11
 80013a6:	f002 f973 	bl	8003690 <fgcolor>
	}
	if (s < 10 && s >=7){
 80013aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	dc05      	bgt.n	80013bc <fire+0x350>
 80013b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	dd02      	ble.n	80013bc <fire+0x350>
	fgcolor(15);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f002 f96a 	bl	8003690 <fgcolor>
	}
	if (s < 13 && s >= 10){
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	2b0c      	cmp	r3, #12
 80013c0:	dc05      	bgt.n	80013ce <fire+0x362>
 80013c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c4:	2b09      	cmp	r3, #9
 80013c6:	dd02      	ble.n	80013ce <fire+0x362>
	fgcolor(12);
 80013c8:	200c      	movs	r0, #12
 80013ca:	f002 f961 	bl	8003690 <fgcolor>
	}
	if (s >= 13) {
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	dd02      	ble.n	80013da <fire+0x36e>
	fgcolor(4);
 80013d4:	2004      	movs	r0, #4
 80013d6:	f002 f95b 	bl	8003690 <fgcolor>
	}
	gotoxy(2+i,y1+2);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	1c9a      	adds	r2, r3, #2
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	3302      	adds	r3, #2
 80013e2:	4619      	mov	r1, r3
 80013e4:	4610      	mov	r0, r2
 80013e6:	f002 f999 	bl	800371c <gotoxy>
	printf("%c",219);
 80013ea:	20db      	movs	r0, #219	; 0xdb
 80013ec:	f003 fa58 	bl	80048a0 <putchar>
	s++;
 80013f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f2:	3301      	adds	r3, #1
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 14; i++){
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b0e      	cmp	r3, #14
 8001400:	ddc4      	ble.n	800138c <fire+0x320>
	} s = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
	ani++;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <fire+0x3bc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <fire+0x3bc>)
 800140e:	6013      	str	r3, [r2, #0]
	if (ani == 3) {
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <fire+0x3bc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d102      	bne.n	800141e <fire+0x3b2>
		ani = 0;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <fire+0x3bc>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
	}
	}
}
 800141e:	bf00      	nop
 8001420:	3730      	adds	r7, #48	; 0x30
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200001b0 	.word	0x200001b0

0800142c <fireDelete>:

void fireDelete(int x1, int y1, int x2, int y2) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	603b      	str	r3, [r7, #0]
	gotoxy(7,y1);
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	2007      	movs	r0, #7
 800143e:	f002 f96d 	bl	800371c <gotoxy>
	for (int i = 0; i <= 9; i++){
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	e005      	b.n	8001454 <fireDelete+0x28>
	printf("%c",32);
 8001448:	2020      	movs	r0, #32
 800144a:	f003 fa29 	bl	80048a0 <putchar>
	for (int i = 0; i <= 9; i++){
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	3301      	adds	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2b09      	cmp	r3, #9
 8001458:	ddf6      	ble.n	8001448 <fireDelete+0x1c>
	}
	gotoxy(7,y2);
 800145a:	6839      	ldr	r1, [r7, #0]
 800145c:	2007      	movs	r0, #7
 800145e:	f002 f95d 	bl	800371c <gotoxy>
	for (int i = 0; i <= 9; i++){
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	e005      	b.n	8001474 <fireDelete+0x48>
	printf("%c",32);
 8001468:	2020      	movs	r0, #32
 800146a:	f003 fa19 	bl	80048a0 <putchar>
	for (int i = 0; i <= 9; i++){
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	3301      	adds	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	2b09      	cmp	r3, #9
 8001478:	ddf6      	ble.n	8001468 <fireDelete+0x3c>
	}
	gotoxy(4,y1+1);
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3301      	adds	r3, #1
 800147e:	4619      	mov	r1, r3
 8001480:	2004      	movs	r0, #4
 8001482:	f002 f94b 	bl	800371c <gotoxy>
	for (int i = 0; i <= 12; i++){
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e005      	b.n	8001498 <fireDelete+0x6c>
	printf("%c",32);
 800148c:	2020      	movs	r0, #32
 800148e:	f003 fa07 	bl	80048a0 <putchar>
	for (int i = 0; i <= 12; i++){
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3301      	adds	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	2b0c      	cmp	r3, #12
 800149c:	ddf6      	ble.n	800148c <fireDelete+0x60>
	}
	gotoxy(4,y2-1);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	4619      	mov	r1, r3
 80014a4:	2004      	movs	r0, #4
 80014a6:	f002 f939 	bl	800371c <gotoxy>
	for (int i = 0; i <= 12; i++){
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	e005      	b.n	80014bc <fireDelete+0x90>
	printf("%c",32);
 80014b0:	2020      	movs	r0, #32
 80014b2:	f003 f9f5 	bl	80048a0 <putchar>
	for (int i = 0; i <= 12; i++){
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	ddf6      	ble.n	80014b0 <fireDelete+0x84>
	}
	gotoxy(2,y1+2);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3302      	adds	r3, #2
 80014c6:	4619      	mov	r1, r3
 80014c8:	2002      	movs	r0, #2
 80014ca:	f002 f927 	bl	800371c <gotoxy>
	for (int i = 0; i <= 14; i++){
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e005      	b.n	80014e0 <fireDelete+0xb4>
	printf("%c",32);
 80014d4:	2020      	movs	r0, #32
 80014d6:	f003 f9e3 	bl	80048a0 <putchar>
	for (int i = 0; i <= 14; i++){
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b0e      	cmp	r3, #14
 80014e4:	ddf6      	ble.n	80014d4 <fireDelete+0xa8>
	}
	}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <playerInShipR>:


void playerInShipR(int p,int x, int y){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d140      	bne.n	8001584 <playerInShipR+0x94>
	fgcolor(15);
 8001502:	200f      	movs	r0, #15
 8001504:	f002 f8c4 	bl	8003690 <fgcolor>
	gotoxy(x+2,y);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3302      	adds	r3, #2
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	f002 f904 	bl	800371c <gotoxy>
	printf("%c",254	);
 8001514:	20fe      	movs	r0, #254	; 0xfe
 8001516:	f003 f9c3 	bl	80048a0 <putchar>

	gotoxy(x,y+1);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3301      	adds	r3, #1
 800151e:	4619      	mov	r1, r3
 8001520:	68b8      	ldr	r0, [r7, #8]
 8001522:	f002 f8fb 	bl	800371c <gotoxy>
	printf("%c",223);
 8001526:	20df      	movs	r0, #223	; 0xdf
 8001528:	f003 f9ba 	bl	80048a0 <putchar>
	printf("%c",219);
 800152c:	20db      	movs	r0, #219	; 0xdb
 800152e:	f003 f9b7 	bl	80048a0 <putchar>
	printf("%c",219);
 8001532:	20db      	movs	r0, #219	; 0xdb
 8001534:	f003 f9b4 	bl	80048a0 <putchar>

	fgcolor(9);
 8001538:	2009      	movs	r0, #9
 800153a:	f002 f8a9 	bl	8003690 <fgcolor>
	gotoxy(x+1,y+2);
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3302      	adds	r3, #2
 8001546:	4619      	mov	r1, r3
 8001548:	4610      	mov	r0, r2
 800154a:	f002 f8e7 	bl	800371c <gotoxy>
	printf("%c",192);
 800154e:	20c0      	movs	r0, #192	; 0xc0
 8001550:	f003 f9a6 	bl	80048a0 <putchar>
	printf("%c",192);
 8001554:	20c0      	movs	r0, #192	; 0xc0
 8001556:	f003 f9a3 	bl	80048a0 <putchar>

	fat(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f001 fb36 	bl	8002bcc <fat>
	fgcolor(9);
 8001560:	2009      	movs	r0, #9
 8001562:	f002 f895 	bl	8003690 <fgcolor>
	gotoxy(x+3,y);
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3303      	adds	r3, #3
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	f002 f8d5 	bl	800371c <gotoxy>
	printf("%c",60);
 8001572:	203c      	movs	r0, #60	; 0x3c
 8001574:	f003 f994 	bl	80048a0 <putchar>
	fgcolor(2);
 8001578:	2002      	movs	r0, #2
 800157a:	f002 f889 	bl	8003690 <fgcolor>
	fat(0);
 800157e:	2000      	movs	r0, #0
 8001580:	f001 fb24 	bl	8002bcc <fat>
	}

	if (p == 2) {
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d140      	bne.n	800160c <playerInShipR+0x11c>
	fgcolor(11);
 800158a:	200b      	movs	r0, #11
 800158c:	f002 f880 	bl	8003690 <fgcolor>
	gotoxy(x+2,y);
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	3302      	adds	r3, #2
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 f8c0 	bl	800371c <gotoxy>
	printf("%c",254	);
 800159c:	20fe      	movs	r0, #254	; 0xfe
 800159e:	f003 f97f 	bl	80048a0 <putchar>

	gotoxy(x,y+1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3301      	adds	r3, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f002 f8b7 	bl	800371c <gotoxy>
	printf("%c",223);
 80015ae:	20df      	movs	r0, #223	; 0xdf
 80015b0:	f003 f976 	bl	80048a0 <putchar>
	printf("%c",219);
 80015b4:	20db      	movs	r0, #219	; 0xdb
 80015b6:	f003 f973 	bl	80048a0 <putchar>
	printf("%c",219);
 80015ba:	20db      	movs	r0, #219	; 0xdb
 80015bc:	f003 f970 	bl	80048a0 <putchar>

	fgcolor(9);
 80015c0:	2009      	movs	r0, #9
 80015c2:	f002 f865 	bl	8003690 <fgcolor>
	gotoxy(x+1,y+2);
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3302      	adds	r3, #2
 80015ce:	4619      	mov	r1, r3
 80015d0:	4610      	mov	r0, r2
 80015d2:	f002 f8a3 	bl	800371c <gotoxy>
	printf("%c",192);
 80015d6:	20c0      	movs	r0, #192	; 0xc0
 80015d8:	f003 f962 	bl	80048a0 <putchar>
	printf("%c",192);
 80015dc:	20c0      	movs	r0, #192	; 0xc0
 80015de:	f003 f95f 	bl	80048a0 <putchar>

	fat(1);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f001 faf2 	bl	8002bcc <fat>
	fgcolor(9);
 80015e8:	2009      	movs	r0, #9
 80015ea:	f002 f851 	bl	8003690 <fgcolor>
	gotoxy(x+3,y);
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3303      	adds	r3, #3
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 f891 	bl	800371c <gotoxy>
	printf("%c",60);
 80015fa:	203c      	movs	r0, #60	; 0x3c
 80015fc:	f003 f950 	bl	80048a0 <putchar>
	fgcolor(2);
 8001600:	2002      	movs	r0, #2
 8001602:	f002 f845 	bl	8003690 <fgcolor>
	fat(0);
 8001606:	2000      	movs	r0, #0
 8001608:	f001 fae0 	bl	8002bcc <fat>
	}
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <playerInShipL>:

void playerInShipL(int p,int x, int y){
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d140      	bne.n	80016a8 <playerInShipL+0x94>
	fgcolor(15);
 8001626:	200f      	movs	r0, #15
 8001628:	f002 f832 	bl	8003690 <fgcolor>
	gotoxy(x+1,y);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	3301      	adds	r3, #1
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4618      	mov	r0, r3
 8001634:	f002 f872 	bl	800371c <gotoxy>
	printf("%c",254	);
 8001638:	20fe      	movs	r0, #254	; 0xfe
 800163a:	f003 f931 	bl	80048a0 <putchar>

	gotoxy(x+1,y+1);
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3301      	adds	r3, #1
 8001646:	4619      	mov	r1, r3
 8001648:	4610      	mov	r0, r2
 800164a:	f002 f867 	bl	800371c <gotoxy>
	printf("%c",219);
 800164e:	20db      	movs	r0, #219	; 0xdb
 8001650:	f003 f926 	bl	80048a0 <putchar>
	printf("%c",219);
 8001654:	20db      	movs	r0, #219	; 0xdb
 8001656:	f003 f923 	bl	80048a0 <putchar>
	printf("%c",223);
 800165a:	20df      	movs	r0, #223	; 0xdf
 800165c:	f003 f920 	bl	80048a0 <putchar>

	fgcolor(9);
 8001660:	2009      	movs	r0, #9
 8001662:	f002 f815 	bl	8003690 <fgcolor>
	gotoxy(x+1,y+2);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3302      	adds	r3, #2
 800166e:	4619      	mov	r1, r3
 8001670:	4610      	mov	r0, r2
 8001672:	f002 f853 	bl	800371c <gotoxy>
	printf("%c",217);
 8001676:	20d9      	movs	r0, #217	; 0xd9
 8001678:	f003 f912 	bl	80048a0 <putchar>
	printf("%c",217);
 800167c:	20d9      	movs	r0, #217	; 0xd9
 800167e:	f003 f90f 	bl	80048a0 <putchar>

	fat(1);
 8001682:	2001      	movs	r0, #1
 8001684:	f001 faa2 	bl	8002bcc <fat>
	fgcolor(9);
 8001688:	2009      	movs	r0, #9
 800168a:	f002 f801 	bl	8003690 <fgcolor>
	gotoxy(x,y);
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f002 f843 	bl	800371c <gotoxy>
	printf("%c",62);
 8001696:	203e      	movs	r0, #62	; 0x3e
 8001698:	f003 f902 	bl	80048a0 <putchar>
	fgcolor(2);
 800169c:	2002      	movs	r0, #2
 800169e:	f001 fff7 	bl	8003690 <fgcolor>
	fat(0);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f001 fa92 	bl	8002bcc <fat>
	}

	if (p == 2) {
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d140      	bne.n	8001730 <playerInShipL+0x11c>
	fgcolor(11);
 80016ae:	200b      	movs	r0, #11
 80016b0:	f001 ffee 	bl	8003690 <fgcolor>
	gotoxy(x+1,y);
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	3301      	adds	r3, #1
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 f82e 	bl	800371c <gotoxy>
	printf("%c",254	);
 80016c0:	20fe      	movs	r0, #254	; 0xfe
 80016c2:	f003 f8ed 	bl	80048a0 <putchar>

	gotoxy(x+1,y+1);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4619      	mov	r1, r3
 80016d0:	4610      	mov	r0, r2
 80016d2:	f002 f823 	bl	800371c <gotoxy>
	printf("%c",219);
 80016d6:	20db      	movs	r0, #219	; 0xdb
 80016d8:	f003 f8e2 	bl	80048a0 <putchar>
	printf("%c",219);
 80016dc:	20db      	movs	r0, #219	; 0xdb
 80016de:	f003 f8df 	bl	80048a0 <putchar>
	printf("%c",223);
 80016e2:	20df      	movs	r0, #223	; 0xdf
 80016e4:	f003 f8dc 	bl	80048a0 <putchar>

	fgcolor(9);
 80016e8:	2009      	movs	r0, #9
 80016ea:	f001 ffd1 	bl	8003690 <fgcolor>
	gotoxy(x+1,y+2);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3302      	adds	r3, #2
 80016f6:	4619      	mov	r1, r3
 80016f8:	4610      	mov	r0, r2
 80016fa:	f002 f80f 	bl	800371c <gotoxy>
	printf("%c",217);
 80016fe:	20d9      	movs	r0, #217	; 0xd9
 8001700:	f003 f8ce 	bl	80048a0 <putchar>
	printf("%c",217);
 8001704:	20d9      	movs	r0, #217	; 0xd9
 8001706:	f003 f8cb 	bl	80048a0 <putchar>

	fat(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f001 fa5e 	bl	8002bcc <fat>
	fgcolor(9);
 8001710:	2009      	movs	r0, #9
 8001712:	f001 ffbd 	bl	8003690 <fgcolor>
	gotoxy(x,y);
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f001 ffff 	bl	800371c <gotoxy>
	printf("%c",62);
 800171e:	203e      	movs	r0, #62	; 0x3e
 8001720:	f003 f8be 	bl	80048a0 <putchar>
	fgcolor(2);
 8001724:	2002      	movs	r0, #2
 8001726:	f001 ffb3 	bl	8003690 <fgcolor>
	fat(0);
 800172a:	2000      	movs	r0, #0
 800172c:	f001 fa4e 	bl	8002bcc <fat>
	}
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <playerInSpaceR>:

void playerInSpaceR(int p, int x, int y){   //duck
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d14c      	bne.n	80017e4 <playerInSpaceR+0xac>
	fgcolor(15);
 800174a:	200f      	movs	r0, #15
 800174c:	f001 ffa0 	bl	8003690 <fgcolor>
	bgcolor(7);
 8001750:	2007      	movs	r0, #7
 8001752:	f001 ffb9 	bl	80036c8 <bgcolor>
	gotoxy(x+2,y);
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3302      	adds	r3, #2
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	f001 ffdd 	bl	800371c <gotoxy>
	printf("%c",254	);
 8001762:	20fe      	movs	r0, #254	; 0xfe
 8001764:	f003 f89c 	bl	80048a0 <putchar>
	bgcolor(0);
 8001768:	2000      	movs	r0, #0
 800176a:	f001 ffad 	bl	80036c8 <bgcolor>

	gotoxy(x,y+1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3301      	adds	r3, #1
 8001772:	4619      	mov	r1, r3
 8001774:	68b8      	ldr	r0, [r7, #8]
 8001776:	f001 ffd1 	bl	800371c <gotoxy>
	printf("%c",223);
 800177a:	20df      	movs	r0, #223	; 0xdf
 800177c:	f003 f890 	bl	80048a0 <putchar>
	printf("%c",219);
 8001780:	20db      	movs	r0, #219	; 0xdb
 8001782:	f003 f88d 	bl	80048a0 <putchar>
	printf("%c",219);
 8001786:	20db      	movs	r0, #219	; 0xdb
 8001788:	f003 f88a 	bl	80048a0 <putchar>

	fgcolor(9);
 800178c:	2009      	movs	r0, #9
 800178e:	f001 ff7f 	bl	8003690 <fgcolor>
	gotoxy(x+1,y+2);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3302      	adds	r3, #2
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f001 ffbd 	bl	800371c <gotoxy>
	printf("%c",192);
 80017a2:	20c0      	movs	r0, #192	; 0xc0
 80017a4:	f003 f87c 	bl	80048a0 <putchar>
	printf("%c",192);
 80017a8:	20c0      	movs	r0, #192	; 0xc0
 80017aa:	f003 f879 	bl	80048a0 <putchar>

	fat(1);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f001 fa0c 	bl	8002bcc <fat>
	fgcolor(9);
 80017b4:	2009      	movs	r0, #9
 80017b6:	f001 ff6b 	bl	8003690 <fgcolor>
	bgcolor(7);
 80017ba:	2007      	movs	r0, #7
 80017bc:	f001 ff84 	bl	80036c8 <bgcolor>
	gotoxy(x+3,y);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3303      	adds	r3, #3
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 ffa8 	bl	800371c <gotoxy>
	printf("%c",60);
 80017cc:	203c      	movs	r0, #60	; 0x3c
 80017ce:	f003 f867 	bl	80048a0 <putchar>
	bgcolor(0);
 80017d2:	2000      	movs	r0, #0
 80017d4:	f001 ff78 	bl	80036c8 <bgcolor>
	fgcolor(2);
 80017d8:	2002      	movs	r0, #2
 80017da:	f001 ff59 	bl	8003690 <fgcolor>
	fat(0);
 80017de:	2000      	movs	r0, #0
 80017e0:	f001 f9f4 	bl	8002bcc <fat>
	}

	if (p == 2) {
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d14c      	bne.n	8001884 <playerInSpaceR+0x14c>
	fgcolor(11);
 80017ea:	200b      	movs	r0, #11
 80017ec:	f001 ff50 	bl	8003690 <fgcolor>
	bgcolor(7);
 80017f0:	2007      	movs	r0, #7
 80017f2:	f001 ff69 	bl	80036c8 <bgcolor>
	gotoxy(x+2,y);
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3302      	adds	r3, #2
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 ff8d 	bl	800371c <gotoxy>
	printf("%c",254	);
 8001802:	20fe      	movs	r0, #254	; 0xfe
 8001804:	f003 f84c 	bl	80048a0 <putchar>
	bgcolor(0);
 8001808:	2000      	movs	r0, #0
 800180a:	f001 ff5d 	bl	80036c8 <bgcolor>

	gotoxy(x,y+1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3301      	adds	r3, #1
 8001812:	4619      	mov	r1, r3
 8001814:	68b8      	ldr	r0, [r7, #8]
 8001816:	f001 ff81 	bl	800371c <gotoxy>
	printf("%c",223);
 800181a:	20df      	movs	r0, #223	; 0xdf
 800181c:	f003 f840 	bl	80048a0 <putchar>
	printf("%c",219);
 8001820:	20db      	movs	r0, #219	; 0xdb
 8001822:	f003 f83d 	bl	80048a0 <putchar>
	printf("%c",219);
 8001826:	20db      	movs	r0, #219	; 0xdb
 8001828:	f003 f83a 	bl	80048a0 <putchar>

	fgcolor(9);
 800182c:	2009      	movs	r0, #9
 800182e:	f001 ff2f 	bl	8003690 <fgcolor>
	gotoxy(x+1,y+2);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3302      	adds	r3, #2
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f001 ff6d 	bl	800371c <gotoxy>
	printf("%c",192);
 8001842:	20c0      	movs	r0, #192	; 0xc0
 8001844:	f003 f82c 	bl	80048a0 <putchar>
	printf("%c",192);
 8001848:	20c0      	movs	r0, #192	; 0xc0
 800184a:	f003 f829 	bl	80048a0 <putchar>

	fat(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f001 f9bc 	bl	8002bcc <fat>
	fgcolor(9);
 8001854:	2009      	movs	r0, #9
 8001856:	f001 ff1b 	bl	8003690 <fgcolor>
	bgcolor(7);
 800185a:	2007      	movs	r0, #7
 800185c:	f001 ff34 	bl	80036c8 <bgcolor>
	gotoxy(x+3,y);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	3303      	adds	r3, #3
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4618      	mov	r0, r3
 8001868:	f001 ff58 	bl	800371c <gotoxy>
	printf("%c",60);
 800186c:	203c      	movs	r0, #60	; 0x3c
 800186e:	f003 f817 	bl	80048a0 <putchar>
	bgcolor(0);
 8001872:	2000      	movs	r0, #0
 8001874:	f001 ff28 	bl	80036c8 <bgcolor>
	fgcolor(2);
 8001878:	2002      	movs	r0, #2
 800187a:	f001 ff09 	bl	8003690 <fgcolor>
	fat(0);
 800187e:	2000      	movs	r0, #0
 8001880:	f001 f9a4 	bl	8002bcc <fat>
	}
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <playerInSpaceL>:

void playerInSpaceL(int p, int x, int y){
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d14c      	bne.n	8001938 <playerInSpaceL+0xac>
	fgcolor(15);
 800189e:	200f      	movs	r0, #15
 80018a0:	f001 fef6 	bl	8003690 <fgcolor>
	bgcolor(7);
 80018a4:	2007      	movs	r0, #7
 80018a6:	f001 ff0f 	bl	80036c8 <bgcolor>
	gotoxy(x+1,y);
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3301      	adds	r3, #1
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 ff33 	bl	800371c <gotoxy>
	printf("%c",254	);
 80018b6:	20fe      	movs	r0, #254	; 0xfe
 80018b8:	f002 fff2 	bl	80048a0 <putchar>
	bgcolor(0);
 80018bc:	2000      	movs	r0, #0
 80018be:	f001 ff03 	bl	80036c8 <bgcolor>

	gotoxy(x+1,y+1);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f001 ff25 	bl	800371c <gotoxy>
	printf("%c",219);
 80018d2:	20db      	movs	r0, #219	; 0xdb
 80018d4:	f002 ffe4 	bl	80048a0 <putchar>
	printf("%c",219);
 80018d8:	20db      	movs	r0, #219	; 0xdb
 80018da:	f002 ffe1 	bl	80048a0 <putchar>
	printf("%c",223);
 80018de:	20df      	movs	r0, #223	; 0xdf
 80018e0:	f002 ffde 	bl	80048a0 <putchar>

	fgcolor(9);
 80018e4:	2009      	movs	r0, #9
 80018e6:	f001 fed3 	bl	8003690 <fgcolor>
	gotoxy(x+1,y+2);
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3302      	adds	r3, #2
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f001 ff11 	bl	800371c <gotoxy>
	printf("%c",217);
 80018fa:	20d9      	movs	r0, #217	; 0xd9
 80018fc:	f002 ffd0 	bl	80048a0 <putchar>
	printf("%c",217);
 8001900:	20d9      	movs	r0, #217	; 0xd9
 8001902:	f002 ffcd 	bl	80048a0 <putchar>

	fat(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f001 f960 	bl	8002bcc <fat>
	fgcolor(9);
 800190c:	2009      	movs	r0, #9
 800190e:	f001 febf 	bl	8003690 <fgcolor>
	bgcolor(7);
 8001912:	2007      	movs	r0, #7
 8001914:	f001 fed8 	bl	80036c8 <bgcolor>
	gotoxy(x,y);
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f001 fefe 	bl	800371c <gotoxy>
	printf("%c",62);
 8001920:	203e      	movs	r0, #62	; 0x3e
 8001922:	f002 ffbd 	bl	80048a0 <putchar>
	bgcolor(0);
 8001926:	2000      	movs	r0, #0
 8001928:	f001 fece 	bl	80036c8 <bgcolor>
	fgcolor(2);
 800192c:	2002      	movs	r0, #2
 800192e:	f001 feaf 	bl	8003690 <fgcolor>
	fat(0);
 8001932:	2000      	movs	r0, #0
 8001934:	f001 f94a 	bl	8002bcc <fat>
	}

	if (p == 2) {
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d14c      	bne.n	80019d8 <playerInSpaceL+0x14c>
	fgcolor(11);
 800193e:	200b      	movs	r0, #11
 8001940:	f001 fea6 	bl	8003690 <fgcolor>
	bgcolor(7);
 8001944:	2007      	movs	r0, #7
 8001946:	f001 febf 	bl	80036c8 <bgcolor>
	gotoxy(x+1,y);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3301      	adds	r3, #1
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fee3 	bl	800371c <gotoxy>
	printf("%c",254	);
 8001956:	20fe      	movs	r0, #254	; 0xfe
 8001958:	f002 ffa2 	bl	80048a0 <putchar>
	bgcolor(0);
 800195c:	2000      	movs	r0, #0
 800195e:	f001 feb3 	bl	80036c8 <bgcolor>

	gotoxy(x+1,y+1);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3301      	adds	r3, #1
 800196a:	4619      	mov	r1, r3
 800196c:	4610      	mov	r0, r2
 800196e:	f001 fed5 	bl	800371c <gotoxy>
	printf("%c",219);
 8001972:	20db      	movs	r0, #219	; 0xdb
 8001974:	f002 ff94 	bl	80048a0 <putchar>
	printf("%c",219);
 8001978:	20db      	movs	r0, #219	; 0xdb
 800197a:	f002 ff91 	bl	80048a0 <putchar>
	printf("%c",223);
 800197e:	20df      	movs	r0, #223	; 0xdf
 8001980:	f002 ff8e 	bl	80048a0 <putchar>

	fgcolor(9);
 8001984:	2009      	movs	r0, #9
 8001986:	f001 fe83 	bl	8003690 <fgcolor>
	gotoxy(x+1,y+2);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3302      	adds	r3, #2
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f001 fec1 	bl	800371c <gotoxy>
	printf("%c",217);
 800199a:	20d9      	movs	r0, #217	; 0xd9
 800199c:	f002 ff80 	bl	80048a0 <putchar>
	printf("%c",217);
 80019a0:	20d9      	movs	r0, #217	; 0xd9
 80019a2:	f002 ff7d 	bl	80048a0 <putchar>

	fat(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f001 f910 	bl	8002bcc <fat>
	fgcolor(9);
 80019ac:	2009      	movs	r0, #9
 80019ae:	f001 fe6f 	bl	8003690 <fgcolor>
	bgcolor(7);
 80019b2:	2007      	movs	r0, #7
 80019b4:	f001 fe88 	bl	80036c8 <bgcolor>
	gotoxy(x,y);
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	68b8      	ldr	r0, [r7, #8]
 80019bc:	f001 feae 	bl	800371c <gotoxy>
	printf("%c",62);
 80019c0:	203e      	movs	r0, #62	; 0x3e
 80019c2:	f002 ff6d 	bl	80048a0 <putchar>
	bgcolor(0);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f001 fe7e 	bl	80036c8 <bgcolor>
	fgcolor(2);
 80019cc:	2002      	movs	r0, #2
 80019ce:	f001 fe5f 	bl	8003690 <fgcolor>
	fat(0);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f001 f8fa 	bl	8002bcc <fat>
	}
}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <playerInSpaceUSDL>:

void playerInSpaceUSDL(int p, int x, int y){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d14e      	bne.n	8001a90 <playerInSpaceUSDL+0xb0>
	fgcolor(15);
 80019f2:	200f      	movs	r0, #15
 80019f4:	f001 fe4c 	bl	8003690 <fgcolor>
	bgcolor(7);
 80019f8:	2007      	movs	r0, #7
 80019fa:	f001 fe65 	bl	80036c8 <bgcolor>
	gotoxy(x+1,y+2);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3302      	adds	r3, #2
 8001a06:	4619      	mov	r1, r3
 8001a08:	4610      	mov	r0, r2
 8001a0a:	f001 fe87 	bl	800371c <gotoxy>
	printf("%c",254	);
 8001a0e:	20fe      	movs	r0, #254	; 0xfe
 8001a10:	f002 ff46 	bl	80048a0 <putchar>
	bgcolor(0);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f001 fe57 	bl	80036c8 <bgcolor>

	gotoxy(x+1,y+1);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3301      	adds	r3, #1
 8001a22:	4619      	mov	r1, r3
 8001a24:	4610      	mov	r0, r2
 8001a26:	f001 fe79 	bl	800371c <gotoxy>
	printf("%c",219);
 8001a2a:	20db      	movs	r0, #219	; 0xdb
 8001a2c:	f002 ff38 	bl	80048a0 <putchar>
	printf("%c",219);
 8001a30:	20db      	movs	r0, #219	; 0xdb
 8001a32:	f002 ff35 	bl	80048a0 <putchar>
	printf("%c",220);
 8001a36:	20dc      	movs	r0, #220	; 0xdc
 8001a38:	f002 ff32 	bl	80048a0 <putchar>

	fgcolor(9);
 8001a3c:	2009      	movs	r0, #9
 8001a3e:	f001 fe27 	bl	8003690 <fgcolor>
	gotoxy(x+1,y);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3301      	adds	r3, #1
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 fe67 	bl	800371c <gotoxy>
	printf("%c",191);
 8001a4e:	20bf      	movs	r0, #191	; 0xbf
 8001a50:	f002 ff26 	bl	80048a0 <putchar>
	printf("%c",191);
 8001a54:	20bf      	movs	r0, #191	; 0xbf
 8001a56:	f002 ff23 	bl	80048a0 <putchar>

	fat(1);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f001 f8b6 	bl	8002bcc <fat>
	fgcolor(9);
 8001a60:	2009      	movs	r0, #9
 8001a62:	f001 fe15 	bl	8003690 <fgcolor>
	bgcolor(7);
 8001a66:	2007      	movs	r0, #7
 8001a68:	f001 fe2e 	bl	80036c8 <bgcolor>
	gotoxy(x,y+2);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3302      	adds	r3, #2
 8001a70:	4619      	mov	r1, r3
 8001a72:	68b8      	ldr	r0, [r7, #8]
 8001a74:	f001 fe52 	bl	800371c <gotoxy>
	printf("%c",62);
 8001a78:	203e      	movs	r0, #62	; 0x3e
 8001a7a:	f002 ff11 	bl	80048a0 <putchar>
	bgcolor(0);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f001 fe22 	bl	80036c8 <bgcolor>
	fgcolor(2);
 8001a84:	2002      	movs	r0, #2
 8001a86:	f001 fe03 	bl	8003690 <fgcolor>
	fat(0);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f001 f89e 	bl	8002bcc <fat>
	}

	if (p == 2) {
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d14e      	bne.n	8001b34 <playerInSpaceUSDL+0x154>
	fgcolor(11);
 8001a96:	200b      	movs	r0, #11
 8001a98:	f001 fdfa 	bl	8003690 <fgcolor>
	bgcolor(7);
 8001a9c:	2007      	movs	r0, #7
 8001a9e:	f001 fe13 	bl	80036c8 <bgcolor>
	gotoxy(x+1,y+2);
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f001 fe35 	bl	800371c <gotoxy>
	printf("%c",254	);
 8001ab2:	20fe      	movs	r0, #254	; 0xfe
 8001ab4:	f002 fef4 	bl	80048a0 <putchar>
	bgcolor(0);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f001 fe05 	bl	80036c8 <bgcolor>

	gotoxy(x+1,y+1);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f001 fe27 	bl	800371c <gotoxy>
	printf("%c",219);
 8001ace:	20db      	movs	r0, #219	; 0xdb
 8001ad0:	f002 fee6 	bl	80048a0 <putchar>
	printf("%c",219);
 8001ad4:	20db      	movs	r0, #219	; 0xdb
 8001ad6:	f002 fee3 	bl	80048a0 <putchar>
	printf("%c",220);
 8001ada:	20dc      	movs	r0, #220	; 0xdc
 8001adc:	f002 fee0 	bl	80048a0 <putchar>

	fgcolor(9);
 8001ae0:	2009      	movs	r0, #9
 8001ae2:	f001 fdd5 	bl	8003690 <fgcolor>
	gotoxy(x+1,y);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 fe15 	bl	800371c <gotoxy>
	printf("%c",191);
 8001af2:	20bf      	movs	r0, #191	; 0xbf
 8001af4:	f002 fed4 	bl	80048a0 <putchar>
	printf("%c",191);
 8001af8:	20bf      	movs	r0, #191	; 0xbf
 8001afa:	f002 fed1 	bl	80048a0 <putchar>

	fat(1);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f001 f864 	bl	8002bcc <fat>
	fgcolor(9);
 8001b04:	2009      	movs	r0, #9
 8001b06:	f001 fdc3 	bl	8003690 <fgcolor>
	bgcolor(7);
 8001b0a:	2007      	movs	r0, #7
 8001b0c:	f001 fddc 	bl	80036c8 <bgcolor>
	gotoxy(x,y+2);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3302      	adds	r3, #2
 8001b14:	4619      	mov	r1, r3
 8001b16:	68b8      	ldr	r0, [r7, #8]
 8001b18:	f001 fe00 	bl	800371c <gotoxy>
	printf("%c",62);
 8001b1c:	203e      	movs	r0, #62	; 0x3e
 8001b1e:	f002 febf 	bl	80048a0 <putchar>
	bgcolor(0);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f001 fdd0 	bl	80036c8 <bgcolor>
	fgcolor(2);
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f001 fdb1 	bl	8003690 <fgcolor>
	fat(0);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f001 f84c 	bl	8002bcc <fat>
	}
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <playerInSpaceUSDR>:

void playerInSpaceUSDR(int p, int x, int y){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d14e      	bne.n	8001bec <playerInSpaceUSDR+0xb0>
	fgcolor(15);
 8001b4e:	200f      	movs	r0, #15
 8001b50:	f001 fd9e 	bl	8003690 <fgcolor>
	bgcolor(7);
 8001b54:	2007      	movs	r0, #7
 8001b56:	f001 fdb7 	bl	80036c8 <bgcolor>
	gotoxy(x+2,y+2);
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c9a      	adds	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3302      	adds	r3, #2
 8001b62:	4619      	mov	r1, r3
 8001b64:	4610      	mov	r0, r2
 8001b66:	f001 fdd9 	bl	800371c <gotoxy>
	printf("%c",254	);
 8001b6a:	20fe      	movs	r0, #254	; 0xfe
 8001b6c:	f002 fe98 	bl	80048a0 <putchar>
	bgcolor(0);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f001 fda9 	bl	80036c8 <bgcolor>

	gotoxy(x,y+1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	68b8      	ldr	r0, [r7, #8]
 8001b7e:	f001 fdcd 	bl	800371c <gotoxy>
	printf("%c",220);
 8001b82:	20dc      	movs	r0, #220	; 0xdc
 8001b84:	f002 fe8c 	bl	80048a0 <putchar>
	printf("%c",219);
 8001b88:	20db      	movs	r0, #219	; 0xdb
 8001b8a:	f002 fe89 	bl	80048a0 <putchar>
	printf("%c",219);
 8001b8e:	20db      	movs	r0, #219	; 0xdb
 8001b90:	f002 fe86 	bl	80048a0 <putchar>

	fgcolor(9);
 8001b94:	2009      	movs	r0, #9
 8001b96:	f001 fd7b 	bl	8003690 <fgcolor>
	gotoxy(x+1,y);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fdbb 	bl	800371c <gotoxy>
	printf("%c",218);
 8001ba6:	20da      	movs	r0, #218	; 0xda
 8001ba8:	f002 fe7a 	bl	80048a0 <putchar>
	printf("%c",218);
 8001bac:	20da      	movs	r0, #218	; 0xda
 8001bae:	f002 fe77 	bl	80048a0 <putchar>

	fat(1);
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f001 f80a 	bl	8002bcc <fat>
	fgcolor(9);
 8001bb8:	2009      	movs	r0, #9
 8001bba:	f001 fd69 	bl	8003690 <fgcolor>
	bgcolor(7);
 8001bbe:	2007      	movs	r0, #7
 8001bc0:	f001 fd82 	bl	80036c8 <bgcolor>
	gotoxy(x+3,y+2);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1cda      	adds	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3302      	adds	r3, #2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f001 fda4 	bl	800371c <gotoxy>
	printf("%c",60);
 8001bd4:	203c      	movs	r0, #60	; 0x3c
 8001bd6:	f002 fe63 	bl	80048a0 <putchar>
	bgcolor(0);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f001 fd74 	bl	80036c8 <bgcolor>
	fgcolor(2);
 8001be0:	2002      	movs	r0, #2
 8001be2:	f001 fd55 	bl	8003690 <fgcolor>
	fat(0);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 fff0 	bl	8002bcc <fat>
	}

	if (p == 2) {
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d14e      	bne.n	8001c90 <playerInSpaceUSDR+0x154>
	fgcolor(11);
 8001bf2:	200b      	movs	r0, #11
 8001bf4:	f001 fd4c 	bl	8003690 <fgcolor>
	bgcolor(7);
 8001bf8:	2007      	movs	r0, #7
 8001bfa:	f001 fd65 	bl	80036c8 <bgcolor>
	gotoxy(x+2,y+2);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1c9a      	adds	r2, r3, #2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3302      	adds	r3, #2
 8001c06:	4619      	mov	r1, r3
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f001 fd87 	bl	800371c <gotoxy>
	printf("%c",254	);
 8001c0e:	20fe      	movs	r0, #254	; 0xfe
 8001c10:	f002 fe46 	bl	80048a0 <putchar>
	bgcolor(0);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f001 fd57 	bl	80036c8 <bgcolor>

	gotoxy(x,y+1);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	4619      	mov	r1, r3
 8001c20:	68b8      	ldr	r0, [r7, #8]
 8001c22:	f001 fd7b 	bl	800371c <gotoxy>
	printf("%c",220);
 8001c26:	20dc      	movs	r0, #220	; 0xdc
 8001c28:	f002 fe3a 	bl	80048a0 <putchar>
	printf("%c",219);
 8001c2c:	20db      	movs	r0, #219	; 0xdb
 8001c2e:	f002 fe37 	bl	80048a0 <putchar>
	printf("%c",219);
 8001c32:	20db      	movs	r0, #219	; 0xdb
 8001c34:	f002 fe34 	bl	80048a0 <putchar>

	fgcolor(9);
 8001c38:	2009      	movs	r0, #9
 8001c3a:	f001 fd29 	bl	8003690 <fgcolor>
	gotoxy(x+1,y);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3301      	adds	r3, #1
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 fd69 	bl	800371c <gotoxy>
	printf("%c",218);
 8001c4a:	20da      	movs	r0, #218	; 0xda
 8001c4c:	f002 fe28 	bl	80048a0 <putchar>
	printf("%c",218);
 8001c50:	20da      	movs	r0, #218	; 0xda
 8001c52:	f002 fe25 	bl	80048a0 <putchar>

	fat(1);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f000 ffb8 	bl	8002bcc <fat>
	fgcolor(9);
 8001c5c:	2009      	movs	r0, #9
 8001c5e:	f001 fd17 	bl	8003690 <fgcolor>
	bgcolor(7);
 8001c62:	2007      	movs	r0, #7
 8001c64:	f001 fd30 	bl	80036c8 <bgcolor>
	gotoxy(x+3,y+2);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1cda      	adds	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3302      	adds	r3, #2
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f001 fd52 	bl	800371c <gotoxy>
	printf("%c",60);
 8001c78:	203c      	movs	r0, #60	; 0x3c
 8001c7a:	f002 fe11 	bl	80048a0 <putchar>
	bgcolor(0);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f001 fd22 	bl	80036c8 <bgcolor>
	fgcolor(2);
 8001c84:	2002      	movs	r0, #2
 8001c86:	f001 fd03 	bl	8003690 <fgcolor>
	fat(0);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f000 ff9e 	bl	8002bcc <fat>
	}
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <goDuckUP1>:

void goDuckUP1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->ud >-21){
 8001ca6:	4b7d      	ldr	r3, [pc, #500]	; (8001e9c <goDuckUP1+0x204>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d034      	beq.n	8001d1a <goDuckUP1+0x82>
 8001cb0:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <goDuckUP1+0x208>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d12f      	bne.n	8001d1a <goDuckUP1+0x82>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc0:	f113 0f14 	cmn.w	r3, #20
 8001cc4:	db29      	blt.n	8001d1a <goDuckUP1+0x82>
	playerInSpaceR(play,x+*rl,y+*ud);
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	18d1      	adds	r1, r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff fd2d 	bl	8001738 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	18d1      	adds	r1, r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 ff85 	bl	8002c00 <playerDelete>
	(*ud)--;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1e5a      	subs	r2, r3, #1
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	18d1      	adds	r1, r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	461a      	mov	r2, r3
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff fd0f 	bl	8001738 <playerInSpaceR>
	}
	if (joy.left && !CJoy.left && D->rl >0){
 8001d1a:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <goDuckUP1+0x204>)
 8001d1c:	789b      	ldrb	r3, [r3, #2]
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d033      	beq.n	8001d8c <goDuckUP1+0xf4>
 8001d24:	4b5e      	ldr	r3, [pc, #376]	; (8001ea0 <goDuckUP1+0x208>)
 8001d26:	789b      	ldrb	r3, [r3, #2]
 8001d28:	b25b      	sxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d12e      	bne.n	8001d8c <goDuckUP1+0xf4>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	dd29      	ble.n	8001d8c <goDuckUP1+0xf4>
	playerInSpaceL(play,x+*rl,y+*ud);
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	18d1      	adds	r1, r2, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7ff fd9e 	bl	800188c <playerInSpaceL>
	playerDelete(play,x+*rl,y+*ud);
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	18d1      	adds	r1, r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 ff4c 	bl	8002c00 <playerDelete>
	(*rl)-=5;
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	1f5a      	subs	r2, r3, #5
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	601a      	str	r2, [r3, #0]
	playerInSpaceL(play,x+1+*rl,y+*ud);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	18d1      	adds	r1, r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff fd80 	bl	800188c <playerInSpaceL>
	}
	if (joy.right && !CJoy.right && D->rl <65){
 8001d8c:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <goDuckUP1+0x204>)
 8001d8e:	78db      	ldrb	r3, [r3, #3]
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d033      	beq.n	8001dfe <goDuckUP1+0x166>
 8001d96:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <goDuckUP1+0x208>)
 8001d98:	78db      	ldrb	r3, [r3, #3]
 8001d9a:	b25b      	sxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d12e      	bne.n	8001dfe <goDuckUP1+0x166>
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001da6:	2b40      	cmp	r3, #64	; 0x40
 8001da8:	dc29      	bgt.n	8001dfe <goDuckUP1+0x166>
	playerInSpaceR(play,x+*rl,y+*ud);
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	18d1      	adds	r1, r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff fcbb 	bl	8001738 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	18d1      	adds	r1, r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 ff13 	bl	8002c00 <playerDelete>
	(*rl)+=5;
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1d5a      	adds	r2, r3, #5
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	18d1      	adds	r1, r2, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	461a      	mov	r2, r3
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7ff fc9d 	bl	8001738 <playerInSpaceR>
	}
	if (joy.center && !CJoy.center && D->rl == 30){
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <goDuckUP1+0x204>)
 8001e00:	791b      	ldrb	r3, [r3, #4]
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d033      	beq.n	8001e70 <goDuckUP1+0x1d8>
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <goDuckUP1+0x208>)
 8001e0a:	791b      	ldrb	r3, [r3, #4]
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d12e      	bne.n	8001e70 <goDuckUP1+0x1d8>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e18:	2b1e      	cmp	r3, #30
 8001e1a:	d129      	bne.n	8001e70 <goDuckUP1+0x1d8>
	playerInSpaceR(play,x+*rl,y+*ud);
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	18d1      	adds	r1, r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff fc82 	bl	8001738 <playerInSpaceR>
	playerDelete(1,x+*rl,y+*ud);
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	18d1      	adds	r1, r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	2001      	movs	r0, #1
 8001e48:	f000 feda 	bl	8002c00 <playerDelete>
	(*ud)+=4;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	1d1a      	adds	r2, r3, #4
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	18d1      	adds	r1, r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff fb40 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b25a      	sxtb	r2, r3
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3b16      	subs	r3, #22
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	b25a      	sxtb	r2, r3
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	705a      	strb	r2, [r3, #1]
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200001e0 	.word	0x200001e0
 8001ea0:	200001e8 	.word	0x200001e8

08001ea4 <goDuckUPMove1>:

void goDuckUPMove1(int play,int x, int y, int *ud, int *rl,duck_t * D) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
	if (joy.up){
 8001eb2:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <goDuckUPMove1+0xdc>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b25b      	sxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d029      	beq.n	8001f10 <goDuckUPMove1+0x6c>
		playerInSpaceR(play,x+*rl,y+*ud);
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	18d1      	adds	r1, r2, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff fc32 	bl	8001738 <playerInSpaceR>
		playerDelete(play,x+*rl,y+*ud);
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	18d1      	adds	r1, r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fe8a 	bl	8002c00 <playerDelete>
		(*ud)--;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	1e5a      	subs	r2, r3, #1
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	601a      	str	r2, [r3, #0]
		playerInSpaceR(play,x+1+*rl,y+*ud);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	18d1      	adds	r1, r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f7ff fc14 	bl	8001738 <playerInSpaceR>
		}
	if (joy.down){
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <goDuckUPMove1+0xdc>)
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d029      	beq.n	8001f6e <goDuckUPMove1+0xca>
		playerInSpaceR(play,x+*rl,y+*ud);
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	18d1      	adds	r1, r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff fc03 	bl	8001738 <playerInSpaceR>
		playerDelete(play,x+*rl,y+*ud);
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	18d1      	adds	r1, r2, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	461a      	mov	r2, r3
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 fe5b 	bl	8002c00 <playerDelete>
		(*ud)++;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	601a      	str	r2, [r3, #0]
		playerInSpaceR(play,x+1+*rl,y+*ud);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	18d1      	adds	r1, r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	461a      	mov	r2, r3
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f7ff fbe5 	bl	8001738 <playerInSpaceR>
		}
	D->ud = *ud;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b25a      	sxtb	r2, r3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200001e0 	.word	0x200001e0

08001f84 <goDuckUP2>:


void goDuckUP2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]

	if (key.up && D->ud >-21){
 8001f92:	4b73      	ldr	r3, [pc, #460]	; (8002160 <goDuckUP2+0x1dc>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d02f      	beq.n	8001ffc <goDuckUP2+0x78>
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa2:	f113 0f14 	cmn.w	r3, #20
 8001fa6:	db29      	blt.n	8001ffc <goDuckUP2+0x78>
	playerInSpaceR(play,x+*rl,y+*ud);
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	18d1      	adds	r1, r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7ff fbbc 	bl	8001738 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	18d1      	adds	r1, r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fe14 	bl	8002c00 <playerDelete>
	(*ud)--;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1e5a      	subs	r2, r3, #1
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	18d1      	adds	r1, r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7ff fb9e 	bl	8001738 <playerInSpaceR>
	}
	if (key.left && D->rl >0){
 8001ffc:	4b58      	ldr	r3, [pc, #352]	; (8002160 <goDuckUP2+0x1dc>)
 8001ffe:	789b      	ldrb	r3, [r3, #2]
 8002000:	b25b      	sxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d02e      	beq.n	8002064 <goDuckUP2+0xe0>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800200c:	2b00      	cmp	r3, #0
 800200e:	dd29      	ble.n	8002064 <goDuckUP2+0xe0>
	playerInSpaceL(play,x+*rl,y+*ud);
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	18d1      	adds	r1, r2, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	461a      	mov	r2, r3
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f7ff fc32 	bl	800188c <playerInSpaceL>
	playerDelete(play,x+*rl,y+*ud);
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	18d1      	adds	r1, r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	461a      	mov	r2, r3
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fde0 	bl	8002c00 <playerDelete>
	(*rl)-=5;
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	1f5a      	subs	r2, r3, #5
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	601a      	str	r2, [r3, #0]
	playerInSpaceL(play,x+1+*rl,y+*ud);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	18d1      	adds	r1, r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	461a      	mov	r2, r3
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f7ff fc14 	bl	800188c <playerInSpaceL>
	}
	if (key.right && D->rl <65){
 8002064:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <goDuckUP2+0x1dc>)
 8002066:	78db      	ldrb	r3, [r3, #3]
 8002068:	b25b      	sxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d02e      	beq.n	80020cc <goDuckUP2+0x148>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002074:	2b40      	cmp	r3, #64	; 0x40
 8002076:	dc29      	bgt.n	80020cc <goDuckUP2+0x148>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	18d1      	adds	r1, r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	461a      	mov	r2, r3
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f7ff fb54 	bl	8001738 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	18d1      	adds	r1, r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fdac 	bl	8002c00 <playerDelete>
	(*rl)+=5;
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1d5a      	adds	r2, r3, #5
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	18d1      	adds	r1, r2, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f7ff fb36 	bl	8001738 <playerInSpaceR>
	}
	if (key.center && D->rl == 30){
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <goDuckUP2+0x1dc>)
 80020ce:	791b      	ldrb	r3, [r3, #4]
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d02e      	beq.n	8002134 <goDuckUP2+0x1b0>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80020dc:	2b1e      	cmp	r3, #30
 80020de:	d129      	bne.n	8002134 <goDuckUP2+0x1b0>
	playerInSpaceR(play,x+*rl,y+*ud);
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	18d1      	adds	r1, r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff fb20 	bl	8001738 <playerInSpaceR>
	playerDelete(1,x+*rl,y+*ud);
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	18d1      	adds	r1, r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	461a      	mov	r2, r3
 800210a:	2001      	movs	r0, #1
 800210c:	f000 fd78 	bl	8002c00 <playerDelete>
	(*ud)+=4;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1d1a      	adds	r2, r3, #4
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	18d1      	adds	r1, r2, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	461a      	mov	r2, r3
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f7ff f9de 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b25a      	sxtb	r2, r3
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4413      	add	r3, r2
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3b16      	subs	r3, #22
 800214e:	b2db      	uxtb	r3, r3
 8002150:	b25a      	sxtb	r2, r3
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	705a      	strb	r2, [r3, #1]
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200001d4 	.word	0x200001d4

08002164 <goDuckUPMove2>:
void goDuckUPMove2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
	if (key.down || joy.down){
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <goDuckUPMove2+0x88>)
 8002174:	785b      	ldrb	r3, [r3, #1]
 8002176:	b25b      	sxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d104      	bne.n	8002186 <goDuckUPMove2+0x22>
 800217c:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <goDuckUPMove2+0x8c>)
 800217e:	785b      	ldrb	r3, [r3, #1]
 8002180:	b25b      	sxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d029      	beq.n	80021da <goDuckUPMove2+0x76>
	playerInSpaceR(play,x+*rl,y+*ud);
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	18d1      	adds	r1, r2, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	461a      	mov	r2, r3
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f7ff facd 	bl	8001738 <playerInSpaceR>
	playerDelete(play,x+*rl,y+*ud);
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	18d1      	adds	r1, r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	461a      	mov	r2, r3
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fd25 	bl	8002c00 <playerDelete>
	(*ud)++;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	18d1      	adds	r1, r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	461a      	mov	r2, r3
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f7ff faaf 	bl	8001738 <playerInSpaceR>
	}
	D->ud = *ud;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	b25a      	sxtb	r2, r3
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	701a      	strb	r2, [r3, #0]
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200001d4 	.word	0x200001d4
 80021f0:	200001e0 	.word	0x200001e0

080021f4 <goDuckMID1>:

void goDuckMID1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->rl == 30){
 8002202:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <goDuckMID1+0x200>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b25b      	sxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d033      	beq.n	8002274 <goDuckMID1+0x80>
 800220c:	4b7a      	ldr	r3, [pc, #488]	; (80023f8 <goDuckMID1+0x204>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b25b      	sxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d12e      	bne.n	8002274 <goDuckMID1+0x80>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800221c:	2b1e      	cmp	r3, #30
 800221e:	d129      	bne.n	8002274 <goDuckMID1+0x80>
	playerInShipR(play,x+*rl,y+*ud);
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	18d1      	adds	r1, r2, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	461a      	mov	r2, r3
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7ff f95c 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	18d1      	adds	r1, r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	461a      	mov	r2, r3
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fcd8 	bl	8002c00 <playerDelete>
	(*ud)-= 4;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1f1a      	subs	r2, r3, #4
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	18d1      	adds	r1, r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	461a      	mov	r2, r3
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7ff fa62 	bl	8001738 <playerInSpaceR>
	}
	if (joy.down && !CJoy.down  && D->rl == 30){
 8002274:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <goDuckMID1+0x200>)
 8002276:	785b      	ldrb	r3, [r3, #1]
 8002278:	b25b      	sxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d033      	beq.n	80022e6 <goDuckMID1+0xf2>
 800227e:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <goDuckMID1+0x204>)
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	b25b      	sxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d12e      	bne.n	80022e6 <goDuckMID1+0xf2>
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800228e:	2b1e      	cmp	r3, #30
 8002290:	d129      	bne.n	80022e6 <goDuckMID1+0xf2>
	playerInShipR(play,x+*rl,y+*ud);
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	18d1      	adds	r1, r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	461a      	mov	r2, r3
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff f923 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	18d1      	adds	r1, r2, r3
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	461a      	mov	r2, r3
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fc9f 	bl	8002c00 <playerDelete>
	(*ud)+= 4;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	1d1a      	adds	r2, r3, #4
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	18d1      	adds	r1, r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	461a      	mov	r2, r3
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7ff fc2b 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (joy.left && !CJoy.left && D->rl >0){
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <goDuckMID1+0x200>)
 80022e8:	789b      	ldrb	r3, [r3, #2]
 80022ea:	b25b      	sxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d033      	beq.n	8002358 <goDuckMID1+0x164>
 80022f0:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <goDuckMID1+0x204>)
 80022f2:	789b      	ldrb	r3, [r3, #2]
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d12e      	bne.n	8002358 <goDuckMID1+0x164>
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002300:	2b00      	cmp	r3, #0
 8002302:	dd29      	ble.n	8002358 <goDuckMID1+0x164>
	playerInShipL(play,x+*rl,y+*ud);
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	18d1      	adds	r1, r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	461a      	mov	r2, r3
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f7ff f97c 	bl	8001614 <playerInShipL>
	playerDelete(play,x+*rl,y+*ud);
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	18d1      	adds	r1, r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	461a      	mov	r2, r3
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fc66 	bl	8002c00 <playerDelete>
	(*rl)-=5;
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	1f5a      	subs	r2, r3, #5
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	601a      	str	r2, [r3, #0]
	playerInShipL(play,x+1+*rl,y+*ud);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	18d1      	adds	r1, r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	461a      	mov	r2, r3
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f7ff f95e 	bl	8001614 <playerInShipL>
	}
	if (joy.right && !CJoy.right && D->rl <55){
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <goDuckMID1+0x200>)
 800235a:	78db      	ldrb	r3, [r3, #3]
 800235c:	b25b      	sxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d033      	beq.n	80023ca <goDuckMID1+0x1d6>
 8002362:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <goDuckMID1+0x204>)
 8002364:	78db      	ldrb	r3, [r3, #3]
 8002366:	b25b      	sxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d12e      	bne.n	80023ca <goDuckMID1+0x1d6>
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002372:	2b36      	cmp	r3, #54	; 0x36
 8002374:	dc29      	bgt.n	80023ca <goDuckMID1+0x1d6>
	playerInShipR(play,x+*rl,y+*ud);
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	18d1      	adds	r1, r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	461a      	mov	r2, r3
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7ff f8b1 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	18d1      	adds	r1, r2, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	461a      	mov	r2, r3
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fc2d 	bl	8002c00 <playerDelete>
	(*rl)+=5;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	1d5a      	adds	r2, r3, #5
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	18d1      	adds	r1, r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	461a      	mov	r2, r3
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f7ff f893 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b25a      	sxtb	r2, r3
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4413      	add	r3, r2
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3b16      	subs	r3, #22
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	b25a      	sxtb	r2, r3
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	705a      	strb	r2, [r3, #1]
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	200001e0 	.word	0x200001e0
 80023f8:	200001e8 	.word	0x200001e8

080023fc <goDuckMID2>:

void goDuckMID2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]

	if (key.up && D->rl == 30){
 800240a:	4b72      	ldr	r3, [pc, #456]	; (80025d4 <goDuckMID2+0x1d8>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b25b      	sxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d02e      	beq.n	8002472 <goDuckMID2+0x76>
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800241a:	2b1e      	cmp	r3, #30
 800241c:	d129      	bne.n	8002472 <goDuckMID2+0x76>
	playerInShipR(play,x+*rl,y+*ud);
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	18d1      	adds	r1, r2, r3
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	461a      	mov	r2, r3
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff f85d 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	18d1      	adds	r1, r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	461a      	mov	r2, r3
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fbd9 	bl	8002c00 <playerDelete>
	(*ud)-= 4;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	1f1a      	subs	r2, r3, #4
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	601a      	str	r2, [r3, #0]
	playerInSpaceR(play,x+1+*rl,y+*ud);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	18d1      	adds	r1, r2, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	461a      	mov	r2, r3
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f7ff f963 	bl	8001738 <playerInSpaceR>
	}
	if (key.down && D->rl == 30){
 8002472:	4b58      	ldr	r3, [pc, #352]	; (80025d4 <goDuckMID2+0x1d8>)
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	b25b      	sxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d02e      	beq.n	80024da <goDuckMID2+0xde>
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002482:	2b1e      	cmp	r3, #30
 8002484:	d129      	bne.n	80024da <goDuckMID2+0xde>
	playerInShipR(play,x+*rl,y+*ud);
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	18d1      	adds	r1, r2, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	461a      	mov	r2, r3
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f7ff f829 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	18d1      	adds	r1, r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	461a      	mov	r2, r3
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fba5 	bl	8002c00 <playerDelete>
	(*ud)+= 4;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	1d1a      	adds	r2, r3, #4
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	18d1      	adds	r1, r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	461a      	mov	r2, r3
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff fb31 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (key.left && D->rl >0){
 80024da:	4b3e      	ldr	r3, [pc, #248]	; (80025d4 <goDuckMID2+0x1d8>)
 80024dc:	789b      	ldrb	r3, [r3, #2]
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02e      	beq.n	8002542 <goDuckMID2+0x146>
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	dd29      	ble.n	8002542 <goDuckMID2+0x146>
	playerInShipL(play,x+*rl,y+*ud);
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	18d1      	adds	r1, r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	461a      	mov	r2, r3
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f7ff f887 	bl	8001614 <playerInShipL>
	playerDelete(play,x+*rl,y+*ud);
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	18d1      	adds	r1, r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	461a      	mov	r2, r3
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fb71 	bl	8002c00 <playerDelete>
	(*rl)-=5;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1f5a      	subs	r2, r3, #5
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	601a      	str	r2, [r3, #0]
	playerInShipL(play,x+1+*rl,y+*ud);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	18d1      	adds	r1, r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	461a      	mov	r2, r3
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff f869 	bl	8001614 <playerInShipL>
	}
	if (key.right && D->rl <55){
 8002542:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <goDuckMID2+0x1d8>)
 8002544:	78db      	ldrb	r3, [r3, #3]
 8002546:	b25b      	sxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d02e      	beq.n	80025aa <goDuckMID2+0x1ae>
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002552:	2b36      	cmp	r3, #54	; 0x36
 8002554:	dc29      	bgt.n	80025aa <goDuckMID2+0x1ae>
	playerInShipR(play,x+*rl,y+*ud);
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	18d1      	adds	r1, r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	461a      	mov	r2, r3
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7fe ffc1 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	18d1      	adds	r1, r2, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	461a      	mov	r2, r3
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fb3d 	bl	8002c00 <playerDelete>
	(*rl)+=5;
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	1d5a      	adds	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	18d1      	adds	r1, r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	461a      	mov	r2, r3
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7fe ffa3 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b25a      	sxtb	r2, r3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4413      	add	r3, r2
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3b16      	subs	r3, #22
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	b25a      	sxtb	r2, r3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	705a      	strb	r2, [r3, #1]
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200001d4 	.word	0x200001d4

080025d8 <goDuckMIDMove2>:
void goDuckMIDMove2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
	if (key.up && !(key.down || joy.down)){
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <goDuckMIDMove2+0xfc>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b25b      	sxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d033      	beq.n	8002658 <goDuckMIDMove2+0x80>
 80025f0:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <goDuckMIDMove2+0xfc>)
 80025f2:	785b      	ldrb	r3, [r3, #1]
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d12e      	bne.n	8002658 <goDuckMIDMove2+0x80>
 80025fa:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <goDuckMIDMove2+0x100>)
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d129      	bne.n	8002658 <goDuckMIDMove2+0x80>
	playerInShipR(play,x+*rl,y+*ud);
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	18d1      	adds	r1, r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	461a      	mov	r2, r3
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7fe ff6a 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	18d1      	adds	r1, r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4413      	add	r3, r2
 800262c:	461a      	mov	r2, r3
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fae6 	bl	8002c00 <playerDelete>
	(*ud)--;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	1e5a      	subs	r2, r3, #1
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	18d1      	adds	r1, r2, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	461a      	mov	r2, r3
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7fe ff4c 	bl	80014f0 <playerInShipR>
	}
	if (key.down || joy.down){
 8002658:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <goDuckMIDMove2+0xfc>)
 800265a:	785b      	ldrb	r3, [r3, #1]
 800265c:	b25b      	sxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d104      	bne.n	800266c <goDuckMIDMove2+0x94>
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <goDuckMIDMove2+0x100>)
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	b25b      	sxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d029      	beq.n	80026c0 <goDuckMIDMove2+0xe8>
	playerInShipR(play,x+*rl,y+*ud);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	18d1      	adds	r1, r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	461a      	mov	r2, r3
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7fe ff36 	bl	80014f0 <playerInShipR>
	playerDelete(play,x+*rl,y+*ud);
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	18d1      	adds	r1, r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	461a      	mov	r2, r3
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fab2 	bl	8002c00 <playerDelete>
	(*ud)++;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	18d1      	adds	r1, r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	461a      	mov	r2, r3
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7fe ff18 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b25a      	sxtb	r2, r3
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	701a      	strb	r2, [r3, #0]
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200001d4 	.word	0x200001d4
 80026d8:	200001e0 	.word	0x200001e0

080026dc <goDuckUSD1>:

void goDuckUSD1(int play,int x, int y, int *ud, int *rl,duck_t * D){
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->ud <30){
 80026ea:	4b7c      	ldr	r3, [pc, #496]	; (80028dc <goDuckUSD1+0x200>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d033      	beq.n	800275c <goDuckUSD1+0x80>
 80026f4:	4b7a      	ldr	r3, [pc, #488]	; (80028e0 <goDuckUSD1+0x204>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b25b      	sxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d12e      	bne.n	800275c <goDuckUSD1+0x80>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f993 3000 	ldrsb.w	r3, [r3]
 8002704:	2b1d      	cmp	r3, #29
 8002706:	dc29      	bgt.n	800275c <goDuckUSD1+0x80>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	18d1      	adds	r1, r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4413      	add	r3, r2
 8002718:	461a      	mov	r2, r3
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f7ff fa0e 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	18d1      	adds	r1, r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4413      	add	r3, r2
 8002730:	461a      	mov	r2, r3
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fa64 	bl	8002c00 <playerDelete>
	(*ud)++;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	18d1      	adds	r1, r2, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	461a      	mov	r2, r3
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff f9f0 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (joy.right && !CJoy.right && D->rl >0){
 800275c:	4b5f      	ldr	r3, [pc, #380]	; (80028dc <goDuckUSD1+0x200>)
 800275e:	78db      	ldrb	r3, [r3, #3]
 8002760:	b25b      	sxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d033      	beq.n	80027ce <goDuckUSD1+0xf2>
 8002766:	4b5e      	ldr	r3, [pc, #376]	; (80028e0 <goDuckUSD1+0x204>)
 8002768:	78db      	ldrb	r3, [r3, #3]
 800276a:	b25b      	sxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d12e      	bne.n	80027ce <goDuckUSD1+0xf2>
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002776:	2b00      	cmp	r3, #0
 8002778:	dd29      	ble.n	80027ce <goDuckUSD1+0xf2>
	playerInSpaceUSDL(play,x+*rl,y+*ud);
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	18d1      	adds	r1, r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	461a      	mov	r2, r3
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff f927 	bl	80019e0 <playerInSpaceUSDL>
	playerDelete(play,x+*rl,y+*ud);
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	18d1      	adds	r1, r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	461a      	mov	r2, r3
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fa2b 	bl	8002c00 <playerDelete>
	(*rl)-=5;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	1f5a      	subs	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDL(play,x+1+*rl,y+*ud);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	18d1      	adds	r1, r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	461a      	mov	r2, r3
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7ff f909 	bl	80019e0 <playerInSpaceUSDL>
	}
	if (joy.left && !CJoy.left && D->rl <65){
 80027ce:	4b43      	ldr	r3, [pc, #268]	; (80028dc <goDuckUSD1+0x200>)
 80027d0:	789b      	ldrb	r3, [r3, #2]
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d033      	beq.n	8002840 <goDuckUSD1+0x164>
 80027d8:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <goDuckUSD1+0x204>)
 80027da:	789b      	ldrb	r3, [r3, #2]
 80027dc:	b25b      	sxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d12e      	bne.n	8002840 <goDuckUSD1+0x164>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	dc29      	bgt.n	8002840 <goDuckUSD1+0x164>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	18d1      	adds	r1, r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff f99c 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	18d1      	adds	r1, r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	461a      	mov	r2, r3
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f9f2 	bl	8002c00 <playerDelete>
	(*rl)+=5;
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	1d5a      	adds	r2, r3, #5
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	18d1      	adds	r1, r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4413      	add	r3, r2
 8002838:	461a      	mov	r2, r3
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7ff f97e 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (joy.center && !CJoy.center && D->rl == 30){
 8002840:	4b26      	ldr	r3, [pc, #152]	; (80028dc <goDuckUSD1+0x200>)
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	b25b      	sxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d033      	beq.n	80028b2 <goDuckUSD1+0x1d6>
 800284a:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <goDuckUSD1+0x204>)
 800284c:	791b      	ldrb	r3, [r3, #4]
 800284e:	b25b      	sxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d12e      	bne.n	80028b2 <goDuckUSD1+0x1d6>
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800285a:	2b1e      	cmp	r3, #30
 800285c:	d129      	bne.n	80028b2 <goDuckUSD1+0x1d6>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	18d1      	adds	r1, r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	461a      	mov	r2, r3
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f7ff f963 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	18d1      	adds	r1, r2, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	461a      	mov	r2, r3
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f9b9 	bl	8002c00 <playerDelete>
	(*ud)-=4;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	1f1a      	subs	r2, r3, #4
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	18d1      	adds	r1, r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	461a      	mov	r2, r3
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7fe fe1f 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	b25a      	sxtb	r2, r3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	3b16      	subs	r3, #22
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	b25a      	sxtb	r2, r3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	705a      	strb	r2, [r3, #1]
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	200001e0 	.word	0x200001e0
 80028e0:	200001e8 	.word	0x200001e8

080028e4 <goDuckUSD2>:

void goDuckUSD2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]

	if (key.up && D->ud <30){
 80028f2:	4b72      	ldr	r3, [pc, #456]	; (8002abc <goDuckUSD2+0x1d8>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d02e      	beq.n	800295a <goDuckUSD2+0x76>
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002902:	2b1d      	cmp	r3, #29
 8002904:	dc29      	bgt.n	800295a <goDuckUSD2+0x76>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	18d1      	adds	r1, r2, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	461a      	mov	r2, r3
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff f90f 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	18d1      	adds	r1, r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	461a      	mov	r2, r3
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f965 	bl	8002c00 <playerDelete>
	(*ud)++;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	18d1      	adds	r1, r2, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	461a      	mov	r2, r3
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7ff f8f1 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (key.right && D->rl >0){
 800295a:	4b58      	ldr	r3, [pc, #352]	; (8002abc <goDuckUSD2+0x1d8>)
 800295c:	78db      	ldrb	r3, [r3, #3]
 800295e:	b25b      	sxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d02e      	beq.n	80029c2 <goDuckUSD2+0xde>
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	dd29      	ble.n	80029c2 <goDuckUSD2+0xde>
	playerInSpaceUSDL(play,x+*rl,y+*ud);
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	18d1      	adds	r1, r2, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	461a      	mov	r2, r3
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff f82d 	bl	80019e0 <playerInSpaceUSDL>
	playerDelete(play,x+*rl,y+*ud);
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	18d1      	adds	r1, r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	461a      	mov	r2, r3
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f931 	bl	8002c00 <playerDelete>
	(*rl)-=5;
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	1f5a      	subs	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDL(play,x+1+*rl,y+*ud);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	18d1      	adds	r1, r2, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	461a      	mov	r2, r3
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7ff f80f 	bl	80019e0 <playerInSpaceUSDL>
	}
	if (key.left && D->rl <65){
 80029c2:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <goDuckUSD2+0x1d8>)
 80029c4:	789b      	ldrb	r3, [r3, #2]
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02e      	beq.n	8002a2a <goDuckUSD2+0x146>
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	dc29      	bgt.n	8002a2a <goDuckUSD2+0x146>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	18d1      	adds	r1, r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	461a      	mov	r2, r3
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f7ff f8a7 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	18d1      	adds	r1, r2, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	461a      	mov	r2, r3
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f8fd 	bl	8002c00 <playerDelete>
	(*rl)+=5;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1d5a      	adds	r2, r3, #5
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	18d1      	adds	r1, r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	461a      	mov	r2, r3
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff f889 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (key.center && D->rl == 30){
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <goDuckUSD2+0x1d8>)
 8002a2c:	791b      	ldrb	r3, [r3, #4]
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d02e      	beq.n	8002a92 <goDuckUSD2+0x1ae>
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002a3a:	2b1e      	cmp	r3, #30
 8002a3c:	d129      	bne.n	8002a92 <goDuckUSD2+0x1ae>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	18d1      	adds	r1, r2, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff f873 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	18d1      	adds	r1, r2, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	461a      	mov	r2, r3
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f8c9 	bl	8002c00 <playerDelete>
	(*ud)-=4;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	1f1a      	subs	r2, r3, #4
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	601a      	str	r2, [r3, #0]
	playerInShipR(play,x+1+*rl,y+*ud);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	18d1      	adds	r1, r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7fe fd2f 	bl	80014f0 <playerInShipR>
	}
	D->ud = *ud;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	b25a      	sxtb	r2, r3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3b16      	subs	r3, #22
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	b25a      	sxtb	r2, r3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	705a      	strb	r2, [r3, #1]
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	200001d4 	.word	0x200001d4

08002ac0 <goDuckUSDMove2>:
void goDuckUSDMove2(int play,int x, int y, int *ud, int *rl,duck_t * D){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
	if ((key.up || joy.up) && !(key.down || joy.down)){
 8002ace:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <goDuckUSDMove2+0x104>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <goDuckUSDMove2+0x22>
 8002ad8:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <goDuckUSDMove2+0x108>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d033      	beq.n	8002b4a <goDuckUSDMove2+0x8a>
 8002ae2:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <goDuckUSDMove2+0x104>)
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d12e      	bne.n	8002b4a <goDuckUSDMove2+0x8a>
 8002aec:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <goDuckUSDMove2+0x108>)
 8002aee:	785b      	ldrb	r3, [r3, #1]
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d129      	bne.n	8002b4a <goDuckUSDMove2+0x8a>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	18d1      	adds	r1, r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	461a      	mov	r2, r3
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7ff f817 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	18d1      	adds	r1, r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f86d 	bl	8002c00 <playerDelete>
	(*ud)--;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1e5a      	subs	r2, r3, #1
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	18d1      	adds	r1, r2, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	461a      	mov	r2, r3
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7fe fff9 	bl	8001b3c <playerInSpaceUSDR>
	}
	if (key.down || joy.down){
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <goDuckUSDMove2+0x104>)
 8002b4c:	785b      	ldrb	r3, [r3, #1]
 8002b4e:	b25b      	sxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d104      	bne.n	8002b5e <goDuckUSDMove2+0x9e>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <goDuckUSDMove2+0x108>)
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d029      	beq.n	8002bb2 <goDuckUSDMove2+0xf2>
	playerInSpaceUSDR(play,x+*rl,y+*ud);
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	18d1      	adds	r1, r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f7fe ffe3 	bl	8001b3c <playerInSpaceUSDR>
	playerDelete(play,x+*rl,y+*ud);
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	18d1      	adds	r1, r2, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	461a      	mov	r2, r3
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f839 	bl	8002c00 <playerDelete>
	(*ud)++;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(play,x+1+*rl,y+*ud);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	18d1      	adds	r1, r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	461a      	mov	r2, r3
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7fe ffc5 	bl	8001b3c <playerInSpaceUSDR>
	}
	D->ud = *ud;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b25a      	sxtb	r2, r3
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	701a      	strb	r2, [r3, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	200001d4 	.word	0x200001d4
 8002bc8:	200001e0 	.word	0x200001e0

08002bcc <fat>:

void fat(int state) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	if (state) {
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <fat+0x1c>
		printf("%c[%d%c", ESC, 01, 'm');
 8002bda:	236d      	movs	r3, #109	; 0x6d
 8002bdc:	2201      	movs	r2, #1
 8002bde:	211b      	movs	r1, #27
 8002be0:	4806      	ldr	r0, [pc, #24]	; (8002bfc <fat+0x30>)
 8002be2:	f001 fe45 	bl	8004870 <iprintf>
	} else {
		printf("%c[%d%c", ESC, 22, 'm');
	}
}
 8002be6:	e005      	b.n	8002bf4 <fat+0x28>
		printf("%c[%d%c", ESC, 22, 'm');
 8002be8:	236d      	movs	r3, #109	; 0x6d
 8002bea:	2216      	movs	r2, #22
 8002bec:	211b      	movs	r1, #27
 8002bee:	4803      	ldr	r0, [pc, #12]	; (8002bfc <fat+0x30>)
 8002bf0:	f001 fe3e 	bl	8004870 <iprintf>
}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	0800599c 	.word	0x0800599c

08002c00 <playerDelete>:


void playerDelete(int p,int x, int y){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]

	gotoxy(x,y);
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	68b8      	ldr	r0, [r7, #8]
 8002c10:	f000 fd84 	bl	800371c <gotoxy>
	for (int i = 0; i < 5; i++){
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	e005      	b.n	8002c26 <playerDelete+0x26>
		printf("%c",32);
 8002c1a:	2020      	movs	r0, #32
 8002c1c:	f001 fe40 	bl	80048a0 <putchar>
	for (int i = 0; i < 5; i++){
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	3301      	adds	r3, #1
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	ddf6      	ble.n	8002c1a <playerDelete+0x1a>
	}
	gotoxy(x,y+1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	4619      	mov	r1, r3
 8002c32:	68b8      	ldr	r0, [r7, #8]
 8002c34:	f000 fd72 	bl	800371c <gotoxy>
	for (int i = 0; i < 5; i++){
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	e005      	b.n	8002c4a <playerDelete+0x4a>
		printf("%c",32);
 8002c3e:	2020      	movs	r0, #32
 8002c40:	f001 fe2e 	bl	80048a0 <putchar>
	for (int i = 0; i < 5; i++){
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	3301      	adds	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	ddf6      	ble.n	8002c3e <playerDelete+0x3e>
	}
	gotoxy(x,y+2);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3302      	adds	r3, #2
 8002c54:	4619      	mov	r1, r3
 8002c56:	68b8      	ldr	r0, [r7, #8]
 8002c58:	f000 fd60 	bl	800371c <gotoxy>
	for (int i = 0; i < 5; i++){
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	e005      	b.n	8002c6e <playerDelete+0x6e>
		printf("%c",32);
 8002c62:	2020      	movs	r0, #32
 8002c64:	f001 fe1c 	bl	80048a0 <putchar>
	for (int i = 0; i < 5; i++){
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	ddf6      	ble.n	8002c62 <playerDelete+0x62>
	}
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <canonFire>:

void canonFire(int b,int SS){
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	6039      	str	r1, [r7, #0]
	bgcolor(0);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f000 fd1d 	bl	80036c8 <bgcolor>

	if (b == 1){
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d14d      	bne.n	8002d30 <canonFire+0xb2>
	fat(1);
 8002c94:	2001      	movs	r0, #1
 8002c96:	f7ff ff99 	bl	8002bcc <fat>
	bgcolor(2);
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f000 fd14 	bl	80036c8 <bgcolor>
	for(int i = 0; i<88 ;i++){
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e029      	b.n	8002cfa <canonFire+0x7c>
	gotoxy(92+i,29+SS);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	331d      	adds	r3, #29
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f000 fd32 	bl	800371c <gotoxy>
	printf("%c",205);
 8002cb8:	20cd      	movs	r0, #205	; 0xcd
 8002cba:	f001 fdf1 	bl	80048a0 <putchar>
	printf("%c",205);
 8002cbe:	20cd      	movs	r0, #205	; 0xcd
 8002cc0:	f001 fdee 	bl	80048a0 <putchar>
	printf("%c",205);
 8002cc4:	20cd      	movs	r0, #205	; 0xcd
 8002cc6:	f001 fdeb 	bl	80048a0 <putchar>
	printf("%c",205);
 8002cca:	20cd      	movs	r0, #205	; 0xcd
 8002ccc:	f001 fde8 	bl	80048a0 <putchar>
	printf("%c",205);
 8002cd0:	20cd      	movs	r0, #205	; 0xcd
 8002cd2:	f001 fde5 	bl	80048a0 <putchar>
	bgcolor(0);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f000 fcf6 	bl	80036c8 <bgcolor>
	gotoxy(92+i-1,29+SS);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	331d      	adds	r3, #29
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4610      	mov	r0, r2
 8002cea:	f000 fd17 	bl	800371c <gotoxy>
	printf("%c",32);
 8002cee:	2020      	movs	r0, #32
 8002cf0:	f001 fdd6 	bl	80048a0 <putchar>
	for(int i = 0; i<88 ;i++){
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b57      	cmp	r3, #87	; 0x57
 8002cfe:	ddd2      	ble.n	8002ca6 <canonFire+0x28>
}
	gotoxy(178,29+SS);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	331d      	adds	r3, #29
 8002d04:	4619      	mov	r1, r3
 8002d06:	20b2      	movs	r0, #178	; 0xb2
 8002d08:	f000 fd08 	bl	800371c <gotoxy>
	fgcolor(10);
 8002d0c:	200a      	movs	r0, #10
 8002d0e:	f000 fcbf 	bl	8003690 <fgcolor>
	fat(0);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7ff ff5a 	bl	8002bcc <fat>
	for(int i = 0; i<6; i++){
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	e005      	b.n	8002d2a <canonFire+0xac>
	printf("%c",32);
 8002d1e:	2020      	movs	r0, #32
 8002d20:	f001 fdbe 	bl	80048a0 <putchar>
	for(int i = 0; i<6; i++){
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	3301      	adds	r3, #1
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	ddf6      	ble.n	8002d1e <canonFire+0xa0>
	}
}
if (b == 2){
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d14d      	bne.n	8002dd2 <canonFire+0x154>
fat(1);
 8002d36:	2001      	movs	r0, #1
 8002d38:	f7ff ff48 	bl	8002bcc <fat>
bgcolor(1);
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f000 fcc3 	bl	80036c8 <bgcolor>
for(int i = 0; i<88 ;i++){
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e029      	b.n	8002d9c <canonFire+0x11e>
gotoxy(92+i,29+SS);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	331d      	adds	r3, #29
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f000 fce1 	bl	800371c <gotoxy>
printf("%c",178);
 8002d5a:	20b2      	movs	r0, #178	; 0xb2
 8002d5c:	f001 fda0 	bl	80048a0 <putchar>
printf("%c",178);
 8002d60:	20b2      	movs	r0, #178	; 0xb2
 8002d62:	f001 fd9d 	bl	80048a0 <putchar>
printf("%c",178);
 8002d66:	20b2      	movs	r0, #178	; 0xb2
 8002d68:	f001 fd9a 	bl	80048a0 <putchar>
printf("%c",178);
 8002d6c:	20b2      	movs	r0, #178	; 0xb2
 8002d6e:	f001 fd97 	bl	80048a0 <putchar>
printf("%c",178);
 8002d72:	20b2      	movs	r0, #178	; 0xb2
 8002d74:	f001 fd94 	bl	80048a0 <putchar>
bgcolor(0);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f000 fca5 	bl	80036c8 <bgcolor>
gotoxy(92+i-1,29+SS);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	331d      	adds	r3, #29
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f000 fcc6 	bl	800371c <gotoxy>
printf("%c",32);
 8002d90:	2020      	movs	r0, #32
 8002d92:	f001 fd85 	bl	80048a0 <putchar>
for(int i = 0; i<88 ;i++){
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b57      	cmp	r3, #87	; 0x57
 8002da0:	ddd2      	ble.n	8002d48 <canonFire+0xca>
}
gotoxy(178,29+SS);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	331d      	adds	r3, #29
 8002da6:	4619      	mov	r1, r3
 8002da8:	20b2      	movs	r0, #178	; 0xb2
 8002daa:	f000 fcb7 	bl	800371c <gotoxy>
fgcolor(10);
 8002dae:	200a      	movs	r0, #10
 8002db0:	f000 fc6e 	bl	8003690 <fgcolor>
fat(0);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7ff ff09 	bl	8002bcc <fat>
for(int i = 0; i<6; i++){
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	e005      	b.n	8002dcc <canonFire+0x14e>
printf("%c",32);
 8002dc0:	2020      	movs	r0, #32
 8002dc2:	f001 fd6d 	bl	80048a0 <putchar>
for(int i = 0; i<6; i++){
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	ddf6      	ble.n	8002dc0 <canonFire+0x142>
}
}
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <Broken>:


void Broken(int rand_UP,int rand_OBJ, int x1, int y1){
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
	fat(1);
 8002dea:	2001      	movs	r0, #1
 8002dec:	f7ff feee 	bl	8002bcc <fat>
	blink(1);
 8002df0:	2001      	movs	r0, #1
 8002df2:	f000 fca5 	bl	8003740 <blink>

	if (rand_OBJ == 1){
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d108      	bne.n	8002e0e <Broken+0x32>
	bgcolor(5);
 8002dfc:	2005      	movs	r0, #5
 8002dfe:	f000 fc63 	bl	80036c8 <bgcolor>
	gotoxy(x1+24,y1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3318      	adds	r3, #24
 8002e06:	6839      	ldr	r1, [r7, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fc87 	bl	800371c <gotoxy>
	}
	if (rand_OBJ == 2){
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d10b      	bne.n	8002e2c <Broken+0x50>
	bgcolor(5);
 8002e14:	2005      	movs	r0, #5
 8002e16:	f000 fc57 	bl	80036c8 <bgcolor>
	gotoxy(x1+24,y1+4);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f103 0218 	add.w	r2, r3, #24
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	3304      	adds	r3, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f000 fc78 	bl	800371c <gotoxy>
	}
	if (rand_OBJ == 3) {
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d10b      	bne.n	8002e4a <Broken+0x6e>
	bgcolor(7);
 8002e32:	2007      	movs	r0, #7
 8002e34:	f000 fc48 	bl	80036c8 <bgcolor>
	gotoxy(x1+81,y1+2);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f103 0251 	add.w	r2, r3, #81	; 0x51
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	3302      	adds	r3, #2
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f000 fc69 	bl	800371c <gotoxy>
	}
	if (rand_OBJ == 4) {
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d108      	bne.n	8002e62 <Broken+0x86>
	bgcolor(1);
 8002e50:	2001      	movs	r0, #1
 8002e52:	f000 fc39 	bl	80036c8 <bgcolor>
	gotoxy(x1+59,y1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	333b      	adds	r3, #59	; 0x3b
 8002e5a:	6839      	ldr	r1, [r7, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fc5d 	bl	800371c <gotoxy>
	}
	if (rand_OBJ == 5) {
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d10b      	bne.n	8002e80 <Broken+0xa4>
	bgcolor(1);
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f000 fc2d 	bl	80036c8 <bgcolor>
	gotoxy(x1+44,y1+4);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	3304      	adds	r3, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f000 fc4e 	bl	800371c <gotoxy>
	}
	if (rand_OBJ == 6) {
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d10b      	bne.n	8002e9e <Broken+0xc2>
	bgcolor(1);
 8002e86:	2001      	movs	r0, #1
 8002e88:	f000 fc1e 	bl	80036c8 <bgcolor>
	gotoxy(x1+74,y1+4);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	3304      	adds	r3, #4
 8002e96:	4619      	mov	r1, r3
 8002e98:	4610      	mov	r0, r2
 8002e9a:	f000 fc3f 	bl	800371c <gotoxy>
	}


	if (rand_UP == 1) {
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d10f      	bne.n	8002ec4 <Broken+0xe8>
	fgcolor(0);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f000 fbf3 	bl	8003690 <fgcolor>
	for(int i = 0; i<3; i++) {
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e006      	b.n	8002ebe <Broken+0xe2>
	printf("%c ",33);
 8002eb0:	2121      	movs	r1, #33	; 0x21
 8002eb2:	4816      	ldr	r0, [pc, #88]	; (8002f0c <Broken+0x130>)
 8002eb4:	f001 fcdc 	bl	8004870 <iprintf>
	for(int i = 0; i<3; i++) {
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	ddf5      	ble.n	8002eb0 <Broken+0xd4>
	}
	}
	if (rand_UP == 2) {
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d10f      	bne.n	8002eea <Broken+0x10e>
	fgcolor(11);
 8002eca:	200b      	movs	r0, #11
 8002ecc:	f000 fbe0 	bl	8003690 <fgcolor>
	for(int i = 0; i<3; i++) {
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	e006      	b.n	8002ee4 <Broken+0x108>
	printf("%c ",33);
 8002ed6:	2121      	movs	r1, #33	; 0x21
 8002ed8:	480c      	ldr	r0, [pc, #48]	; (8002f0c <Broken+0x130>)
 8002eda:	f001 fcc9 	bl	8004870 <iprintf>
	for(int i = 0; i<3; i++) {
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	ddf5      	ble.n	8002ed6 <Broken+0xfa>





	fat(0);
 8002eea:	2000      	movs	r0, #0
 8002eec:	f7ff fe6e 	bl	8002bcc <fat>
	blink(0);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f000 fc25 	bl	8003740 <blink>
	bgcolor(0);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f000 fbe6 	bl	80036c8 <bgcolor>
	fgcolor(0);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f000 fbc7 	bl	8003690 <fgcolor>
	}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	080059a4 	.word	0x080059a4

08002f10 <duckExplotion>:

void duckExplotion(int x, int y, int *ud, int *rl){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b096      	sub	sp, #88	; 0x58
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]

//1
	fgcolor(15);
 8002f1e:	200f      	movs	r0, #15
 8002f20:	f000 fbb6 	bl	8003690 <fgcolor>
	gotoxy(x+2+*rl,y+1+*ud);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1c9a      	adds	r2, r3, #2
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	18d0      	adds	r0, r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f000 fbef 	bl	800371c <gotoxy>
		printf("%c",219);
 8002f3e:	20db      	movs	r0, #219	; 0xdb
 8002f40:	f001 fcae 	bl	80048a0 <putchar>
//2

	fgcolor(11);
 8002f44:	200b      	movs	r0, #11
 8002f46:	f000 fba3 	bl	8003690 <fgcolor>
	gotoxy(x+1+*rl,y+*ud);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	18d0      	adds	r0, r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f000 fbdd 	bl	800371c <gotoxy>
	for (int i = 0; i < 3; i++){
 8002f62:	2300      	movs	r3, #0
 8002f64:	657b      	str	r3, [r7, #84]	; 0x54
 8002f66:	e005      	b.n	8002f74 <duckExplotion+0x64>
		printf("%c",219);
 8002f68:	20db      	movs	r0, #219	; 0xdb
 8002f6a:	f001 fc99 	bl	80048a0 <putchar>
	for (int i = 0; i < 3; i++){
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f70:	3301      	adds	r3, #1
 8002f72:	657b      	str	r3, [r7, #84]	; 0x54
 8002f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	ddf6      	ble.n	8002f68 <duckExplotion+0x58>
	}
	gotoxy(x+1+*rl,y+1+*ud);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	18d0      	adds	r0, r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f000 fbc4 	bl	800371c <gotoxy>
	for (int i = 0; i < 3; i++){
 8002f94:	2300      	movs	r3, #0
 8002f96:	653b      	str	r3, [r7, #80]	; 0x50
 8002f98:	e005      	b.n	8002fa6 <duckExplotion+0x96>
		printf("%c",219);
 8002f9a:	20db      	movs	r0, #219	; 0xdb
 8002f9c:	f001 fc80 	bl	80048a0 <putchar>
	for (int i = 0; i < 3; i++){
 8002fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	653b      	str	r3, [r7, #80]	; 0x50
 8002fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	ddf6      	ble.n	8002f9a <duckExplotion+0x8a>
	}
	gotoxy(x+1+*rl,y+2+*ud);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	18d0      	adds	r0, r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	1c9a      	adds	r2, r3, #2
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f000 fbab 	bl	800371c <gotoxy>
	for (int i = 0; i < 3; i++){
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fca:	e005      	b.n	8002fd8 <duckExplotion+0xc8>
		printf("%c",219);
 8002fcc:	20db      	movs	r0, #219	; 0xdb
 8002fce:	f001 fc67 	bl	80048a0 <putchar>
	for (int i = 0; i < 3; i++){
 8002fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	ddf6      	ble.n	8002fcc <duckExplotion+0xbc>
	}



//3
	fgcolor(9);
 8002fde:	2009      	movs	r0, #9
 8002fe0:	f000 fb56 	bl	8003690 <fgcolor>
	gotoxy(x+1+*rl,y-1+*ud);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	18d0      	adds	r0, r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f000 fb8f 	bl	800371c <gotoxy>
	for (int i = 0; i < 3; i++){
 8002ffe:	2300      	movs	r3, #0
 8003000:	64bb      	str	r3, [r7, #72]	; 0x48
 8003002:	e005      	b.n	8003010 <duckExplotion+0x100>
	printf("%c",219);
 8003004:	20db      	movs	r0, #219	; 0xdb
 8003006:	f001 fc4b 	bl	80048a0 <putchar>
	for (int i = 0; i < 3; i++){
 800300a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300c:	3301      	adds	r3, #1
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003012:	2b02      	cmp	r3, #2
 8003014:	ddf6      	ble.n	8003004 <duckExplotion+0xf4>
	}
	gotoxy(x+*rl,y+*ud);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	18d0      	adds	r0, r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4413      	add	r3, r2
 8003026:	4619      	mov	r1, r3
 8003028:	f000 fb78 	bl	800371c <gotoxy>
	for (int i = 0; i < 5; i++){
 800302c:	2300      	movs	r3, #0
 800302e:	647b      	str	r3, [r7, #68]	; 0x44
 8003030:	e005      	b.n	800303e <duckExplotion+0x12e>
		printf("%c",219);
 8003032:	20db      	movs	r0, #219	; 0xdb
 8003034:	f001 fc34 	bl	80048a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303a:	3301      	adds	r3, #1
 800303c:	647b      	str	r3, [r7, #68]	; 0x44
 800303e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003040:	2b04      	cmp	r3, #4
 8003042:	ddf6      	ble.n	8003032 <duckExplotion+0x122>
	}
	gotoxy(x+*rl,y+1+*ud);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	18d0      	adds	r0, r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4413      	add	r3, r2
 8003056:	4619      	mov	r1, r3
 8003058:	f000 fb60 	bl	800371c <gotoxy>
	for (int i = 0; i < 5; i++){
 800305c:	2300      	movs	r3, #0
 800305e:	643b      	str	r3, [r7, #64]	; 0x40
 8003060:	e005      	b.n	800306e <duckExplotion+0x15e>
		printf("%c",219);
 8003062:	20db      	movs	r0, #219	; 0xdb
 8003064:	f001 fc1c 	bl	80048a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306a:	3301      	adds	r3, #1
 800306c:	643b      	str	r3, [r7, #64]	; 0x40
 800306e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003070:	2b04      	cmp	r3, #4
 8003072:	ddf6      	ble.n	8003062 <duckExplotion+0x152>
	}
	gotoxy(x+*rl,y+2+*ud);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	18d0      	adds	r0, r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	1c9a      	adds	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4413      	add	r3, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f000 fb48 	bl	800371c <gotoxy>
	for (int i = 0; i < 5; i++){
 800308c:	2300      	movs	r3, #0
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003090:	e005      	b.n	800309e <duckExplotion+0x18e>
		printf("%c",219);
 8003092:	20db      	movs	r0, #219	; 0xdb
 8003094:	f001 fc04 	bl	80048a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309a:	3301      	adds	r3, #1
 800309c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800309e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	ddf6      	ble.n	8003092 <duckExplotion+0x182>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	18d0      	adds	r0, r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1cda      	adds	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	f000 fb2f 	bl	800371c <gotoxy>
	for (int i = 0; i < 3; i++){
 80030be:	2300      	movs	r3, #0
 80030c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80030c2:	e005      	b.n	80030d0 <duckExplotion+0x1c0>
	printf("%c",219);
 80030c4:	20db      	movs	r0, #219	; 0xdb
 80030c6:	f001 fbeb 	bl	80048a0 <putchar>
	for (int i = 0; i < 3; i++){
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	3301      	adds	r3, #1
 80030ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	ddf6      	ble.n	80030c4 <duckExplotion+0x1b4>
	}


//4
	fgcolor(1);
 80030d6:	2001      	movs	r0, #1
 80030d8:	f000 fada 	bl	8003690 <fgcolor>
	gotoxy(x+1+*rl,y-1+*ud);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	18d0      	adds	r0, r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	1e5a      	subs	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4413      	add	r3, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	f000 fb13 	bl	800371c <gotoxy>
	for (int i = 0; i < 3; i++){
 80030f6:	2300      	movs	r3, #0
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
 80030fa:	e005      	b.n	8003108 <duckExplotion+0x1f8>
	printf("%c",219);
 80030fc:	20db      	movs	r0, #219	; 0xdb
 80030fe:	f001 fbcf 	bl	80048a0 <putchar>
	for (int i = 0; i < 3; i++){
 8003102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003104:	3301      	adds	r3, #1
 8003106:	637b      	str	r3, [r7, #52]	; 0x34
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310a:	2b02      	cmp	r3, #2
 800310c:	ddf6      	ble.n	80030fc <duckExplotion+0x1ec>
	}
	gotoxy(x+*rl,y+*ud);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	18d0      	adds	r0, r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4413      	add	r3, r2
 800311e:	4619      	mov	r1, r3
 8003120:	f000 fafc 	bl	800371c <gotoxy>
	for (int i = 0; i < 5; i++){
 8003124:	2300      	movs	r3, #0
 8003126:	633b      	str	r3, [r7, #48]	; 0x30
 8003128:	e005      	b.n	8003136 <duckExplotion+0x226>
	printf("%c",219);
 800312a:	20db      	movs	r0, #219	; 0xdb
 800312c:	f001 fbb8 	bl	80048a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	3301      	adds	r3, #1
 8003134:	633b      	str	r3, [r7, #48]	; 0x30
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	2b04      	cmp	r3, #4
 800313a:	ddf6      	ble.n	800312a <duckExplotion+0x21a>
	}
	gotoxy(x-1+*rl,y+1+*ud);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1e5a      	subs	r2, r3, #1
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	18d0      	adds	r0, r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4413      	add	r3, r2
 8003150:	4619      	mov	r1, r3
 8003152:	f000 fae3 	bl	800371c <gotoxy>
	for (int i = 0; i < 7; i++){
 8003156:	2300      	movs	r3, #0
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315a:	e005      	b.n	8003168 <duckExplotion+0x258>
	printf("%c",219);
 800315c:	20db      	movs	r0, #219	; 0xdb
 800315e:	f001 fb9f 	bl	80048a0 <putchar>
	for (int i = 0; i < 7; i++){
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003164:	3301      	adds	r3, #1
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	2b06      	cmp	r3, #6
 800316c:	ddf6      	ble.n	800315c <duckExplotion+0x24c>
	}
	gotoxy(x+*rl,y+2+*ud);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	18d0      	adds	r0, r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1c9a      	adds	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4413      	add	r3, r2
 8003180:	4619      	mov	r1, r3
 8003182:	f000 facb 	bl	800371c <gotoxy>
	for (int i = 0; i < 5; i++){
 8003186:	2300      	movs	r3, #0
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
 800318a:	e005      	b.n	8003198 <duckExplotion+0x288>
	printf("%c",219);
 800318c:	20db      	movs	r0, #219	; 0xdb
 800318e:	f001 fb87 	bl	80048a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	3301      	adds	r3, #1
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	2b04      	cmp	r3, #4
 800319c:	ddf6      	ble.n	800318c <duckExplotion+0x27c>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	18d0      	adds	r0, r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	1cda      	adds	r2, r3, #3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4413      	add	r3, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	f000 fab2 	bl	800371c <gotoxy>
	for (int i = 0; i < 3; i++){
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	e005      	b.n	80031ca <duckExplotion+0x2ba>
	printf("%c",219);
 80031be:	20db      	movs	r0, #219	; 0xdb
 80031c0:	f001 fb6e 	bl	80048a0 <putchar>
	for (int i = 0; i < 3; i++){
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	3301      	adds	r3, #1
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	ddf6      	ble.n	80031be <duckExplotion+0x2ae>
	}



//DELETE
	gotoxy(x+1+*rl,y-1+*ud);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	18d0      	adds	r0, r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1e5a      	subs	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4413      	add	r3, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	f000 fa99 	bl	800371c <gotoxy>
	for (int i = 0; i < 3; i++){
 80031ea:	2300      	movs	r3, #0
 80031ec:	623b      	str	r3, [r7, #32]
 80031ee:	e005      	b.n	80031fc <duckExplotion+0x2ec>
	printf("%c",32);
 80031f0:	2020      	movs	r0, #32
 80031f2:	f001 fb55 	bl	80048a0 <putchar>
	for (int i = 0; i < 3; i++){
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	3301      	adds	r3, #1
 80031fa:	623b      	str	r3, [r7, #32]
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	ddf6      	ble.n	80031f0 <duckExplotion+0x2e0>
	}
	gotoxy(x+*rl,y+*ud);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	18d0      	adds	r0, r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4413      	add	r3, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f000 fa82 	bl	800371c <gotoxy>
	for (int i = 0; i < 5; i++){
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	e005      	b.n	800322a <duckExplotion+0x31a>
	printf("%c",32);
 800321e:	2020      	movs	r0, #32
 8003220:	f001 fb3e 	bl	80048a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	3301      	adds	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	2b04      	cmp	r3, #4
 800322e:	ddf6      	ble.n	800321e <duckExplotion+0x30e>
	}
	gotoxy(x-1+*rl,y+1+*ud);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1e5a      	subs	r2, r3, #1
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	18d0      	adds	r0, r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4413      	add	r3, r2
 8003244:	4619      	mov	r1, r3
 8003246:	f000 fa69 	bl	800371c <gotoxy>
	for (int i = 0; i < 7; i++){
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	e005      	b.n	800325c <duckExplotion+0x34c>
	printf("%c",32);
 8003250:	2020      	movs	r0, #32
 8003252:	f001 fb25 	bl	80048a0 <putchar>
	for (int i = 0; i < 7; i++){
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	3301      	adds	r3, #1
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b06      	cmp	r3, #6
 8003260:	ddf6      	ble.n	8003250 <duckExplotion+0x340>
	}
	gotoxy(x+*rl,y+2+*ud);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	18d0      	adds	r0, r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1c9a      	adds	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4413      	add	r3, r2
 8003274:	4619      	mov	r1, r3
 8003276:	f000 fa51 	bl	800371c <gotoxy>
	for (int i = 0; i < 5; i++){
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	e005      	b.n	800328c <duckExplotion+0x37c>
	printf("%c",32);
 8003280:	2020      	movs	r0, #32
 8003282:	f001 fb0d 	bl	80048a0 <putchar>
	for (int i = 0; i < 5; i++){
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b04      	cmp	r3, #4
 8003290:	ddf6      	ble.n	8003280 <duckExplotion+0x370>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	18d0      	adds	r0, r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	1cda      	adds	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4413      	add	r3, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	f000 fa38 	bl	800371c <gotoxy>
	for (int i = 0; i < 3; i++){
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	e005      	b.n	80032be <duckExplotion+0x3ae>
	printf("%c",32);
 80032b2:	2020      	movs	r0, #32
 80032b4:	f001 faf4 	bl	80048a0 <putchar>
	for (int i = 0; i < 3; i++){
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	3301      	adds	r3, #1
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	ddf6      	ble.n	80032b2 <duckExplotion+0x3a2>
	}
	fgcolor(0);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f000 f9e3 	bl	8003690 <fgcolor>
	}
 80032ca:	bf00      	nop
 80032cc:	3758      	adds	r7, #88	; 0x58
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <intiJoystick>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi_S.h"
#include "joystick.h"

void intiJoystick(){
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 80032d8:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <intiJoystick+0x120>)
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	4a45      	ldr	r2, [pc, #276]	; (80033f4 <intiJoystick+0x120>)
 80032de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e2:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
 80032e4:	4b43      	ldr	r3, [pc, #268]	; (80033f4 <intiJoystick+0x120>)
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	4a42      	ldr	r2, [pc, #264]	; (80033f4 <intiJoystick+0x120>)
 80032ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ee:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 80032f0:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <intiJoystick+0x120>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	4a3f      	ldr	r2, [pc, #252]	; (80033f4 <intiJoystick+0x120>)
 80032f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032fa:	6153      	str	r3, [r2, #20]

	// Set pin PC0 to input
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <intiJoystick+0x124>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a3d      	ldr	r2, [pc, #244]	; (80033f8 <intiJoystick+0x124>)
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (0 * 2));	// Set mode register
 8003308:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <intiJoystick+0x124>)
 800330a:	4a3b      	ldr	r2, [pc, #236]	; (80033f8 <intiJoystick+0x124>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8003310:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <intiJoystick+0x124>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a38      	ldr	r2, [pc, #224]	; (80033f8 <intiJoystick+0x124>)
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (0 * 2));// Set push/pull register
 800331c:	4b36      	ldr	r3, [pc, #216]	; (80033f8 <intiJoystick+0x124>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a35      	ldr	r2, [pc, #212]	; (80033f8 <intiJoystick+0x124>)
 8003322:	f043 0302 	orr.w	r3, r3, #2
 8003326:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PA4 to input
	GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8003328:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003336:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x00000000 << (4 * 2)); // Set mode register
 8003338:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800333c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOA->PUPDR &= ~(0x00000003 << (4 * 2)); // Clear push/pull register
 8003344:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x00000002 << (4 * 2)); // Set push/pull register
 8003354:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800335e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003362:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB5 to input
	GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8003364:	4b25      	ldr	r3, [pc, #148]	; (80033fc <intiJoystick+0x128>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a24      	ldr	r2, [pc, #144]	; (80033fc <intiJoystick+0x128>)
 800336a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800336e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (5 * 2)); // Set mode register
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <intiJoystick+0x128>)
 8003372:	4a22      	ldr	r2, [pc, #136]	; (80033fc <intiJoystick+0x128>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIOB->PUPDR &= ~(0x00000003 << (5 * 2)); // Clear push/pull register
 8003378:	4b20      	ldr	r3, [pc, #128]	; (80033fc <intiJoystick+0x128>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <intiJoystick+0x128>)
 800337e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003382:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (5 * 2)); // Set push/pull register
 8003384:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <intiJoystick+0x128>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <intiJoystick+0x128>)
 800338a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800338e:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PC1 to input
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <intiJoystick+0x124>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <intiJoystick+0x124>)
 8003396:	f023 030c 	bic.w	r3, r3, #12
 800339a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (1 * 2)); // Set mode register
 800339c:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <intiJoystick+0x124>)
 800339e:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <intiJoystick+0x124>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); // Clear push/pull register
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <intiJoystick+0x124>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <intiJoystick+0x124>)
 80033aa:	f023 030c 	bic.w	r3, r3, #12
 80033ae:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (1 * 2)); // Set push/pull register
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <intiJoystick+0x124>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <intiJoystick+0x124>)
 80033b6:	f043 0308 	orr.w	r3, r3, #8
 80033ba:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB0 to input
	GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <intiJoystick+0x128>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <intiJoystick+0x128>)
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (0 * 2)); // Set mode register
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <intiJoystick+0x128>)
 80033ca:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <intiJoystick+0x128>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <intiJoystick+0x128>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4a09      	ldr	r2, [pc, #36]	; (80033fc <intiJoystick+0x128>)
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (0 * 2)); // Set push/pull register
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <intiJoystick+0x128>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a06      	ldr	r2, [pc, #24]	; (80033fc <intiJoystick+0x128>)
 80033e2:	f043 0302 	orr.w	r3, r3, #2
 80033e6:	60d3      	str	r3, [r2, #12]
	// 0x00 - No pull
	// 0x01 - Pull-up
	// 0x02 - Pull-down

}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	48000800 	.word	0x48000800
 80033fc:	48000400 	.word	0x48000400

08003400 <readJoystick>:


void readJoystick(){
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
	int32_t a = GPIOC->IDR & (0x0001 << 0); //Read from pin PCx - right
 8003406:	4b26      	ldr	r3, [pc, #152]	; (80034a0 <readJoystick+0xa0>)
 8003408:	8a1b      	ldrh	r3, [r3, #16]
 800340a:	b29b      	uxth	r3, r3
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	607b      	str	r3, [r7, #4]
	int32_t b = GPIOA->IDR & (0x0001 << 4); //Read from pin PCx - up
 8003412:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003416:	8a1b      	ldrh	r3, [r3, #16]
 8003418:	b29b      	uxth	r3, r3
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	617b      	str	r3, [r7, #20]
	int32_t c = GPIOB->IDR & (0x0001 << 5); //Read from pin PCx - center
 8003420:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <readJoystick+0xa4>)
 8003422:	8a1b      	ldrh	r3, [r3, #16]
 8003424:	b29b      	uxth	r3, r3
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	613b      	str	r3, [r7, #16]
	int32_t d = GPIOC->IDR & (0x0001 << 1); //Read from pin PCx - left
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <readJoystick+0xa0>)
 800342e:	8a1b      	ldrh	r3, [r3, #16]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	60fb      	str	r3, [r7, #12]
	int32_t e = GPIOB->IDR & (0x0001 << 0); //Read from pin PCx - down
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <readJoystick+0xa4>)
 800343a:	8a1b      	ldrh	r3, [r3, #16]
 800343c:	b29b      	uxth	r3, r3
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	60bb      	str	r3, [r7, #8]

	if(b){b = 1;}
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <readJoystick+0x4e>
 800344a:	2301      	movs	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
	if(c){c = 1;}
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <readJoystick+0x58>
 8003454:	2301      	movs	r3, #1
 8003456:	613b      	str	r3, [r7, #16]
	if(d){d = 1;}
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <readJoystick+0x62>
 800345e:	2301      	movs	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
	if(e){e = 1;}
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <readJoystick+0x6c>
 8003468:	2301      	movs	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]

	joy.right 	= a;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	b25a      	sxtb	r2, r3
 8003470:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <readJoystick+0xa8>)
 8003472:	70da      	strb	r2, [r3, #3]
	joy.up 		= b;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	b25a      	sxtb	r2, r3
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <readJoystick+0xa8>)
 800347a:	701a      	strb	r2, [r3, #0]
	joy.center	= c;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	b25a      	sxtb	r2, r3
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <readJoystick+0xa8>)
 8003482:	711a      	strb	r2, [r3, #4]
	joy.left	= d;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	b25a      	sxtb	r2, r3
 8003488:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <readJoystick+0xa8>)
 800348a:	709a      	strb	r2, [r3, #2]
	joy.down 	= e;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	b25a      	sxtb	r2, r3
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <readJoystick+0xa8>)
 8003492:	705a      	strb	r2, [r3, #1]

}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	48000800 	.word	0x48000800
 80034a4:	48000400 	.word	0x48000400
 80034a8:	200001e0 	.word	0x200001e0

080034ac <copyJoystick>:

void copyJoystick() {
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
	CJoy.up = joy.up;
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <copyJoystick+0x40>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b25a      	sxtb	r2, r3
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <copyJoystick+0x44>)
 80034b8:	701a      	strb	r2, [r3, #0]
	CJoy.down = joy.down;
 80034ba:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <copyJoystick+0x40>)
 80034bc:	785b      	ldrb	r3, [r3, #1]
 80034be:	b25a      	sxtb	r2, r3
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <copyJoystick+0x44>)
 80034c2:	705a      	strb	r2, [r3, #1]
	CJoy.left = joy.left;
 80034c4:	4b09      	ldr	r3, [pc, #36]	; (80034ec <copyJoystick+0x40>)
 80034c6:	789b      	ldrb	r3, [r3, #2]
 80034c8:	b25a      	sxtb	r2, r3
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <copyJoystick+0x44>)
 80034cc:	709a      	strb	r2, [r3, #2]
	CJoy.right = joy.right;
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <copyJoystick+0x40>)
 80034d0:	78db      	ldrb	r3, [r3, #3]
 80034d2:	b25a      	sxtb	r2, r3
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <copyJoystick+0x44>)
 80034d6:	70da      	strb	r2, [r3, #3]
	CJoy.center = joy.center;
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <copyJoystick+0x40>)
 80034da:	791b      	ldrb	r3, [r3, #4]
 80034dc:	b25a      	sxtb	r2, r3
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <copyJoystick+0x44>)
 80034e0:	711a      	strb	r2, [r3, #4]
}
 80034e2:	bf00      	nop
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	200001e0 	.word	0x200001e0
 80034f0:	200001e8 	.word	0x200001e8

080034f4 <initLed>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi_S.h"

void initLed(){
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
	// Set pin PA9 to output - BLUE LED
	GPIOA->OSPEEDR &= ~(0x00000003 << (9 * 2)); // Clear speed register
 80034f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003502:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003506:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (9 * 2)); // set speed register
 8003508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003516:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOA->OTYPER &= ~(0x0001 << (9 * 1)); // Clear output type register
 8003518:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800351c:	889b      	ldrh	r3, [r3, #4]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003528:	b29b      	uxth	r3, r3
 800352a:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER |= (0x0000 << (9)); // Set output type register
 800352c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003530:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003534:	8892      	ldrh	r2, [r2, #4]
 8003536:	b292      	uxth	r2, r2
 8003538:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOA->MODER &= ~(0x00000003 << (9 * 2)); // Clear mode register
 800353a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003544:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003548:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000001 << (9 * 2)); // Set mode register
 800354a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PC7 to output - GREEN LED
	GPIOC->OSPEEDR &= ~(0x00000003 << (7 * 2)); // Clear speed register
 800355a:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <initLed+0x104>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <initLed+0x104>)
 8003560:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003564:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (7 * 2)); // set speed register
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <initLed+0x104>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4a23      	ldr	r2, [pc, #140]	; (80035f8 <initLed+0x104>)
 800356c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003570:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOC->OTYPER &= ~(0x0001 << (7 * 1)); // Clear output type register
 8003572:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <initLed+0x104>)
 8003574:	889b      	ldrh	r3, [r3, #4]
 8003576:	b29b      	uxth	r3, r3
 8003578:	4a1f      	ldr	r2, [pc, #124]	; (80035f8 <initLed+0x104>)
 800357a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800357e:	b29b      	uxth	r3, r3
 8003580:	8093      	strh	r3, [r2, #4]
	GPIOC->OTYPER |= (0x0000 << (7)); // Set output type register
 8003582:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <initLed+0x104>)
 8003584:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <initLed+0x104>)
 8003586:	8892      	ldrh	r2, [r2, #4]
 8003588:	b292      	uxth	r2, r2
 800358a:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOC->MODER &= ~(0x00000003 << (7 * 2)); // Clear mode register
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <initLed+0x104>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <initLed+0x104>)
 8003592:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003596:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000001 << (7 * 2)); // Set mode register
 8003598:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <initLed+0x104>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <initLed+0x104>)
 800359e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a2:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PB4 to output - RED LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (4 * 2)); // Clear speed register
 80035a4:	4b15      	ldr	r3, [pc, #84]	; (80035fc <initLed+0x108>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <initLed+0x108>)
 80035aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ae:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (4 * 2)); // set speed register
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <initLed+0x108>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4a11      	ldr	r2, [pc, #68]	; (80035fc <initLed+0x108>)
 80035b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ba:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (4 * 1)); // Clear output type register
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <initLed+0x108>)
 80035be:	889b      	ldrh	r3, [r3, #4]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <initLed+0x108>)
 80035c4:	f023 0310 	bic.w	r3, r3, #16
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (4)); // Set output type register
 80035cc:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <initLed+0x108>)
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <initLed+0x108>)
 80035d0:	8892      	ldrh	r2, [r2, #4]
 80035d2:	b292      	uxth	r2, r2
 80035d4:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <initLed+0x108>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a08      	ldr	r2, [pc, #32]	; (80035fc <initLed+0x108>)
 80035dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e0:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000001 << (4 * 2)); // Set mode register
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <initLed+0x108>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a05      	ldr	r2, [pc, #20]	; (80035fc <initLed+0x108>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
}
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	48000800 	.word	0x48000800
 80035fc:	48000400 	.word	0x48000400

08003600 <writeLed>:


void writeLed(){
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0

	// Right - Blue
	if(led.blu){
 8003604:	4b1f      	ldr	r3, [pc, #124]	; (8003684 <writeLed+0x84>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <writeLed+0x1c>
		GPIOA->ODR &= (0x0000 << 9); //Set pin PA9 to low - on
 800360c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003610:	8a9b      	ldrh	r3, [r3, #20]
 8003612:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003616:	2200      	movs	r2, #0
 8003618:	829a      	strh	r2, [r3, #20]
 800361a:	e009      	b.n	8003630 <writeLed+0x30>
	}
	else{
		GPIOA->ODR |= (0x0001 << 9); //Set pin PA9 to high - off
 800361c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003620:	8a9b      	ldrh	r3, [r3, #20]
 8003622:	b29b      	uxth	r3, r3
 8003624:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800362c:	b29b      	uxth	r3, r3
 800362e:	8293      	strh	r3, [r2, #20]
	}


	// Up - Green
	if(led.gre){
 8003630:	4b14      	ldr	r3, [pc, #80]	; (8003684 <writeLed+0x84>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <writeLed+0x44>
		GPIOC->ODR &= (0x0000 << 7); //Set pin PC7 to low - on
 8003638:	4b13      	ldr	r3, [pc, #76]	; (8003688 <writeLed+0x88>)
 800363a:	8a9b      	ldrh	r3, [r3, #20]
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <writeLed+0x88>)
 800363e:	2200      	movs	r2, #0
 8003640:	829a      	strh	r2, [r3, #20]
 8003642:	e007      	b.n	8003654 <writeLed+0x54>
	}
	else{
		GPIOC->ODR |= (0x0001 << 7); //Set pin PC7 to high - off
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <writeLed+0x88>)
 8003646:	8a9b      	ldrh	r3, [r3, #20]
 8003648:	b29b      	uxth	r3, r3
 800364a:	4a0f      	ldr	r2, [pc, #60]	; (8003688 <writeLed+0x88>)
 800364c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003650:	b29b      	uxth	r3, r3
 8003652:	8293      	strh	r3, [r2, #20]
	}


	// Left - Red
	if(led.gre){
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <writeLed+0x84>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <writeLed+0x68>
		GPIOB->ODR &= (0x0000 << 4); //Set pin PB4 to low - on
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <writeLed+0x8c>)
 800365e:	8a9b      	ldrh	r3, [r3, #20]
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <writeLed+0x8c>)
 8003662:	2200      	movs	r2, #0
 8003664:	829a      	strh	r2, [r3, #20]
	}
	else{
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
	}

}
 8003666:	e007      	b.n	8003678 <writeLed+0x78>
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <writeLed+0x8c>)
 800366a:	8a9b      	ldrh	r3, [r3, #20]
 800366c:	b29b      	uxth	r3, r3
 800366e:	4a07      	ldr	r2, [pc, #28]	; (800368c <writeLed+0x8c>)
 8003670:	f043 0310 	orr.w	r3, r3, #16
 8003674:	b29b      	uxth	r3, r3
 8003676:	8293      	strh	r3, [r2, #20]
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	200001c0 	.word	0x200001c0
 8003688:	48000800 	.word	0x48000800
 800368c:	48000400 	.word	0x48000400

08003690 <fgcolor>:
#include "ansi_S.h"

void fgcolor(uint8_t foreground) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
	 4        Blue            12       Light Blue
	 5        Purple          13       Light Purple
	 6        Cyan            14       Light Cyan
	 7        Light Gray      15       White
	 */
	uint8_t type = 22;             // normal text
 800369a:	2316      	movs	r3, #22
 800369c:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	2b07      	cmp	r3, #7
 80036a2:	d904      	bls.n	80036ae <fgcolor+0x1e>
		type = 1;                // bold text
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	3b08      	subs	r3, #8
 80036ac:	71fb      	strb	r3, [r7, #7]
	}
	printf("%c[%d;%dm", ESC, type, foreground + 30);
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	331e      	adds	r3, #30
 80036b4:	211b      	movs	r1, #27
 80036b6:	4803      	ldr	r0, [pc, #12]	; (80036c4 <fgcolor+0x34>)
 80036b8:	f001 f8da 	bl	8004870 <iprintf>
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	080059a8 	.word	0x080059a8

080036c8 <bgcolor>:

void bgcolor(uint8_t background) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	71fb      	strb	r3, [r7, #7]
	 4        Blue
	 5        Purple
	 6        Cyan
	 7        Gray
	 */
	printf("%c[%dm", ESC, background + 40);
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	3328      	adds	r3, #40	; 0x28
 80036d6:	461a      	mov	r2, r3
 80036d8:	211b      	movs	r1, #27
 80036da:	4803      	ldr	r0, [pc, #12]	; (80036e8 <bgcolor+0x20>)
 80036dc:	f001 f8c8 	bl	8004870 <iprintf>
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	080059b4 	.word	0x080059b4

080036ec <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
}

void clrscr() {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 80036f0:	4a07      	ldr	r2, [pc, #28]	; (8003710 <clrscr+0x24>)
 80036f2:	211b      	movs	r1, #27
 80036f4:	4807      	ldr	r0, [pc, #28]	; (8003714 <clrscr+0x28>)
 80036f6:	f001 f8bb 	bl	8004870 <iprintf>
	printf("%c[%s", ESC, "3J");
 80036fa:	4a07      	ldr	r2, [pc, #28]	; (8003718 <clrscr+0x2c>)
 80036fc:	211b      	movs	r1, #27
 80036fe:	4805      	ldr	r0, [pc, #20]	; (8003714 <clrscr+0x28>)
 8003700:	f001 f8b6 	bl	8004870 <iprintf>
	gotoxy(1,1);
 8003704:	2101      	movs	r1, #1
 8003706:	2001      	movs	r0, #1
 8003708:	f000 f808 	bl	800371c <gotoxy>
}
 800370c:	bf00      	nop
 800370e:	bd80      	pop	{r7, pc}
 8003710:	080059d4 	.word	0x080059d4
 8003714:	080059d8 	.word	0x080059d8
 8003718:	080059e0 	.word	0x080059e0

0800371c <gotoxy>:

void clreol() {
	printf("%c[%s", ESC, "2k");
}

void gotoxy(int c, int r) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", ESC, r, c);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	211b      	movs	r1, #27
 800372c:	4803      	ldr	r0, [pc, #12]	; (800373c <gotoxy+0x20>)
 800372e:	f001 f89f 	bl	8004870 <iprintf>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	080059e8 	.word	0x080059e8

08003740 <blink>:
	} else {
		printf("%c[%d%c", ESC, 24, 'm');
	}
}

void blink(int state) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	if (state) {
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <blink+0x1a>
		//printf("\x1b[5m");
		printf("%c[%dm", ESC, 5);
 800374e:	2205      	movs	r2, #5
 8003750:	211b      	movs	r1, #27
 8003752:	4806      	ldr	r0, [pc, #24]	; (800376c <blink+0x2c>)
 8003754:	f001 f88c 	bl	8004870 <iprintf>
	} else {
		//printf("\x1b[25m");
		printf("%c[%dm", ESC, 25);
	}
}
 8003758:	e004      	b.n	8003764 <blink+0x24>
		printf("%c[%dm", ESC, 25);
 800375a:	2219      	movs	r2, #25
 800375c:	211b      	movs	r1, #27
 800375e:	4803      	ldr	r0, [pc, #12]	; (800376c <blink+0x2c>)
 8003760:	f001 f886 	bl	8004870 <iprintf>
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	080059b4 	.word	0x080059b4

08003770 <main>:
#include "joystick.h"
#include "timer.h"


int main(void)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b095      	sub	sp, #84	; 0x54
 8003774:	af02      	add	r7, sp, #8
	uart_init(250000);
 8003776:	48d1      	ldr	r0, [pc, #836]	; (8003abc <main+0x34c>)
 8003778:	f7fd f92c 	bl	80009d4 <uart_init>
	clrscr();
 800377c:	f7ff ffb6 	bl	80036ec <clrscr>
	intiJoystick();
 8003780:	f7ff fda8 	bl	80032d4 <intiJoystick>
	startWindow(1,1,184,58);
 8003784:	233a      	movs	r3, #58	; 0x3a
 8003786:	22b8      	movs	r2, #184	; 0xb8
 8003788:	2101      	movs	r1, #1
 800378a:	2001      	movs	r0, #1
 800378c:	f7fd fa3c 	bl	8000c08 <startWindow>
	initLed();
 8003790:	f7ff feb0 	bl	80034f4 <initLed>
	initTimer();
 8003794:	f000 ff5c 	bl	8004650 <initTimer>
	refreshRate = 5;
 8003798:	4bc9      	ldr	r3, [pc, #804]	; (8003ac0 <main+0x350>)
 800379a:	2205      	movs	r2, #5
 800379c:	601a      	str	r2, [r3, #0]
	duck_t duck1;
	duck_t duck2;
	spaceship_t SS;
	spaceship(2,27,91,31);
 800379e:	231f      	movs	r3, #31
 80037a0:	225b      	movs	r2, #91	; 0x5b
 80037a2:	211b      	movs	r1, #27
 80037a4:	2002      	movs	r0, #2
 80037a6:	f7fd fa85 	bl	8000cb4 <spaceship>
	playerInSpaceR(1,23,24);
 80037aa:	2218      	movs	r2, #24
 80037ac:	2117      	movs	r1, #23
 80037ae:	2001      	movs	r0, #1
 80037b0:	f7fd ffc2 	bl	8001738 <playerInSpaceR>
	playerInSpaceUSDR(2,23,32);
 80037b4:	2220      	movs	r2, #32
 80037b6:	2117      	movs	r1, #23
 80037b8:	2002      	movs	r0, #2
 80037ba:	f7fe f9bf 	bl	8001b3c <playerInSpaceUSDR>
	SS.ud = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	753b      	strb	r3, [r7, #20]
	duck1.rl=0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	777b      	strb	r3, [r7, #29]
	duck1.ud=0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	773b      	strb	r3, [r7, #28]
	duck2.rl = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	767b      	strb	r3, [r7, #25]
	duck2.ud = 8;
 80037ce:	2308      	movs	r3, #8
 80037d0:	763b      	strb	r3, [r7, #24]

	tid.min = 10;
 80037d2:	4bbc      	ldr	r3, [pc, #752]	; (8003ac4 <main+0x354>)
 80037d4:	220a      	movs	r2, #10
 80037d6:	701a      	strb	r2, [r3, #0]
	tid.sek = 10;
 80037d8:	4bba      	ldr	r3, [pc, #744]	; (8003ac4 <main+0x354>)
 80037da:	220a      	movs	r2, #10
 80037dc:	705a      	strb	r2, [r3, #1]
	tid.mil = 0;
 80037de:	4bb9      	ldr	r3, [pc, #740]	; (8003ac4 <main+0x354>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	709a      	strb	r2, [r3, #2]
	tid.state = 1;
 80037e4:	4bb7      	ldr	r3, [pc, #732]	; (8003ac4 <main+0x354>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	70da      	strb	r2, [r3, #3]

	int i=0, keyW=0, keyA=0, keyS=0, keyD=0, keyE=0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
 80037f2:	2300      	movs	r3, #0
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	2300      	movs	r3, #0
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
	uart_clear();
 8003802:	f7fd f8c5 	bl	8000990 <uart_clear>
	char random;
	int buffer_lenght;

	int ud1 =0, lr1 =0, ud2 = 8, lr2 = 0, a = 0, b=0;
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	2308      	movs	r3, #8
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	2300      	movs	r3, #0
 8003818:	643b      	str	r3, [r7, #64]	; 0x40
 800381a:	2300      	movs	r3, #0
 800381c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(1){

		readJoystick();
 800381e:	f7ff fdef 	bl	8003400 <readJoystick>
		gotoxy(10,10);
 8003822:	210a      	movs	r1, #10
 8003824:	200a      	movs	r0, #10
 8003826:	f7ff ff79 	bl	800371c <gotoxy>
		printf("Duck1 ud:%d  Duck1 rl:%d  Duck2 ud:%d Duck2 rl:%d   SS.ud = %d",duck1.ud, duck1.rl, duck2.ud, duck2.rl,SS.ud);
 800382a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800382e:	4619      	mov	r1, r3
 8003830:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003834:	4618      	mov	r0, r3
 8003836:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800383a:	461c      	mov	r4, r3
 800383c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003840:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003844:	9201      	str	r2, [sp, #4]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	4623      	mov	r3, r4
 800384a:	4602      	mov	r2, r0
 800384c:	489e      	ldr	r0, [pc, #632]	; (8003ac8 <main+0x358>)
 800384e:	f001 f80f 	bl	8004870 <iprintf>

		fire(2,27+SS.ud,91,31+SS.ud);
 8003852:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003856:	f103 011b 	add.w	r1, r3, #27
 800385a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800385e:	331f      	adds	r3, #31
 8003860:	225b      	movs	r2, #91	; 0x5b
 8003862:	2002      	movs	r0, #2
 8003864:	f7fd fc02 	bl	800106c <fire>

		if(duck1.ud == SS.ud) {
 8003868:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800386c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003870:	429a      	cmp	r2, r3
 8003872:	d177      	bne.n	8003964 <main+0x1f4>
			goDuckUP1(1,22,24,&ud1,&lr1,&duck1);
 8003874:	f107 0210 	add.w	r2, r7, #16
 8003878:	f107 031c 	add.w	r3, r7, #28
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	f107 030c 	add.w	r3, r7, #12
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	2218      	movs	r2, #24
 8003888:	2116      	movs	r1, #22
 800388a:	2001      	movs	r0, #1
 800388c:	f7fe fa04 	bl	8001c98 <goDuckUP1>
			if (duck1.rl == 5 && duck2.ud == SS.ud && joy.up){
 8003890:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003894:	2b05      	cmp	r3, #5
 8003896:	d11d      	bne.n	80038d4 <main+0x164>
 8003898:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800389c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d117      	bne.n	80038d4 <main+0x164>
 80038a4:	4b89      	ldr	r3, [pc, #548]	; (8003acc <main+0x35c>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b25b      	sxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <main+0x164>
				key.up = 1;
 80038ae:	4b88      	ldr	r3, [pc, #544]	; (8003ad0 <main+0x360>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
				goDuckUP2(2,22,24,&ud2,&lr2,&duck2);
 80038b4:	f107 0208 	add.w	r2, r7, #8
 80038b8:	f107 0318 	add.w	r3, r7, #24
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	4613      	mov	r3, r2
 80038c4:	2218      	movs	r2, #24
 80038c6:	2116      	movs	r1, #22
 80038c8:	2002      	movs	r0, #2
 80038ca:	f7fe fb5b 	bl	8001f84 <goDuckUP2>
				key.up = 0;
 80038ce:	4b80      	ldr	r3, [pc, #512]	; (8003ad0 <main+0x360>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
			}
			if (duck1.rl == 5 && duck2.ud == SS.ud + 4 && joy.up){
 80038d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d11f      	bne.n	800391c <main+0x1ac>
 80038dc:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80038e0:	461a      	mov	r2, r3
 80038e2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80038e6:	3304      	adds	r3, #4
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d117      	bne.n	800391c <main+0x1ac>
 80038ec:	4b77      	ldr	r3, [pc, #476]	; (8003acc <main+0x35c>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d012      	beq.n	800391c <main+0x1ac>
				key.up = 1;
 80038f6:	4b76      	ldr	r3, [pc, #472]	; (8003ad0 <main+0x360>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
				goDuckMIDMove2(2,22,24,&ud2,&lr2,&duck2);
 80038fc:	f107 0208 	add.w	r2, r7, #8
 8003900:	f107 0318 	add.w	r3, r7, #24
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	1d3b      	adds	r3, r7, #4
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	2218      	movs	r2, #24
 800390e:	2116      	movs	r1, #22
 8003910:	2002      	movs	r0, #2
 8003912:	f7fe fe61 	bl	80025d8 <goDuckMIDMove2>
				key.up = 0;
 8003916:	4b6e      	ldr	r3, [pc, #440]	; (8003ad0 <main+0x360>)
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
			}
			if (duck1.rl == 5 && duck2.ud == SS.ud + 8 && joy.up){
 800391c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003920:	2b05      	cmp	r3, #5
 8003922:	d11f      	bne.n	8003964 <main+0x1f4>
 8003924:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003928:	461a      	mov	r2, r3
 800392a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800392e:	3308      	adds	r3, #8
 8003930:	429a      	cmp	r2, r3
 8003932:	d117      	bne.n	8003964 <main+0x1f4>
 8003934:	4b65      	ldr	r3, [pc, #404]	; (8003acc <main+0x35c>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	b25b      	sxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d012      	beq.n	8003964 <main+0x1f4>
				key.up = 1;
 800393e:	4b64      	ldr	r3, [pc, #400]	; (8003ad0 <main+0x360>)
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
				goDuckUSDMove2(2,22,24,&ud2,&lr2,&duck2);
 8003944:	f107 0208 	add.w	r2, r7, #8
 8003948:	f107 0318 	add.w	r3, r7, #24
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	2218      	movs	r2, #24
 8003956:	2116      	movs	r1, #22
 8003958:	2002      	movs	r0, #2
 800395a:	f7ff f8b1 	bl	8002ac0 <goDuckUSDMove2>
				key.up = 0;
 800395e:	4b5c      	ldr	r3, [pc, #368]	; (8003ad0 <main+0x360>)
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
			}
		}

		if(duck1.ud == SS.ud + 4 || duck1.ud == SS.ud - 4){
 8003964:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003968:	461a      	mov	r2, r3
 800396a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800396e:	3304      	adds	r3, #4
 8003970:	429a      	cmp	r2, r3
 8003972:	d007      	beq.n	8003984 <main+0x214>
 8003974:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003978:	461a      	mov	r2, r3
 800397a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800397e:	3b04      	subs	r3, #4
 8003980:	429a      	cmp	r2, r3
 8003982:	d121      	bne.n	80039c8 <main+0x258>
		goDuckMID1(1,22,24,&ud1,&lr1,&duck1);
 8003984:	f107 0210 	add.w	r2, r7, #16
 8003988:	f107 031c 	add.w	r3, r7, #28
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	f107 030c 	add.w	r3, r7, #12
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	2218      	movs	r2, #24
 8003998:	2116      	movs	r1, #22
 800399a:	2001      	movs	r0, #1
 800399c:	f7fe fc2a 	bl	80021f4 <goDuckMID1>
		if(duck1.rl == 55 && joy.right && !CJoy.right){
 80039a0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80039a4:	2b37      	cmp	r3, #55	; 0x37
 80039a6:	d10f      	bne.n	80039c8 <main+0x258>
 80039a8:	4b48      	ldr	r3, [pc, #288]	; (8003acc <main+0x35c>)
 80039aa:	78db      	ldrb	r3, [r3, #3]
 80039ac:	b25b      	sxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <main+0x258>
 80039b2:	4b48      	ldr	r3, [pc, #288]	; (8003ad4 <main+0x364>)
 80039b4:	78db      	ldrb	r3, [r3, #3]
 80039b6:	b25b      	sxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <main+0x258>
			canonFire(2,SS.ud);
 80039bc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80039c0:	4619      	mov	r1, r3
 80039c2:	2002      	movs	r0, #2
 80039c4:	f7ff f95b 	bl	8002c7e <canonFire>
		}
		}

		if(duck1.ud == SS.ud+8) {
 80039c8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80039cc:	461a      	mov	r2, r3
 80039ce:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80039d2:	3308      	adds	r3, #8
 80039d4:	429a      	cmp	r2, r3
 80039d6:	f040 8088 	bne.w	8003aea <main+0x37a>
		goDuckUSD1(1,22,24,&ud1,&lr1,&duck1);
 80039da:	f107 0210 	add.w	r2, r7, #16
 80039de:	f107 031c 	add.w	r3, r7, #28
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	f107 030c 	add.w	r3, r7, #12
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	2218      	movs	r2, #24
 80039ee:	2116      	movs	r1, #22
 80039f0:	2001      	movs	r0, #1
 80039f2:	f7fe fe73 	bl	80026dc <goDuckUSD1>
		if (duck1.rl == 5 && duck2.ud == SS.ud && joy.up){
 80039f6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d11d      	bne.n	8003a3a <main+0x2ca>
 80039fe:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8003a02:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d117      	bne.n	8003a3a <main+0x2ca>
 8003a0a:	4b30      	ldr	r3, [pc, #192]	; (8003acc <main+0x35c>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d012      	beq.n	8003a3a <main+0x2ca>
			key.down = 1;
 8003a14:	4b2e      	ldr	r3, [pc, #184]	; (8003ad0 <main+0x360>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	705a      	strb	r2, [r3, #1]
			goDuckUPMove2(2,22,24,&ud2,&lr2,&duck2);
 8003a1a:	f107 0208 	add.w	r2, r7, #8
 8003a1e:	f107 0318 	add.w	r3, r7, #24
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	2218      	movs	r2, #24
 8003a2c:	2116      	movs	r1, #22
 8003a2e:	2002      	movs	r0, #2
 8003a30:	f7fe fb98 	bl	8002164 <goDuckUPMove2>
			key.down = 0;
 8003a34:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <main+0x360>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	705a      	strb	r2, [r3, #1]
		}
		if (duck1.rl == 5 && duck2.ud == SS.ud + 4 && joy.up){
 8003a3a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d11f      	bne.n	8003a82 <main+0x312>
 8003a42:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d117      	bne.n	8003a82 <main+0x312>
 8003a52:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <main+0x35c>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d012      	beq.n	8003a82 <main+0x312>
			key.down = 1;
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <main+0x360>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	705a      	strb	r2, [r3, #1]
			goDuckMIDMove2(2,22,24,&ud2,&lr2,&duck2);
 8003a62:	f107 0208 	add.w	r2, r7, #8
 8003a66:	f107 0318 	add.w	r3, r7, #24
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	2218      	movs	r2, #24
 8003a74:	2116      	movs	r1, #22
 8003a76:	2002      	movs	r0, #2
 8003a78:	f7fe fdae 	bl	80025d8 <goDuckMIDMove2>
			key.down = 0;
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <main+0x360>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	705a      	strb	r2, [r3, #1]
		}
		if (duck1.rl == 5 && duck2.ud == SS.ud + 8 && joy.up){
 8003a82:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	d12f      	bne.n	8003aea <main+0x37a>
 8003a8a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003a94:	3308      	adds	r3, #8
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d127      	bne.n	8003aea <main+0x37a>
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <main+0x35c>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b25b      	sxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d022      	beq.n	8003aea <main+0x37a>
		key.down = 1;
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <main+0x360>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	705a      	strb	r2, [r3, #1]
		goDuckUSDMove2(2,22,24,&ud2,&lr2,&duck2);
 8003aaa:	f107 0208 	add.w	r2, r7, #8
 8003aae:	f107 0318 	add.w	r3, r7, #24
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	1d3b      	adds	r3, r7, #4
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	e00e      	b.n	8003ad8 <main+0x368>
 8003aba:	bf00      	nop
 8003abc:	0003d090 	.word	0x0003d090
 8003ac0:	200001dc 	.word	0x200001dc
 8003ac4:	200001cc 	.word	0x200001cc
 8003ac8:	080059fc 	.word	0x080059fc
 8003acc:	200001e0 	.word	0x200001e0
 8003ad0:	200001d4 	.word	0x200001d4
 8003ad4:	200001e8 	.word	0x200001e8
 8003ad8:	4613      	mov	r3, r2
 8003ada:	2218      	movs	r2, #24
 8003adc:	2116      	movs	r1, #22
 8003ade:	2002      	movs	r0, #2
 8003ae0:	f7fe ffee 	bl	8002ac0 <goDuckUSDMove2>
		key.down = 0;
 8003ae4:	4bcb      	ldr	r3, [pc, #812]	; (8003e14 <main+0x6a4>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	705a      	strb	r2, [r3, #1]
		}
		}

		if(duck1.rl == 5 && joy.up && !CJoy.up && SS.ud == duck1.ud+1 & SS.ud != -20){
 8003aea:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d148      	bne.n	8003b84 <main+0x414>
 8003af2:	4bc9      	ldr	r3, [pc, #804]	; (8003e18 <main+0x6a8>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b25b      	sxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d043      	beq.n	8003b84 <main+0x414>
 8003afc:	4bc7      	ldr	r3, [pc, #796]	; (8003e1c <main+0x6ac>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b25b      	sxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d13e      	bne.n	8003b84 <main+0x414>
 8003b06:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003b10:	3301      	adds	r3, #1
 8003b12:	429a      	cmp	r2, r3
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003b20:	f113 0f14 	cmn.w	r3, #20
 8003b24:	bf14      	ite	ne
 8003b26:	2301      	movne	r3, #1
 8003b28:	2300      	moveq	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d027      	beq.n	8003b84 <main+0x414>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8003b34:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003b38:	f103 011b 	add.w	r1, r3, #27
 8003b3c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003b40:	331f      	adds	r3, #31
 8003b42:	225b      	movs	r2, #91	; 0x5b
 8003b44:	2002      	movs	r0, #2
 8003b46:	f7fd f9e3 	bl	8000f10 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8003b4a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003b4e:	f103 011b 	add.w	r1, r3, #27
 8003b52:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003b56:	331f      	adds	r3, #31
 8003b58:	225b      	movs	r2, #91	; 0x5b
 8003b5a:	2002      	movs	r0, #2
 8003b5c:	f7fd fc66 	bl	800142c <fireDelete>
		SS.ud -= 1;
 8003b60:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	b25b      	sxtb	r3, r3
 8003b6c:	753b      	strb	r3, [r7, #20]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 8003b6e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003b72:	f103 011b 	add.w	r1, r3, #27
 8003b76:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003b7a:	331f      	adds	r3, #31
 8003b7c:	225b      	movs	r2, #91	; 0x5b
 8003b7e:	2002      	movs	r0, #2
 8003b80:	f7fd f898 	bl	8000cb4 <spaceship>
		}

		if(duck1.rl == 5 && joy.up && !CJoy.up && SS.ud == duck1.ud-9 && SS.ud != 21){
 8003b84:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d13d      	bne.n	8003c08 <main+0x498>
 8003b8c:	4ba2      	ldr	r3, [pc, #648]	; (8003e18 <main+0x6a8>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b25b      	sxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d038      	beq.n	8003c08 <main+0x498>
 8003b96:	4ba1      	ldr	r3, [pc, #644]	; (8003e1c <main+0x6ac>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	b25b      	sxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d133      	bne.n	8003c08 <main+0x498>
 8003ba0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003baa:	3b09      	subs	r3, #9
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d12b      	bne.n	8003c08 <main+0x498>
 8003bb0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003bb4:	2b15      	cmp	r3, #21
 8003bb6:	d027      	beq.n	8003c08 <main+0x498>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8003bb8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003bbc:	f103 011b 	add.w	r1, r3, #27
 8003bc0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003bc4:	331f      	adds	r3, #31
 8003bc6:	225b      	movs	r2, #91	; 0x5b
 8003bc8:	2002      	movs	r0, #2
 8003bca:	f7fd f9a1 	bl	8000f10 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8003bce:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003bd2:	f103 011b 	add.w	r1, r3, #27
 8003bd6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003bda:	331f      	adds	r3, #31
 8003bdc:	225b      	movs	r2, #91	; 0x5b
 8003bde:	2002      	movs	r0, #2
 8003be0:	f7fd fc24 	bl	800142c <fireDelete>
		SS.ud += 1;
 8003be4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	b25b      	sxtb	r3, r3
 8003bf0:	753b      	strb	r3, [r7, #20]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 8003bf2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003bf6:	f103 011b 	add.w	r1, r3, #27
 8003bfa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003bfe:	331f      	adds	r3, #31
 8003c00:	225b      	movs	r2, #91	; 0x5b
 8003c02:	2002      	movs	r0, #2
 8003c04:	f7fd f856 	bl	8000cb4 <spaceship>
		}

		if (joy.up && duck1.rl != 5 && duck1.ud == SS.ud -1) {
 8003c08:	4b83      	ldr	r3, [pc, #524]	; (8003e18 <main+0x6a8>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	b25b      	sxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d025      	beq.n	8003c5e <main+0x4ee>
 8003c12:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	d021      	beq.n	8003c5e <main+0x4ee>
 8003c1a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d119      	bne.n	8003c5e <main+0x4ee>
		duckExplotion(22,24,&ud1,&lr1);
 8003c2a:	f107 030c 	add.w	r3, r7, #12
 8003c2e:	f107 0210 	add.w	r2, r7, #16
 8003c32:	2118      	movs	r1, #24
 8003c34:	2016      	movs	r0, #22
 8003c36:	f7ff f96b 	bl	8002f10 <duckExplotion>
		playerInSpaceR(1,23,24+SS.ud);
 8003c3a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c3e:	3318      	adds	r3, #24
 8003c40:	461a      	mov	r2, r3
 8003c42:	2117      	movs	r1, #23
 8003c44:	2001      	movs	r0, #1
 8003c46:	f7fd fd77 	bl	8001738 <playerInSpaceR>
		ud1 = SS.ud;
 8003c4a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c4e:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
		duck1.ud = SS.ud;
 8003c54:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c58:	773b      	strb	r3, [r7, #28]
		duck1.rl = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	777b      	strb	r3, [r7, #29]
		}
		if (duck1.rl == 65){
 8003c5e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003c62:	2b41      	cmp	r3, #65	; 0x41
 8003c64:	d119      	bne.n	8003c9a <main+0x52a>
		duckExplotion(22,24,&ud1,&lr1);
 8003c66:	f107 030c 	add.w	r3, r7, #12
 8003c6a:	f107 0210 	add.w	r2, r7, #16
 8003c6e:	2118      	movs	r1, #24
 8003c70:	2016      	movs	r0, #22
 8003c72:	f7ff f94d 	bl	8002f10 <duckExplotion>
		playerInSpaceR(1,23,24+SS.ud);
 8003c76:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c7a:	3318      	adds	r3, #24
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2117      	movs	r1, #23
 8003c80:	2001      	movs	r0, #1
 8003c82:	f7fd fd59 	bl	8001738 <playerInSpaceR>
		ud1 = SS.ud;
 8003c86:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c8a:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
		duck1.ud = SS.ud;
 8003c90:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c94:	773b      	strb	r3, [r7, #28]
		duck1.rl = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	777b      	strb	r3, [r7, #29]
		}
		if (joy.up && duck1.rl != 5 && duck1.ud == SS.ud +9) {
 8003c9a:	4b5f      	ldr	r3, [pc, #380]	; (8003e18 <main+0x6a8>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b25b      	sxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d025      	beq.n	8003cf0 <main+0x580>
 8003ca4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d021      	beq.n	8003cf0 <main+0x580>
 8003cac:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003cb6:	3309      	adds	r3, #9
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d119      	bne.n	8003cf0 <main+0x580>
		duckExplotion(22,24,&ud1,&lr1);
 8003cbc:	f107 030c 	add.w	r3, r7, #12
 8003cc0:	f107 0210 	add.w	r2, r7, #16
 8003cc4:	2118      	movs	r1, #24
 8003cc6:	2016      	movs	r0, #22
 8003cc8:	f7ff f922 	bl	8002f10 <duckExplotion>
		playerInSpaceR(1,23,24+SS.ud);
 8003ccc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003cd0:	3318      	adds	r3, #24
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2117      	movs	r1, #23
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f7fd fd2e 	bl	8001738 <playerInSpaceR>
		ud1 = SS.ud;
 8003cdc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003ce0:	613b      	str	r3, [r7, #16]
		lr1 = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
		duck1.ud = SS.ud;
 8003ce6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003cea:	773b      	strb	r3, [r7, #28]
		duck1.rl = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	777b      	strb	r3, [r7, #29]
		}



		if(duck2.ud == SS.ud) {
 8003cf0:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8003cf4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d179      	bne.n	8003df0 <main+0x680>
		goDuckUP2(2,22,24,&ud2,&lr2,&duck2);
 8003cfc:	f107 0208 	add.w	r2, r7, #8
 8003d00:	f107 0318 	add.w	r3, r7, #24
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	2218      	movs	r2, #24
 8003d0e:	2116      	movs	r1, #22
 8003d10:	2002      	movs	r0, #2
 8003d12:	f7fe f937 	bl	8001f84 <goDuckUP2>
		if (duck2.rl == 5 && duck1.ud == SS.ud && key.up){
 8003d16:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d11e      	bne.n	8003d5c <main+0x5ec>
 8003d1e:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8003d22:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d118      	bne.n	8003d5c <main+0x5ec>
 8003d2a:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <main+0x6a4>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b25b      	sxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <main+0x5ec>
			joy.up = 1;
 8003d34:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <main+0x6a8>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
			goDuckUPMove1(1,22,24,&ud1,&lr1,&duck1);
 8003d3a:	f107 0210 	add.w	r2, r7, #16
 8003d3e:	f107 031c 	add.w	r3, r7, #28
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	f107 030c 	add.w	r3, r7, #12
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	2218      	movs	r2, #24
 8003d4e:	2116      	movs	r1, #22
 8003d50:	2001      	movs	r0, #1
 8003d52:	f7fe f8a7 	bl	8001ea4 <goDuckUPMove1>
			joy.up = 0;
 8003d56:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <main+0x6a8>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 4 && key.up){
 8003d5c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003d60:	2b05      	cmp	r3, #5
 8003d62:	d120      	bne.n	8003da6 <main+0x636>
 8003d64:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d118      	bne.n	8003da6 <main+0x636>
 8003d74:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <main+0x6a4>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	b25b      	sxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d013      	beq.n	8003da6 <main+0x636>
			joy.up = 1;
 8003d7e:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <main+0x6a8>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
			goDuckMIDMove2(1,22,24,&ud1,&lr1,&duck1);
 8003d84:	f107 0210 	add.w	r2, r7, #16
 8003d88:	f107 031c 	add.w	r3, r7, #28
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	f107 030c 	add.w	r3, r7, #12
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	2218      	movs	r2, #24
 8003d98:	2116      	movs	r1, #22
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	f7fe fc1c 	bl	80025d8 <goDuckMIDMove2>
			joy.up = 0;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <main+0x6a8>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 8 && key.up){
 8003da6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d120      	bne.n	8003df0 <main+0x680>
 8003dae:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003db8:	3308      	adds	r3, #8
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d118      	bne.n	8003df0 <main+0x680>
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <main+0x6a4>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b25b      	sxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d013      	beq.n	8003df0 <main+0x680>
			joy.up = 1;
 8003dc8:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <main+0x6a8>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
			goDuckUSDMove2(1,22,24,&ud1,&lr1,&duck1);
 8003dce:	f107 0210 	add.w	r2, r7, #16
 8003dd2:	f107 031c 	add.w	r3, r7, #28
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	f107 030c 	add.w	r3, r7, #12
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4613      	mov	r3, r2
 8003de0:	2218      	movs	r2, #24
 8003de2:	2116      	movs	r1, #22
 8003de4:	2001      	movs	r0, #1
 8003de6:	f7fe fe6b 	bl	8002ac0 <goDuckUSDMove2>
			joy.up = 0;
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <main+0x6a8>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
		}
		}

		if(duck2.ud == SS.ud + 4 || duck2.ud == SS.ud - 4){
 8003df0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d00f      	beq.n	8003e20 <main+0x6b0>
 8003e00:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003e04:	461a      	mov	r2, r3
 8003e06:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003e0a:	3b04      	subs	r3, #4
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d123      	bne.n	8003e58 <main+0x6e8>
 8003e10:	e006      	b.n	8003e20 <main+0x6b0>
 8003e12:	bf00      	nop
 8003e14:	200001d4 	.word	0x200001d4
 8003e18:	200001e0 	.word	0x200001e0
 8003e1c:	200001e8 	.word	0x200001e8
		goDuckMID2(2,22,24,&ud2,&lr2,&duck2);
 8003e20:	f107 0208 	add.w	r2, r7, #8
 8003e24:	f107 0318 	add.w	r3, r7, #24
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	2218      	movs	r2, #24
 8003e32:	2116      	movs	r1, #22
 8003e34:	2002      	movs	r0, #2
 8003e36:	f7fe fae1 	bl	80023fc <goDuckMID2>
		if(duck2.rl == 55 && key.right){
 8003e3a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003e3e:	2b37      	cmp	r3, #55	; 0x37
 8003e40:	d10a      	bne.n	8003e58 <main+0x6e8>
 8003e42:	4bce      	ldr	r3, [pc, #824]	; (800417c <main+0xa0c>)
 8003e44:	78db      	ldrb	r3, [r3, #3]
 8003e46:	b25b      	sxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <main+0x6e8>
		canonFire(2,SS.ud);
 8003e4c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003e50:	4619      	mov	r1, r3
 8003e52:	2002      	movs	r0, #2
 8003e54:	f7fe ff13 	bl	8002c7e <canonFire>
		}
		}

		if(duck2.ud == SS.ud+8) {
 8003e58:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003e62:	3308      	adds	r3, #8
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d179      	bne.n	8003f5c <main+0x7ec>
		goDuckUSD2(2,22,24,&ud2,&lr2,&duck2);
 8003e68:	f107 0208 	add.w	r2, r7, #8
 8003e6c:	f107 0318 	add.w	r3, r7, #24
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	2218      	movs	r2, #24
 8003e7a:	2116      	movs	r1, #22
 8003e7c:	2002      	movs	r0, #2
 8003e7e:	f7fe fd31 	bl	80028e4 <goDuckUSD2>
		if (duck2.rl == 5 && duck1.ud == SS.ud && key.up){
 8003e82:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003e86:	2b05      	cmp	r3, #5
 8003e88:	d11e      	bne.n	8003ec8 <main+0x758>
 8003e8a:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8003e8e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d118      	bne.n	8003ec8 <main+0x758>
 8003e96:	4bb9      	ldr	r3, [pc, #740]	; (800417c <main+0xa0c>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	b25b      	sxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d013      	beq.n	8003ec8 <main+0x758>
			joy.down = 1;
 8003ea0:	4bb7      	ldr	r3, [pc, #732]	; (8004180 <main+0xa10>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	705a      	strb	r2, [r3, #1]
			goDuckUPMove2(1,22,24,&ud1,&lr1,&duck1);
 8003ea6:	f107 0210 	add.w	r2, r7, #16
 8003eaa:	f107 031c 	add.w	r3, r7, #28
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	f107 030c 	add.w	r3, r7, #12
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	2218      	movs	r2, #24
 8003eba:	2116      	movs	r1, #22
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f7fe f951 	bl	8002164 <goDuckUPMove2>
			joy.down = 0;
 8003ec2:	4baf      	ldr	r3, [pc, #700]	; (8004180 <main+0xa10>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	705a      	strb	r2, [r3, #1]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 4 && key.up){
 8003ec8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003ecc:	2b05      	cmp	r3, #5
 8003ece:	d120      	bne.n	8003f12 <main+0x7a2>
 8003ed0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003eda:	3304      	adds	r3, #4
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d118      	bne.n	8003f12 <main+0x7a2>
 8003ee0:	4ba6      	ldr	r3, [pc, #664]	; (800417c <main+0xa0c>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b25b      	sxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d013      	beq.n	8003f12 <main+0x7a2>
			joy.down = 1;
 8003eea:	4ba5      	ldr	r3, [pc, #660]	; (8004180 <main+0xa10>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	705a      	strb	r2, [r3, #1]
			goDuckMIDMove2(1,22,24,&ud1,&lr1,&duck1);
 8003ef0:	f107 0210 	add.w	r2, r7, #16
 8003ef4:	f107 031c 	add.w	r3, r7, #28
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	f107 030c 	add.w	r3, r7, #12
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	2218      	movs	r2, #24
 8003f04:	2116      	movs	r1, #22
 8003f06:	2001      	movs	r0, #1
 8003f08:	f7fe fb66 	bl	80025d8 <goDuckMIDMove2>
			joy.down = 0;
 8003f0c:	4b9c      	ldr	r3, [pc, #624]	; (8004180 <main+0xa10>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	705a      	strb	r2, [r3, #1]
		}
		if (duck2.rl == 5 && duck1.ud == SS.ud + 8 && key.up){
 8003f12:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d120      	bne.n	8003f5c <main+0x7ec>
 8003f1a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003f24:	3308      	adds	r3, #8
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d118      	bne.n	8003f5c <main+0x7ec>
 8003f2a:	4b94      	ldr	r3, [pc, #592]	; (800417c <main+0xa0c>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b25b      	sxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d013      	beq.n	8003f5c <main+0x7ec>
		joy.down = 1;
 8003f34:	4b92      	ldr	r3, [pc, #584]	; (8004180 <main+0xa10>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	705a      	strb	r2, [r3, #1]
		goDuckUSDMove2(1,22,24,&ud1,&lr1,&duck1);
 8003f3a:	f107 0210 	add.w	r2, r7, #16
 8003f3e:	f107 031c 	add.w	r3, r7, #28
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	f107 030c 	add.w	r3, r7, #12
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	2218      	movs	r2, #24
 8003f4e:	2116      	movs	r1, #22
 8003f50:	2001      	movs	r0, #1
 8003f52:	f7fe fdb5 	bl	8002ac0 <goDuckUSDMove2>
		joy.down = 0;
 8003f56:	4b8a      	ldr	r3, [pc, #552]	; (8004180 <main+0xa10>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	705a      	strb	r2, [r3, #1]
		}
		}

		if(duck2.rl == 5 && key.up && SS.ud == duck2.ud+1 && SS.ud != -20){
 8003f5c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d139      	bne.n	8003fd8 <main+0x868>
 8003f64:	4b85      	ldr	r3, [pc, #532]	; (800417c <main+0xa0c>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d034      	beq.n	8003fd8 <main+0x868>
 8003f6e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d12c      	bne.n	8003fd8 <main+0x868>
 8003f7e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003f82:	f113 0f14 	cmn.w	r3, #20
 8003f86:	d027      	beq.n	8003fd8 <main+0x868>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8003f88:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003f8c:	f103 011b 	add.w	r1, r3, #27
 8003f90:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003f94:	331f      	adds	r3, #31
 8003f96:	225b      	movs	r2, #91	; 0x5b
 8003f98:	2002      	movs	r0, #2
 8003f9a:	f7fc ffb9 	bl	8000f10 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8003f9e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003fa2:	f103 011b 	add.w	r1, r3, #27
 8003fa6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003faa:	331f      	adds	r3, #31
 8003fac:	225b      	movs	r2, #91	; 0x5b
 8003fae:	2002      	movs	r0, #2
 8003fb0:	f7fd fa3c 	bl	800142c <fireDelete>
		SS.ud -= 1;
 8003fb4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	b25b      	sxtb	r3, r3
 8003fc0:	753b      	strb	r3, [r7, #20]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 8003fc2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003fc6:	f103 011b 	add.w	r1, r3, #27
 8003fca:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003fce:	331f      	adds	r3, #31
 8003fd0:	225b      	movs	r2, #91	; 0x5b
 8003fd2:	2002      	movs	r0, #2
 8003fd4:	f7fc fe6e 	bl	8000cb4 <spaceship>
		}

		if(duck2.rl == 5 && key.up && SS.ud == duck2.ud-9 && SS.ud != 21){
 8003fd8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003fdc:	2b05      	cmp	r3, #5
 8003fde:	d138      	bne.n	8004052 <main+0x8e2>
 8003fe0:	4b66      	ldr	r3, [pc, #408]	; (800417c <main+0xa0c>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	b25b      	sxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d033      	beq.n	8004052 <main+0x8e2>
 8003fea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003ff4:	3b09      	subs	r3, #9
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d12b      	bne.n	8004052 <main+0x8e2>
 8003ffa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003ffe:	2b15      	cmp	r3, #21
 8004000:	d027      	beq.n	8004052 <main+0x8e2>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8004002:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004006:	f103 011b 	add.w	r1, r3, #27
 800400a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800400e:	331f      	adds	r3, #31
 8004010:	225b      	movs	r2, #91	; 0x5b
 8004012:	2002      	movs	r0, #2
 8004014:	f7fc ff7c 	bl	8000f10 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8004018:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800401c:	f103 011b 	add.w	r1, r3, #27
 8004020:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004024:	331f      	adds	r3, #31
 8004026:	225b      	movs	r2, #91	; 0x5b
 8004028:	2002      	movs	r0, #2
 800402a:	f7fd f9ff 	bl	800142c <fireDelete>
		SS.ud += 1;
 800402e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	3301      	adds	r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	b25b      	sxtb	r3, r3
 800403a:	753b      	strb	r3, [r7, #20]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 800403c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004040:	f103 011b 	add.w	r1, r3, #27
 8004044:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004048:	331f      	adds	r3, #31
 800404a:	225b      	movs	r2, #91	; 0x5b
 800404c:	2002      	movs	r0, #2
 800404e:	f7fc fe31 	bl	8000cb4 <spaceship>
		}

		if (key.up && duck2.rl != 5 && duck2.ud == SS.ud -1) {
 8004052:	4b4a      	ldr	r3, [pc, #296]	; (800417c <main+0xa0c>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	b25b      	sxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d029      	beq.n	80040b0 <main+0x940>
 800405c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8004060:	2b05      	cmp	r3, #5
 8004062:	d025      	beq.n	80040b0 <main+0x940>
 8004064:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8004068:	461a      	mov	r2, r3
 800406a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800406e:	3b01      	subs	r3, #1
 8004070:	429a      	cmp	r2, r3
 8004072:	d11d      	bne.n	80040b0 <main+0x940>
		duckExplotion(22,24,&ud2,&lr2);
 8004074:	1d3b      	adds	r3, r7, #4
 8004076:	f107 0208 	add.w	r2, r7, #8
 800407a:	2118      	movs	r1, #24
 800407c:	2016      	movs	r0, #22
 800407e:	f7fe ff47 	bl	8002f10 <duckExplotion>
		playerInSpaceUSDR(2,23,32+SS.ud);
 8004082:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004086:	3320      	adds	r3, #32
 8004088:	461a      	mov	r2, r3
 800408a:	2117      	movs	r1, #23
 800408c:	2002      	movs	r0, #2
 800408e:	f7fd fd55 	bl	8001b3c <playerInSpaceUSDR>
		ud2= SS.ud+8;
 8004092:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004096:	3308      	adds	r3, #8
 8004098:	60bb      	str	r3, [r7, #8]
		lr2=0;
 800409a:	2300      	movs	r3, #0
 800409c:	607b      	str	r3, [r7, #4]
		duck2.ud = SS.ud+8;
 800409e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	3308      	adds	r3, #8
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	763b      	strb	r3, [r7, #24]
		duck2.rl = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	767b      	strb	r3, [r7, #25]
		}
		if (duck2.rl == 65){
 80040b0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80040b4:	2b41      	cmp	r3, #65	; 0x41
 80040b6:	d11d      	bne.n	80040f4 <main+0x984>
		duckExplotion(22,24,&ud2,&lr2);
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	f107 0208 	add.w	r2, r7, #8
 80040be:	2118      	movs	r1, #24
 80040c0:	2016      	movs	r0, #22
 80040c2:	f7fe ff25 	bl	8002f10 <duckExplotion>
		playerInSpaceUSDR(2,23,32+SS.ud);
 80040c6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80040ca:	3320      	adds	r3, #32
 80040cc:	461a      	mov	r2, r3
 80040ce:	2117      	movs	r1, #23
 80040d0:	2002      	movs	r0, #2
 80040d2:	f7fd fd33 	bl	8001b3c <playerInSpaceUSDR>
		ud2= SS.ud+8;
 80040d6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80040da:	3308      	adds	r3, #8
 80040dc:	60bb      	str	r3, [r7, #8]
		lr2=0;
 80040de:	2300      	movs	r3, #0
 80040e0:	607b      	str	r3, [r7, #4]
		duck2.ud = SS.ud+8;
 80040e2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	3308      	adds	r3, #8
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	b25b      	sxtb	r3, r3
 80040ee:	763b      	strb	r3, [r7, #24]
		duck2.rl = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	767b      	strb	r3, [r7, #25]
		}
		if (key.up && duck2.rl != 5 && duck2.ud == SS.ud + 9) {
 80040f4:	4b21      	ldr	r3, [pc, #132]	; (800417c <main+0xa0c>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	b25b      	sxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d029      	beq.n	8004152 <main+0x9e2>
 80040fe:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8004102:	2b05      	cmp	r3, #5
 8004104:	d025      	beq.n	8004152 <main+0x9e2>
 8004106:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800410a:	461a      	mov	r2, r3
 800410c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004110:	3309      	adds	r3, #9
 8004112:	429a      	cmp	r2, r3
 8004114:	d11d      	bne.n	8004152 <main+0x9e2>
		duckExplotion(22,24,&ud2,&lr2);
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	f107 0208 	add.w	r2, r7, #8
 800411c:	2118      	movs	r1, #24
 800411e:	2016      	movs	r0, #22
 8004120:	f7fe fef6 	bl	8002f10 <duckExplotion>
		playerInSpaceUSDR(2,23,32+SS.ud);
 8004124:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004128:	3320      	adds	r3, #32
 800412a:	461a      	mov	r2, r3
 800412c:	2117      	movs	r1, #23
 800412e:	2002      	movs	r0, #2
 8004130:	f7fd fd04 	bl	8001b3c <playerInSpaceUSDR>
		ud2= SS.ud+8;
 8004134:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004138:	3308      	adds	r3, #8
 800413a:	60bb      	str	r3, [r7, #8]
		lr2=0;
 800413c:	2300      	movs	r3, #0
 800413e:	607b      	str	r3, [r7, #4]
		duck2.ud = SS.ud+8;
 8004140:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	3308      	adds	r3, #8
 8004148:	b2db      	uxtb	r3, r3
 800414a:	b25b      	sxtb	r3, r3
 800414c:	763b      	strb	r3, [r7, #24]
		duck2.rl = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	767b      	strb	r3, [r7, #25]
		}

		buffer_lenght = uart_get_count();
 8004152:	f7fc fc33 	bl	80009bc <uart_get_count>
 8004156:	4603      	mov	r3, r0
 8004158:	623b      	str	r3, [r7, #32]
		gotoxy(30,10);
 800415a:	210a      	movs	r1, #10
 800415c:	201e      	movs	r0, #30
 800415e:	f7ff fadd 	bl	800371c <gotoxy>
		printf("%d", buffer_lenght);
 8004162:	6a39      	ldr	r1, [r7, #32]
 8004164:	4807      	ldr	r0, [pc, #28]	; (8004184 <main+0xa14>)
 8004166:	f000 fb83 	bl	8004870 <iprintf>

		if (lcdUpdate > 0){
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <main+0xa18>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	dd54      	ble.n	800421c <main+0xaac>
		//Keyboard input

		if (buffer_lenght > 0) {
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	2b00      	cmp	r3, #0
 8004176:	dd17      	ble.n	80041a8 <main+0xa38>
 8004178:	e008      	b.n	800418c <main+0xa1c>
 800417a:	bf00      	nop
 800417c:	200001d4 	.word	0x200001d4
 8004180:	200001e0 	.word	0x200001e0
 8004184:	08005a3c 	.word	0x08005a3c
 8004188:	200001d0 	.word	0x200001d0
			random = uart_get_char();
 800418c:	f7fc fb5c 	bl	8000848 <uart_get_char>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			gotoxy(10,10);
 8004196:	210a      	movs	r1, #10
 8004198:	200a      	movs	r0, #10
 800419a:	f7ff fabf 	bl	800371c <gotoxy>
			printf("%c", random);
 800419e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fb7c 	bl	80048a0 <putchar>
		}


		if (random == 'w'){
 80041a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041ac:	2b77      	cmp	r3, #119	; 0x77
 80041ae:	d103      	bne.n	80041b8 <main+0xa48>
			key.up = 1;
 80041b0:	4b29      	ldr	r3, [pc, #164]	; (8004258 <main+0xae8>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e002      	b.n	80041be <main+0xa4e>
		}
		else {key.up = 0;}
 80041b8:	4b27      	ldr	r3, [pc, #156]	; (8004258 <main+0xae8>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]

		if (random == 'a'){
 80041be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041c2:	2b61      	cmp	r3, #97	; 0x61
 80041c4:	d103      	bne.n	80041ce <main+0xa5e>
			key.left = 1;
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <main+0xae8>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	709a      	strb	r2, [r3, #2]
 80041cc:	e002      	b.n	80041d4 <main+0xa64>
		}
		else {key.left = 0;}
 80041ce:	4b22      	ldr	r3, [pc, #136]	; (8004258 <main+0xae8>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	709a      	strb	r2, [r3, #2]

		if (random == 's'){
 80041d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041d8:	2b73      	cmp	r3, #115	; 0x73
 80041da:	d103      	bne.n	80041e4 <main+0xa74>
			key.down = 1;
 80041dc:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <main+0xae8>)
 80041de:	2201      	movs	r2, #1
 80041e0:	705a      	strb	r2, [r3, #1]
 80041e2:	e002      	b.n	80041ea <main+0xa7a>
		}
		else {key.down = 0;}
 80041e4:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <main+0xae8>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	705a      	strb	r2, [r3, #1]

		if (random == 'd'){
 80041ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d103      	bne.n	80041fa <main+0xa8a>
			key.right = 1;
 80041f2:	4b19      	ldr	r3, [pc, #100]	; (8004258 <main+0xae8>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	70da      	strb	r2, [r3, #3]
 80041f8:	e002      	b.n	8004200 <main+0xa90>
		}
		else {key.right = 0;}
 80041fa:	4b17      	ldr	r3, [pc, #92]	; (8004258 <main+0xae8>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	70da      	strb	r2, [r3, #3]

		if (random == 'e'){
 8004200:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004204:	2b65      	cmp	r3, #101	; 0x65
 8004206:	d103      	bne.n	8004210 <main+0xaa0>
			key.center = 1;
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <main+0xae8>)
 800420a:	2201      	movs	r2, #1
 800420c:	711a      	strb	r2, [r3, #4]
 800420e:	e002      	b.n	8004216 <main+0xaa6>
		}
		else {key.center = 0;}
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <main+0xae8>)
 8004212:	2200      	movs	r2, #0
 8004214:	711a      	strb	r2, [r3, #4]

		random = " ";
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <main+0xaec>)
 8004218:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}

			b++;
 800421c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421e:	3301      	adds	r3, #1
 8004220:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(b>6) {
 8004222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004224:	2b06      	cmp	r3, #6
 8004226:	dd01      	ble.n	800422c <main+0xabc>
				b = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			a++;
 800422c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422e:	3301      	adds	r3, #1
 8004230:	643b      	str	r3, [r7, #64]	; 0x40
			if(a>4) {
 8004232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004234:	2b04      	cmp	r3, #4
 8004236:	dd01      	ble.n	800423c <main+0xacc>
				a = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	643b      	str	r3, [r7, #64]	; 0x40
			}
			collision(a,b,SS.ud);
 800423c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004240:	461a      	mov	r2, r3
 8004242:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004244:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004246:	f000 f80b 	bl	8004260 <collision>




		copyJoystick();
 800424a:	f7ff f92f 	bl	80034ac <copyJoystick>

		writeLed();
 800424e:	f7ff f9d7 	bl	8003600 <writeLed>
	while(1){
 8004252:	f7ff bae4 	b.w	800381e <main+0xae>
 8004256:	bf00      	nop
 8004258:	200001d4 	.word	0x200001d4
 800425c:	08005a40 	.word	0x08005a40

08004260 <collision>:
#include "ansi_S.h"

void collision(int a,int b,int SS) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]

switch (a) {
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b04      	cmp	r3, #4
 8004270:	d145      	bne.n	80042fe <collision+0x9e>
		case 4:
			a=0;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	3b01      	subs	r3, #1
 800427a:	2b05      	cmp	r3, #5
 800427c:	d83e      	bhi.n	80042fc <collision+0x9c>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <collision+0x24>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	0800429d 	.word	0x0800429d
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042bd 	.word	0x080042bd
 8004290:	080042cd 	.word	0x080042cd
 8004294:	080042dd 	.word	0x080042dd
 8004298:	080042ed 	.word	0x080042ed
			switch(b) {
			case 1:
				Broken(2,1,2,27+SS);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	331b      	adds	r3, #27
 80042a0:	2202      	movs	r2, #2
 80042a2:	2101      	movs	r1, #1
 80042a4:	2002      	movs	r0, #2
 80042a6:	f7fe fd99 	bl	8002ddc <Broken>
				break;
 80042aa:	e028      	b.n	80042fe <collision+0x9e>
			case 2:
				Broken(2,2,2,27+SS);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	331b      	adds	r3, #27
 80042b0:	2202      	movs	r2, #2
 80042b2:	2102      	movs	r1, #2
 80042b4:	2002      	movs	r0, #2
 80042b6:	f7fe fd91 	bl	8002ddc <Broken>
				break;
 80042ba:	e020      	b.n	80042fe <collision+0x9e>
			case 3:
				Broken(2,3,2,27+SS);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	331b      	adds	r3, #27
 80042c0:	2202      	movs	r2, #2
 80042c2:	2103      	movs	r1, #3
 80042c4:	2002      	movs	r0, #2
 80042c6:	f7fe fd89 	bl	8002ddc <Broken>
				break;
 80042ca:	e018      	b.n	80042fe <collision+0x9e>
			case 4:
				Broken(2,4,2,27+SS);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	331b      	adds	r3, #27
 80042d0:	2202      	movs	r2, #2
 80042d2:	2104      	movs	r1, #4
 80042d4:	2002      	movs	r0, #2
 80042d6:	f7fe fd81 	bl	8002ddc <Broken>
				break;
 80042da:	e010      	b.n	80042fe <collision+0x9e>
			case 5:
				Broken(2,5,2,27+SS);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	331b      	adds	r3, #27
 80042e0:	2202      	movs	r2, #2
 80042e2:	2105      	movs	r1, #5
 80042e4:	2002      	movs	r0, #2
 80042e6:	f7fe fd79 	bl	8002ddc <Broken>
				break;
 80042ea:	e008      	b.n	80042fe <collision+0x9e>
			case 6:
				Broken(2,6,2,27+SS);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	331b      	adds	r3, #27
 80042f0:	2202      	movs	r2, #2
 80042f2:	2106      	movs	r1, #6
 80042f4:	2002      	movs	r0, #2
 80042f6:	f7fe fd71 	bl	8002ddc <Broken>
				break;
 80042fa:	e000      	b.n	80042fe <collision+0x9e>
			default: //timer - 10
				break;
 80042fc:	bf00      	nop
			}
		default:
			a>4 ? a=0:a++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b04      	cmp	r3, #4
 8004302:	dd02      	ble.n	800430a <collision+0xaa>
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	e002      	b.n	8004310 <collision+0xb0>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3301      	adds	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	3b01      	subs	r3, #1
 8004314:	2b05      	cmp	r3, #5
 8004316:	d83f      	bhi.n	8004398 <collision+0x138>
 8004318:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <collision+0xc0>)
 800431a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431e:	bf00      	nop
 8004320:	08004339 	.word	0x08004339
 8004324:	08004349 	.word	0x08004349
 8004328:	08004359 	.word	0x08004359
 800432c:	08004369 	.word	0x08004369
 8004330:	08004379 	.word	0x08004379
 8004334:	08004389 	.word	0x08004389
		switch(b) {
			case 1:
				Broken(1,1,2,27+SS);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	331b      	adds	r3, #27
 800433c:	2202      	movs	r2, #2
 800433e:	2101      	movs	r1, #1
 8004340:	2001      	movs	r0, #1
 8004342:	f7fe fd4b 	bl	8002ddc <Broken>
				break;
 8004346:	e028      	b.n	800439a <collision+0x13a>
			case 2:
				Broken(1,2,2,27+SS);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	331b      	adds	r3, #27
 800434c:	2202      	movs	r2, #2
 800434e:	2102      	movs	r1, #2
 8004350:	2001      	movs	r0, #1
 8004352:	f7fe fd43 	bl	8002ddc <Broken>
				break;
 8004356:	e020      	b.n	800439a <collision+0x13a>
			case 3:
				Broken(1,3,2,27+SS);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	331b      	adds	r3, #27
 800435c:	2202      	movs	r2, #2
 800435e:	2103      	movs	r1, #3
 8004360:	2001      	movs	r0, #1
 8004362:	f7fe fd3b 	bl	8002ddc <Broken>
				break;
 8004366:	e018      	b.n	800439a <collision+0x13a>
			case 4:
				Broken(1,4,2,27+SS);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	331b      	adds	r3, #27
 800436c:	2202      	movs	r2, #2
 800436e:	2104      	movs	r1, #4
 8004370:	2001      	movs	r0, #1
 8004372:	f7fe fd33 	bl	8002ddc <Broken>
				break;
 8004376:	e010      	b.n	800439a <collision+0x13a>
			case 5:
				Broken(1,5,2,27+SS);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	331b      	adds	r3, #27
 800437c:	2202      	movs	r2, #2
 800437e:	2105      	movs	r1, #5
 8004380:	2001      	movs	r0, #1
 8004382:	f7fe fd2b 	bl	8002ddc <Broken>
				break;
 8004386:	e008      	b.n	800439a <collision+0x13a>
			case 6:
				Broken(1,6,2,27+SS);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	331b      	adds	r3, #27
 800438c:	2202      	movs	r2, #2
 800438e:	2106      	movs	r1, #6
 8004390:	2001      	movs	r0, #1
 8004392:	f7fe fd23 	bl	8002ddc <Broken>
				break;
 8004396:	e000      	b.n	800439a <collision+0x13a>
			default: //timer - 10
				break;
 8004398:	bf00      	nop
			}
		}
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop

080043a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e00a      	b.n	80043cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043b6:	f3af 8000 	nop.w
 80043ba:	4601      	mov	r1, r0
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	60ba      	str	r2, [r7, #8]
 80043c2:	b2ca      	uxtb	r2, r1
 80043c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	3301      	adds	r3, #1
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	dbf0      	blt.n	80043b6 <_read+0x12>
	}

return len;
 80043d4:	687b      	ldr	r3, [r7, #4]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <_close>:
	}
	return len;
}

int _close(int file)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
	return -1;
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004406:	605a      	str	r2, [r3, #4]
	return 0;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <_isatty>:

int _isatty(int file)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
	return 1;
 800441e:	2301      	movs	r3, #1
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
	return 0;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <_sbrk+0x50>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <_sbrk+0x16>
		heap_end = &end;
 8004458:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <_sbrk+0x50>)
 800445a:	4a10      	ldr	r2, [pc, #64]	; (800449c <_sbrk+0x54>)
 800445c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <_sbrk+0x50>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <_sbrk+0x50>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4413      	add	r3, r2
 800446c:	466a      	mov	r2, sp
 800446e:	4293      	cmp	r3, r2
 8004470:	d907      	bls.n	8004482 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004472:	f000 f9cb 	bl	800480c <__errno>
 8004476:	4603      	mov	r3, r0
 8004478:	220c      	movs	r2, #12
 800447a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800447c:	f04f 33ff 	mov.w	r3, #4294967295
 8004480:	e006      	b.n	8004490 <_sbrk+0x48>
	}

	heap_end += incr;
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <_sbrk+0x50>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	4a03      	ldr	r2, [pc, #12]	; (8004498 <_sbrk+0x50>)
 800448c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800448e:	68fb      	ldr	r3, [r7, #12]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	200001b4 	.word	0x200001b4
 800449c:	20000200 	.word	0x20000200

080044a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044a4:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <SystemInit+0x84>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <SystemInit+0x84>)
 80044ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80044b4:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <SystemInit+0x88>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <SystemInit+0x88>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80044c0:	4b19      	ldr	r3, [pc, #100]	; (8004528 <SystemInit+0x88>)
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	4918      	ldr	r1, [pc, #96]	; (8004528 <SystemInit+0x88>)
 80044c6:	4b19      	ldr	r3, [pc, #100]	; (800452c <SystemInit+0x8c>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80044cc:	4b16      	ldr	r3, [pc, #88]	; (8004528 <SystemInit+0x88>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a15      	ldr	r2, [pc, #84]	; (8004528 <SystemInit+0x88>)
 80044d2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80044d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044da:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <SystemInit+0x88>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a11      	ldr	r2, [pc, #68]	; (8004528 <SystemInit+0x88>)
 80044e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <SystemInit+0x88>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4a0e      	ldr	r2, [pc, #56]	; (8004528 <SystemInit+0x88>)
 80044ee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80044f2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80044f4:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <SystemInit+0x88>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	4a0b      	ldr	r2, [pc, #44]	; (8004528 <SystemInit+0x88>)
 80044fa:	f023 030f 	bic.w	r3, r3, #15
 80044fe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <SystemInit+0x88>)
 8004502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004504:	4908      	ldr	r1, [pc, #32]	; (8004528 <SystemInit+0x88>)
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <SystemInit+0x90>)
 8004508:	4013      	ands	r3, r2
 800450a:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <SystemInit+0x88>)
 800450e:	2200      	movs	r2, #0
 8004510:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004512:	f000 f80f 	bl	8004534 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004516:	4b03      	ldr	r3, [pc, #12]	; (8004524 <SystemInit+0x84>)
 8004518:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800451c:	609a      	str	r2, [r3, #8]
#endif  
}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	e000ed00 	.word	0xe000ed00
 8004528:	40021000 	.word	0x40021000
 800452c:	f87fc00c 	.word	0xf87fc00c
 8004530:	ff00fccc 	.word	0xff00fccc

08004534 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8004538:	4b21      	ldr	r3, [pc, #132]	; (80045c0 <SetSysClock+0x8c>)
 800453a:	2212      	movs	r2, #18
 800453c:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800453e:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <SetSysClock+0x90>)
 8004540:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <SetSysClock+0x90>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8004546:	4b1f      	ldr	r3, [pc, #124]	; (80045c4 <SetSysClock+0x90>)
 8004548:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <SetSysClock+0x90>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <SetSysClock+0x90>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <SetSysClock+0x90>)
 8004554:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004558:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800455a:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <SetSysClock+0x90>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <SetSysClock+0x90>)
 8004560:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004564:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8004566:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <SetSysClock+0x90>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <SetSysClock+0x90>)
 800456c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8004570:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8004572:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <SetSysClock+0x90>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <SetSysClock+0x90>)
 8004578:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800457e:	bf00      	nop
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <SetSysClock+0x90>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f9      	beq.n	8004580 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <SetSysClock+0x90>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <SetSysClock+0x90>)
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <SetSysClock+0x90>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <SetSysClock+0x90>)
 800459e:	f043 0302 	orr.w	r3, r3, #2
 80045a2:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80045a4:	bf00      	nop
 80045a6:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <SetSysClock+0x90>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d1f9      	bne.n	80045a6 <SetSysClock+0x72>
  {
  }
}
 80045b2:	bf00      	nop
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40022000 	.word	0x40022000
 80045c4:	40021000 	.word	0x40021000

080045c8 <NVIC_EnableIRQ>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	2201      	movs	r2, #1
 80045da:	fa02 f103 	lsl.w	r1, r2, r3
 80045de:	4a06      	ldr	r2, [pc, #24]	; (80045f8 <NVIC_EnableIRQ+0x30>)
 80045e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	e000e100 	.word	0xe000e100

080045fc <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	6039      	str	r1, [r7, #0]
 8004606:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	2b00      	cmp	r3, #0
 800460e:	da0b      	bge.n	8004628 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	490c      	ldr	r1, [pc, #48]	; (8004648 <NVIC_SetPriority+0x4c>)
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	3b04      	subs	r3, #4
 800461e:	0112      	lsls	r2, r2, #4
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	440b      	add	r3, r1
 8004624:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8004626:	e009      	b.n	800463c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	4907      	ldr	r1, [pc, #28]	; (800464c <NVIC_SetPriority+0x50>)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	0112      	lsls	r2, r2, #4
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	440b      	add	r3, r1
 8004638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000ed00 	.word	0xe000ed00
 800464c:	e000e100 	.word	0xe000e100

08004650 <initTimer>:
//TIM15->CR1 to disable the timer and configure the mode.
//TIM15->ARR to set the reload value.
//TIM15->PSC to set the prescaler.
// Write to TIM15->CR1 to enable the timer and begin counting

void initTimer(){
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8004654:	4b10      	ldr	r3, [pc, #64]	; (8004698 <initTimer+0x48>)
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	4a0f      	ldr	r2, [pc, #60]	; (8004698 <initTimer+0x48>)
 800465a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465e:	6193      	str	r3, [r2, #24]
TIM15->CR1 = 0x0000; // Configure timer 15
 8004660:	4b0e      	ldr	r3, [pc, #56]	; (800469c <initTimer+0x4c>)
 8004662:	2200      	movs	r2, #0
 8004664:	801a      	strh	r2, [r3, #0]
TIM15->ARR = 0xF9FF; // Set reload value
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <initTimer+0x4c>)
 8004668:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800466c:	62da      	str	r2, [r3, #44]	; 0x2c
TIM15->PSC = 0x0009; // Set prescale value
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <initTimer+0x4c>)
 8004670:	2209      	movs	r2, #9
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <initTimer+0x4c>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a08      	ldr	r2, [pc, #32]	; (800469c <initTimer+0x4c>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	60d3      	str	r3, [r2, #12]
TIM15->CR1 = 0x0001;
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <initTimer+0x4c>)
 8004682:	2201      	movs	r2, #1
 8004684:	801a      	strh	r2, [r3, #0]
NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8004686:	2100      	movs	r1, #0
 8004688:	2018      	movs	r0, #24
 800468a:	f7ff ffb7 	bl	80045fc <NVIC_SetPriority>
NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 800468e:	2018      	movs	r0, #24
 8004690:	f7ff ff9a 	bl	80045c8 <NVIC_EnableIRQ>
}
 8004694:	bf00      	nop
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40021000 	.word	0x40021000
 800469c:	40014000 	.word	0x40014000

080046a0 <TIM2_IRQHandler>:
TIM2->ARR = reload; // Set auto reload value
TIM2->CCR3 = reload/2; // Set compare register
TIM2->EGR |= 0x01;
}

void TIM2_IRQHandler(void) {
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
	printf("This is Tim2: %d",i);
	i++;
*/

//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM2->SR &= ~0x0001; // Clear interrupt bit
 80046a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	6113      	str	r3, [r2, #16]
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <TIM1_BRK_TIM15_IRQHandler>:
}
void initTimerStart(){
NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
TIM15->CR1 = 0x0001; // Configure timer 15
}
void TIM1_BRK_TIM15_IRQHandler(void) {
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0

	lcdUpdate++;
 80046c4:	4b37      	ldr	r3, [pc, #220]	; (80047a4 <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3301      	adds	r3, #1
 80046ca:	4a36      	ldr	r2, [pc, #216]	; (80047a4 <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 80046cc:	6013      	str	r3, [r2, #0]

	if (lcdUpdate >= refreshRate){
 80046ce:	4b35      	ldr	r3, [pc, #212]	; (80047a4 <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b35      	ldr	r3, [pc, #212]	; (80047a8 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	db11      	blt.n	80046fe <TIM1_BRK_TIM15_IRQHandler+0x3e>
		if (led.blu == 0){
 80046da:	4b34      	ldr	r3, [pc, #208]	; (80047ac <TIM1_BRK_TIM15_IRQHandler+0xec>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <TIM1_BRK_TIM15_IRQHandler+0x2a>
			led.blu = 1;
 80046e2:	4b32      	ldr	r3, [pc, #200]	; (80047ac <TIM1_BRK_TIM15_IRQHandler+0xec>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	e006      	b.n	80046f8 <TIM1_BRK_TIM15_IRQHandler+0x38>
		}
		else if (led.blu == 1){
 80046ea:	4b30      	ldr	r3, [pc, #192]	; (80047ac <TIM1_BRK_TIM15_IRQHandler+0xec>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d102      	bne.n	80046f8 <TIM1_BRK_TIM15_IRQHandler+0x38>
			led.blu = 0;
 80046f2:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <TIM1_BRK_TIM15_IRQHandler+0xec>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	605a      	str	r2, [r3, #4]
		}

		lcdUpdate = 0;
 80046f8:	4b2a      	ldr	r3, [pc, #168]	; (80047a4 <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
	}


	if (tid.state == 1) {
 80046fe:	4b2c      	ldr	r3, [pc, #176]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8004700:	78db      	ldrb	r3, [r3, #3]
 8004702:	b25b      	sxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d141      	bne.n	800478c <TIM1_BRK_TIM15_IRQHandler+0xcc>
		if (tid.mil == 0){
 8004708:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 800470a:	789b      	ldrb	r3, [r3, #2]
 800470c:	b25b      	sxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <TIM1_BRK_TIM15_IRQHandler+0x6a>
			tid.mil = 99;
 8004712:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8004714:	2263      	movs	r2, #99	; 0x63
 8004716:	709a      	strb	r2, [r3, #2]
			tid.sek--;
 8004718:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	b25b      	sxtb	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b2db      	uxtb	r3, r3
 8004724:	b25a      	sxtb	r2, r3
 8004726:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8004728:	705a      	strb	r2, [r3, #1]
		}
		if (tid.min > 0 && tid.sek == 0){
 800472a:	4b21      	ldr	r3, [pc, #132]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	b25b      	sxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	dd10      	ble.n	8004756 <TIM1_BRK_TIM15_IRQHandler+0x96>
 8004734:	4b1e      	ldr	r3, [pc, #120]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8004736:	785b      	ldrb	r3, [r3, #1]
 8004738:	b25b      	sxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10b      	bne.n	8004756 <TIM1_BRK_TIM15_IRQHandler+0x96>
			tid.mil--;
 800473e:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8004740:	789b      	ldrb	r3, [r3, #2]
 8004742:	b25b      	sxtb	r3, r3
 8004744:	b2db      	uxtb	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	b25a      	sxtb	r2, r3
 800474c:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 800474e:	709a      	strb	r2, [r3, #2]
			tid.sek = 59;
 8004750:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8004752:	223b      	movs	r2, #59	; 0x3b
 8004754:	705a      	strb	r2, [r3, #1]
		}
		if (tid.sek > 0){
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8004758:	785b      	ldrb	r3, [r3, #1]
 800475a:	b25b      	sxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	dd08      	ble.n	8004772 <TIM1_BRK_TIM15_IRQHandler+0xb2>
			tid.sek--;
 8004760:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	b25b      	sxtb	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	b25a      	sxtb	r2, r3
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8004770:	705a      	strb	r2, [r3, #1]
		}
		if (tid.sek == 0 && tid.min == 0) {
 8004772:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8004774:	785b      	ldrb	r3, [r3, #1]
 8004776:	b25b      	sxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d107      	bne.n	800478c <TIM1_BRK_TIM15_IRQHandler+0xcc>
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	b25b      	sxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <TIM1_BRK_TIM15_IRQHandler+0xcc>
			tid.state = 0;
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8004788:	2200      	movs	r2, #0
 800478a:	70da      	strb	r2, [r3, #3]




//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM15->SR &= ~0x0001; // Clear interrupt bit
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <TIM1_BRK_TIM15_IRQHandler+0xf4>)
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <TIM1_BRK_TIM15_IRQHandler+0xf4>)
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	6113      	str	r3, [r2, #16]
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	200001d0 	.word	0x200001d0
 80047a8:	200001dc 	.word	0x200001dc
 80047ac:	200001c0 	.word	0x200001c0
 80047b0:	200001cc 	.word	0x200001cc
 80047b4:	40014000 	.word	0x40014000

080047b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80047b8:	480d      	ldr	r0, [pc, #52]	; (80047f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80047ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047bc:	480d      	ldr	r0, [pc, #52]	; (80047f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80047be:	490e      	ldr	r1, [pc, #56]	; (80047f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047c0:	4a0e      	ldr	r2, [pc, #56]	; (80047fc <LoopForever+0xe>)
  movs r3, #0
 80047c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047c4:	e002      	b.n	80047cc <LoopCopyDataInit>

080047c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047ca:	3304      	adds	r3, #4

080047cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047d0:	d3f9      	bcc.n	80047c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047d2:	4a0b      	ldr	r2, [pc, #44]	; (8004800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047d4:	4c0b      	ldr	r4, [pc, #44]	; (8004804 <LoopForever+0x16>)
  movs r3, #0
 80047d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047d8:	e001      	b.n	80047de <LoopFillZerobss>

080047da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047dc:	3204      	adds	r2, #4

080047de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047e0:	d3fb      	bcc.n	80047da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80047e2:	f7ff fe5d 	bl	80044a0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80047e6:	f000 f817 	bl	8004818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047ea:	f7fe ffc1 	bl	8003770 <main>

080047ee <LoopForever>:

LoopForever:
    b LoopForever
 80047ee:	e7fe      	b.n	80047ee <LoopForever>
  ldr   r0, =_estack
 80047f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80047f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047f8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80047fc:	08005ae4 	.word	0x08005ae4
  ldr r2, =_sbss
 8004800:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8004804:	200001fc 	.word	0x200001fc

08004808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004808:	e7fe      	b.n	8004808 <ADC1_2_IRQHandler>
	...

0800480c <__errno>:
 800480c:	4b01      	ldr	r3, [pc, #4]	; (8004814 <__errno+0x8>)
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	2000002c 	.word	0x2000002c

08004818 <__libc_init_array>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	4d0d      	ldr	r5, [pc, #52]	; (8004850 <__libc_init_array+0x38>)
 800481c:	4c0d      	ldr	r4, [pc, #52]	; (8004854 <__libc_init_array+0x3c>)
 800481e:	1b64      	subs	r4, r4, r5
 8004820:	10a4      	asrs	r4, r4, #2
 8004822:	2600      	movs	r6, #0
 8004824:	42a6      	cmp	r6, r4
 8004826:	d109      	bne.n	800483c <__libc_init_array+0x24>
 8004828:	4d0b      	ldr	r5, [pc, #44]	; (8004858 <__libc_init_array+0x40>)
 800482a:	4c0c      	ldr	r4, [pc, #48]	; (800485c <__libc_init_array+0x44>)
 800482c:	f001 f898 	bl	8005960 <_init>
 8004830:	1b64      	subs	r4, r4, r5
 8004832:	10a4      	asrs	r4, r4, #2
 8004834:	2600      	movs	r6, #0
 8004836:	42a6      	cmp	r6, r4
 8004838:	d105      	bne.n	8004846 <__libc_init_array+0x2e>
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004840:	4798      	blx	r3
 8004842:	3601      	adds	r6, #1
 8004844:	e7ee      	b.n	8004824 <__libc_init_array+0xc>
 8004846:	f855 3b04 	ldr.w	r3, [r5], #4
 800484a:	4798      	blx	r3
 800484c:	3601      	adds	r6, #1
 800484e:	e7f2      	b.n	8004836 <__libc_init_array+0x1e>
 8004850:	08005adc 	.word	0x08005adc
 8004854:	08005adc 	.word	0x08005adc
 8004858:	08005adc 	.word	0x08005adc
 800485c:	08005ae0 	.word	0x08005ae0

08004860 <memset>:
 8004860:	4402      	add	r2, r0
 8004862:	4603      	mov	r3, r0
 8004864:	4293      	cmp	r3, r2
 8004866:	d100      	bne.n	800486a <memset+0xa>
 8004868:	4770      	bx	lr
 800486a:	f803 1b01 	strb.w	r1, [r3], #1
 800486e:	e7f9      	b.n	8004864 <memset+0x4>

08004870 <iprintf>:
 8004870:	b40f      	push	{r0, r1, r2, r3}
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <iprintf+0x2c>)
 8004874:	b513      	push	{r0, r1, r4, lr}
 8004876:	681c      	ldr	r4, [r3, #0]
 8004878:	b124      	cbz	r4, 8004884 <iprintf+0x14>
 800487a:	69a3      	ldr	r3, [r4, #24]
 800487c:	b913      	cbnz	r3, 8004884 <iprintf+0x14>
 800487e:	4620      	mov	r0, r4
 8004880:	f000 fa0c 	bl	8004c9c <__sinit>
 8004884:	ab05      	add	r3, sp, #20
 8004886:	9a04      	ldr	r2, [sp, #16]
 8004888:	68a1      	ldr	r1, [r4, #8]
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	4620      	mov	r0, r4
 800488e:	f000 fbe5 	bl	800505c <_vfiprintf_r>
 8004892:	b002      	add	sp, #8
 8004894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004898:	b004      	add	sp, #16
 800489a:	4770      	bx	lr
 800489c:	2000002c 	.word	0x2000002c

080048a0 <putchar>:
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <putchar+0x28>)
 80048a2:	b513      	push	{r0, r1, r4, lr}
 80048a4:	681c      	ldr	r4, [r3, #0]
 80048a6:	4601      	mov	r1, r0
 80048a8:	b134      	cbz	r4, 80048b8 <putchar+0x18>
 80048aa:	69a3      	ldr	r3, [r4, #24]
 80048ac:	b923      	cbnz	r3, 80048b8 <putchar+0x18>
 80048ae:	9001      	str	r0, [sp, #4]
 80048b0:	4620      	mov	r0, r4
 80048b2:	f000 f9f3 	bl	8004c9c <__sinit>
 80048b6:	9901      	ldr	r1, [sp, #4]
 80048b8:	68a2      	ldr	r2, [r4, #8]
 80048ba:	4620      	mov	r0, r4
 80048bc:	b002      	add	sp, #8
 80048be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c2:	f000 be8f 	b.w	80055e4 <_putc_r>
 80048c6:	bf00      	nop
 80048c8:	2000002c 	.word	0x2000002c

080048cc <setbuf>:
 80048cc:	2900      	cmp	r1, #0
 80048ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d2:	bf0c      	ite	eq
 80048d4:	2202      	moveq	r2, #2
 80048d6:	2200      	movne	r2, #0
 80048d8:	f000 b800 	b.w	80048dc <setvbuf>

080048dc <setvbuf>:
 80048dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80048e0:	461d      	mov	r5, r3
 80048e2:	4b5d      	ldr	r3, [pc, #372]	; (8004a58 <setvbuf+0x17c>)
 80048e4:	681f      	ldr	r7, [r3, #0]
 80048e6:	4604      	mov	r4, r0
 80048e8:	460e      	mov	r6, r1
 80048ea:	4690      	mov	r8, r2
 80048ec:	b127      	cbz	r7, 80048f8 <setvbuf+0x1c>
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	b913      	cbnz	r3, 80048f8 <setvbuf+0x1c>
 80048f2:	4638      	mov	r0, r7
 80048f4:	f000 f9d2 	bl	8004c9c <__sinit>
 80048f8:	4b58      	ldr	r3, [pc, #352]	; (8004a5c <setvbuf+0x180>)
 80048fa:	429c      	cmp	r4, r3
 80048fc:	d167      	bne.n	80049ce <setvbuf+0xf2>
 80048fe:	687c      	ldr	r4, [r7, #4]
 8004900:	f1b8 0f02 	cmp.w	r8, #2
 8004904:	d006      	beq.n	8004914 <setvbuf+0x38>
 8004906:	f1b8 0f01 	cmp.w	r8, #1
 800490a:	f200 809f 	bhi.w	8004a4c <setvbuf+0x170>
 800490e:	2d00      	cmp	r5, #0
 8004910:	f2c0 809c 	blt.w	8004a4c <setvbuf+0x170>
 8004914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004916:	07db      	lsls	r3, r3, #31
 8004918:	d405      	bmi.n	8004926 <setvbuf+0x4a>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	0598      	lsls	r0, r3, #22
 800491e:	d402      	bmi.n	8004926 <setvbuf+0x4a>
 8004920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004922:	f000 fa59 	bl	8004dd8 <__retarget_lock_acquire_recursive>
 8004926:	4621      	mov	r1, r4
 8004928:	4638      	mov	r0, r7
 800492a:	f000 f923 	bl	8004b74 <_fflush_r>
 800492e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004930:	b141      	cbz	r1, 8004944 <setvbuf+0x68>
 8004932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004936:	4299      	cmp	r1, r3
 8004938:	d002      	beq.n	8004940 <setvbuf+0x64>
 800493a:	4638      	mov	r0, r7
 800493c:	f000 faba 	bl	8004eb4 <_free_r>
 8004940:	2300      	movs	r3, #0
 8004942:	6363      	str	r3, [r4, #52]	; 0x34
 8004944:	2300      	movs	r3, #0
 8004946:	61a3      	str	r3, [r4, #24]
 8004948:	6063      	str	r3, [r4, #4]
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	0619      	lsls	r1, r3, #24
 800494e:	d503      	bpl.n	8004958 <setvbuf+0x7c>
 8004950:	6921      	ldr	r1, [r4, #16]
 8004952:	4638      	mov	r0, r7
 8004954:	f000 faae 	bl	8004eb4 <_free_r>
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	f1b8 0f02 	cmp.w	r8, #2
 8004966:	81a3      	strh	r3, [r4, #12]
 8004968:	d06c      	beq.n	8004a44 <setvbuf+0x168>
 800496a:	ab01      	add	r3, sp, #4
 800496c:	466a      	mov	r2, sp
 800496e:	4621      	mov	r1, r4
 8004970:	4638      	mov	r0, r7
 8004972:	f000 fa33 	bl	8004ddc <__swhatbuf_r>
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	4318      	orrs	r0, r3
 800497a:	81a0      	strh	r0, [r4, #12]
 800497c:	2d00      	cmp	r5, #0
 800497e:	d130      	bne.n	80049e2 <setvbuf+0x106>
 8004980:	9d00      	ldr	r5, [sp, #0]
 8004982:	4628      	mov	r0, r5
 8004984:	f000 fa8e 	bl	8004ea4 <malloc>
 8004988:	4606      	mov	r6, r0
 800498a:	2800      	cmp	r0, #0
 800498c:	d155      	bne.n	8004a3a <setvbuf+0x15e>
 800498e:	f8dd 9000 	ldr.w	r9, [sp]
 8004992:	45a9      	cmp	r9, r5
 8004994:	d14a      	bne.n	8004a2c <setvbuf+0x150>
 8004996:	f04f 35ff 	mov.w	r5, #4294967295
 800499a:	2200      	movs	r2, #0
 800499c:	60a2      	str	r2, [r4, #8]
 800499e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80049a2:	6022      	str	r2, [r4, #0]
 80049a4:	6122      	str	r2, [r4, #16]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ac:	6162      	str	r2, [r4, #20]
 80049ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049b0:	f043 0302 	orr.w	r3, r3, #2
 80049b4:	07d2      	lsls	r2, r2, #31
 80049b6:	81a3      	strh	r3, [r4, #12]
 80049b8:	d405      	bmi.n	80049c6 <setvbuf+0xea>
 80049ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80049be:	d102      	bne.n	80049c6 <setvbuf+0xea>
 80049c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049c2:	f000 fa0a 	bl	8004dda <__retarget_lock_release_recursive>
 80049c6:	4628      	mov	r0, r5
 80049c8:	b003      	add	sp, #12
 80049ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <setvbuf+0x184>)
 80049d0:	429c      	cmp	r4, r3
 80049d2:	d101      	bne.n	80049d8 <setvbuf+0xfc>
 80049d4:	68bc      	ldr	r4, [r7, #8]
 80049d6:	e793      	b.n	8004900 <setvbuf+0x24>
 80049d8:	4b22      	ldr	r3, [pc, #136]	; (8004a64 <setvbuf+0x188>)
 80049da:	429c      	cmp	r4, r3
 80049dc:	bf08      	it	eq
 80049de:	68fc      	ldreq	r4, [r7, #12]
 80049e0:	e78e      	b.n	8004900 <setvbuf+0x24>
 80049e2:	2e00      	cmp	r6, #0
 80049e4:	d0cd      	beq.n	8004982 <setvbuf+0xa6>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	b913      	cbnz	r3, 80049f0 <setvbuf+0x114>
 80049ea:	4638      	mov	r0, r7
 80049ec:	f000 f956 	bl	8004c9c <__sinit>
 80049f0:	f1b8 0f01 	cmp.w	r8, #1
 80049f4:	bf08      	it	eq
 80049f6:	89a3      	ldrheq	r3, [r4, #12]
 80049f8:	6026      	str	r6, [r4, #0]
 80049fa:	bf04      	itt	eq
 80049fc:	f043 0301 	orreq.w	r3, r3, #1
 8004a00:	81a3      	strheq	r3, [r4, #12]
 8004a02:	89a2      	ldrh	r2, [r4, #12]
 8004a04:	f012 0308 	ands.w	r3, r2, #8
 8004a08:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004a0c:	d01c      	beq.n	8004a48 <setvbuf+0x16c>
 8004a0e:	07d3      	lsls	r3, r2, #31
 8004a10:	bf41      	itttt	mi
 8004a12:	2300      	movmi	r3, #0
 8004a14:	426d      	negmi	r5, r5
 8004a16:	60a3      	strmi	r3, [r4, #8]
 8004a18:	61a5      	strmi	r5, [r4, #24]
 8004a1a:	bf58      	it	pl
 8004a1c:	60a5      	strpl	r5, [r4, #8]
 8004a1e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004a20:	f015 0501 	ands.w	r5, r5, #1
 8004a24:	d115      	bne.n	8004a52 <setvbuf+0x176>
 8004a26:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004a2a:	e7c8      	b.n	80049be <setvbuf+0xe2>
 8004a2c:	4648      	mov	r0, r9
 8004a2e:	f000 fa39 	bl	8004ea4 <malloc>
 8004a32:	4606      	mov	r6, r0
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d0ae      	beq.n	8004996 <setvbuf+0xba>
 8004a38:	464d      	mov	r5, r9
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a40:	81a3      	strh	r3, [r4, #12]
 8004a42:	e7d0      	b.n	80049e6 <setvbuf+0x10a>
 8004a44:	2500      	movs	r5, #0
 8004a46:	e7a8      	b.n	800499a <setvbuf+0xbe>
 8004a48:	60a3      	str	r3, [r4, #8]
 8004a4a:	e7e8      	b.n	8004a1e <setvbuf+0x142>
 8004a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a50:	e7b9      	b.n	80049c6 <setvbuf+0xea>
 8004a52:	2500      	movs	r5, #0
 8004a54:	e7b7      	b.n	80049c6 <setvbuf+0xea>
 8004a56:	bf00      	nop
 8004a58:	2000002c 	.word	0x2000002c
 8004a5c:	08005a68 	.word	0x08005a68
 8004a60:	08005a88 	.word	0x08005a88
 8004a64:	08005a48 	.word	0x08005a48

08004a68 <__sflush_r>:
 8004a68:	898a      	ldrh	r2, [r1, #12]
 8004a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6e:	4605      	mov	r5, r0
 8004a70:	0710      	lsls	r0, r2, #28
 8004a72:	460c      	mov	r4, r1
 8004a74:	d458      	bmi.n	8004b28 <__sflush_r+0xc0>
 8004a76:	684b      	ldr	r3, [r1, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	dc05      	bgt.n	8004a88 <__sflush_r+0x20>
 8004a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	dc02      	bgt.n	8004a88 <__sflush_r+0x20>
 8004a82:	2000      	movs	r0, #0
 8004a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a8a:	2e00      	cmp	r6, #0
 8004a8c:	d0f9      	beq.n	8004a82 <__sflush_r+0x1a>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a94:	682f      	ldr	r7, [r5, #0]
 8004a96:	602b      	str	r3, [r5, #0]
 8004a98:	d032      	beq.n	8004b00 <__sflush_r+0x98>
 8004a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	075a      	lsls	r2, r3, #29
 8004aa0:	d505      	bpl.n	8004aae <__sflush_r+0x46>
 8004aa2:	6863      	ldr	r3, [r4, #4]
 8004aa4:	1ac0      	subs	r0, r0, r3
 8004aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004aa8:	b10b      	cbz	r3, 8004aae <__sflush_r+0x46>
 8004aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aac:	1ac0      	subs	r0, r0, r3
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ab4:	6a21      	ldr	r1, [r4, #32]
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	47b0      	blx	r6
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	d106      	bne.n	8004ace <__sflush_r+0x66>
 8004ac0:	6829      	ldr	r1, [r5, #0]
 8004ac2:	291d      	cmp	r1, #29
 8004ac4:	d82c      	bhi.n	8004b20 <__sflush_r+0xb8>
 8004ac6:	4a2a      	ldr	r2, [pc, #168]	; (8004b70 <__sflush_r+0x108>)
 8004ac8:	40ca      	lsrs	r2, r1
 8004aca:	07d6      	lsls	r6, r2, #31
 8004acc:	d528      	bpl.n	8004b20 <__sflush_r+0xb8>
 8004ace:	2200      	movs	r2, #0
 8004ad0:	6062      	str	r2, [r4, #4]
 8004ad2:	04d9      	lsls	r1, r3, #19
 8004ad4:	6922      	ldr	r2, [r4, #16]
 8004ad6:	6022      	str	r2, [r4, #0]
 8004ad8:	d504      	bpl.n	8004ae4 <__sflush_r+0x7c>
 8004ada:	1c42      	adds	r2, r0, #1
 8004adc:	d101      	bne.n	8004ae2 <__sflush_r+0x7a>
 8004ade:	682b      	ldr	r3, [r5, #0]
 8004ae0:	b903      	cbnz	r3, 8004ae4 <__sflush_r+0x7c>
 8004ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8004ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ae6:	602f      	str	r7, [r5, #0]
 8004ae8:	2900      	cmp	r1, #0
 8004aea:	d0ca      	beq.n	8004a82 <__sflush_r+0x1a>
 8004aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004af0:	4299      	cmp	r1, r3
 8004af2:	d002      	beq.n	8004afa <__sflush_r+0x92>
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 f9dd 	bl	8004eb4 <_free_r>
 8004afa:	2000      	movs	r0, #0
 8004afc:	6360      	str	r0, [r4, #52]	; 0x34
 8004afe:	e7c1      	b.n	8004a84 <__sflush_r+0x1c>
 8004b00:	6a21      	ldr	r1, [r4, #32]
 8004b02:	2301      	movs	r3, #1
 8004b04:	4628      	mov	r0, r5
 8004b06:	47b0      	blx	r6
 8004b08:	1c41      	adds	r1, r0, #1
 8004b0a:	d1c7      	bne.n	8004a9c <__sflush_r+0x34>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0c4      	beq.n	8004a9c <__sflush_r+0x34>
 8004b12:	2b1d      	cmp	r3, #29
 8004b14:	d001      	beq.n	8004b1a <__sflush_r+0xb2>
 8004b16:	2b16      	cmp	r3, #22
 8004b18:	d101      	bne.n	8004b1e <__sflush_r+0xb6>
 8004b1a:	602f      	str	r7, [r5, #0]
 8004b1c:	e7b1      	b.n	8004a82 <__sflush_r+0x1a>
 8004b1e:	89a3      	ldrh	r3, [r4, #12]
 8004b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b24:	81a3      	strh	r3, [r4, #12]
 8004b26:	e7ad      	b.n	8004a84 <__sflush_r+0x1c>
 8004b28:	690f      	ldr	r7, [r1, #16]
 8004b2a:	2f00      	cmp	r7, #0
 8004b2c:	d0a9      	beq.n	8004a82 <__sflush_r+0x1a>
 8004b2e:	0793      	lsls	r3, r2, #30
 8004b30:	680e      	ldr	r6, [r1, #0]
 8004b32:	bf08      	it	eq
 8004b34:	694b      	ldreq	r3, [r1, #20]
 8004b36:	600f      	str	r7, [r1, #0]
 8004b38:	bf18      	it	ne
 8004b3a:	2300      	movne	r3, #0
 8004b3c:	eba6 0807 	sub.w	r8, r6, r7
 8004b40:	608b      	str	r3, [r1, #8]
 8004b42:	f1b8 0f00 	cmp.w	r8, #0
 8004b46:	dd9c      	ble.n	8004a82 <__sflush_r+0x1a>
 8004b48:	6a21      	ldr	r1, [r4, #32]
 8004b4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b4c:	4643      	mov	r3, r8
 8004b4e:	463a      	mov	r2, r7
 8004b50:	4628      	mov	r0, r5
 8004b52:	47b0      	blx	r6
 8004b54:	2800      	cmp	r0, #0
 8004b56:	dc06      	bgt.n	8004b66 <__sflush_r+0xfe>
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b5e:	81a3      	strh	r3, [r4, #12]
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295
 8004b64:	e78e      	b.n	8004a84 <__sflush_r+0x1c>
 8004b66:	4407      	add	r7, r0
 8004b68:	eba8 0800 	sub.w	r8, r8, r0
 8004b6c:	e7e9      	b.n	8004b42 <__sflush_r+0xda>
 8004b6e:	bf00      	nop
 8004b70:	20400001 	.word	0x20400001

08004b74 <_fflush_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	690b      	ldr	r3, [r1, #16]
 8004b78:	4605      	mov	r5, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	b913      	cbnz	r3, 8004b84 <_fflush_r+0x10>
 8004b7e:	2500      	movs	r5, #0
 8004b80:	4628      	mov	r0, r5
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	b118      	cbz	r0, 8004b8e <_fflush_r+0x1a>
 8004b86:	6983      	ldr	r3, [r0, #24]
 8004b88:	b90b      	cbnz	r3, 8004b8e <_fflush_r+0x1a>
 8004b8a:	f000 f887 	bl	8004c9c <__sinit>
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <_fflush_r+0x6c>)
 8004b90:	429c      	cmp	r4, r3
 8004b92:	d11b      	bne.n	8004bcc <_fflush_r+0x58>
 8004b94:	686c      	ldr	r4, [r5, #4]
 8004b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0ef      	beq.n	8004b7e <_fflush_r+0xa>
 8004b9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ba0:	07d0      	lsls	r0, r2, #31
 8004ba2:	d404      	bmi.n	8004bae <_fflush_r+0x3a>
 8004ba4:	0599      	lsls	r1, r3, #22
 8004ba6:	d402      	bmi.n	8004bae <_fflush_r+0x3a>
 8004ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004baa:	f000 f915 	bl	8004dd8 <__retarget_lock_acquire_recursive>
 8004bae:	4628      	mov	r0, r5
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	f7ff ff59 	bl	8004a68 <__sflush_r>
 8004bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bb8:	07da      	lsls	r2, r3, #31
 8004bba:	4605      	mov	r5, r0
 8004bbc:	d4e0      	bmi.n	8004b80 <_fflush_r+0xc>
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	059b      	lsls	r3, r3, #22
 8004bc2:	d4dd      	bmi.n	8004b80 <_fflush_r+0xc>
 8004bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bc6:	f000 f908 	bl	8004dda <__retarget_lock_release_recursive>
 8004bca:	e7d9      	b.n	8004b80 <_fflush_r+0xc>
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <_fflush_r+0x70>)
 8004bce:	429c      	cmp	r4, r3
 8004bd0:	d101      	bne.n	8004bd6 <_fflush_r+0x62>
 8004bd2:	68ac      	ldr	r4, [r5, #8]
 8004bd4:	e7df      	b.n	8004b96 <_fflush_r+0x22>
 8004bd6:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <_fflush_r+0x74>)
 8004bd8:	429c      	cmp	r4, r3
 8004bda:	bf08      	it	eq
 8004bdc:	68ec      	ldreq	r4, [r5, #12]
 8004bde:	e7da      	b.n	8004b96 <_fflush_r+0x22>
 8004be0:	08005a68 	.word	0x08005a68
 8004be4:	08005a88 	.word	0x08005a88
 8004be8:	08005a48 	.word	0x08005a48

08004bec <std>:
 8004bec:	2300      	movs	r3, #0
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8004bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bfa:	6083      	str	r3, [r0, #8]
 8004bfc:	8181      	strh	r1, [r0, #12]
 8004bfe:	6643      	str	r3, [r0, #100]	; 0x64
 8004c00:	81c2      	strh	r2, [r0, #14]
 8004c02:	6183      	str	r3, [r0, #24]
 8004c04:	4619      	mov	r1, r3
 8004c06:	2208      	movs	r2, #8
 8004c08:	305c      	adds	r0, #92	; 0x5c
 8004c0a:	f7ff fe29 	bl	8004860 <memset>
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <std+0x38>)
 8004c10:	6263      	str	r3, [r4, #36]	; 0x24
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <std+0x3c>)
 8004c14:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <std+0x40>)
 8004c18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <std+0x44>)
 8004c1c:	6224      	str	r4, [r4, #32]
 8004c1e:	6323      	str	r3, [r4, #48]	; 0x30
 8004c20:	bd10      	pop	{r4, pc}
 8004c22:	bf00      	nop
 8004c24:	08005695 	.word	0x08005695
 8004c28:	080056b7 	.word	0x080056b7
 8004c2c:	080056ef 	.word	0x080056ef
 8004c30:	08005713 	.word	0x08005713

08004c34 <_cleanup_r>:
 8004c34:	4901      	ldr	r1, [pc, #4]	; (8004c3c <_cleanup_r+0x8>)
 8004c36:	f000 b8af 	b.w	8004d98 <_fwalk_reent>
 8004c3a:	bf00      	nop
 8004c3c:	08004b75 	.word	0x08004b75

08004c40 <__sfmoreglue>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	1e4a      	subs	r2, r1, #1
 8004c44:	2568      	movs	r5, #104	; 0x68
 8004c46:	4355      	muls	r5, r2
 8004c48:	460e      	mov	r6, r1
 8004c4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c4e:	f000 f981 	bl	8004f54 <_malloc_r>
 8004c52:	4604      	mov	r4, r0
 8004c54:	b140      	cbz	r0, 8004c68 <__sfmoreglue+0x28>
 8004c56:	2100      	movs	r1, #0
 8004c58:	e9c0 1600 	strd	r1, r6, [r0]
 8004c5c:	300c      	adds	r0, #12
 8004c5e:	60a0      	str	r0, [r4, #8]
 8004c60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c64:	f7ff fdfc 	bl	8004860 <memset>
 8004c68:	4620      	mov	r0, r4
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}

08004c6c <__sfp_lock_acquire>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	; (8004c74 <__sfp_lock_acquire+0x8>)
 8004c6e:	f000 b8b3 	b.w	8004dd8 <__retarget_lock_acquire_recursive>
 8004c72:	bf00      	nop
 8004c74:	200001f5 	.word	0x200001f5

08004c78 <__sfp_lock_release>:
 8004c78:	4801      	ldr	r0, [pc, #4]	; (8004c80 <__sfp_lock_release+0x8>)
 8004c7a:	f000 b8ae 	b.w	8004dda <__retarget_lock_release_recursive>
 8004c7e:	bf00      	nop
 8004c80:	200001f5 	.word	0x200001f5

08004c84 <__sinit_lock_acquire>:
 8004c84:	4801      	ldr	r0, [pc, #4]	; (8004c8c <__sinit_lock_acquire+0x8>)
 8004c86:	f000 b8a7 	b.w	8004dd8 <__retarget_lock_acquire_recursive>
 8004c8a:	bf00      	nop
 8004c8c:	200001f0 	.word	0x200001f0

08004c90 <__sinit_lock_release>:
 8004c90:	4801      	ldr	r0, [pc, #4]	; (8004c98 <__sinit_lock_release+0x8>)
 8004c92:	f000 b8a2 	b.w	8004dda <__retarget_lock_release_recursive>
 8004c96:	bf00      	nop
 8004c98:	200001f0 	.word	0x200001f0

08004c9c <__sinit>:
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	f7ff fff0 	bl	8004c84 <__sinit_lock_acquire>
 8004ca4:	69a3      	ldr	r3, [r4, #24]
 8004ca6:	b11b      	cbz	r3, 8004cb0 <__sinit+0x14>
 8004ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cac:	f7ff bff0 	b.w	8004c90 <__sinit_lock_release>
 8004cb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004cb4:	6523      	str	r3, [r4, #80]	; 0x50
 8004cb6:	4b13      	ldr	r3, [pc, #76]	; (8004d04 <__sinit+0x68>)
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <__sinit+0x6c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cbe:	42a3      	cmp	r3, r4
 8004cc0:	bf04      	itt	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	61a3      	streq	r3, [r4, #24]
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f000 f820 	bl	8004d0c <__sfp>
 8004ccc:	6060      	str	r0, [r4, #4]
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f000 f81c 	bl	8004d0c <__sfp>
 8004cd4:	60a0      	str	r0, [r4, #8]
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f000 f818 	bl	8004d0c <__sfp>
 8004cdc:	2200      	movs	r2, #0
 8004cde:	60e0      	str	r0, [r4, #12]
 8004ce0:	2104      	movs	r1, #4
 8004ce2:	6860      	ldr	r0, [r4, #4]
 8004ce4:	f7ff ff82 	bl	8004bec <std>
 8004ce8:	68a0      	ldr	r0, [r4, #8]
 8004cea:	2201      	movs	r2, #1
 8004cec:	2109      	movs	r1, #9
 8004cee:	f7ff ff7d 	bl	8004bec <std>
 8004cf2:	68e0      	ldr	r0, [r4, #12]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	2112      	movs	r1, #18
 8004cf8:	f7ff ff78 	bl	8004bec <std>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	61a3      	str	r3, [r4, #24]
 8004d00:	e7d2      	b.n	8004ca8 <__sinit+0xc>
 8004d02:	bf00      	nop
 8004d04:	08005a44 	.word	0x08005a44
 8004d08:	08004c35 	.word	0x08004c35

08004d0c <__sfp>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	4607      	mov	r7, r0
 8004d10:	f7ff ffac 	bl	8004c6c <__sfp_lock_acquire>
 8004d14:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <__sfp+0x84>)
 8004d16:	681e      	ldr	r6, [r3, #0]
 8004d18:	69b3      	ldr	r3, [r6, #24]
 8004d1a:	b913      	cbnz	r3, 8004d22 <__sfp+0x16>
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	f7ff ffbd 	bl	8004c9c <__sinit>
 8004d22:	3648      	adds	r6, #72	; 0x48
 8004d24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	d503      	bpl.n	8004d34 <__sfp+0x28>
 8004d2c:	6833      	ldr	r3, [r6, #0]
 8004d2e:	b30b      	cbz	r3, 8004d74 <__sfp+0x68>
 8004d30:	6836      	ldr	r6, [r6, #0]
 8004d32:	e7f7      	b.n	8004d24 <__sfp+0x18>
 8004d34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d38:	b9d5      	cbnz	r5, 8004d70 <__sfp+0x64>
 8004d3a:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <__sfp+0x88>)
 8004d3c:	60e3      	str	r3, [r4, #12]
 8004d3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d42:	6665      	str	r5, [r4, #100]	; 0x64
 8004d44:	f000 f847 	bl	8004dd6 <__retarget_lock_init_recursive>
 8004d48:	f7ff ff96 	bl	8004c78 <__sfp_lock_release>
 8004d4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d54:	6025      	str	r5, [r4, #0]
 8004d56:	61a5      	str	r5, [r4, #24]
 8004d58:	2208      	movs	r2, #8
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d60:	f7ff fd7e 	bl	8004860 <memset>
 8004d64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d70:	3468      	adds	r4, #104	; 0x68
 8004d72:	e7d9      	b.n	8004d28 <__sfp+0x1c>
 8004d74:	2104      	movs	r1, #4
 8004d76:	4638      	mov	r0, r7
 8004d78:	f7ff ff62 	bl	8004c40 <__sfmoreglue>
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	6030      	str	r0, [r6, #0]
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d1d5      	bne.n	8004d30 <__sfp+0x24>
 8004d84:	f7ff ff78 	bl	8004c78 <__sfp_lock_release>
 8004d88:	230c      	movs	r3, #12
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	e7ee      	b.n	8004d6c <__sfp+0x60>
 8004d8e:	bf00      	nop
 8004d90:	08005a44 	.word	0x08005a44
 8004d94:	ffff0001 	.word	0xffff0001

08004d98 <_fwalk_reent>:
 8004d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	4688      	mov	r8, r1
 8004da0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004da4:	2700      	movs	r7, #0
 8004da6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004daa:	f1b9 0901 	subs.w	r9, r9, #1
 8004dae:	d505      	bpl.n	8004dbc <_fwalk_reent+0x24>
 8004db0:	6824      	ldr	r4, [r4, #0]
 8004db2:	2c00      	cmp	r4, #0
 8004db4:	d1f7      	bne.n	8004da6 <_fwalk_reent+0xe>
 8004db6:	4638      	mov	r0, r7
 8004db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dbc:	89ab      	ldrh	r3, [r5, #12]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d907      	bls.n	8004dd2 <_fwalk_reent+0x3a>
 8004dc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	d003      	beq.n	8004dd2 <_fwalk_reent+0x3a>
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4630      	mov	r0, r6
 8004dce:	47c0      	blx	r8
 8004dd0:	4307      	orrs	r7, r0
 8004dd2:	3568      	adds	r5, #104	; 0x68
 8004dd4:	e7e9      	b.n	8004daa <_fwalk_reent+0x12>

08004dd6 <__retarget_lock_init_recursive>:
 8004dd6:	4770      	bx	lr

08004dd8 <__retarget_lock_acquire_recursive>:
 8004dd8:	4770      	bx	lr

08004dda <__retarget_lock_release_recursive>:
 8004dda:	4770      	bx	lr

08004ddc <__swhatbuf_r>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	460e      	mov	r6, r1
 8004de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de4:	2900      	cmp	r1, #0
 8004de6:	b096      	sub	sp, #88	; 0x58
 8004de8:	4614      	mov	r4, r2
 8004dea:	461d      	mov	r5, r3
 8004dec:	da07      	bge.n	8004dfe <__swhatbuf_r+0x22>
 8004dee:	2300      	movs	r3, #0
 8004df0:	602b      	str	r3, [r5, #0]
 8004df2:	89b3      	ldrh	r3, [r6, #12]
 8004df4:	061a      	lsls	r2, r3, #24
 8004df6:	d410      	bmi.n	8004e1a <__swhatbuf_r+0x3e>
 8004df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dfc:	e00e      	b.n	8004e1c <__swhatbuf_r+0x40>
 8004dfe:	466a      	mov	r2, sp
 8004e00:	f000 fd5c 	bl	80058bc <_fstat_r>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	dbf2      	blt.n	8004dee <__swhatbuf_r+0x12>
 8004e08:	9a01      	ldr	r2, [sp, #4]
 8004e0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e12:	425a      	negs	r2, r3
 8004e14:	415a      	adcs	r2, r3
 8004e16:	602a      	str	r2, [r5, #0]
 8004e18:	e7ee      	b.n	8004df8 <__swhatbuf_r+0x1c>
 8004e1a:	2340      	movs	r3, #64	; 0x40
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	b016      	add	sp, #88	; 0x58
 8004e22:	bd70      	pop	{r4, r5, r6, pc}

08004e24 <__smakebuf_r>:
 8004e24:	898b      	ldrh	r3, [r1, #12]
 8004e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e28:	079d      	lsls	r5, r3, #30
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	d507      	bpl.n	8004e40 <__smakebuf_r+0x1c>
 8004e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	2301      	movs	r3, #1
 8004e3a:	6163      	str	r3, [r4, #20]
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	ab01      	add	r3, sp, #4
 8004e42:	466a      	mov	r2, sp
 8004e44:	f7ff ffca 	bl	8004ddc <__swhatbuf_r>
 8004e48:	9900      	ldr	r1, [sp, #0]
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f000 f881 	bl	8004f54 <_malloc_r>
 8004e52:	b948      	cbnz	r0, 8004e68 <__smakebuf_r+0x44>
 8004e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e58:	059a      	lsls	r2, r3, #22
 8004e5a:	d4ef      	bmi.n	8004e3c <__smakebuf_r+0x18>
 8004e5c:	f023 0303 	bic.w	r3, r3, #3
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	81a3      	strh	r3, [r4, #12]
 8004e66:	e7e3      	b.n	8004e30 <__smakebuf_r+0xc>
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <__smakebuf_r+0x7c>)
 8004e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	6020      	str	r0, [r4, #0]
 8004e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e74:	81a3      	strh	r3, [r4, #12]
 8004e76:	9b00      	ldr	r3, [sp, #0]
 8004e78:	6163      	str	r3, [r4, #20]
 8004e7a:	9b01      	ldr	r3, [sp, #4]
 8004e7c:	6120      	str	r0, [r4, #16]
 8004e7e:	b15b      	cbz	r3, 8004e98 <__smakebuf_r+0x74>
 8004e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e84:	4630      	mov	r0, r6
 8004e86:	f000 fd2b 	bl	80058e0 <_isatty_r>
 8004e8a:	b128      	cbz	r0, 8004e98 <__smakebuf_r+0x74>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	89a0      	ldrh	r0, [r4, #12]
 8004e9a:	4305      	orrs	r5, r0
 8004e9c:	81a5      	strh	r5, [r4, #12]
 8004e9e:	e7cd      	b.n	8004e3c <__smakebuf_r+0x18>
 8004ea0:	08004c35 	.word	0x08004c35

08004ea4 <malloc>:
 8004ea4:	4b02      	ldr	r3, [pc, #8]	; (8004eb0 <malloc+0xc>)
 8004ea6:	4601      	mov	r1, r0
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	f000 b853 	b.w	8004f54 <_malloc_r>
 8004eae:	bf00      	nop
 8004eb0:	2000002c 	.word	0x2000002c

08004eb4 <_free_r>:
 8004eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004eb6:	2900      	cmp	r1, #0
 8004eb8:	d048      	beq.n	8004f4c <_free_r+0x98>
 8004eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ebe:	9001      	str	r0, [sp, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ec6:	bfb8      	it	lt
 8004ec8:	18e4      	addlt	r4, r4, r3
 8004eca:	f000 fd2b 	bl	8005924 <__malloc_lock>
 8004ece:	4a20      	ldr	r2, [pc, #128]	; (8004f50 <_free_r+0x9c>)
 8004ed0:	9801      	ldr	r0, [sp, #4]
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	4615      	mov	r5, r2
 8004ed6:	b933      	cbnz	r3, 8004ee6 <_free_r+0x32>
 8004ed8:	6063      	str	r3, [r4, #4]
 8004eda:	6014      	str	r4, [r2, #0]
 8004edc:	b003      	add	sp, #12
 8004ede:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ee2:	f000 bd25 	b.w	8005930 <__malloc_unlock>
 8004ee6:	42a3      	cmp	r3, r4
 8004ee8:	d90b      	bls.n	8004f02 <_free_r+0x4e>
 8004eea:	6821      	ldr	r1, [r4, #0]
 8004eec:	1862      	adds	r2, r4, r1
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	bf04      	itt	eq
 8004ef2:	681a      	ldreq	r2, [r3, #0]
 8004ef4:	685b      	ldreq	r3, [r3, #4]
 8004ef6:	6063      	str	r3, [r4, #4]
 8004ef8:	bf04      	itt	eq
 8004efa:	1852      	addeq	r2, r2, r1
 8004efc:	6022      	streq	r2, [r4, #0]
 8004efe:	602c      	str	r4, [r5, #0]
 8004f00:	e7ec      	b.n	8004edc <_free_r+0x28>
 8004f02:	461a      	mov	r2, r3
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b10b      	cbz	r3, 8004f0c <_free_r+0x58>
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	d9fa      	bls.n	8004f02 <_free_r+0x4e>
 8004f0c:	6811      	ldr	r1, [r2, #0]
 8004f0e:	1855      	adds	r5, r2, r1
 8004f10:	42a5      	cmp	r5, r4
 8004f12:	d10b      	bne.n	8004f2c <_free_r+0x78>
 8004f14:	6824      	ldr	r4, [r4, #0]
 8004f16:	4421      	add	r1, r4
 8004f18:	1854      	adds	r4, r2, r1
 8004f1a:	42a3      	cmp	r3, r4
 8004f1c:	6011      	str	r1, [r2, #0]
 8004f1e:	d1dd      	bne.n	8004edc <_free_r+0x28>
 8004f20:	681c      	ldr	r4, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	6053      	str	r3, [r2, #4]
 8004f26:	4421      	add	r1, r4
 8004f28:	6011      	str	r1, [r2, #0]
 8004f2a:	e7d7      	b.n	8004edc <_free_r+0x28>
 8004f2c:	d902      	bls.n	8004f34 <_free_r+0x80>
 8004f2e:	230c      	movs	r3, #12
 8004f30:	6003      	str	r3, [r0, #0]
 8004f32:	e7d3      	b.n	8004edc <_free_r+0x28>
 8004f34:	6825      	ldr	r5, [r4, #0]
 8004f36:	1961      	adds	r1, r4, r5
 8004f38:	428b      	cmp	r3, r1
 8004f3a:	bf04      	itt	eq
 8004f3c:	6819      	ldreq	r1, [r3, #0]
 8004f3e:	685b      	ldreq	r3, [r3, #4]
 8004f40:	6063      	str	r3, [r4, #4]
 8004f42:	bf04      	itt	eq
 8004f44:	1949      	addeq	r1, r1, r5
 8004f46:	6021      	streq	r1, [r4, #0]
 8004f48:	6054      	str	r4, [r2, #4]
 8004f4a:	e7c7      	b.n	8004edc <_free_r+0x28>
 8004f4c:	b003      	add	sp, #12
 8004f4e:	bd30      	pop	{r4, r5, pc}
 8004f50:	200001b8 	.word	0x200001b8

08004f54 <_malloc_r>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	1ccd      	adds	r5, r1, #3
 8004f58:	f025 0503 	bic.w	r5, r5, #3
 8004f5c:	3508      	adds	r5, #8
 8004f5e:	2d0c      	cmp	r5, #12
 8004f60:	bf38      	it	cc
 8004f62:	250c      	movcc	r5, #12
 8004f64:	2d00      	cmp	r5, #0
 8004f66:	4606      	mov	r6, r0
 8004f68:	db01      	blt.n	8004f6e <_malloc_r+0x1a>
 8004f6a:	42a9      	cmp	r1, r5
 8004f6c:	d903      	bls.n	8004f76 <_malloc_r+0x22>
 8004f6e:	230c      	movs	r3, #12
 8004f70:	6033      	str	r3, [r6, #0]
 8004f72:	2000      	movs	r0, #0
 8004f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f76:	f000 fcd5 	bl	8005924 <__malloc_lock>
 8004f7a:	4921      	ldr	r1, [pc, #132]	; (8005000 <_malloc_r+0xac>)
 8004f7c:	680a      	ldr	r2, [r1, #0]
 8004f7e:	4614      	mov	r4, r2
 8004f80:	b99c      	cbnz	r4, 8004faa <_malloc_r+0x56>
 8004f82:	4f20      	ldr	r7, [pc, #128]	; (8005004 <_malloc_r+0xb0>)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	b923      	cbnz	r3, 8004f92 <_malloc_r+0x3e>
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	f000 fb72 	bl	8005674 <_sbrk_r>
 8004f90:	6038      	str	r0, [r7, #0]
 8004f92:	4629      	mov	r1, r5
 8004f94:	4630      	mov	r0, r6
 8004f96:	f000 fb6d 	bl	8005674 <_sbrk_r>
 8004f9a:	1c43      	adds	r3, r0, #1
 8004f9c:	d123      	bne.n	8004fe6 <_malloc_r+0x92>
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	6033      	str	r3, [r6, #0]
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f000 fcc4 	bl	8005930 <__malloc_unlock>
 8004fa8:	e7e3      	b.n	8004f72 <_malloc_r+0x1e>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	1b5b      	subs	r3, r3, r5
 8004fae:	d417      	bmi.n	8004fe0 <_malloc_r+0x8c>
 8004fb0:	2b0b      	cmp	r3, #11
 8004fb2:	d903      	bls.n	8004fbc <_malloc_r+0x68>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	441c      	add	r4, r3
 8004fb8:	6025      	str	r5, [r4, #0]
 8004fba:	e004      	b.n	8004fc6 <_malloc_r+0x72>
 8004fbc:	6863      	ldr	r3, [r4, #4]
 8004fbe:	42a2      	cmp	r2, r4
 8004fc0:	bf0c      	ite	eq
 8004fc2:	600b      	streq	r3, [r1, #0]
 8004fc4:	6053      	strne	r3, [r2, #4]
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 fcb2 	bl	8005930 <__malloc_unlock>
 8004fcc:	f104 000b 	add.w	r0, r4, #11
 8004fd0:	1d23      	adds	r3, r4, #4
 8004fd2:	f020 0007 	bic.w	r0, r0, #7
 8004fd6:	1ac2      	subs	r2, r0, r3
 8004fd8:	d0cc      	beq.n	8004f74 <_malloc_r+0x20>
 8004fda:	1a1b      	subs	r3, r3, r0
 8004fdc:	50a3      	str	r3, [r4, r2]
 8004fde:	e7c9      	b.n	8004f74 <_malloc_r+0x20>
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	6864      	ldr	r4, [r4, #4]
 8004fe4:	e7cc      	b.n	8004f80 <_malloc_r+0x2c>
 8004fe6:	1cc4      	adds	r4, r0, #3
 8004fe8:	f024 0403 	bic.w	r4, r4, #3
 8004fec:	42a0      	cmp	r0, r4
 8004fee:	d0e3      	beq.n	8004fb8 <_malloc_r+0x64>
 8004ff0:	1a21      	subs	r1, r4, r0
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f000 fb3e 	bl	8005674 <_sbrk_r>
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	d1dd      	bne.n	8004fb8 <_malloc_r+0x64>
 8004ffc:	e7cf      	b.n	8004f9e <_malloc_r+0x4a>
 8004ffe:	bf00      	nop
 8005000:	200001b8 	.word	0x200001b8
 8005004:	200001bc 	.word	0x200001bc

08005008 <__sfputc_r>:
 8005008:	6893      	ldr	r3, [r2, #8]
 800500a:	3b01      	subs	r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	b410      	push	{r4}
 8005010:	6093      	str	r3, [r2, #8]
 8005012:	da08      	bge.n	8005026 <__sfputc_r+0x1e>
 8005014:	6994      	ldr	r4, [r2, #24]
 8005016:	42a3      	cmp	r3, r4
 8005018:	db01      	blt.n	800501e <__sfputc_r+0x16>
 800501a:	290a      	cmp	r1, #10
 800501c:	d103      	bne.n	8005026 <__sfputc_r+0x1e>
 800501e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005022:	f000 bb7b 	b.w	800571c <__swbuf_r>
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	1c58      	adds	r0, r3, #1
 800502a:	6010      	str	r0, [r2, #0]
 800502c:	7019      	strb	r1, [r3, #0]
 800502e:	4608      	mov	r0, r1
 8005030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005034:	4770      	bx	lr

08005036 <__sfputs_r>:
 8005036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005038:	4606      	mov	r6, r0
 800503a:	460f      	mov	r7, r1
 800503c:	4614      	mov	r4, r2
 800503e:	18d5      	adds	r5, r2, r3
 8005040:	42ac      	cmp	r4, r5
 8005042:	d101      	bne.n	8005048 <__sfputs_r+0x12>
 8005044:	2000      	movs	r0, #0
 8005046:	e007      	b.n	8005058 <__sfputs_r+0x22>
 8005048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800504c:	463a      	mov	r2, r7
 800504e:	4630      	mov	r0, r6
 8005050:	f7ff ffda 	bl	8005008 <__sfputc_r>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d1f3      	bne.n	8005040 <__sfputs_r+0xa>
 8005058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800505c <_vfiprintf_r>:
 800505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005060:	460d      	mov	r5, r1
 8005062:	b09d      	sub	sp, #116	; 0x74
 8005064:	4614      	mov	r4, r2
 8005066:	4698      	mov	r8, r3
 8005068:	4606      	mov	r6, r0
 800506a:	b118      	cbz	r0, 8005074 <_vfiprintf_r+0x18>
 800506c:	6983      	ldr	r3, [r0, #24]
 800506e:	b90b      	cbnz	r3, 8005074 <_vfiprintf_r+0x18>
 8005070:	f7ff fe14 	bl	8004c9c <__sinit>
 8005074:	4b89      	ldr	r3, [pc, #548]	; (800529c <_vfiprintf_r+0x240>)
 8005076:	429d      	cmp	r5, r3
 8005078:	d11b      	bne.n	80050b2 <_vfiprintf_r+0x56>
 800507a:	6875      	ldr	r5, [r6, #4]
 800507c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800507e:	07d9      	lsls	r1, r3, #31
 8005080:	d405      	bmi.n	800508e <_vfiprintf_r+0x32>
 8005082:	89ab      	ldrh	r3, [r5, #12]
 8005084:	059a      	lsls	r2, r3, #22
 8005086:	d402      	bmi.n	800508e <_vfiprintf_r+0x32>
 8005088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800508a:	f7ff fea5 	bl	8004dd8 <__retarget_lock_acquire_recursive>
 800508e:	89ab      	ldrh	r3, [r5, #12]
 8005090:	071b      	lsls	r3, r3, #28
 8005092:	d501      	bpl.n	8005098 <_vfiprintf_r+0x3c>
 8005094:	692b      	ldr	r3, [r5, #16]
 8005096:	b9eb      	cbnz	r3, 80050d4 <_vfiprintf_r+0x78>
 8005098:	4629      	mov	r1, r5
 800509a:	4630      	mov	r0, r6
 800509c:	f000 fb90 	bl	80057c0 <__swsetup_r>
 80050a0:	b1c0      	cbz	r0, 80050d4 <_vfiprintf_r+0x78>
 80050a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050a4:	07dc      	lsls	r4, r3, #31
 80050a6:	d50e      	bpl.n	80050c6 <_vfiprintf_r+0x6a>
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	b01d      	add	sp, #116	; 0x74
 80050ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b2:	4b7b      	ldr	r3, [pc, #492]	; (80052a0 <_vfiprintf_r+0x244>)
 80050b4:	429d      	cmp	r5, r3
 80050b6:	d101      	bne.n	80050bc <_vfiprintf_r+0x60>
 80050b8:	68b5      	ldr	r5, [r6, #8]
 80050ba:	e7df      	b.n	800507c <_vfiprintf_r+0x20>
 80050bc:	4b79      	ldr	r3, [pc, #484]	; (80052a4 <_vfiprintf_r+0x248>)
 80050be:	429d      	cmp	r5, r3
 80050c0:	bf08      	it	eq
 80050c2:	68f5      	ldreq	r5, [r6, #12]
 80050c4:	e7da      	b.n	800507c <_vfiprintf_r+0x20>
 80050c6:	89ab      	ldrh	r3, [r5, #12]
 80050c8:	0598      	lsls	r0, r3, #22
 80050ca:	d4ed      	bmi.n	80050a8 <_vfiprintf_r+0x4c>
 80050cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050ce:	f7ff fe84 	bl	8004dda <__retarget_lock_release_recursive>
 80050d2:	e7e9      	b.n	80050a8 <_vfiprintf_r+0x4c>
 80050d4:	2300      	movs	r3, #0
 80050d6:	9309      	str	r3, [sp, #36]	; 0x24
 80050d8:	2320      	movs	r3, #32
 80050da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050de:	f8cd 800c 	str.w	r8, [sp, #12]
 80050e2:	2330      	movs	r3, #48	; 0x30
 80050e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80052a8 <_vfiprintf_r+0x24c>
 80050e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050ec:	f04f 0901 	mov.w	r9, #1
 80050f0:	4623      	mov	r3, r4
 80050f2:	469a      	mov	sl, r3
 80050f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050f8:	b10a      	cbz	r2, 80050fe <_vfiprintf_r+0xa2>
 80050fa:	2a25      	cmp	r2, #37	; 0x25
 80050fc:	d1f9      	bne.n	80050f2 <_vfiprintf_r+0x96>
 80050fe:	ebba 0b04 	subs.w	fp, sl, r4
 8005102:	d00b      	beq.n	800511c <_vfiprintf_r+0xc0>
 8005104:	465b      	mov	r3, fp
 8005106:	4622      	mov	r2, r4
 8005108:	4629      	mov	r1, r5
 800510a:	4630      	mov	r0, r6
 800510c:	f7ff ff93 	bl	8005036 <__sfputs_r>
 8005110:	3001      	adds	r0, #1
 8005112:	f000 80aa 	beq.w	800526a <_vfiprintf_r+0x20e>
 8005116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005118:	445a      	add	r2, fp
 800511a:	9209      	str	r2, [sp, #36]	; 0x24
 800511c:	f89a 3000 	ldrb.w	r3, [sl]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 80a2 	beq.w	800526a <_vfiprintf_r+0x20e>
 8005126:	2300      	movs	r3, #0
 8005128:	f04f 32ff 	mov.w	r2, #4294967295
 800512c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005130:	f10a 0a01 	add.w	sl, sl, #1
 8005134:	9304      	str	r3, [sp, #16]
 8005136:	9307      	str	r3, [sp, #28]
 8005138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800513c:	931a      	str	r3, [sp, #104]	; 0x68
 800513e:	4654      	mov	r4, sl
 8005140:	2205      	movs	r2, #5
 8005142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005146:	4858      	ldr	r0, [pc, #352]	; (80052a8 <_vfiprintf_r+0x24c>)
 8005148:	f7fb f842 	bl	80001d0 <memchr>
 800514c:	9a04      	ldr	r2, [sp, #16]
 800514e:	b9d8      	cbnz	r0, 8005188 <_vfiprintf_r+0x12c>
 8005150:	06d1      	lsls	r1, r2, #27
 8005152:	bf44      	itt	mi
 8005154:	2320      	movmi	r3, #32
 8005156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800515a:	0713      	lsls	r3, r2, #28
 800515c:	bf44      	itt	mi
 800515e:	232b      	movmi	r3, #43	; 0x2b
 8005160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005164:	f89a 3000 	ldrb.w	r3, [sl]
 8005168:	2b2a      	cmp	r3, #42	; 0x2a
 800516a:	d015      	beq.n	8005198 <_vfiprintf_r+0x13c>
 800516c:	9a07      	ldr	r2, [sp, #28]
 800516e:	4654      	mov	r4, sl
 8005170:	2000      	movs	r0, #0
 8005172:	f04f 0c0a 	mov.w	ip, #10
 8005176:	4621      	mov	r1, r4
 8005178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800517c:	3b30      	subs	r3, #48	; 0x30
 800517e:	2b09      	cmp	r3, #9
 8005180:	d94e      	bls.n	8005220 <_vfiprintf_r+0x1c4>
 8005182:	b1b0      	cbz	r0, 80051b2 <_vfiprintf_r+0x156>
 8005184:	9207      	str	r2, [sp, #28]
 8005186:	e014      	b.n	80051b2 <_vfiprintf_r+0x156>
 8005188:	eba0 0308 	sub.w	r3, r0, r8
 800518c:	fa09 f303 	lsl.w	r3, r9, r3
 8005190:	4313      	orrs	r3, r2
 8005192:	9304      	str	r3, [sp, #16]
 8005194:	46a2      	mov	sl, r4
 8005196:	e7d2      	b.n	800513e <_vfiprintf_r+0xe2>
 8005198:	9b03      	ldr	r3, [sp, #12]
 800519a:	1d19      	adds	r1, r3, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	9103      	str	r1, [sp, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bfbb      	ittet	lt
 80051a4:	425b      	neglt	r3, r3
 80051a6:	f042 0202 	orrlt.w	r2, r2, #2
 80051aa:	9307      	strge	r3, [sp, #28]
 80051ac:	9307      	strlt	r3, [sp, #28]
 80051ae:	bfb8      	it	lt
 80051b0:	9204      	strlt	r2, [sp, #16]
 80051b2:	7823      	ldrb	r3, [r4, #0]
 80051b4:	2b2e      	cmp	r3, #46	; 0x2e
 80051b6:	d10c      	bne.n	80051d2 <_vfiprintf_r+0x176>
 80051b8:	7863      	ldrb	r3, [r4, #1]
 80051ba:	2b2a      	cmp	r3, #42	; 0x2a
 80051bc:	d135      	bne.n	800522a <_vfiprintf_r+0x1ce>
 80051be:	9b03      	ldr	r3, [sp, #12]
 80051c0:	1d1a      	adds	r2, r3, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	9203      	str	r2, [sp, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bfb8      	it	lt
 80051ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80051ce:	3402      	adds	r4, #2
 80051d0:	9305      	str	r3, [sp, #20]
 80051d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80052b8 <_vfiprintf_r+0x25c>
 80051d6:	7821      	ldrb	r1, [r4, #0]
 80051d8:	2203      	movs	r2, #3
 80051da:	4650      	mov	r0, sl
 80051dc:	f7fa fff8 	bl	80001d0 <memchr>
 80051e0:	b140      	cbz	r0, 80051f4 <_vfiprintf_r+0x198>
 80051e2:	2340      	movs	r3, #64	; 0x40
 80051e4:	eba0 000a 	sub.w	r0, r0, sl
 80051e8:	fa03 f000 	lsl.w	r0, r3, r0
 80051ec:	9b04      	ldr	r3, [sp, #16]
 80051ee:	4303      	orrs	r3, r0
 80051f0:	3401      	adds	r4, #1
 80051f2:	9304      	str	r3, [sp, #16]
 80051f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f8:	482c      	ldr	r0, [pc, #176]	; (80052ac <_vfiprintf_r+0x250>)
 80051fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051fe:	2206      	movs	r2, #6
 8005200:	f7fa ffe6 	bl	80001d0 <memchr>
 8005204:	2800      	cmp	r0, #0
 8005206:	d03f      	beq.n	8005288 <_vfiprintf_r+0x22c>
 8005208:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <_vfiprintf_r+0x254>)
 800520a:	bb1b      	cbnz	r3, 8005254 <_vfiprintf_r+0x1f8>
 800520c:	9b03      	ldr	r3, [sp, #12]
 800520e:	3307      	adds	r3, #7
 8005210:	f023 0307 	bic.w	r3, r3, #7
 8005214:	3308      	adds	r3, #8
 8005216:	9303      	str	r3, [sp, #12]
 8005218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800521a:	443b      	add	r3, r7
 800521c:	9309      	str	r3, [sp, #36]	; 0x24
 800521e:	e767      	b.n	80050f0 <_vfiprintf_r+0x94>
 8005220:	fb0c 3202 	mla	r2, ip, r2, r3
 8005224:	460c      	mov	r4, r1
 8005226:	2001      	movs	r0, #1
 8005228:	e7a5      	b.n	8005176 <_vfiprintf_r+0x11a>
 800522a:	2300      	movs	r3, #0
 800522c:	3401      	adds	r4, #1
 800522e:	9305      	str	r3, [sp, #20]
 8005230:	4619      	mov	r1, r3
 8005232:	f04f 0c0a 	mov.w	ip, #10
 8005236:	4620      	mov	r0, r4
 8005238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800523c:	3a30      	subs	r2, #48	; 0x30
 800523e:	2a09      	cmp	r2, #9
 8005240:	d903      	bls.n	800524a <_vfiprintf_r+0x1ee>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0c5      	beq.n	80051d2 <_vfiprintf_r+0x176>
 8005246:	9105      	str	r1, [sp, #20]
 8005248:	e7c3      	b.n	80051d2 <_vfiprintf_r+0x176>
 800524a:	fb0c 2101 	mla	r1, ip, r1, r2
 800524e:	4604      	mov	r4, r0
 8005250:	2301      	movs	r3, #1
 8005252:	e7f0      	b.n	8005236 <_vfiprintf_r+0x1da>
 8005254:	ab03      	add	r3, sp, #12
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	462a      	mov	r2, r5
 800525a:	4b16      	ldr	r3, [pc, #88]	; (80052b4 <_vfiprintf_r+0x258>)
 800525c:	a904      	add	r1, sp, #16
 800525e:	4630      	mov	r0, r6
 8005260:	f3af 8000 	nop.w
 8005264:	4607      	mov	r7, r0
 8005266:	1c78      	adds	r0, r7, #1
 8005268:	d1d6      	bne.n	8005218 <_vfiprintf_r+0x1bc>
 800526a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800526c:	07d9      	lsls	r1, r3, #31
 800526e:	d405      	bmi.n	800527c <_vfiprintf_r+0x220>
 8005270:	89ab      	ldrh	r3, [r5, #12]
 8005272:	059a      	lsls	r2, r3, #22
 8005274:	d402      	bmi.n	800527c <_vfiprintf_r+0x220>
 8005276:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005278:	f7ff fdaf 	bl	8004dda <__retarget_lock_release_recursive>
 800527c:	89ab      	ldrh	r3, [r5, #12]
 800527e:	065b      	lsls	r3, r3, #25
 8005280:	f53f af12 	bmi.w	80050a8 <_vfiprintf_r+0x4c>
 8005284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005286:	e711      	b.n	80050ac <_vfiprintf_r+0x50>
 8005288:	ab03      	add	r3, sp, #12
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	462a      	mov	r2, r5
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <_vfiprintf_r+0x258>)
 8005290:	a904      	add	r1, sp, #16
 8005292:	4630      	mov	r0, r6
 8005294:	f000 f880 	bl	8005398 <_printf_i>
 8005298:	e7e4      	b.n	8005264 <_vfiprintf_r+0x208>
 800529a:	bf00      	nop
 800529c:	08005a68 	.word	0x08005a68
 80052a0:	08005a88 	.word	0x08005a88
 80052a4:	08005a48 	.word	0x08005a48
 80052a8:	08005aa8 	.word	0x08005aa8
 80052ac:	08005ab2 	.word	0x08005ab2
 80052b0:	00000000 	.word	0x00000000
 80052b4:	08005037 	.word	0x08005037
 80052b8:	08005aae 	.word	0x08005aae

080052bc <_printf_common>:
 80052bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c0:	4616      	mov	r6, r2
 80052c2:	4699      	mov	r9, r3
 80052c4:	688a      	ldr	r2, [r1, #8]
 80052c6:	690b      	ldr	r3, [r1, #16]
 80052c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052cc:	4293      	cmp	r3, r2
 80052ce:	bfb8      	it	lt
 80052d0:	4613      	movlt	r3, r2
 80052d2:	6033      	str	r3, [r6, #0]
 80052d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052d8:	4607      	mov	r7, r0
 80052da:	460c      	mov	r4, r1
 80052dc:	b10a      	cbz	r2, 80052e2 <_printf_common+0x26>
 80052de:	3301      	adds	r3, #1
 80052e0:	6033      	str	r3, [r6, #0]
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	0699      	lsls	r1, r3, #26
 80052e6:	bf42      	ittt	mi
 80052e8:	6833      	ldrmi	r3, [r6, #0]
 80052ea:	3302      	addmi	r3, #2
 80052ec:	6033      	strmi	r3, [r6, #0]
 80052ee:	6825      	ldr	r5, [r4, #0]
 80052f0:	f015 0506 	ands.w	r5, r5, #6
 80052f4:	d106      	bne.n	8005304 <_printf_common+0x48>
 80052f6:	f104 0a19 	add.w	sl, r4, #25
 80052fa:	68e3      	ldr	r3, [r4, #12]
 80052fc:	6832      	ldr	r2, [r6, #0]
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	42ab      	cmp	r3, r5
 8005302:	dc26      	bgt.n	8005352 <_printf_common+0x96>
 8005304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005308:	1e13      	subs	r3, r2, #0
 800530a:	6822      	ldr	r2, [r4, #0]
 800530c:	bf18      	it	ne
 800530e:	2301      	movne	r3, #1
 8005310:	0692      	lsls	r2, r2, #26
 8005312:	d42b      	bmi.n	800536c <_printf_common+0xb0>
 8005314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005318:	4649      	mov	r1, r9
 800531a:	4638      	mov	r0, r7
 800531c:	47c0      	blx	r8
 800531e:	3001      	adds	r0, #1
 8005320:	d01e      	beq.n	8005360 <_printf_common+0xa4>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	68e5      	ldr	r5, [r4, #12]
 8005326:	6832      	ldr	r2, [r6, #0]
 8005328:	f003 0306 	and.w	r3, r3, #6
 800532c:	2b04      	cmp	r3, #4
 800532e:	bf08      	it	eq
 8005330:	1aad      	subeq	r5, r5, r2
 8005332:	68a3      	ldr	r3, [r4, #8]
 8005334:	6922      	ldr	r2, [r4, #16]
 8005336:	bf0c      	ite	eq
 8005338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800533c:	2500      	movne	r5, #0
 800533e:	4293      	cmp	r3, r2
 8005340:	bfc4      	itt	gt
 8005342:	1a9b      	subgt	r3, r3, r2
 8005344:	18ed      	addgt	r5, r5, r3
 8005346:	2600      	movs	r6, #0
 8005348:	341a      	adds	r4, #26
 800534a:	42b5      	cmp	r5, r6
 800534c:	d11a      	bne.n	8005384 <_printf_common+0xc8>
 800534e:	2000      	movs	r0, #0
 8005350:	e008      	b.n	8005364 <_printf_common+0xa8>
 8005352:	2301      	movs	r3, #1
 8005354:	4652      	mov	r2, sl
 8005356:	4649      	mov	r1, r9
 8005358:	4638      	mov	r0, r7
 800535a:	47c0      	blx	r8
 800535c:	3001      	adds	r0, #1
 800535e:	d103      	bne.n	8005368 <_printf_common+0xac>
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	3501      	adds	r5, #1
 800536a:	e7c6      	b.n	80052fa <_printf_common+0x3e>
 800536c:	18e1      	adds	r1, r4, r3
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	2030      	movs	r0, #48	; 0x30
 8005372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005376:	4422      	add	r2, r4
 8005378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800537c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005380:	3302      	adds	r3, #2
 8005382:	e7c7      	b.n	8005314 <_printf_common+0x58>
 8005384:	2301      	movs	r3, #1
 8005386:	4622      	mov	r2, r4
 8005388:	4649      	mov	r1, r9
 800538a:	4638      	mov	r0, r7
 800538c:	47c0      	blx	r8
 800538e:	3001      	adds	r0, #1
 8005390:	d0e6      	beq.n	8005360 <_printf_common+0xa4>
 8005392:	3601      	adds	r6, #1
 8005394:	e7d9      	b.n	800534a <_printf_common+0x8e>
	...

08005398 <_printf_i>:
 8005398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800539c:	460c      	mov	r4, r1
 800539e:	4691      	mov	r9, r2
 80053a0:	7e27      	ldrb	r7, [r4, #24]
 80053a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053a4:	2f78      	cmp	r7, #120	; 0x78
 80053a6:	4680      	mov	r8, r0
 80053a8:	469a      	mov	sl, r3
 80053aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053ae:	d807      	bhi.n	80053c0 <_printf_i+0x28>
 80053b0:	2f62      	cmp	r7, #98	; 0x62
 80053b2:	d80a      	bhi.n	80053ca <_printf_i+0x32>
 80053b4:	2f00      	cmp	r7, #0
 80053b6:	f000 80d8 	beq.w	800556a <_printf_i+0x1d2>
 80053ba:	2f58      	cmp	r7, #88	; 0x58
 80053bc:	f000 80a3 	beq.w	8005506 <_printf_i+0x16e>
 80053c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053c8:	e03a      	b.n	8005440 <_printf_i+0xa8>
 80053ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ce:	2b15      	cmp	r3, #21
 80053d0:	d8f6      	bhi.n	80053c0 <_printf_i+0x28>
 80053d2:	a001      	add	r0, pc, #4	; (adr r0, 80053d8 <_printf_i+0x40>)
 80053d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053d8:	08005431 	.word	0x08005431
 80053dc:	08005445 	.word	0x08005445
 80053e0:	080053c1 	.word	0x080053c1
 80053e4:	080053c1 	.word	0x080053c1
 80053e8:	080053c1 	.word	0x080053c1
 80053ec:	080053c1 	.word	0x080053c1
 80053f0:	08005445 	.word	0x08005445
 80053f4:	080053c1 	.word	0x080053c1
 80053f8:	080053c1 	.word	0x080053c1
 80053fc:	080053c1 	.word	0x080053c1
 8005400:	080053c1 	.word	0x080053c1
 8005404:	08005551 	.word	0x08005551
 8005408:	08005475 	.word	0x08005475
 800540c:	08005533 	.word	0x08005533
 8005410:	080053c1 	.word	0x080053c1
 8005414:	080053c1 	.word	0x080053c1
 8005418:	08005573 	.word	0x08005573
 800541c:	080053c1 	.word	0x080053c1
 8005420:	08005475 	.word	0x08005475
 8005424:	080053c1 	.word	0x080053c1
 8005428:	080053c1 	.word	0x080053c1
 800542c:	0800553b 	.word	0x0800553b
 8005430:	680b      	ldr	r3, [r1, #0]
 8005432:	1d1a      	adds	r2, r3, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	600a      	str	r2, [r1, #0]
 8005438:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800543c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005440:	2301      	movs	r3, #1
 8005442:	e0a3      	b.n	800558c <_printf_i+0x1f4>
 8005444:	6825      	ldr	r5, [r4, #0]
 8005446:	6808      	ldr	r0, [r1, #0]
 8005448:	062e      	lsls	r6, r5, #24
 800544a:	f100 0304 	add.w	r3, r0, #4
 800544e:	d50a      	bpl.n	8005466 <_printf_i+0xce>
 8005450:	6805      	ldr	r5, [r0, #0]
 8005452:	600b      	str	r3, [r1, #0]
 8005454:	2d00      	cmp	r5, #0
 8005456:	da03      	bge.n	8005460 <_printf_i+0xc8>
 8005458:	232d      	movs	r3, #45	; 0x2d
 800545a:	426d      	negs	r5, r5
 800545c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005460:	485e      	ldr	r0, [pc, #376]	; (80055dc <_printf_i+0x244>)
 8005462:	230a      	movs	r3, #10
 8005464:	e019      	b.n	800549a <_printf_i+0x102>
 8005466:	f015 0f40 	tst.w	r5, #64	; 0x40
 800546a:	6805      	ldr	r5, [r0, #0]
 800546c:	600b      	str	r3, [r1, #0]
 800546e:	bf18      	it	ne
 8005470:	b22d      	sxthne	r5, r5
 8005472:	e7ef      	b.n	8005454 <_printf_i+0xbc>
 8005474:	680b      	ldr	r3, [r1, #0]
 8005476:	6825      	ldr	r5, [r4, #0]
 8005478:	1d18      	adds	r0, r3, #4
 800547a:	6008      	str	r0, [r1, #0]
 800547c:	0628      	lsls	r0, r5, #24
 800547e:	d501      	bpl.n	8005484 <_printf_i+0xec>
 8005480:	681d      	ldr	r5, [r3, #0]
 8005482:	e002      	b.n	800548a <_printf_i+0xf2>
 8005484:	0669      	lsls	r1, r5, #25
 8005486:	d5fb      	bpl.n	8005480 <_printf_i+0xe8>
 8005488:	881d      	ldrh	r5, [r3, #0]
 800548a:	4854      	ldr	r0, [pc, #336]	; (80055dc <_printf_i+0x244>)
 800548c:	2f6f      	cmp	r7, #111	; 0x6f
 800548e:	bf0c      	ite	eq
 8005490:	2308      	moveq	r3, #8
 8005492:	230a      	movne	r3, #10
 8005494:	2100      	movs	r1, #0
 8005496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800549a:	6866      	ldr	r6, [r4, #4]
 800549c:	60a6      	str	r6, [r4, #8]
 800549e:	2e00      	cmp	r6, #0
 80054a0:	bfa2      	ittt	ge
 80054a2:	6821      	ldrge	r1, [r4, #0]
 80054a4:	f021 0104 	bicge.w	r1, r1, #4
 80054a8:	6021      	strge	r1, [r4, #0]
 80054aa:	b90d      	cbnz	r5, 80054b0 <_printf_i+0x118>
 80054ac:	2e00      	cmp	r6, #0
 80054ae:	d04d      	beq.n	800554c <_printf_i+0x1b4>
 80054b0:	4616      	mov	r6, r2
 80054b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80054b6:	fb03 5711 	mls	r7, r3, r1, r5
 80054ba:	5dc7      	ldrb	r7, [r0, r7]
 80054bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054c0:	462f      	mov	r7, r5
 80054c2:	42bb      	cmp	r3, r7
 80054c4:	460d      	mov	r5, r1
 80054c6:	d9f4      	bls.n	80054b2 <_printf_i+0x11a>
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d10b      	bne.n	80054e4 <_printf_i+0x14c>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	07df      	lsls	r7, r3, #31
 80054d0:	d508      	bpl.n	80054e4 <_printf_i+0x14c>
 80054d2:	6923      	ldr	r3, [r4, #16]
 80054d4:	6861      	ldr	r1, [r4, #4]
 80054d6:	4299      	cmp	r1, r3
 80054d8:	bfde      	ittt	le
 80054da:	2330      	movle	r3, #48	; 0x30
 80054dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054e4:	1b92      	subs	r2, r2, r6
 80054e6:	6122      	str	r2, [r4, #16]
 80054e8:	f8cd a000 	str.w	sl, [sp]
 80054ec:	464b      	mov	r3, r9
 80054ee:	aa03      	add	r2, sp, #12
 80054f0:	4621      	mov	r1, r4
 80054f2:	4640      	mov	r0, r8
 80054f4:	f7ff fee2 	bl	80052bc <_printf_common>
 80054f8:	3001      	adds	r0, #1
 80054fa:	d14c      	bne.n	8005596 <_printf_i+0x1fe>
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	b004      	add	sp, #16
 8005502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005506:	4835      	ldr	r0, [pc, #212]	; (80055dc <_printf_i+0x244>)
 8005508:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	680e      	ldr	r6, [r1, #0]
 8005510:	061f      	lsls	r7, r3, #24
 8005512:	f856 5b04 	ldr.w	r5, [r6], #4
 8005516:	600e      	str	r6, [r1, #0]
 8005518:	d514      	bpl.n	8005544 <_printf_i+0x1ac>
 800551a:	07d9      	lsls	r1, r3, #31
 800551c:	bf44      	itt	mi
 800551e:	f043 0320 	orrmi.w	r3, r3, #32
 8005522:	6023      	strmi	r3, [r4, #0]
 8005524:	b91d      	cbnz	r5, 800552e <_printf_i+0x196>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	f023 0320 	bic.w	r3, r3, #32
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	2310      	movs	r3, #16
 8005530:	e7b0      	b.n	8005494 <_printf_i+0xfc>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	f043 0320 	orr.w	r3, r3, #32
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	2378      	movs	r3, #120	; 0x78
 800553c:	4828      	ldr	r0, [pc, #160]	; (80055e0 <_printf_i+0x248>)
 800553e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005542:	e7e3      	b.n	800550c <_printf_i+0x174>
 8005544:	065e      	lsls	r6, r3, #25
 8005546:	bf48      	it	mi
 8005548:	b2ad      	uxthmi	r5, r5
 800554a:	e7e6      	b.n	800551a <_printf_i+0x182>
 800554c:	4616      	mov	r6, r2
 800554e:	e7bb      	b.n	80054c8 <_printf_i+0x130>
 8005550:	680b      	ldr	r3, [r1, #0]
 8005552:	6826      	ldr	r6, [r4, #0]
 8005554:	6960      	ldr	r0, [r4, #20]
 8005556:	1d1d      	adds	r5, r3, #4
 8005558:	600d      	str	r5, [r1, #0]
 800555a:	0635      	lsls	r5, r6, #24
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	d501      	bpl.n	8005564 <_printf_i+0x1cc>
 8005560:	6018      	str	r0, [r3, #0]
 8005562:	e002      	b.n	800556a <_printf_i+0x1d2>
 8005564:	0671      	lsls	r1, r6, #25
 8005566:	d5fb      	bpl.n	8005560 <_printf_i+0x1c8>
 8005568:	8018      	strh	r0, [r3, #0]
 800556a:	2300      	movs	r3, #0
 800556c:	6123      	str	r3, [r4, #16]
 800556e:	4616      	mov	r6, r2
 8005570:	e7ba      	b.n	80054e8 <_printf_i+0x150>
 8005572:	680b      	ldr	r3, [r1, #0]
 8005574:	1d1a      	adds	r2, r3, #4
 8005576:	600a      	str	r2, [r1, #0]
 8005578:	681e      	ldr	r6, [r3, #0]
 800557a:	6862      	ldr	r2, [r4, #4]
 800557c:	2100      	movs	r1, #0
 800557e:	4630      	mov	r0, r6
 8005580:	f7fa fe26 	bl	80001d0 <memchr>
 8005584:	b108      	cbz	r0, 800558a <_printf_i+0x1f2>
 8005586:	1b80      	subs	r0, r0, r6
 8005588:	6060      	str	r0, [r4, #4]
 800558a:	6863      	ldr	r3, [r4, #4]
 800558c:	6123      	str	r3, [r4, #16]
 800558e:	2300      	movs	r3, #0
 8005590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005594:	e7a8      	b.n	80054e8 <_printf_i+0x150>
 8005596:	6923      	ldr	r3, [r4, #16]
 8005598:	4632      	mov	r2, r6
 800559a:	4649      	mov	r1, r9
 800559c:	4640      	mov	r0, r8
 800559e:	47d0      	blx	sl
 80055a0:	3001      	adds	r0, #1
 80055a2:	d0ab      	beq.n	80054fc <_printf_i+0x164>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	079b      	lsls	r3, r3, #30
 80055a8:	d413      	bmi.n	80055d2 <_printf_i+0x23a>
 80055aa:	68e0      	ldr	r0, [r4, #12]
 80055ac:	9b03      	ldr	r3, [sp, #12]
 80055ae:	4298      	cmp	r0, r3
 80055b0:	bfb8      	it	lt
 80055b2:	4618      	movlt	r0, r3
 80055b4:	e7a4      	b.n	8005500 <_printf_i+0x168>
 80055b6:	2301      	movs	r3, #1
 80055b8:	4632      	mov	r2, r6
 80055ba:	4649      	mov	r1, r9
 80055bc:	4640      	mov	r0, r8
 80055be:	47d0      	blx	sl
 80055c0:	3001      	adds	r0, #1
 80055c2:	d09b      	beq.n	80054fc <_printf_i+0x164>
 80055c4:	3501      	adds	r5, #1
 80055c6:	68e3      	ldr	r3, [r4, #12]
 80055c8:	9903      	ldr	r1, [sp, #12]
 80055ca:	1a5b      	subs	r3, r3, r1
 80055cc:	42ab      	cmp	r3, r5
 80055ce:	dcf2      	bgt.n	80055b6 <_printf_i+0x21e>
 80055d0:	e7eb      	b.n	80055aa <_printf_i+0x212>
 80055d2:	2500      	movs	r5, #0
 80055d4:	f104 0619 	add.w	r6, r4, #25
 80055d8:	e7f5      	b.n	80055c6 <_printf_i+0x22e>
 80055da:	bf00      	nop
 80055dc:	08005ab9 	.word	0x08005ab9
 80055e0:	08005aca 	.word	0x08005aca

080055e4 <_putc_r>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	460d      	mov	r5, r1
 80055e8:	4614      	mov	r4, r2
 80055ea:	4606      	mov	r6, r0
 80055ec:	b118      	cbz	r0, 80055f6 <_putc_r+0x12>
 80055ee:	6983      	ldr	r3, [r0, #24]
 80055f0:	b90b      	cbnz	r3, 80055f6 <_putc_r+0x12>
 80055f2:	f7ff fb53 	bl	8004c9c <__sinit>
 80055f6:	4b1c      	ldr	r3, [pc, #112]	; (8005668 <_putc_r+0x84>)
 80055f8:	429c      	cmp	r4, r3
 80055fa:	d124      	bne.n	8005646 <_putc_r+0x62>
 80055fc:	6874      	ldr	r4, [r6, #4]
 80055fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005600:	07d8      	lsls	r0, r3, #31
 8005602:	d405      	bmi.n	8005610 <_putc_r+0x2c>
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	0599      	lsls	r1, r3, #22
 8005608:	d402      	bmi.n	8005610 <_putc_r+0x2c>
 800560a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800560c:	f7ff fbe4 	bl	8004dd8 <__retarget_lock_acquire_recursive>
 8005610:	68a3      	ldr	r3, [r4, #8]
 8005612:	3b01      	subs	r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	60a3      	str	r3, [r4, #8]
 8005618:	da05      	bge.n	8005626 <_putc_r+0x42>
 800561a:	69a2      	ldr	r2, [r4, #24]
 800561c:	4293      	cmp	r3, r2
 800561e:	db1c      	blt.n	800565a <_putc_r+0x76>
 8005620:	b2eb      	uxtb	r3, r5
 8005622:	2b0a      	cmp	r3, #10
 8005624:	d019      	beq.n	800565a <_putc_r+0x76>
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	6022      	str	r2, [r4, #0]
 800562c:	701d      	strb	r5, [r3, #0]
 800562e:	b2ed      	uxtb	r5, r5
 8005630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005632:	07da      	lsls	r2, r3, #31
 8005634:	d405      	bmi.n	8005642 <_putc_r+0x5e>
 8005636:	89a3      	ldrh	r3, [r4, #12]
 8005638:	059b      	lsls	r3, r3, #22
 800563a:	d402      	bmi.n	8005642 <_putc_r+0x5e>
 800563c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800563e:	f7ff fbcc 	bl	8004dda <__retarget_lock_release_recursive>
 8005642:	4628      	mov	r0, r5
 8005644:	bd70      	pop	{r4, r5, r6, pc}
 8005646:	4b09      	ldr	r3, [pc, #36]	; (800566c <_putc_r+0x88>)
 8005648:	429c      	cmp	r4, r3
 800564a:	d101      	bne.n	8005650 <_putc_r+0x6c>
 800564c:	68b4      	ldr	r4, [r6, #8]
 800564e:	e7d6      	b.n	80055fe <_putc_r+0x1a>
 8005650:	4b07      	ldr	r3, [pc, #28]	; (8005670 <_putc_r+0x8c>)
 8005652:	429c      	cmp	r4, r3
 8005654:	bf08      	it	eq
 8005656:	68f4      	ldreq	r4, [r6, #12]
 8005658:	e7d1      	b.n	80055fe <_putc_r+0x1a>
 800565a:	4629      	mov	r1, r5
 800565c:	4622      	mov	r2, r4
 800565e:	4630      	mov	r0, r6
 8005660:	f000 f85c 	bl	800571c <__swbuf_r>
 8005664:	4605      	mov	r5, r0
 8005666:	e7e3      	b.n	8005630 <_putc_r+0x4c>
 8005668:	08005a68 	.word	0x08005a68
 800566c:	08005a88 	.word	0x08005a88
 8005670:	08005a48 	.word	0x08005a48

08005674 <_sbrk_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4d06      	ldr	r5, [pc, #24]	; (8005690 <_sbrk_r+0x1c>)
 8005678:	2300      	movs	r3, #0
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	f7fe fee2 	bl	8004448 <_sbrk>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d102      	bne.n	800568e <_sbrk_r+0x1a>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	b103      	cbz	r3, 800568e <_sbrk_r+0x1a>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	200001f8 	.word	0x200001f8

08005694 <__sread>:
 8005694:	b510      	push	{r4, lr}
 8005696:	460c      	mov	r4, r1
 8005698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800569c:	f000 f94e 	bl	800593c <_read_r>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	bfab      	itete	ge
 80056a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056a6:	89a3      	ldrhlt	r3, [r4, #12]
 80056a8:	181b      	addge	r3, r3, r0
 80056aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056ae:	bfac      	ite	ge
 80056b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80056b2:	81a3      	strhlt	r3, [r4, #12]
 80056b4:	bd10      	pop	{r4, pc}

080056b6 <__swrite>:
 80056b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ba:	461f      	mov	r7, r3
 80056bc:	898b      	ldrh	r3, [r1, #12]
 80056be:	05db      	lsls	r3, r3, #23
 80056c0:	4605      	mov	r5, r0
 80056c2:	460c      	mov	r4, r1
 80056c4:	4616      	mov	r6, r2
 80056c6:	d505      	bpl.n	80056d4 <__swrite+0x1e>
 80056c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056cc:	2302      	movs	r3, #2
 80056ce:	2200      	movs	r2, #0
 80056d0:	f000 f916 	bl	8005900 <_lseek_r>
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056de:	81a3      	strh	r3, [r4, #12]
 80056e0:	4632      	mov	r2, r6
 80056e2:	463b      	mov	r3, r7
 80056e4:	4628      	mov	r0, r5
 80056e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ea:	f7fb b8f1 	b.w	80008d0 <_write_r>

080056ee <__sseek>:
 80056ee:	b510      	push	{r4, lr}
 80056f0:	460c      	mov	r4, r1
 80056f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f6:	f000 f903 	bl	8005900 <_lseek_r>
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	bf15      	itete	ne
 8005700:	6560      	strne	r0, [r4, #84]	; 0x54
 8005702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800570a:	81a3      	strheq	r3, [r4, #12]
 800570c:	bf18      	it	ne
 800570e:	81a3      	strhne	r3, [r4, #12]
 8005710:	bd10      	pop	{r4, pc}

08005712 <__sclose>:
 8005712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005716:	f000 b8c1 	b.w	800589c <_close_r>
	...

0800571c <__swbuf_r>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	460e      	mov	r6, r1
 8005720:	4614      	mov	r4, r2
 8005722:	4605      	mov	r5, r0
 8005724:	b118      	cbz	r0, 800572e <__swbuf_r+0x12>
 8005726:	6983      	ldr	r3, [r0, #24]
 8005728:	b90b      	cbnz	r3, 800572e <__swbuf_r+0x12>
 800572a:	f7ff fab7 	bl	8004c9c <__sinit>
 800572e:	4b21      	ldr	r3, [pc, #132]	; (80057b4 <__swbuf_r+0x98>)
 8005730:	429c      	cmp	r4, r3
 8005732:	d12b      	bne.n	800578c <__swbuf_r+0x70>
 8005734:	686c      	ldr	r4, [r5, #4]
 8005736:	69a3      	ldr	r3, [r4, #24]
 8005738:	60a3      	str	r3, [r4, #8]
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	071a      	lsls	r2, r3, #28
 800573e:	d52f      	bpl.n	80057a0 <__swbuf_r+0x84>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	b36b      	cbz	r3, 80057a0 <__swbuf_r+0x84>
 8005744:	6923      	ldr	r3, [r4, #16]
 8005746:	6820      	ldr	r0, [r4, #0]
 8005748:	1ac0      	subs	r0, r0, r3
 800574a:	6963      	ldr	r3, [r4, #20]
 800574c:	b2f6      	uxtb	r6, r6
 800574e:	4283      	cmp	r3, r0
 8005750:	4637      	mov	r7, r6
 8005752:	dc04      	bgt.n	800575e <__swbuf_r+0x42>
 8005754:	4621      	mov	r1, r4
 8005756:	4628      	mov	r0, r5
 8005758:	f7ff fa0c 	bl	8004b74 <_fflush_r>
 800575c:	bb30      	cbnz	r0, 80057ac <__swbuf_r+0x90>
 800575e:	68a3      	ldr	r3, [r4, #8]
 8005760:	3b01      	subs	r3, #1
 8005762:	60a3      	str	r3, [r4, #8]
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	6022      	str	r2, [r4, #0]
 800576a:	701e      	strb	r6, [r3, #0]
 800576c:	6963      	ldr	r3, [r4, #20]
 800576e:	3001      	adds	r0, #1
 8005770:	4283      	cmp	r3, r0
 8005772:	d004      	beq.n	800577e <__swbuf_r+0x62>
 8005774:	89a3      	ldrh	r3, [r4, #12]
 8005776:	07db      	lsls	r3, r3, #31
 8005778:	d506      	bpl.n	8005788 <__swbuf_r+0x6c>
 800577a:	2e0a      	cmp	r6, #10
 800577c:	d104      	bne.n	8005788 <__swbuf_r+0x6c>
 800577e:	4621      	mov	r1, r4
 8005780:	4628      	mov	r0, r5
 8005782:	f7ff f9f7 	bl	8004b74 <_fflush_r>
 8005786:	b988      	cbnz	r0, 80057ac <__swbuf_r+0x90>
 8005788:	4638      	mov	r0, r7
 800578a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <__swbuf_r+0x9c>)
 800578e:	429c      	cmp	r4, r3
 8005790:	d101      	bne.n	8005796 <__swbuf_r+0x7a>
 8005792:	68ac      	ldr	r4, [r5, #8]
 8005794:	e7cf      	b.n	8005736 <__swbuf_r+0x1a>
 8005796:	4b09      	ldr	r3, [pc, #36]	; (80057bc <__swbuf_r+0xa0>)
 8005798:	429c      	cmp	r4, r3
 800579a:	bf08      	it	eq
 800579c:	68ec      	ldreq	r4, [r5, #12]
 800579e:	e7ca      	b.n	8005736 <__swbuf_r+0x1a>
 80057a0:	4621      	mov	r1, r4
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f80c 	bl	80057c0 <__swsetup_r>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d0cb      	beq.n	8005744 <__swbuf_r+0x28>
 80057ac:	f04f 37ff 	mov.w	r7, #4294967295
 80057b0:	e7ea      	b.n	8005788 <__swbuf_r+0x6c>
 80057b2:	bf00      	nop
 80057b4:	08005a68 	.word	0x08005a68
 80057b8:	08005a88 	.word	0x08005a88
 80057bc:	08005a48 	.word	0x08005a48

080057c0 <__swsetup_r>:
 80057c0:	4b32      	ldr	r3, [pc, #200]	; (800588c <__swsetup_r+0xcc>)
 80057c2:	b570      	push	{r4, r5, r6, lr}
 80057c4:	681d      	ldr	r5, [r3, #0]
 80057c6:	4606      	mov	r6, r0
 80057c8:	460c      	mov	r4, r1
 80057ca:	b125      	cbz	r5, 80057d6 <__swsetup_r+0x16>
 80057cc:	69ab      	ldr	r3, [r5, #24]
 80057ce:	b913      	cbnz	r3, 80057d6 <__swsetup_r+0x16>
 80057d0:	4628      	mov	r0, r5
 80057d2:	f7ff fa63 	bl	8004c9c <__sinit>
 80057d6:	4b2e      	ldr	r3, [pc, #184]	; (8005890 <__swsetup_r+0xd0>)
 80057d8:	429c      	cmp	r4, r3
 80057da:	d10f      	bne.n	80057fc <__swsetup_r+0x3c>
 80057dc:	686c      	ldr	r4, [r5, #4]
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057e4:	0719      	lsls	r1, r3, #28
 80057e6:	d42c      	bmi.n	8005842 <__swsetup_r+0x82>
 80057e8:	06dd      	lsls	r5, r3, #27
 80057ea:	d411      	bmi.n	8005810 <__swsetup_r+0x50>
 80057ec:	2309      	movs	r3, #9
 80057ee:	6033      	str	r3, [r6, #0]
 80057f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	f04f 30ff 	mov.w	r0, #4294967295
 80057fa:	e03e      	b.n	800587a <__swsetup_r+0xba>
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <__swsetup_r+0xd4>)
 80057fe:	429c      	cmp	r4, r3
 8005800:	d101      	bne.n	8005806 <__swsetup_r+0x46>
 8005802:	68ac      	ldr	r4, [r5, #8]
 8005804:	e7eb      	b.n	80057de <__swsetup_r+0x1e>
 8005806:	4b24      	ldr	r3, [pc, #144]	; (8005898 <__swsetup_r+0xd8>)
 8005808:	429c      	cmp	r4, r3
 800580a:	bf08      	it	eq
 800580c:	68ec      	ldreq	r4, [r5, #12]
 800580e:	e7e6      	b.n	80057de <__swsetup_r+0x1e>
 8005810:	0758      	lsls	r0, r3, #29
 8005812:	d512      	bpl.n	800583a <__swsetup_r+0x7a>
 8005814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005816:	b141      	cbz	r1, 800582a <__swsetup_r+0x6a>
 8005818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800581c:	4299      	cmp	r1, r3
 800581e:	d002      	beq.n	8005826 <__swsetup_r+0x66>
 8005820:	4630      	mov	r0, r6
 8005822:	f7ff fb47 	bl	8004eb4 <_free_r>
 8005826:	2300      	movs	r3, #0
 8005828:	6363      	str	r3, [r4, #52]	; 0x34
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005830:	81a3      	strh	r3, [r4, #12]
 8005832:	2300      	movs	r3, #0
 8005834:	6063      	str	r3, [r4, #4]
 8005836:	6923      	ldr	r3, [r4, #16]
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	89a3      	ldrh	r3, [r4, #12]
 800583c:	f043 0308 	orr.w	r3, r3, #8
 8005840:	81a3      	strh	r3, [r4, #12]
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	b94b      	cbnz	r3, 800585a <__swsetup_r+0x9a>
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800584c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005850:	d003      	beq.n	800585a <__swsetup_r+0x9a>
 8005852:	4621      	mov	r1, r4
 8005854:	4630      	mov	r0, r6
 8005856:	f7ff fae5 	bl	8004e24 <__smakebuf_r>
 800585a:	89a0      	ldrh	r0, [r4, #12]
 800585c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005860:	f010 0301 	ands.w	r3, r0, #1
 8005864:	d00a      	beq.n	800587c <__swsetup_r+0xbc>
 8005866:	2300      	movs	r3, #0
 8005868:	60a3      	str	r3, [r4, #8]
 800586a:	6963      	ldr	r3, [r4, #20]
 800586c:	425b      	negs	r3, r3
 800586e:	61a3      	str	r3, [r4, #24]
 8005870:	6923      	ldr	r3, [r4, #16]
 8005872:	b943      	cbnz	r3, 8005886 <__swsetup_r+0xc6>
 8005874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005878:	d1ba      	bne.n	80057f0 <__swsetup_r+0x30>
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	0781      	lsls	r1, r0, #30
 800587e:	bf58      	it	pl
 8005880:	6963      	ldrpl	r3, [r4, #20]
 8005882:	60a3      	str	r3, [r4, #8]
 8005884:	e7f4      	b.n	8005870 <__swsetup_r+0xb0>
 8005886:	2000      	movs	r0, #0
 8005888:	e7f7      	b.n	800587a <__swsetup_r+0xba>
 800588a:	bf00      	nop
 800588c:	2000002c 	.word	0x2000002c
 8005890:	08005a68 	.word	0x08005a68
 8005894:	08005a88 	.word	0x08005a88
 8005898:	08005a48 	.word	0x08005a48

0800589c <_close_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d06      	ldr	r5, [pc, #24]	; (80058b8 <_close_r+0x1c>)
 80058a0:	2300      	movs	r3, #0
 80058a2:	4604      	mov	r4, r0
 80058a4:	4608      	mov	r0, r1
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	f7fe fd99 	bl	80043de <_close>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_close_r+0x1a>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_close_r+0x1a>
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	200001f8 	.word	0x200001f8

080058bc <_fstat_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d07      	ldr	r5, [pc, #28]	; (80058dc <_fstat_r+0x20>)
 80058c0:	2300      	movs	r3, #0
 80058c2:	4604      	mov	r4, r0
 80058c4:	4608      	mov	r0, r1
 80058c6:	4611      	mov	r1, r2
 80058c8:	602b      	str	r3, [r5, #0]
 80058ca:	f7fe fd94 	bl	80043f6 <_fstat>
 80058ce:	1c43      	adds	r3, r0, #1
 80058d0:	d102      	bne.n	80058d8 <_fstat_r+0x1c>
 80058d2:	682b      	ldr	r3, [r5, #0]
 80058d4:	b103      	cbz	r3, 80058d8 <_fstat_r+0x1c>
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	bd38      	pop	{r3, r4, r5, pc}
 80058da:	bf00      	nop
 80058dc:	200001f8 	.word	0x200001f8

080058e0 <_isatty_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	4d06      	ldr	r5, [pc, #24]	; (80058fc <_isatty_r+0x1c>)
 80058e4:	2300      	movs	r3, #0
 80058e6:	4604      	mov	r4, r0
 80058e8:	4608      	mov	r0, r1
 80058ea:	602b      	str	r3, [r5, #0]
 80058ec:	f7fe fd93 	bl	8004416 <_isatty>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d102      	bne.n	80058fa <_isatty_r+0x1a>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	b103      	cbz	r3, 80058fa <_isatty_r+0x1a>
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	200001f8 	.word	0x200001f8

08005900 <_lseek_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4d07      	ldr	r5, [pc, #28]	; (8005920 <_lseek_r+0x20>)
 8005904:	4604      	mov	r4, r0
 8005906:	4608      	mov	r0, r1
 8005908:	4611      	mov	r1, r2
 800590a:	2200      	movs	r2, #0
 800590c:	602a      	str	r2, [r5, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	f7fe fd8c 	bl	800442c <_lseek>
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	d102      	bne.n	800591e <_lseek_r+0x1e>
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	b103      	cbz	r3, 800591e <_lseek_r+0x1e>
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	bd38      	pop	{r3, r4, r5, pc}
 8005920:	200001f8 	.word	0x200001f8

08005924 <__malloc_lock>:
 8005924:	4801      	ldr	r0, [pc, #4]	; (800592c <__malloc_lock+0x8>)
 8005926:	f7ff ba57 	b.w	8004dd8 <__retarget_lock_acquire_recursive>
 800592a:	bf00      	nop
 800592c:	200001f1 	.word	0x200001f1

08005930 <__malloc_unlock>:
 8005930:	4801      	ldr	r0, [pc, #4]	; (8005938 <__malloc_unlock+0x8>)
 8005932:	f7ff ba52 	b.w	8004dda <__retarget_lock_release_recursive>
 8005936:	bf00      	nop
 8005938:	200001f1 	.word	0x200001f1

0800593c <_read_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4d07      	ldr	r5, [pc, #28]	; (800595c <_read_r+0x20>)
 8005940:	4604      	mov	r4, r0
 8005942:	4608      	mov	r0, r1
 8005944:	4611      	mov	r1, r2
 8005946:	2200      	movs	r2, #0
 8005948:	602a      	str	r2, [r5, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	f7fe fd2a 	bl	80043a4 <_read>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d102      	bne.n	800595a <_read_r+0x1e>
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	b103      	cbz	r3, 800595a <_read_r+0x1e>
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	200001f8 	.word	0x200001f8

08005960 <_init>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	bf00      	nop
 8005964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005966:	bc08      	pop	{r3}
 8005968:	469e      	mov	lr, r3
 800596a:	4770      	bx	lr

0800596c <_fini>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	bf00      	nop
 8005970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005972:	bc08      	pop	{r3}
 8005974:	469e      	mov	lr, r3
 8005976:	4770      	bx	lr
