
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d0  080040d0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080040d0  080040d0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040d0  080040d0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080040d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000090  08004168  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08004168  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
 12 .debug_info   00008abe  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000161d  00000000  00000000  00028b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e8  00000000  00000000  0002a1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000540  00000000  00000000  0002a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039a7  00000000  00000000  0002acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000071db  00000000  00000000  0002e66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a134  00000000  00000000  0003584a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008f97e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002064  00000000  00000000  0008f9d4  2**2
=======
 12 .debug_info   000132c9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d7  00000000  00000000  00033389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00036560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  00036fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006159  00000000  00000000  00037870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001002c  00000000  00000000  0003d9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ade9  00000000  00000000  0004d9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a87de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003270  00000000  00000000  000a8834  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f78 	.word	0x08003f78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08003f78 	.word	0x08003f78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000270:	b480      	push	{r7}
 8000272:	b08b      	sub	sp, #44	; 0x2c
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000298:	4b91      	ldr	r3, [pc, #580]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	f003 030c 	and.w	r3, r3, #12
 80002a0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	2b08      	cmp	r3, #8
 80002a6:	d011      	beq.n	80002cc <RCC_GetClocksFreq+0x5c>
 80002a8:	6a3b      	ldr	r3, [r7, #32]
 80002aa:	2b08      	cmp	r3, #8
 80002ac:	d837      	bhi.n	800031e <RCC_GetClocksFreq+0xae>
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d003      	beq.n	80002bc <RCC_GetClocksFreq+0x4c>
 80002b4:	6a3b      	ldr	r3, [r7, #32]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d004      	beq.n	80002c4 <RCC_GetClocksFreq+0x54>
 80002ba:	e030      	b.n	800031e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a89      	ldr	r2, [pc, #548]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c0:	601a      	str	r2, [r3, #0]
      break;
 80002c2:	e030      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a87      	ldr	r2, [pc, #540]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c8:	601a      	str	r2, [r3, #0]
      break;
 80002ca:	e02c      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002cc:	4b84      	ldr	r3, [pc, #528]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002d4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002d6:	4b82      	ldr	r3, [pc, #520]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002de:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	0c9b      	lsrs	r3, r3, #18
 80002e4:	3302      	adds	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4a7d      	ldr	r2, [pc, #500]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80002f2:	fb02 f303 	mul.w	r3, r2, r3
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
 80002f8:	e00d      	b.n	8000316 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80002fa:	4b79      	ldr	r3, [pc, #484]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000306:	4a77      	ldr	r2, [pc, #476]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fbb2 f2f3 	udiv	r2, r2, r3
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	fb02 f303 	mul.w	r3, r2, r3
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800031a:	601a      	str	r2, [r3, #0]
      break;
 800031c:	e003      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a70      	ldr	r2, [pc, #448]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000322:	601a      	str	r2, [r3, #0]
      break;
 8000324:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000326:	4b6e      	ldr	r3, [pc, #440]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800032e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000330:	6a3b      	ldr	r3, [r7, #32]
 8000332:	091b      	lsrs	r3, r3, #4
 8000334:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000336:	4a6d      	ldr	r2, [pc, #436]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000338:	6a3b      	ldr	r3, [r7, #32]
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	40da      	lsrs	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800034e:	4b64      	ldr	r3, [pc, #400]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000356:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000358:	6a3b      	ldr	r3, [r7, #32]
 800035a:	0a1b      	lsrs	r3, r3, #8
 800035c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800035e:	4a63      	ldr	r2, [pc, #396]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	40da      	lsrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000376:	4b5a      	ldr	r3, [pc, #360]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800037e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000380:	6a3b      	ldr	r3, [r7, #32]
 8000382:	0adb      	lsrs	r3, r3, #11
 8000384:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000386:	4a59      	ldr	r2, [pc, #356]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000388:	6a3b      	ldr	r3, [r7, #32]
 800038a:	4413      	add	r3, r2
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	40da      	lsrs	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800039e:	4b50      	ldr	r3, [pc, #320]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003a8:	6a3b      	ldr	r3, [r7, #32]
 80003aa:	091b      	lsrs	r3, r3, #4
 80003ac:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ae:	4a50      	ldr	r2, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d006      	beq.n	80003d2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	e003      	b.n	80003da <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003da:	4b41      	ldr	r3, [pc, #260]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003de:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	0a5b      	lsrs	r3, r3, #9
 80003e8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ea:	4a41      	ldr	r2, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	fbb2 f2f3 	udiv	r2, r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	e003      	b.n	8000416 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000416:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	f003 0310 	and.w	r3, r3, #16
 800041e:	2b10      	cmp	r3, #16
 8000420:	d003      	beq.n	800042a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000426:	619a      	str	r2, [r3, #24]
 8000428:	e003      	b.n	8000432 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	f003 0320 	and.w	r3, r3, #32
 800043a:	2b20      	cmp	r3, #32
 800043c:	d003      	beq.n	8000446 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a28      	ldr	r2, [pc, #160]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000442:	61da      	str	r2, [r3, #28]
 8000444:	e003      	b.n	800044e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800045a:	d10d      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000462:	429a      	cmp	r2, r3
 8000464:	d108      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	429a      	cmp	r2, r3
 800046c:	d104      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000470:	005a      	lsls	r2, r3, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	621a      	str	r2, [r3, #32]
 8000476:	e003      	b.n	8000480 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800048c:	d10d      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000494:	429a      	cmp	r2, r3
 8000496:	d108      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	429a      	cmp	r2, r3
 800049e:	d104      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a2:	005a      	lsls	r2, r3, #1
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	625a      	str	r2, [r3, #36]	; 0x24
 80004a8:	e003      	b.n	80004b2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d104      	bne.n	80004c8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
 80004c6:	e029      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d10f      	bne.n	80004f4 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	629a      	str	r2, [r3, #40]	; 0x28
 80004dc:	e01e      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	007a1200 	.word	0x007a1200
 80004e8:	003d0900 	.word	0x003d0900
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80004f4:	4b66      	ldr	r3, [pc, #408]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	f003 0303 	and.w	r3, r3, #3
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d104      	bne.n	800050a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
 8000508:	e008      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800050a:	4b61      	ldr	r3, [pc, #388]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	2b03      	cmp	r3, #3
 8000514:	d102      	bne.n	800051c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a5e      	ldr	r2, [pc, #376]	; (8000694 <RCC_GetClocksFreq+0x424>)
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800051c:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689a      	ldr	r2, [r3, #8]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000530:	e021      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000532:	4b57      	ldr	r3, [pc, #348]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800053a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800053e:	d104      	bne.n	800054a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
 8000548:	e015      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800054a:	4b51      	ldr	r3, [pc, #324]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000556:	d104      	bne.n	8000562 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000560:	e009      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000562:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800056a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800056e:	d102      	bne.n	8000576 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a48      	ldr	r2, [pc, #288]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000576:	4b46      	ldr	r3, [pc, #280]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d104      	bne.n	800058c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
 800058a:	e021      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000598:	d104      	bne.n	80005a4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	631a      	str	r2, [r3, #48]	; 0x30
 80005a2:	e015      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005b0:	d104      	bne.n	80005bc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ba:	e009      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005bc:	4b34      	ldr	r3, [pc, #208]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005c8:	d102      	bne.n	80005d0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a31      	ldr	r2, [pc, #196]	; (8000694 <RCC_GetClocksFreq+0x424>)
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005d0:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d104      	bne.n	80005e6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
 80005e4:	e021      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80005f2:	d104      	bne.n	80005fe <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
 80005fc:	e015      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800060a:	d104      	bne.n	8000616 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
 8000614:	e009      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800061e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000622:	d102      	bne.n	800062a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d104      	bne.n	8000640 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800063e:	e021      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800064c:	d104      	bne.n	8000658 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000656:	e015      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000664:	d104      	bne.n	8000670 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800066c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800066e:	e009      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000678:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800067c:	d102      	bne.n	8000684 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000682:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000684:	bf00      	nop
 8000686:	372c      	adds	r7, #44	; 0x2c
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	007a1200 	.word	0x007a1200

08000698 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006ee:	2201      	movs	r2, #1
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d103      	bne.n	8000706 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e005      	b.n	8000712 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d102      	bne.n	8000712 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3308      	adds	r3, #8
 8000710:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d006      	beq.n	8000726 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	430a      	orrs	r2, r1
 8000722:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000724:	e006      	b.n	8000734 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	43da      	mvns	r2, r3
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	400a      	ands	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	3724      	adds	r7, #36	; 0x24
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4013      	ands	r3, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	2201      	movs	r2, #1
 8000786:	fa02 f103 	lsl.w	r1, r2, r3
 800078a:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <NVIC_EnableIRQ+0x30>)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	095b      	lsrs	r3, r3, #5
 8000792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e100 	.word	0xe000e100

080007a8 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4619      	mov	r1, r3
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <uart_put_char+0x30>)
 80007ba:	f7ff ff6d 	bl	8000698 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80007be:	bf00      	nop
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <uart_put_char+0x30>)
 80007c4:	f7ff ffbc 	bl	8000740 <USART_GetFlagStatus>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f8      	beq.n	80007c0 <uart_put_char+0x18>
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40004400 	.word	0x40004400

080007dc <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
 80007e8:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e012      	b.n	8000816 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b0a      	cmp	r3, #10
 80007fa:	d102      	bne.n	8000802 <_write_r+0x26>
            uart_put_char('\r');
 80007fc:	200d      	movs	r0, #13
 80007fe:	f7ff ffd3 	bl	80007a8 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ffcc 	bl	80007a8 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3301      	adds	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	429a      	cmp	r2, r3
 800081c:	dbe8      	blt.n	80007f0 <_write_r+0x14>
    }

    return len;
 800081e:	683b      	ldr	r3, [r7, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000830:	4b86      	ldr	r3, [pc, #536]	; (8000a4c <uart_init+0x224>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fb53 	bl	8002ee4 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 800083e:	4b83      	ldr	r3, [pc, #524]	; (8000a4c <uart_init+0x224>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fb4c 	bl	8002ee4 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 800084c:	4b80      	ldr	r3, [pc, #512]	; (8000a50 <uart_init+0x228>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a7f      	ldr	r2, [pc, #508]	; (8000a50 <uart_init+0x228>)
 8000852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000856:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000858:	4b7d      	ldr	r3, [pc, #500]	; (8000a50 <uart_init+0x228>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4a7c      	ldr	r2, [pc, #496]	; (8000a50 <uart_init+0x228>)
 800085e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000862:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000864:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000868:	6a1b      	ldr	r3, [r3, #32]
 800086a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800086e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000872:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000878:	6a1b      	ldr	r3, [r3, #32]
 800087a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800087e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000882:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800088e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000892:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000898:	6a1b      	ldr	r3, [r3, #32]
 800089a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800089e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80008a2:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80008a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008b2:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80008b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008be:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80008c2:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80008c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008c8:	889b      	ldrh	r3, [r3, #4]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008d0:	f023 030c 	bic.w	r3, r3, #12
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80008d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008e0:	8892      	ldrh	r2, [r2, #4]
 80008e2:	b292      	uxth	r2, r2
 80008e4:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80008e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008f4:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80008f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000900:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000904:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000914:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000916:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000920:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000924:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000926:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <uart_init+0x22c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a4a      	ldr	r2, [pc, #296]	; (8000a54 <uart_init+0x22c>)
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000932:	4b48      	ldr	r3, [pc, #288]	; (8000a54 <uart_init+0x22c>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	4a47      	ldr	r2, [pc, #284]	; (8000a54 <uart_init+0x22c>)
 8000938:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800093c:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800093e:	4b45      	ldr	r3, [pc, #276]	; (8000a54 <uart_init+0x22c>)
 8000940:	4a44      	ldr	r2, [pc, #272]	; (8000a54 <uart_init+0x22c>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000946:	4b43      	ldr	r3, [pc, #268]	; (8000a54 <uart_init+0x22c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a42      	ldr	r2, [pc, #264]	; (8000a54 <uart_init+0x22c>)
 800094c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000950:	f023 030c 	bic.w	r3, r3, #12
 8000954:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000956:	4b3f      	ldr	r3, [pc, #252]	; (8000a54 <uart_init+0x22c>)
 8000958:	4a3e      	ldr	r2, [pc, #248]	; (8000a54 <uart_init+0x22c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800095e:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <uart_init+0x22c>)
 8000960:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <uart_init+0x22c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000966:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <uart_init+0x22c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a3a      	ldr	r2, [pc, #232]	; (8000a54 <uart_init+0x22c>)
 800096c:	f043 030c 	orr.w	r3, r3, #12
 8000970:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000972:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <uart_init+0x22c>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <uart_init+0x22c>)
 8000978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800097c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <uart_init+0x22c>)
 8000980:	4a34      	ldr	r2, [pc, #208]	; (8000a54 <uart_init+0x22c>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	64fb      	str	r3, [r7, #76]	; 0x4c
 800098a:	2300      	movs	r3, #0
 800098c:	647b      	str	r3, [r7, #68]	; 0x44
 800098e:	2300      	movs	r3, #0
 8000990:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc6a 	bl	8000270 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800099c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800099e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 80009a0:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <uart_init+0x22c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d010      	beq.n	80009ce <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80009ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009ae:	005a      	lsls	r2, r3, #1
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 80009b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	fbb3 f2f2 	udiv	r2, r3, r2
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	fb01 f202 	mul.w	r2, r1, r2
 80009c8:	1a9b      	subs	r3, r3, r2
 80009ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80009cc:	e00d      	b.n	80009ea <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80009ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80009d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	fb01 f202 	mul.w	r2, r1, r2
 80009e6:	1a9b      	subs	r3, r3, r2
 80009e8:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d302      	bcc.n	80009fa <uart_init+0x1d2>
        divider++;
 80009f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009f6:	3301      	adds	r3, #1
 80009f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <uart_init+0x22c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00b      	beq.n	8000a1e <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a12:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000a16:	4013      	ands	r3, r2
 8000a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <uart_init+0x22c>)
 8000a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a22:	b292      	uxth	r2, r2
 8000a24:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <uart_init+0x22c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <uart_init+0x22c>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000a32:	2201      	movs	r2, #1
 8000a34:	4908      	ldr	r1, [pc, #32]	; (8000a58 <uart_init+0x230>)
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <uart_init+0x22c>)
 8000a38:	f7ff fe40 	bl	80006bc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000a3c:	2026      	movs	r0, #38	; 0x26
 8000a3e:	f7ff fe99 	bl	8000774 <NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3750      	adds	r7, #80	; 0x50
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000002c 	.word	0x2000002c
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40004400 	.word	0x40004400
 8000a58:	00050105 	.word	0x00050105

08000a5c <startWindow>:
#include "ansi_S.h"
#include "joystick.h"
void startWindow(int x1, int y1, int x2, int y2) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	603b      	str	r3, [r7, #0]

//TOP
	gotoxy(x1, y1);
 8000a6a:	68b9      	ldr	r1, [r7, #8]
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f001 ff35 	bl	80028dc <gotoxy>
	printf("%c", 201);
 8000a72:	20c9      	movs	r0, #201	; 0xc9
 8000a74:	f002 fa20 	bl	8002eb8 <putchar>
	for (int i=x1+1;i<x2;i++){
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	61fb      	str	r3, [r7, #28]
 8000a7e:	e005      	b.n	8000a8c <startWindow+0x30>
		printf("%c",205);
 8000a80:	20cd      	movs	r0, #205	; 0xcd
 8000a82:	f002 fa19 	bl	8002eb8 <putchar>
	for (int i=x1+1;i<x2;i++){
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	69fa      	ldr	r2, [r7, #28]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf5      	blt.n	8000a80 <startWindow+0x24>
	}
	printf("%c", 187);
 8000a94:	20bb      	movs	r0, #187	; 0xbb
 8000a96:	f002 fa0f 	bl	8002eb8 <putchar>

//SIDES
	for(int i = 1; i<y2-1; i++){
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	e016      	b.n	8000ace <startWindow+0x72>
		gotoxy(x1, y1+i);
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f001 ff17 	bl	80028dc <gotoxy>
		printf("%c", 186);
 8000aae:	20ba      	movs	r0, #186	; 0xba
 8000ab0:	f002 fa02 	bl	8002eb8 <putchar>
		gotoxy(x2, y1+i);
 8000ab4:	68ba      	ldr	r2, [r7, #8]
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4619      	mov	r1, r3
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f001 ff0d 	bl	80028dc <gotoxy>
		printf("%c", 186);
 8000ac2:	20ba      	movs	r0, #186	; 0xba
 8000ac4:	f002 f9f8 	bl	8002eb8 <putchar>
	for(int i = 1; i<y2-1; i++){
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	3301      	adds	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbe3      	blt.n	8000aa0 <startWindow+0x44>
	}

//BUTTOM
	printf("%c",200);
 8000ad8:	20c8      	movs	r0, #200	; 0xc8
 8000ada:	f002 f9ed 	bl	8002eb8 <putchar>
	for (int i=x1+1;i<x2;i++){
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e005      	b.n	8000af2 <startWindow+0x96>
		printf("%c",205);
 8000ae6:	20cd      	movs	r0, #205	; 0xcd
 8000ae8:	f002 f9e6 	bl	8002eb8 <putchar>
	for (int i=x1+1;i<x2;i++){
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	dbf5      	blt.n	8000ae6 <startWindow+0x8a>
	}
	printf("%c", 188);
 8000afa:	20bc      	movs	r0, #188	; 0xbc
 8000afc:	f002 f9dc 	bl	8002eb8 <putchar>
}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <spaceship>:

int ani = 0;

void spaceship(int x1, int y1, int x2, int y2) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b090      	sub	sp, #64	; 0x40
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	603b      	str	r3, [r7, #0]

	fgcolor(1);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f001 fe9a 	bl	8002850 <fgcolor>
	int ex = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	gotoxy(x1+15, y1);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	330f      	adds	r3, #15
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fed8 	bl	80028dc <gotoxy>
	for(int i = 0; i <9; i++) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b30:	e005      	b.n	8000b3e <spaceship+0x36>
	printf("%c",219);
 8000b32:	20db      	movs	r0, #219	; 0xdb
 8000b34:	f002 f9c0 	bl	8002eb8 <putchar>
	for(int i = 0; i <9; i++) {
 8000b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	ddf6      	ble.n	8000b32 <spaceship+0x2a>
	}
	bgcolor(5);
 8000b44:	2005      	movs	r0, #5
 8000b46:	f001 fe9f 	bl	8002888 <bgcolor>
	fgcolor(0);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f001 fe80 	bl	8002850 <fgcolor>
	printf("  UP  ");
 8000b50:	4880      	ldr	r0, [pc, #512]	; (8000d54 <spaceship+0x24c>)
 8000b52:	f002 f999 	bl	8002e88 <iprintf>
	bgcolor(0);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f001 fe96 	bl	8002888 <bgcolor>
	fgcolor(1);
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f001 fe77 	bl	8002850 <fgcolor>
	for(int i = 0; i <20; i++) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
 8000b66:	e005      	b.n	8000b74 <spaceship+0x6c>
	printf("%c",219);
 8000b68:	20db      	movs	r0, #219	; 0xdb
 8000b6a:	f002 f9a5 	bl	8002eb8 <putchar>
	for(int i = 0; i <20; i++) {
 8000b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b70:	3301      	adds	r3, #1
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
 8000b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b76:	2b13      	cmp	r3, #19
 8000b78:	ddf6      	ble.n	8000b68 <spaceship+0x60>
	}
	bgcolor(6);
 8000b7a:	2006      	movs	r0, #6
 8000b7c:	f001 fe84 	bl	8002888 <bgcolor>
	fgcolor(0);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f001 fe65 	bl	8002850 <fgcolor>
	printf("HATCH");
 8000b86:	4874      	ldr	r0, [pc, #464]	; (8000d58 <spaceship+0x250>)
 8000b88:	f002 f97e 	bl	8002e88 <iprintf>
	fgcolor(1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f001 fe5f 	bl	8002850 <fgcolor>
	for(int i = 0; i <29; i++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
 8000b96:	e005      	b.n	8000ba4 <spaceship+0x9c>
	printf("%c",219);
 8000b98:	20db      	movs	r0, #219	; 0xdb
 8000b9a:	f002 f98d 	bl	8002eb8 <putchar>
	for(int i = 0; i <29; i++) {
 8000b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba6:	2b1c      	cmp	r3, #28
 8000ba8:	ddf6      	ble.n	8000b98 <spaceship+0x90>
	}
	gotoxy(x1+15, y1+4);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f103 020f 	add.w	r2, r3, #15
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4610      	mov	r0, r2
 8000bb8:	f001 fe90 	bl	80028dc <gotoxy>
	for(int i = 0; i <9; i++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bc0:	e005      	b.n	8000bce <spaceship+0xc6>
	printf("%c",219);
 8000bc2:	20db      	movs	r0, #219	; 0xdb
 8000bc4:	f002 f978 	bl	8002eb8 <putchar>
	for(int i = 0; i <9; i++) {
 8000bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bca:	3301      	adds	r3, #1
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd0:	2b08      	cmp	r3, #8
 8000bd2:	ddf6      	ble.n	8000bc2 <spaceship+0xba>
	}
	bgcolor(5);
 8000bd4:	2005      	movs	r0, #5
 8000bd6:	f001 fe57 	bl	8002888 <bgcolor>
	fgcolor(0);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f001 fe38 	bl	8002850 <fgcolor>
	printf(" DOWN ");
 8000be0:	485e      	ldr	r0, [pc, #376]	; (8000d5c <spaceship+0x254>)
 8000be2:	f002 f951 	bl	8002e88 <iprintf>
	bgcolor(0);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f001 fe4e 	bl	8002888 <bgcolor>
	fgcolor(1);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f001 fe2f 	bl	8002850 <fgcolor>
	for(int i = 0; i <20; i++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bf6:	e005      	b.n	8000c04 <spaceship+0xfc>
	printf("%c",219);
 8000bf8:	20db      	movs	r0, #219	; 0xdb
 8000bfa:	f002 f95d 	bl	8002eb8 <putchar>
	for(int i = 0; i <20; i++) {
 8000bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c00:	3301      	adds	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c06:	2b13      	cmp	r3, #19
 8000c08:	ddf6      	ble.n	8000bf8 <spaceship+0xf0>
	}
	bgcolor(6);
 8000c0a:	2006      	movs	r0, #6
 8000c0c:	f001 fe3c 	bl	8002888 <bgcolor>
	fgcolor(0);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f001 fe1d 	bl	8002850 <fgcolor>
	printf("HATCH");
 8000c16:	4850      	ldr	r0, [pc, #320]	; (8000d58 <spaceship+0x250>)
 8000c18:	f002 f936 	bl	8002e88 <iprintf>
	fgcolor(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f001 fe17 	bl	8002850 <fgcolor>
	for(int i = 0; i <29; i++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
 8000c26:	e005      	b.n	8000c34 <spaceship+0x12c>
	printf("%c",219);
 8000c28:	20db      	movs	r0, #219	; 0xdb
 8000c2a:	f002 f945 	bl	8002eb8 <putchar>
	for(int i = 0; i <29; i++) {
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	3301      	adds	r3, #1
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	2b1c      	cmp	r3, #28
 8000c38:	ddf6      	ble.n	8000c28 <spaceship+0x120>
	}
	int a = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	e030      	b.n	8000ca6 <spaceship+0x19e>
	for(int i = 0; i < 7; i++){
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	e024      	b.n	8000c94 <spaceship+0x18c>
	gotoxy(x1+9+i+a, y1-3+j);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f103 0209 	add.w	r2, r3, #9
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	441a      	add	r2, r3
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	18d0      	adds	r0, r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1eda      	subs	r2, r3, #3
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4619      	mov	r1, r3
 8000c62:	f001 fe3b 	bl	80028dc <gotoxy>
	printf("%c",219);
 8000c66:	20db      	movs	r0, #219	; 0xdb
 8000c68:	f002 f926 	bl	8002eb8 <putchar>
	gotoxy(x1+9+i+a, y1+7-j);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f103 0209 	add.w	r2, r3, #9
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	441a      	add	r2, r3
 8000c76:	6a3b      	ldr	r3, [r7, #32]
 8000c78:	18d0      	adds	r0, r2, r3
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1dda      	adds	r2, r3, #7
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	4619      	mov	r1, r3
 8000c84:	f001 fe2a 	bl	80028dc <gotoxy>
	printf("%c",219);
 8000c88:	20db      	movs	r0, #219	; 0xdb
 8000c8a:	f002 f915 	bl	8002eb8 <putchar>
	for(int i = 0; i < 7; i++){
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	3301      	adds	r3, #1
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	ddd7      	ble.n	8000c4a <spaceship+0x142>
	} a+=2;
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	61fb      	str	r3, [r7, #28]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	ddcb      	ble.n	8000c44 <spaceship+0x13c>
	}
	for(int i = 1; i < 4; i++) {
 8000cac:	2301      	movs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e039      	b.n	8000d26 <spaceship+0x21e>
	gotoxy(x1+15, y1+i);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f103 000f 	add.w	r0, r3, #15
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f001 fe0c 	bl	80028dc <gotoxy>
	printf("%c",219);
 8000cc4:	20db      	movs	r0, #219	; 0xdb
 8000cc6:	f002 f8f7 	bl	8002eb8 <putchar>
	for(int j = 0; j < 6; j++){
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	e024      	b.n	8000d1a <spaceship+0x212>
	gotoxy(x2-8+j, y1+i);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f1a3 0208 	sub.w	r2, r3, #8
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	18d0      	adds	r0, r2, r3
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f001 fdfb 	bl	80028dc <gotoxy>
	printf("%c",219);
 8000ce6:	20db      	movs	r0, #219	; 0xdb
 8000ce8:	f002 f8e6 	bl	8002eb8 <putchar>
	ex++;
 8000cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cee:	3301      	adds	r3, #1
 8000cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (ex < 5){
 8000cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	dc0d      	bgt.n	8000d14 <spaceship+0x20c>
	gotoxy(x2-3+j, y1+i+1);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	1eda      	subs	r2, r3, #3
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	18d0      	adds	r0, r2, r3
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	4413      	add	r3, r2
 8000d06:	3301      	adds	r3, #1
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f001 fde7 	bl	80028dc <gotoxy>
	printf("%c",219);
 8000d0e:	20db      	movs	r0, #219	; 0xdb
 8000d10:	f002 f8d2 	bl	8002eb8 <putchar>
	for(int j = 0; j < 6; j++){
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	3301      	adds	r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	2b05      	cmp	r3, #5
 8000d1e:	ddd7      	ble.n	8000cd0 <spaceship+0x1c8>
	for(int i = 1; i < 4; i++) {
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	ddc2      	ble.n	8000cb2 <spaceship+0x1aa>
	}
	}
	}
	gotoxy(83,y1+2);
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	3302      	adds	r3, #2
 8000d30:	4619      	mov	r1, r3
 8000d32:	2053      	movs	r0, #83	; 0x53
 8000d34:	f001 fdd2 	bl	80028dc <gotoxy>
	fgcolor(0);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f001 fd89 	bl	8002850 <fgcolor>
	bgcolor(7);
 8000d3e:	2007      	movs	r0, #7
 8000d40:	f001 fda2 	bl	8002888 <bgcolor>
	printf(" CANON   ");
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <spaceship+0x258>)
 8000d46:	f002 f89f 	bl	8002e88 <iprintf>
}
 8000d4a:	bf00      	nop
 8000d4c:	3740      	adds	r7, #64	; 0x40
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08003f90 	.word	0x08003f90
 8000d58:	08003f98 	.word	0x08003f98
 8000d5c:	08003fa0 	.word	0x08003fa0
 8000d60:	08003fa8 	.word	0x08003fa8

08000d64 <spaceshipDelete>:

void spaceshipDelete(int x1, int y1, int x2, int y2) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]

	int ex = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
	gotoxy(x1+15, y1);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	330f      	adds	r3, #15
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 fdad 	bl	80028dc <gotoxy>
	for(int i = 0; i <69; i++) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d86:	e005      	b.n	8000d94 <spaceshipDelete+0x30>
	printf("%c",32);
 8000d88:	2020      	movs	r0, #32
 8000d8a:	f002 f895 	bl	8002eb8 <putchar>
	for(int i = 0; i <69; i++) {
 8000d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d90:	3301      	adds	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d96:	2b44      	cmp	r3, #68	; 0x44
 8000d98:	ddf6      	ble.n	8000d88 <spaceshipDelete+0x24>
	}
	gotoxy(x1+15, y1+4);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f103 020f 	add.w	r2, r3, #15
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3304      	adds	r3, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4610      	mov	r0, r2
 8000da8:	f001 fd98 	bl	80028dc <gotoxy>
	for(int i = 0; i <69; i++) {
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
 8000db0:	e005      	b.n	8000dbe <spaceshipDelete+0x5a>
	printf("%c",32);
 8000db2:	2020      	movs	r0, #32
 8000db4:	f002 f880 	bl	8002eb8 <putchar>
	for(int i = 0; i <69; i++) {
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	3301      	adds	r3, #1
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	2b44      	cmp	r3, #68	; 0x44
 8000dc2:	ddf6      	ble.n	8000db2 <spaceshipDelete+0x4e>
	}
	int a = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	e030      	b.n	8000e30 <spaceshipDelete+0xcc>
	for(int i = 0; i < 7; i++){
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	e024      	b.n	8000e1e <spaceshipDelete+0xba>
	gotoxy(x1+9+i+a, y1-3+j);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f103 0209 	add.w	r2, r3, #9
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	441a      	add	r2, r3
 8000dde:	6a3b      	ldr	r3, [r7, #32]
 8000de0:	18d0      	adds	r0, r2, r3
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1eda      	subs	r2, r3, #3
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	4413      	add	r3, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f001 fd76 	bl	80028dc <gotoxy>
	printf("%c",32);
 8000df0:	2020      	movs	r0, #32
 8000df2:	f002 f861 	bl	8002eb8 <putchar>
	gotoxy(x1+9+i+a, y1+7-j);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f103 0209 	add.w	r2, r3, #9
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	441a      	add	r2, r3
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	18d0      	adds	r0, r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1dda      	adds	r2, r3, #7
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f001 fd65 	bl	80028dc <gotoxy>
	printf("%c",32);
 8000e12:	2020      	movs	r0, #32
 8000e14:	f002 f850 	bl	8002eb8 <putchar>
	for(int i = 0; i < 7; i++){
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	2b06      	cmp	r3, #6
 8000e22:	ddd7      	ble.n	8000dd4 <spaceshipDelete+0x70>
	} a+=2;
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	3302      	adds	r3, #2
 8000e28:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	ddcb      	ble.n	8000dce <spaceshipDelete+0x6a>
	}
	for(int i = 1; i < 4; i++) {
 8000e36:	2301      	movs	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e039      	b.n	8000eb0 <spaceshipDelete+0x14c>
	gotoxy(x1+15, y1+i);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f103 000f 	add.w	r0, r3, #15
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	4413      	add	r3, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f001 fd47 	bl	80028dc <gotoxy>
	printf("%c",32);
 8000e4e:	2020      	movs	r0, #32
 8000e50:	f002 f832 	bl	8002eb8 <putchar>
	for(int j = 0; j < 6; j++){
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	e024      	b.n	8000ea4 <spaceshipDelete+0x140>
	gotoxy(x2-8+j, y1+i);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f1a3 0208 	sub.w	r2, r3, #8
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	18d0      	adds	r0, r2, r3
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f001 fd36 	bl	80028dc <gotoxy>
	printf("%c",32);
 8000e70:	2020      	movs	r0, #32
 8000e72:	f002 f821 	bl	8002eb8 <putchar>
	ex++;
 8000e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e78:	3301      	adds	r3, #1
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (ex < 5){
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	dc0d      	bgt.n	8000e9e <spaceshipDelete+0x13a>
	gotoxy(x2-3+j, y1+i+1);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	1eda      	subs	r2, r3, #3
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	18d0      	adds	r0, r2, r3
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	4413      	add	r3, r2
 8000e90:	3301      	adds	r3, #1
 8000e92:	4619      	mov	r1, r3
 8000e94:	f001 fd22 	bl	80028dc <gotoxy>
	printf("%c",32);
 8000e98:	2020      	movs	r0, #32
 8000e9a:	f002 f80d 	bl	8002eb8 <putchar>
	for(int j = 0; j < 6; j++){
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	2b05      	cmp	r3, #5
 8000ea8:	ddd7      	ble.n	8000e5a <spaceshipDelete+0xf6>
	for(int i = 1; i < 4; i++) {
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	3301      	adds	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	ddc2      	ble.n	8000e3c <spaceshipDelete+0xd8>
	}
	}
	}
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3730      	adds	r7, #48	; 0x30
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <fire>:

void fire(int x1, int y1, int x2, int y2) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	603b      	str	r3, [r7, #0]
	int s = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (ani < 2) {
 8000ed2:	4ba1      	ldr	r3, [pc, #644]	; (8001158 <fire+0x298>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	f300 8101 	bgt.w	80010de <fire+0x21e>
	for (int i = 0; i <= 8; i++){
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ee0:	e044      	b.n	8000f6c <fire+0xac>
	if (s == 0){
 8000ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d114      	bne.n	8000f12 <fire+0x52>
	fgcolor(0);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f001 fcb1 	bl	8002850 <fgcolor>
	gotoxy(7+i,y1);
 8000eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef0:	3307      	adds	r3, #7
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fcf1 	bl	80028dc <gotoxy>
	printf("%c",219);
 8000efa:	20db      	movs	r0, #219	; 0xdb
 8000efc:	f001 ffdc 	bl	8002eb8 <putchar>
	gotoxy(7+i,y2);
 8000f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f02:	3307      	adds	r3, #7
 8000f04:	6839      	ldr	r1, [r7, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fce8 	bl	80028dc <gotoxy>
	printf("%c",219);
 8000f0c:	20db      	movs	r0, #219	; 0xdb
 8000f0e:	f001 ffd3 	bl	8002eb8 <putchar>
	}
	if (s < 3){
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	dc02      	bgt.n	8000f1e <fire+0x5e>
	fgcolor(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f001 fc99 	bl	8002850 <fgcolor>
	}
	if (s < 6 && s >= 3){
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	dc05      	bgt.n	8000f30 <fire+0x70>
 8000f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	dd02      	ble.n	8000f30 <fire+0x70>
	fgcolor(9);
 8000f2a:	2009      	movs	r0, #9
 8000f2c:	f001 fc90 	bl	8002850 <fgcolor>
	}
	if (s >= 6){
 8000f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	dd02      	ble.n	8000f3c <fire+0x7c>
	fgcolor(11);
 8000f36:	200b      	movs	r0, #11
 8000f38:	f001 fc8a 	bl	8002850 <fgcolor>
	}
	gotoxy(8+i,y1);
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	3308      	adds	r3, #8
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 fcca 	bl	80028dc <gotoxy>
	printf("%c",219);
 8000f48:	20db      	movs	r0, #219	; 0xdb
 8000f4a:	f001 ffb5 	bl	8002eb8 <putchar>
	gotoxy(8+i,y2);
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	3308      	adds	r3, #8
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fcc1 	bl	80028dc <gotoxy>
	printf("%c",219);
 8000f5a:	20db      	movs	r0, #219	; 0xdb
 8000f5c:	f001 ffac 	bl	8002eb8 <putchar>
	s++;
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	3301      	adds	r3, #1
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 8; i++){
 8000f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f68:	3301      	adds	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	ddb7      	ble.n	8000ee2 <fire+0x22>
	} s = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 11; i++){
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7a:	e055      	b.n	8001028 <fire+0x168>
	if (s == 0){
 8000f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d118      	bne.n	8000fb4 <fire+0xf4>
	fgcolor(0);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f001 fc64 	bl	8002850 <fgcolor>
	gotoxy(4+i,y1+1);
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	1d1a      	adds	r2, r3, #4
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4619      	mov	r1, r3
 8000f92:	4610      	mov	r0, r2
 8000f94:	f001 fca2 	bl	80028dc <gotoxy>
	printf("%c",219);
 8000f98:	20db      	movs	r0, #219	; 0xdb
 8000f9a:	f001 ff8d 	bl	8002eb8 <putchar>
	gotoxy(4+i,y2-1);
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	1d1a      	adds	r2, r3, #4
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4610      	mov	r0, r2
 8000faa:	f001 fc97 	bl	80028dc <gotoxy>
	printf("%c",219);
 8000fae:	20db      	movs	r0, #219	; 0xdb
 8000fb0:	f001 ff82 	bl	8002eb8 <putchar>
	}
	if (s < 4){
 8000fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	dc02      	bgt.n	8000fc0 <fire+0x100>
	fgcolor(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f001 fc48 	bl	8002850 <fgcolor>
	}
	if (s < 7 && s >= 4){
 8000fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	dc05      	bgt.n	8000fd2 <fire+0x112>
 8000fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	dd02      	ble.n	8000fd2 <fire+0x112>
	fgcolor(9);
 8000fcc:	2009      	movs	r0, #9
 8000fce:	f001 fc3f 	bl	8002850 <fgcolor>
	}
	if (s < 10 && s >= 7){
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	2b09      	cmp	r3, #9
 8000fd6:	dc05      	bgt.n	8000fe4 <fire+0x124>
 8000fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	dd02      	ble.n	8000fe4 <fire+0x124>
	fgcolor(11);
 8000fde:	200b      	movs	r0, #11
 8000fe0:	f001 fc36 	bl	8002850 <fgcolor>
	}
	if (s >= 10){
 8000fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe6:	2b09      	cmp	r3, #9
 8000fe8:	dd02      	ble.n	8000ff0 <fire+0x130>
	fgcolor(15);
 8000fea:	200f      	movs	r0, #15
 8000fec:	f001 fc30 	bl	8002850 <fgcolor>
	}
	gotoxy(5+i,y1+1);
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	1d5a      	adds	r2, r3, #5
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f001 fc6e 	bl	80028dc <gotoxy>
	printf("%c",219);
 8001000:	20db      	movs	r0, #219	; 0xdb
 8001002:	f001 ff59 	bl	8002eb8 <putchar>
	gotoxy(5+i,y2-1);
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	1d5a      	adds	r2, r3, #5
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	4619      	mov	r1, r3
 8001010:	4610      	mov	r0, r2
 8001012:	f001 fc63 	bl	80028dc <gotoxy>
	printf("%c",219);
 8001016:	20db      	movs	r0, #219	; 0xdb
 8001018:	f001 ff4e 	bl	8002eb8 <putchar>
	s++;
 800101c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101e:	3301      	adds	r3, #1
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 11; i++){
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	3301      	adds	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	2b0b      	cmp	r3, #11
 800102c:	dda6      	ble.n	8000f7c <fire+0xbc>
	} s = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 13; i++){
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
 8001036:	e048      	b.n	80010ca <fire+0x20a>
	if (s == 0){
 8001038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10d      	bne.n	800105a <fire+0x19a>
	fgcolor(0);
 800103e:	2000      	movs	r0, #0
 8001040:	f001 fc06 	bl	8002850 <fgcolor>
	gotoxy(2+i,y1+2);
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	1c9a      	adds	r2, r3, #2
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	3302      	adds	r3, #2
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f001 fc44 	bl	80028dc <gotoxy>
	printf("%c",219);
 8001054:	20db      	movs	r0, #219	; 0xdb
 8001056:	f001 ff2f 	bl	8002eb8 <putchar>
	}
	if(s < 3) {
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	2b02      	cmp	r3, #2
 800105e:	dc02      	bgt.n	8001066 <fire+0x1a6>
	fgcolor(1);
 8001060:	2001      	movs	r0, #1
 8001062:	f001 fbf5 	bl	8002850 <fgcolor>
	}
	if (s < 7 && s >= 3){
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	2b06      	cmp	r3, #6
 800106a:	dc05      	bgt.n	8001078 <fire+0x1b8>
 800106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106e:	2b02      	cmp	r3, #2
 8001070:	dd02      	ble.n	8001078 <fire+0x1b8>
	fgcolor(9);
 8001072:	2009      	movs	r0, #9
 8001074:	f001 fbec 	bl	8002850 <fgcolor>
	}
	if (s < 10 && s >=7){
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	2b09      	cmp	r3, #9
 800107c:	dc05      	bgt.n	800108a <fire+0x1ca>
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	2b06      	cmp	r3, #6
 8001082:	dd02      	ble.n	800108a <fire+0x1ca>
	fgcolor(11);
 8001084:	200b      	movs	r0, #11
 8001086:	f001 fbe3 	bl	8002850 <fgcolor>
	}
	if (s < 13 && s >= 10){
 800108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108c:	2b0c      	cmp	r3, #12
 800108e:	dc05      	bgt.n	800109c <fire+0x1dc>
 8001090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001092:	2b09      	cmp	r3, #9
 8001094:	dd02      	ble.n	800109c <fire+0x1dc>
	fgcolor(15);
 8001096:	200f      	movs	r0, #15
 8001098:	f001 fbda 	bl	8002850 <fgcolor>
	}
	if (s >= 13) {
 800109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109e:	2b0c      	cmp	r3, #12
 80010a0:	dd02      	ble.n	80010a8 <fire+0x1e8>
	fgcolor(12);
 80010a2:	200c      	movs	r0, #12
 80010a4:	f001 fbd4 	bl	8002850 <fgcolor>
	}
	gotoxy(3+i,y1+2);
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	1cda      	adds	r2, r3, #3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	3302      	adds	r3, #2
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	f001 fc12 	bl	80028dc <gotoxy>
	printf("%c",219);
 80010b8:	20db      	movs	r0, #219	; 0xdb
 80010ba:	f001 fefd 	bl	8002eb8 <putchar>
	s++;
 80010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c0:	3301      	adds	r3, #1
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 13; i++){
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	3301      	adds	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	2b0d      	cmp	r3, #13
 80010ce:	ddb3      	ble.n	8001038 <fire+0x178>
	} s = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	ani++;
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <fire+0x298>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <fire+0x298>)
 80010dc:	6013      	str	r3, [r2, #0]
	}

	if (ani >= 2) {
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <fire+0x298>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	f340 80c5 	ble.w	8001272 <fire+0x3b2>
	for (int i = 0; i <= 9; i++){
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	e02c      	b.n	8001148 <fire+0x288>
	if (s < 3){
 80010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	dc02      	bgt.n	80010fa <fire+0x23a>
	fgcolor(9);
 80010f4:	2009      	movs	r0, #9
 80010f6:	f001 fbab 	bl	8002850 <fgcolor>
	}
	if (s < 6 && s >= 3){
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	dc05      	bgt.n	800110c <fire+0x24c>
 8001100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001102:	2b02      	cmp	r3, #2
 8001104:	dd02      	ble.n	800110c <fire+0x24c>
	fgcolor(11);
 8001106:	200b      	movs	r0, #11
 8001108:	f001 fba2 	bl	8002850 <fgcolor>
	}
	if (s >= 6){
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	2b05      	cmp	r3, #5
 8001110:	dd02      	ble.n	8001118 <fire+0x258>
	fgcolor(15);
 8001112:	200f      	movs	r0, #15
 8001114:	f001 fb9c 	bl	8002850 <fgcolor>
	}
	gotoxy(7+i,y1);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	3307      	adds	r3, #7
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fbdc 	bl	80028dc <gotoxy>
	printf("%c",219);
 8001124:	20db      	movs	r0, #219	; 0xdb
 8001126:	f001 fec7 	bl	8002eb8 <putchar>
	gotoxy(7+i,y2);
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3307      	adds	r3, #7
 800112e:	6839      	ldr	r1, [r7, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f001 fbd3 	bl	80028dc <gotoxy>
	printf("%c",219);
 8001136:	20db      	movs	r0, #219	; 0xdb
 8001138:	f001 febe 	bl	8002eb8 <putchar>
	s++;
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	3301      	adds	r3, #1
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 9; i++){
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3301      	adds	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	2b09      	cmp	r3, #9
 800114c:	ddcf      	ble.n	80010ee <fire+0x22e>
	} s = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 12; i++){
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	e03b      	b.n	80011d0 <fire+0x310>
 8001158:	200000ac 	.word	0x200000ac
	if (s < 4){
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	2b03      	cmp	r3, #3
 8001160:	dc02      	bgt.n	8001168 <fire+0x2a8>
	fgcolor(9);
 8001162:	2009      	movs	r0, #9
 8001164:	f001 fb74 	bl	8002850 <fgcolor>
	}
	if (s < 7 && s >= 4){
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	2b06      	cmp	r3, #6
 800116c:	dc05      	bgt.n	800117a <fire+0x2ba>
 800116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001170:	2b03      	cmp	r3, #3
 8001172:	dd02      	ble.n	800117a <fire+0x2ba>
	fgcolor(11);
 8001174:	200b      	movs	r0, #11
 8001176:	f001 fb6b 	bl	8002850 <fgcolor>
	}
	if (s < 10 && s >= 7){
 800117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117c:	2b09      	cmp	r3, #9
 800117e:	dc05      	bgt.n	800118c <fire+0x2cc>
 8001180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001182:	2b06      	cmp	r3, #6
 8001184:	dd02      	ble.n	800118c <fire+0x2cc>
	fgcolor(15);
 8001186:	200f      	movs	r0, #15
 8001188:	f001 fb62 	bl	8002850 <fgcolor>
	}
	if (s >= 10){
 800118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118e:	2b09      	cmp	r3, #9
 8001190:	dd02      	ble.n	8001198 <fire+0x2d8>
	fgcolor(12);
 8001192:	200c      	movs	r0, #12
 8001194:	f001 fb5c 	bl	8002850 <fgcolor>
	}
	gotoxy(4+i,y1+1);
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	1d1a      	adds	r2, r3, #4
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	3301      	adds	r3, #1
 80011a0:	4619      	mov	r1, r3
 80011a2:	4610      	mov	r0, r2
 80011a4:	f001 fb9a 	bl	80028dc <gotoxy>
	printf("%c",219);
 80011a8:	20db      	movs	r0, #219	; 0xdb
 80011aa:	f001 fe85 	bl	8002eb8 <putchar>
	gotoxy(4+i,y2-1);
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	1d1a      	adds	r2, r3, #4
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	4619      	mov	r1, r3
 80011b8:	4610      	mov	r0, r2
 80011ba:	f001 fb8f 	bl	80028dc <gotoxy>
	printf("%c",219);
 80011be:	20db      	movs	r0, #219	; 0xdb
 80011c0:	f001 fe7a 	bl	8002eb8 <putchar>
	s++;
 80011c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c6:	3301      	adds	r3, #1
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 12; i++){
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	3301      	adds	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2b0c      	cmp	r3, #12
 80011d4:	ddc2      	ble.n	800115c <fire+0x29c>
	} s = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 14; i++){
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e037      	b.n	8001250 <fire+0x390>
	if(s < 3) {
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	dc02      	bgt.n	80011ec <fire+0x32c>
	fgcolor(9);
 80011e6:	2009      	movs	r0, #9
 80011e8:	f001 fb32 	bl	8002850 <fgcolor>
	}
	if (s < 7 && s >= 3){
 80011ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	dc05      	bgt.n	80011fe <fire+0x33e>
 80011f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	dd02      	ble.n	80011fe <fire+0x33e>
	fgcolor(11);
 80011f8:	200b      	movs	r0, #11
 80011fa:	f001 fb29 	bl	8002850 <fgcolor>
	}
	if (s < 10 && s >=7){
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	2b09      	cmp	r3, #9
 8001202:	dc05      	bgt.n	8001210 <fire+0x350>
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	2b06      	cmp	r3, #6
 8001208:	dd02      	ble.n	8001210 <fire+0x350>
	fgcolor(15);
 800120a:	200f      	movs	r0, #15
 800120c:	f001 fb20 	bl	8002850 <fgcolor>
	}
	if (s < 13 && s >= 10){
 8001210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001212:	2b0c      	cmp	r3, #12
 8001214:	dc05      	bgt.n	8001222 <fire+0x362>
 8001216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001218:	2b09      	cmp	r3, #9
 800121a:	dd02      	ble.n	8001222 <fire+0x362>
	fgcolor(12);
 800121c:	200c      	movs	r0, #12
 800121e:	f001 fb17 	bl	8002850 <fgcolor>
	}
	if (s >= 13) {
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	2b0c      	cmp	r3, #12
 8001226:	dd02      	ble.n	800122e <fire+0x36e>
	fgcolor(4);
 8001228:	2004      	movs	r0, #4
 800122a:	f001 fb11 	bl	8002850 <fgcolor>
	}
	gotoxy(2+i,y1+2);
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	1c9a      	adds	r2, r3, #2
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	3302      	adds	r3, #2
 8001236:	4619      	mov	r1, r3
 8001238:	4610      	mov	r0, r2
 800123a:	f001 fb4f 	bl	80028dc <gotoxy>
	printf("%c",219);
 800123e:	20db      	movs	r0, #219	; 0xdb
 8001240:	f001 fe3a 	bl	8002eb8 <putchar>
	s++;
 8001244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001246:	3301      	adds	r3, #1
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i <= 14; i++){
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2b0e      	cmp	r3, #14
 8001254:	ddc4      	ble.n	80011e0 <fire+0x320>
	} s = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
	ani++;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <fire+0x3bc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <fire+0x3bc>)
 8001262:	6013      	str	r3, [r2, #0]
	if (ani == 3) {
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <fire+0x3bc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d102      	bne.n	8001272 <fire+0x3b2>
		ani = 0;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <fire+0x3bc>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
	}
	}
}
 8001272:	bf00      	nop
 8001274:	3730      	adds	r7, #48	; 0x30
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000ac 	.word	0x200000ac

08001280 <fireDelete>:

void fireDelete(int x1, int y1, int x2, int y2) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
	gotoxy(7,y1);
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	2007      	movs	r0, #7
 8001292:	f001 fb23 	bl	80028dc <gotoxy>
	for (int i = 0; i <= 9; i++){
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	e005      	b.n	80012a8 <fireDelete+0x28>
	printf("%c",32);
 800129c:	2020      	movs	r0, #32
 800129e:	f001 fe0b 	bl	8002eb8 <putchar>
	for (int i = 0; i <= 9; i++){
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	3301      	adds	r3, #1
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	2b09      	cmp	r3, #9
 80012ac:	ddf6      	ble.n	800129c <fireDelete+0x1c>
	}
	gotoxy(7,y2);
 80012ae:	6839      	ldr	r1, [r7, #0]
 80012b0:	2007      	movs	r0, #7
 80012b2:	f001 fb13 	bl	80028dc <gotoxy>
	for (int i = 0; i <= 9; i++){
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
 80012ba:	e005      	b.n	80012c8 <fireDelete+0x48>
	printf("%c",32);
 80012bc:	2020      	movs	r0, #32
 80012be:	f001 fdfb 	bl	8002eb8 <putchar>
	for (int i = 0; i <= 9; i++){
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	3301      	adds	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	2b09      	cmp	r3, #9
 80012cc:	ddf6      	ble.n	80012bc <fireDelete+0x3c>
	}
	gotoxy(4,y1+1);
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3301      	adds	r3, #1
 80012d2:	4619      	mov	r1, r3
 80012d4:	2004      	movs	r0, #4
 80012d6:	f001 fb01 	bl	80028dc <gotoxy>
	for (int i = 0; i <= 12; i++){
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	e005      	b.n	80012ec <fireDelete+0x6c>
	printf("%c",32);
 80012e0:	2020      	movs	r0, #32
 80012e2:	f001 fde9 	bl	8002eb8 <putchar>
	for (int i = 0; i <= 12; i++){
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0c      	cmp	r3, #12
 80012f0:	ddf6      	ble.n	80012e0 <fireDelete+0x60>
	}
	gotoxy(4,y2-1);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	2004      	movs	r0, #4
 80012fa:	f001 faef 	bl	80028dc <gotoxy>
	for (int i = 0; i <= 12; i++){
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	e005      	b.n	8001310 <fireDelete+0x90>
	printf("%c",32);
 8001304:	2020      	movs	r0, #32
 8001306:	f001 fdd7 	bl	8002eb8 <putchar>
	for (int i = 0; i <= 12; i++){
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	3301      	adds	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b0c      	cmp	r3, #12
 8001314:	ddf6      	ble.n	8001304 <fireDelete+0x84>
	}
	gotoxy(2,y1+2);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3302      	adds	r3, #2
 800131a:	4619      	mov	r1, r3
 800131c:	2002      	movs	r0, #2
 800131e:	f001 fadd 	bl	80028dc <gotoxy>
	for (int i = 0; i <= 14; i++){
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e005      	b.n	8001334 <fireDelete+0xb4>
	printf("%c",32);
 8001328:	2020      	movs	r0, #32
 800132a:	f001 fdc5 	bl	8002eb8 <putchar>
	for (int i = 0; i <= 14; i++){
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b0e      	cmp	r3, #14
 8001338:	ddf6      	ble.n	8001328 <fireDelete+0xa8>
	}
	}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <playerInShipR>:


void playerInShipR(int p,int x, int y){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d140      	bne.n	80013d8 <playerInShipR+0x94>
	fgcolor(15);
 8001356:	200f      	movs	r0, #15
 8001358:	f001 fa7a 	bl	8002850 <fgcolor>
	gotoxy(x+2,y);
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3302      	adds	r3, #2
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	f001 faba 	bl	80028dc <gotoxy>
	printf("%c",254	);
 8001368:	20fe      	movs	r0, #254	; 0xfe
 800136a:	f001 fda5 	bl	8002eb8 <putchar>

	gotoxy(x,y+1);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3301      	adds	r3, #1
 8001372:	4619      	mov	r1, r3
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f001 fab1 	bl	80028dc <gotoxy>
	printf("%c",223);
 800137a:	20df      	movs	r0, #223	; 0xdf
 800137c:	f001 fd9c 	bl	8002eb8 <putchar>
	printf("%c",219);
 8001380:	20db      	movs	r0, #219	; 0xdb
 8001382:	f001 fd99 	bl	8002eb8 <putchar>
	printf("%c",219);
 8001386:	20db      	movs	r0, #219	; 0xdb
 8001388:	f001 fd96 	bl	8002eb8 <putchar>

	fgcolor(9);
 800138c:	2009      	movs	r0, #9
 800138e:	f001 fa5f 	bl	8002850 <fgcolor>
	gotoxy(x+1,y+2);
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3302      	adds	r3, #2
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f001 fa9d 	bl	80028dc <gotoxy>
	printf("%c",192);
 80013a2:	20c0      	movs	r0, #192	; 0xc0
 80013a4:	f001 fd88 	bl	8002eb8 <putchar>
	printf("%c",192);
 80013a8:	20c0      	movs	r0, #192	; 0xc0
 80013aa:	f001 fd85 	bl	8002eb8 <putchar>

	fat(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f000 feaa 	bl	8002108 <fat>
	fgcolor(9);
 80013b4:	2009      	movs	r0, #9
 80013b6:	f001 fa4b 	bl	8002850 <fgcolor>
	gotoxy(x+3,y);
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3303      	adds	r3, #3
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fa8b 	bl	80028dc <gotoxy>
	printf("%c",60);
 80013c6:	203c      	movs	r0, #60	; 0x3c
 80013c8:	f001 fd76 	bl	8002eb8 <putchar>
	fgcolor(2);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f001 fa3f 	bl	8002850 <fgcolor>
	fat(0);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 fe98 	bl	8002108 <fat>
	}

	if (p == 2) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d140      	bne.n	8001460 <playerInShipR+0x11c>
	fgcolor(11);
 80013de:	200b      	movs	r0, #11
 80013e0:	f001 fa36 	bl	8002850 <fgcolor>
	gotoxy(x+2,y);
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	3302      	adds	r3, #2
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fa76 	bl	80028dc <gotoxy>
	printf("%c",254	);
 80013f0:	20fe      	movs	r0, #254	; 0xfe
 80013f2:	f001 fd61 	bl	8002eb8 <putchar>

	gotoxy(x,y+1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4619      	mov	r1, r3
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f001 fa6d 	bl	80028dc <gotoxy>
	printf("%c",223);
 8001402:	20df      	movs	r0, #223	; 0xdf
 8001404:	f001 fd58 	bl	8002eb8 <putchar>
	printf("%c",219);
 8001408:	20db      	movs	r0, #219	; 0xdb
 800140a:	f001 fd55 	bl	8002eb8 <putchar>
	printf("%c",219);
 800140e:	20db      	movs	r0, #219	; 0xdb
 8001410:	f001 fd52 	bl	8002eb8 <putchar>

	fgcolor(9);
 8001414:	2009      	movs	r0, #9
 8001416:	f001 fa1b 	bl	8002850 <fgcolor>
	gotoxy(x+1,y+2);
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3302      	adds	r3, #2
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f001 fa59 	bl	80028dc <gotoxy>
	printf("%c",192);
 800142a:	20c0      	movs	r0, #192	; 0xc0
 800142c:	f001 fd44 	bl	8002eb8 <putchar>
	printf("%c",192);
 8001430:	20c0      	movs	r0, #192	; 0xc0
 8001432:	f001 fd41 	bl	8002eb8 <putchar>

	fat(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f000 fe66 	bl	8002108 <fat>
	fgcolor(9);
 800143c:	2009      	movs	r0, #9
 800143e:	f001 fa07 	bl	8002850 <fgcolor>
	gotoxy(x+3,y);
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3303      	adds	r3, #3
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	f001 fa47 	bl	80028dc <gotoxy>
	printf("%c",60);
 800144e:	203c      	movs	r0, #60	; 0x3c
 8001450:	f001 fd32 	bl	8002eb8 <putchar>
	fgcolor(2);
 8001454:	2002      	movs	r0, #2
 8001456:	f001 f9fb 	bl	8002850 <fgcolor>
	fat(0);
 800145a:	2000      	movs	r0, #0
 800145c:	f000 fe54 	bl	8002108 <fat>
	}
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <playerInShipL>:

void playerInShipL(int p,int x, int y){
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d140      	bne.n	80014fc <playerInShipL+0x94>
	fgcolor(15);
 800147a:	200f      	movs	r0, #15
 800147c:	f001 f9e8 	bl	8002850 <fgcolor>
	gotoxy(x+1,y);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	3301      	adds	r3, #1
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	f001 fa28 	bl	80028dc <gotoxy>
	printf("%c",254	);
 800148c:	20fe      	movs	r0, #254	; 0xfe
 800148e:	f001 fd13 	bl	8002eb8 <putchar>

	gotoxy(x+1,y+1);
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3301      	adds	r3, #1
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f001 fa1d 	bl	80028dc <gotoxy>
	printf("%c",219);
 80014a2:	20db      	movs	r0, #219	; 0xdb
 80014a4:	f001 fd08 	bl	8002eb8 <putchar>
	printf("%c",219);
 80014a8:	20db      	movs	r0, #219	; 0xdb
 80014aa:	f001 fd05 	bl	8002eb8 <putchar>
	printf("%c",223);
 80014ae:	20df      	movs	r0, #223	; 0xdf
 80014b0:	f001 fd02 	bl	8002eb8 <putchar>

	fgcolor(9);
 80014b4:	2009      	movs	r0, #9
 80014b6:	f001 f9cb 	bl	8002850 <fgcolor>
	gotoxy(x+1,y+2);
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3302      	adds	r3, #2
 80014c2:	4619      	mov	r1, r3
 80014c4:	4610      	mov	r0, r2
 80014c6:	f001 fa09 	bl	80028dc <gotoxy>
	printf("%c",217);
 80014ca:	20d9      	movs	r0, #217	; 0xd9
 80014cc:	f001 fcf4 	bl	8002eb8 <putchar>
	printf("%c",217);
 80014d0:	20d9      	movs	r0, #217	; 0xd9
 80014d2:	f001 fcf1 	bl	8002eb8 <putchar>

	fat(1);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f000 fe16 	bl	8002108 <fat>
	fgcolor(9);
 80014dc:	2009      	movs	r0, #9
 80014de:	f001 f9b7 	bl	8002850 <fgcolor>
	gotoxy(x,y);
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	f001 f9f9 	bl	80028dc <gotoxy>
	printf("%c",62);
 80014ea:	203e      	movs	r0, #62	; 0x3e
 80014ec:	f001 fce4 	bl	8002eb8 <putchar>
	fgcolor(2);
 80014f0:	2002      	movs	r0, #2
 80014f2:	f001 f9ad 	bl	8002850 <fgcolor>
	fat(0);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 fe06 	bl	8002108 <fat>
	}

	if (p == 2) {
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d140      	bne.n	8001584 <playerInShipL+0x11c>
	fgcolor(11);
 8001502:	200b      	movs	r0, #11
 8001504:	f001 f9a4 	bl	8002850 <fgcolor>
	gotoxy(x+1,y);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3301      	adds	r3, #1
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	f001 f9e4 	bl	80028dc <gotoxy>
	printf("%c",254	);
 8001514:	20fe      	movs	r0, #254	; 0xfe
 8001516:	f001 fccf 	bl	8002eb8 <putchar>

	gotoxy(x+1,y+1);
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3301      	adds	r3, #1
 8001522:	4619      	mov	r1, r3
 8001524:	4610      	mov	r0, r2
 8001526:	f001 f9d9 	bl	80028dc <gotoxy>
	printf("%c",219);
 800152a:	20db      	movs	r0, #219	; 0xdb
 800152c:	f001 fcc4 	bl	8002eb8 <putchar>
	printf("%c",219);
 8001530:	20db      	movs	r0, #219	; 0xdb
 8001532:	f001 fcc1 	bl	8002eb8 <putchar>
	printf("%c",223);
 8001536:	20df      	movs	r0, #223	; 0xdf
 8001538:	f001 fcbe 	bl	8002eb8 <putchar>

	fgcolor(9);
 800153c:	2009      	movs	r0, #9
 800153e:	f001 f987 	bl	8002850 <fgcolor>
	gotoxy(x+1,y+2);
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3302      	adds	r3, #2
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f001 f9c5 	bl	80028dc <gotoxy>
	printf("%c",217);
 8001552:	20d9      	movs	r0, #217	; 0xd9
 8001554:	f001 fcb0 	bl	8002eb8 <putchar>
	printf("%c",217);
 8001558:	20d9      	movs	r0, #217	; 0xd9
 800155a:	f001 fcad 	bl	8002eb8 <putchar>

	fat(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f000 fdd2 	bl	8002108 <fat>
	fgcolor(9);
 8001564:	2009      	movs	r0, #9
 8001566:	f001 f973 	bl	8002850 <fgcolor>
	gotoxy(x,y);
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f001 f9b5 	bl	80028dc <gotoxy>
	printf("%c",62);
 8001572:	203e      	movs	r0, #62	; 0x3e
 8001574:	f001 fca0 	bl	8002eb8 <putchar>
	fgcolor(2);
 8001578:	2002      	movs	r0, #2
 800157a:	f001 f969 	bl	8002850 <fgcolor>
	fat(0);
 800157e:	2000      	movs	r0, #0
 8001580:	f000 fdc2 	bl	8002108 <fat>
	}
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <playerInSpaceR>:

void playerInSpaceR(int p, int x, int y){   //duck
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d14c      	bne.n	8001638 <playerInSpaceR+0xac>
	fgcolor(15);
 800159e:	200f      	movs	r0, #15
 80015a0:	f001 f956 	bl	8002850 <fgcolor>
	bgcolor(7);
 80015a4:	2007      	movs	r0, #7
 80015a6:	f001 f96f 	bl	8002888 <bgcolor>
	gotoxy(x+2,y);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3302      	adds	r3, #2
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 f993 	bl	80028dc <gotoxy>
	printf("%c",254	);
 80015b6:	20fe      	movs	r0, #254	; 0xfe
 80015b8:	f001 fc7e 	bl	8002eb8 <putchar>
	bgcolor(0);
 80015bc:	2000      	movs	r0, #0
 80015be:	f001 f963 	bl	8002888 <bgcolor>

	gotoxy(x,y+1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4619      	mov	r1, r3
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f001 f987 	bl	80028dc <gotoxy>
	printf("%c",223);
 80015ce:	20df      	movs	r0, #223	; 0xdf
 80015d0:	f001 fc72 	bl	8002eb8 <putchar>
	printf("%c",219);
 80015d4:	20db      	movs	r0, #219	; 0xdb
 80015d6:	f001 fc6f 	bl	8002eb8 <putchar>
	printf("%c",219);
 80015da:	20db      	movs	r0, #219	; 0xdb
 80015dc:	f001 fc6c 	bl	8002eb8 <putchar>

	fgcolor(9);
 80015e0:	2009      	movs	r0, #9
 80015e2:	f001 f935 	bl	8002850 <fgcolor>
	gotoxy(x+1,y+2);
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3302      	adds	r3, #2
 80015ee:	4619      	mov	r1, r3
 80015f0:	4610      	mov	r0, r2
 80015f2:	f001 f973 	bl	80028dc <gotoxy>
	printf("%c",192);
 80015f6:	20c0      	movs	r0, #192	; 0xc0
 80015f8:	f001 fc5e 	bl	8002eb8 <putchar>
	printf("%c",192);
 80015fc:	20c0      	movs	r0, #192	; 0xc0
 80015fe:	f001 fc5b 	bl	8002eb8 <putchar>

	fat(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f000 fd80 	bl	8002108 <fat>
	fgcolor(9);
 8001608:	2009      	movs	r0, #9
 800160a:	f001 f921 	bl	8002850 <fgcolor>
	bgcolor(7);
 800160e:	2007      	movs	r0, #7
 8001610:	f001 f93a 	bl	8002888 <bgcolor>
	gotoxy(x+3,y);
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	3303      	adds	r3, #3
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	f001 f95e 	bl	80028dc <gotoxy>
	printf("%c",60);
 8001620:	203c      	movs	r0, #60	; 0x3c
 8001622:	f001 fc49 	bl	8002eb8 <putchar>
	bgcolor(0);
 8001626:	2000      	movs	r0, #0
 8001628:	f001 f92e 	bl	8002888 <bgcolor>
	fgcolor(2);
 800162c:	2002      	movs	r0, #2
 800162e:	f001 f90f 	bl	8002850 <fgcolor>
	fat(0);
 8001632:	2000      	movs	r0, #0
 8001634:	f000 fd68 	bl	8002108 <fat>
	}

	if (p == 2) {
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d14c      	bne.n	80016d8 <playerInSpaceR+0x14c>
	fgcolor(11);
 800163e:	200b      	movs	r0, #11
 8001640:	f001 f906 	bl	8002850 <fgcolor>
	bgcolor(7);
 8001644:	2007      	movs	r0, #7
 8001646:	f001 f91f 	bl	8002888 <bgcolor>
	gotoxy(x+2,y);
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3302      	adds	r3, #2
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	f001 f943 	bl	80028dc <gotoxy>
	printf("%c",254	);
 8001656:	20fe      	movs	r0, #254	; 0xfe
 8001658:	f001 fc2e 	bl	8002eb8 <putchar>
	bgcolor(0);
 800165c:	2000      	movs	r0, #0
 800165e:	f001 f913 	bl	8002888 <bgcolor>

	gotoxy(x,y+1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3301      	adds	r3, #1
 8001666:	4619      	mov	r1, r3
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f001 f937 	bl	80028dc <gotoxy>
	printf("%c",223);
 800166e:	20df      	movs	r0, #223	; 0xdf
 8001670:	f001 fc22 	bl	8002eb8 <putchar>
	printf("%c",219);
 8001674:	20db      	movs	r0, #219	; 0xdb
 8001676:	f001 fc1f 	bl	8002eb8 <putchar>
	printf("%c",219);
 800167a:	20db      	movs	r0, #219	; 0xdb
 800167c:	f001 fc1c 	bl	8002eb8 <putchar>

	fgcolor(9);
 8001680:	2009      	movs	r0, #9
 8001682:	f001 f8e5 	bl	8002850 <fgcolor>
	gotoxy(x+1,y+2);
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3302      	adds	r3, #2
 800168e:	4619      	mov	r1, r3
 8001690:	4610      	mov	r0, r2
 8001692:	f001 f923 	bl	80028dc <gotoxy>
	printf("%c",192);
 8001696:	20c0      	movs	r0, #192	; 0xc0
 8001698:	f001 fc0e 	bl	8002eb8 <putchar>
	printf("%c",192);
 800169c:	20c0      	movs	r0, #192	; 0xc0
 800169e:	f001 fc0b 	bl	8002eb8 <putchar>

	fat(1);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f000 fd30 	bl	8002108 <fat>
	fgcolor(9);
 80016a8:	2009      	movs	r0, #9
 80016aa:	f001 f8d1 	bl	8002850 <fgcolor>
	bgcolor(7);
 80016ae:	2007      	movs	r0, #7
 80016b0:	f001 f8ea 	bl	8002888 <bgcolor>
	gotoxy(x+3,y);
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	3303      	adds	r3, #3
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 f90e 	bl	80028dc <gotoxy>
	printf("%c",60);
 80016c0:	203c      	movs	r0, #60	; 0x3c
 80016c2:	f001 fbf9 	bl	8002eb8 <putchar>
	bgcolor(0);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f001 f8de 	bl	8002888 <bgcolor>
	fgcolor(2);
 80016cc:	2002      	movs	r0, #2
 80016ce:	f001 f8bf 	bl	8002850 <fgcolor>
	fat(0);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 fd18 	bl	8002108 <fat>
	}
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <playerInSpaceL>:

void playerInSpaceL(int p, int x, int y){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d14c      	bne.n	800178c <playerInSpaceL+0xac>
	fgcolor(15);
 80016f2:	200f      	movs	r0, #15
 80016f4:	f001 f8ac 	bl	8002850 <fgcolor>
	bgcolor(7);
 80016f8:	2007      	movs	r0, #7
 80016fa:	f001 f8c5 	bl	8002888 <bgcolor>
	gotoxy(x+1,y);
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3301      	adds	r3, #1
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4618      	mov	r0, r3
 8001706:	f001 f8e9 	bl	80028dc <gotoxy>
	printf("%c",254	);
 800170a:	20fe      	movs	r0, #254	; 0xfe
 800170c:	f001 fbd4 	bl	8002eb8 <putchar>
	bgcolor(0);
 8001710:	2000      	movs	r0, #0
 8001712:	f001 f8b9 	bl	8002888 <bgcolor>

	gotoxy(x+1,y+1);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3301      	adds	r3, #1
 800171e:	4619      	mov	r1, r3
 8001720:	4610      	mov	r0, r2
 8001722:	f001 f8db 	bl	80028dc <gotoxy>
	printf("%c",219);
 8001726:	20db      	movs	r0, #219	; 0xdb
 8001728:	f001 fbc6 	bl	8002eb8 <putchar>
	printf("%c",219);
 800172c:	20db      	movs	r0, #219	; 0xdb
 800172e:	f001 fbc3 	bl	8002eb8 <putchar>
	printf("%c",223);
 8001732:	20df      	movs	r0, #223	; 0xdf
 8001734:	f001 fbc0 	bl	8002eb8 <putchar>

	fgcolor(9);
 8001738:	2009      	movs	r0, #9
 800173a:	f001 f889 	bl	8002850 <fgcolor>
	gotoxy(x+1,y+2);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3302      	adds	r3, #2
 8001746:	4619      	mov	r1, r3
 8001748:	4610      	mov	r0, r2
 800174a:	f001 f8c7 	bl	80028dc <gotoxy>
	printf("%c",217);
 800174e:	20d9      	movs	r0, #217	; 0xd9
 8001750:	f001 fbb2 	bl	8002eb8 <putchar>
	printf("%c",217);
 8001754:	20d9      	movs	r0, #217	; 0xd9
 8001756:	f001 fbaf 	bl	8002eb8 <putchar>

	fat(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f000 fcd4 	bl	8002108 <fat>
	fgcolor(9);
 8001760:	2009      	movs	r0, #9
 8001762:	f001 f875 	bl	8002850 <fgcolor>
	bgcolor(7);
 8001766:	2007      	movs	r0, #7
 8001768:	f001 f88e 	bl	8002888 <bgcolor>
	gotoxy(x,y);
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	68b8      	ldr	r0, [r7, #8]
 8001770:	f001 f8b4 	bl	80028dc <gotoxy>
	printf("%c",62);
 8001774:	203e      	movs	r0, #62	; 0x3e
 8001776:	f001 fb9f 	bl	8002eb8 <putchar>
	bgcolor(0);
 800177a:	2000      	movs	r0, #0
 800177c:	f001 f884 	bl	8002888 <bgcolor>
	fgcolor(2);
 8001780:	2002      	movs	r0, #2
 8001782:	f001 f865 	bl	8002850 <fgcolor>
	fat(0);
 8001786:	2000      	movs	r0, #0
 8001788:	f000 fcbe 	bl	8002108 <fat>
	}

	if (p == 2) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d14c      	bne.n	800182c <playerInSpaceL+0x14c>
	fgcolor(11);
 8001792:	200b      	movs	r0, #11
 8001794:	f001 f85c 	bl	8002850 <fgcolor>
	bgcolor(7);
 8001798:	2007      	movs	r0, #7
 800179a:	f001 f875 	bl	8002888 <bgcolor>
	gotoxy(x+1,y);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3301      	adds	r3, #1
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f001 f899 	bl	80028dc <gotoxy>
	printf("%c",254	);
 80017aa:	20fe      	movs	r0, #254	; 0xfe
 80017ac:	f001 fb84 	bl	8002eb8 <putchar>
	bgcolor(0);
 80017b0:	2000      	movs	r0, #0
 80017b2:	f001 f869 	bl	8002888 <bgcolor>

	gotoxy(x+1,y+1);
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3301      	adds	r3, #1
 80017be:	4619      	mov	r1, r3
 80017c0:	4610      	mov	r0, r2
 80017c2:	f001 f88b 	bl	80028dc <gotoxy>
	printf("%c",219);
 80017c6:	20db      	movs	r0, #219	; 0xdb
 80017c8:	f001 fb76 	bl	8002eb8 <putchar>
	printf("%c",219);
 80017cc:	20db      	movs	r0, #219	; 0xdb
 80017ce:	f001 fb73 	bl	8002eb8 <putchar>
	printf("%c",223);
 80017d2:	20df      	movs	r0, #223	; 0xdf
 80017d4:	f001 fb70 	bl	8002eb8 <putchar>

	fgcolor(9);
 80017d8:	2009      	movs	r0, #9
 80017da:	f001 f839 	bl	8002850 <fgcolor>
	gotoxy(x+1,y+2);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3302      	adds	r3, #2
 80017e6:	4619      	mov	r1, r3
 80017e8:	4610      	mov	r0, r2
 80017ea:	f001 f877 	bl	80028dc <gotoxy>
	printf("%c",217);
 80017ee:	20d9      	movs	r0, #217	; 0xd9
 80017f0:	f001 fb62 	bl	8002eb8 <putchar>
	printf("%c",217);
 80017f4:	20d9      	movs	r0, #217	; 0xd9
 80017f6:	f001 fb5f 	bl	8002eb8 <putchar>

	fat(1);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f000 fc84 	bl	8002108 <fat>
	fgcolor(9);
 8001800:	2009      	movs	r0, #9
 8001802:	f001 f825 	bl	8002850 <fgcolor>
	bgcolor(7);
 8001806:	2007      	movs	r0, #7
 8001808:	f001 f83e 	bl	8002888 <bgcolor>
	gotoxy(x,y);
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	68b8      	ldr	r0, [r7, #8]
 8001810:	f001 f864 	bl	80028dc <gotoxy>
	printf("%c",62);
 8001814:	203e      	movs	r0, #62	; 0x3e
 8001816:	f001 fb4f 	bl	8002eb8 <putchar>
	bgcolor(0);
 800181a:	2000      	movs	r0, #0
 800181c:	f001 f834 	bl	8002888 <bgcolor>
	fgcolor(2);
 8001820:	2002      	movs	r0, #2
 8001822:	f001 f815 	bl	8002850 <fgcolor>
	fat(0);
 8001826:	2000      	movs	r0, #0
 8001828:	f000 fc6e 	bl	8002108 <fat>
	}
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <playerInSpaceUSDL>:

void playerInSpaceUSDL(int p, int x, int y){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d14e      	bne.n	80018e4 <playerInSpaceUSDL+0xb0>
	fgcolor(15);
 8001846:	200f      	movs	r0, #15
 8001848:	f001 f802 	bl	8002850 <fgcolor>
	bgcolor(7);
 800184c:	2007      	movs	r0, #7
 800184e:	f001 f81b 	bl	8002888 <bgcolor>
	gotoxy(x+1,y+2);
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3302      	adds	r3, #2
 800185a:	4619      	mov	r1, r3
 800185c:	4610      	mov	r0, r2
 800185e:	f001 f83d 	bl	80028dc <gotoxy>
	printf("%c",254	);
 8001862:	20fe      	movs	r0, #254	; 0xfe
 8001864:	f001 fb28 	bl	8002eb8 <putchar>
	bgcolor(0);
 8001868:	2000      	movs	r0, #0
 800186a:	f001 f80d 	bl	8002888 <bgcolor>

	gotoxy(x+1,y+1);
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3301      	adds	r3, #1
 8001876:	4619      	mov	r1, r3
 8001878:	4610      	mov	r0, r2
 800187a:	f001 f82f 	bl	80028dc <gotoxy>
	printf("%c",219);
 800187e:	20db      	movs	r0, #219	; 0xdb
 8001880:	f001 fb1a 	bl	8002eb8 <putchar>
	printf("%c",219);
 8001884:	20db      	movs	r0, #219	; 0xdb
 8001886:	f001 fb17 	bl	8002eb8 <putchar>
	printf("%c",220);
 800188a:	20dc      	movs	r0, #220	; 0xdc
 800188c:	f001 fb14 	bl	8002eb8 <putchar>

	fgcolor(9);
 8001890:	2009      	movs	r0, #9
 8001892:	f000 ffdd 	bl	8002850 <fgcolor>
	gotoxy(x+1,y);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	3301      	adds	r3, #1
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	f001 f81d 	bl	80028dc <gotoxy>
	printf("%c",191);
 80018a2:	20bf      	movs	r0, #191	; 0xbf
 80018a4:	f001 fb08 	bl	8002eb8 <putchar>
	printf("%c",191);
 80018a8:	20bf      	movs	r0, #191	; 0xbf
 80018aa:	f001 fb05 	bl	8002eb8 <putchar>

	fat(1);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f000 fc2a 	bl	8002108 <fat>
	fgcolor(9);
 80018b4:	2009      	movs	r0, #9
 80018b6:	f000 ffcb 	bl	8002850 <fgcolor>
	bgcolor(7);
 80018ba:	2007      	movs	r0, #7
 80018bc:	f000 ffe4 	bl	8002888 <bgcolor>
	gotoxy(x,y+2);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3302      	adds	r3, #2
 80018c4:	4619      	mov	r1, r3
 80018c6:	68b8      	ldr	r0, [r7, #8]
 80018c8:	f001 f808 	bl	80028dc <gotoxy>
	printf("%c",62);
 80018cc:	203e      	movs	r0, #62	; 0x3e
 80018ce:	f001 faf3 	bl	8002eb8 <putchar>
	bgcolor(0);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 ffd8 	bl	8002888 <bgcolor>
	fgcolor(2);
 80018d8:	2002      	movs	r0, #2
 80018da:	f000 ffb9 	bl	8002850 <fgcolor>
	fat(0);
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 fc12 	bl	8002108 <fat>
	}

	if (p == 2) {
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d14e      	bne.n	8001988 <playerInSpaceUSDL+0x154>
	fgcolor(11);
 80018ea:	200b      	movs	r0, #11
 80018ec:	f000 ffb0 	bl	8002850 <fgcolor>
	bgcolor(7);
 80018f0:	2007      	movs	r0, #7
 80018f2:	f000 ffc9 	bl	8002888 <bgcolor>
	gotoxy(x+1,y+2);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3302      	adds	r3, #2
 80018fe:	4619      	mov	r1, r3
 8001900:	4610      	mov	r0, r2
 8001902:	f000 ffeb 	bl	80028dc <gotoxy>
	printf("%c",254	);
 8001906:	20fe      	movs	r0, #254	; 0xfe
 8001908:	f001 fad6 	bl	8002eb8 <putchar>
	bgcolor(0);
 800190c:	2000      	movs	r0, #0
 800190e:	f000 ffbb 	bl	8002888 <bgcolor>

	gotoxy(x+1,y+1);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3301      	adds	r3, #1
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f000 ffdd 	bl	80028dc <gotoxy>
	printf("%c",219);
 8001922:	20db      	movs	r0, #219	; 0xdb
 8001924:	f001 fac8 	bl	8002eb8 <putchar>
	printf("%c",219);
 8001928:	20db      	movs	r0, #219	; 0xdb
 800192a:	f001 fac5 	bl	8002eb8 <putchar>
	printf("%c",220);
 800192e:	20dc      	movs	r0, #220	; 0xdc
 8001930:	f001 fac2 	bl	8002eb8 <putchar>

	fgcolor(9);
 8001934:	2009      	movs	r0, #9
 8001936:	f000 ff8b 	bl	8002850 <fgcolor>
	gotoxy(x+1,y);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3301      	adds	r3, #1
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 ffcb 	bl	80028dc <gotoxy>
	printf("%c",191);
 8001946:	20bf      	movs	r0, #191	; 0xbf
 8001948:	f001 fab6 	bl	8002eb8 <putchar>
	printf("%c",191);
 800194c:	20bf      	movs	r0, #191	; 0xbf
 800194e:	f001 fab3 	bl	8002eb8 <putchar>

	fat(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f000 fbd8 	bl	8002108 <fat>
	fgcolor(9);
 8001958:	2009      	movs	r0, #9
 800195a:	f000 ff79 	bl	8002850 <fgcolor>
	bgcolor(7);
 800195e:	2007      	movs	r0, #7
 8001960:	f000 ff92 	bl	8002888 <bgcolor>
	gotoxy(x,y+2);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3302      	adds	r3, #2
 8001968:	4619      	mov	r1, r3
 800196a:	68b8      	ldr	r0, [r7, #8]
 800196c:	f000 ffb6 	bl	80028dc <gotoxy>
	printf("%c",62);
 8001970:	203e      	movs	r0, #62	; 0x3e
 8001972:	f001 faa1 	bl	8002eb8 <putchar>
	bgcolor(0);
 8001976:	2000      	movs	r0, #0
 8001978:	f000 ff86 	bl	8002888 <bgcolor>
	fgcolor(2);
 800197c:	2002      	movs	r0, #2
 800197e:	f000 ff67 	bl	8002850 <fgcolor>
	fat(0);
 8001982:	2000      	movs	r0, #0
 8001984:	f000 fbc0 	bl	8002108 <fat>
	}
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <playerInSpaceUSDR>:

void playerInSpaceUSDR(int p, int x, int y){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d14e      	bne.n	8001a40 <playerInSpaceUSDR+0xb0>
	fgcolor(15);
 80019a2:	200f      	movs	r0, #15
 80019a4:	f000 ff54 	bl	8002850 <fgcolor>
	bgcolor(7);
 80019a8:	2007      	movs	r0, #7
 80019aa:	f000 ff6d 	bl	8002888 <bgcolor>
	gotoxy(x+2,y+2);
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1c9a      	adds	r2, r3, #2
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3302      	adds	r3, #2
 80019b6:	4619      	mov	r1, r3
 80019b8:	4610      	mov	r0, r2
 80019ba:	f000 ff8f 	bl	80028dc <gotoxy>
	printf("%c",254	);
 80019be:	20fe      	movs	r0, #254	; 0xfe
 80019c0:	f001 fa7a 	bl	8002eb8 <putchar>
	bgcolor(0);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f000 ff5f 	bl	8002888 <bgcolor>

	gotoxy(x,y+1);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3301      	adds	r3, #1
 80019ce:	4619      	mov	r1, r3
 80019d0:	68b8      	ldr	r0, [r7, #8]
 80019d2:	f000 ff83 	bl	80028dc <gotoxy>
	printf("%c",220);
 80019d6:	20dc      	movs	r0, #220	; 0xdc
 80019d8:	f001 fa6e 	bl	8002eb8 <putchar>
	printf("%c",219);
 80019dc:	20db      	movs	r0, #219	; 0xdb
 80019de:	f001 fa6b 	bl	8002eb8 <putchar>
	printf("%c",219);
 80019e2:	20db      	movs	r0, #219	; 0xdb
 80019e4:	f001 fa68 	bl	8002eb8 <putchar>

	fgcolor(9);
 80019e8:	2009      	movs	r0, #9
 80019ea:	f000 ff31 	bl	8002850 <fgcolor>
	gotoxy(x+1,y);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3301      	adds	r3, #1
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 ff71 	bl	80028dc <gotoxy>
	printf("%c",218);
 80019fa:	20da      	movs	r0, #218	; 0xda
 80019fc:	f001 fa5c 	bl	8002eb8 <putchar>
	printf("%c",218);
 8001a00:	20da      	movs	r0, #218	; 0xda
 8001a02:	f001 fa59 	bl	8002eb8 <putchar>

	fat(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f000 fb7e 	bl	8002108 <fat>
	fgcolor(9);
 8001a0c:	2009      	movs	r0, #9
 8001a0e:	f000 ff1f 	bl	8002850 <fgcolor>
	bgcolor(7);
 8001a12:	2007      	movs	r0, #7
 8001a14:	f000 ff38 	bl	8002888 <bgcolor>
	gotoxy(x+3,y+2);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	1cda      	adds	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3302      	adds	r3, #2
 8001a20:	4619      	mov	r1, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f000 ff5a 	bl	80028dc <gotoxy>
	printf("%c",60);
 8001a28:	203c      	movs	r0, #60	; 0x3c
 8001a2a:	f001 fa45 	bl	8002eb8 <putchar>
	bgcolor(0);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 ff2a 	bl	8002888 <bgcolor>
	fgcolor(2);
 8001a34:	2002      	movs	r0, #2
 8001a36:	f000 ff0b 	bl	8002850 <fgcolor>
	fat(0);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 fb64 	bl	8002108 <fat>
	}

	if (p == 2) {
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d14e      	bne.n	8001ae4 <playerInSpaceUSDR+0x154>
	fgcolor(11);
 8001a46:	200b      	movs	r0, #11
 8001a48:	f000 ff02 	bl	8002850 <fgcolor>
	bgcolor(7);
 8001a4c:	2007      	movs	r0, #7
 8001a4e:	f000 ff1b 	bl	8002888 <bgcolor>
	gotoxy(x+1,y+2);
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3302      	adds	r3, #2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	f000 ff3d 	bl	80028dc <gotoxy>
	printf("%c",254	);
 8001a62:	20fe      	movs	r0, #254	; 0xfe
 8001a64:	f001 fa28 	bl	8002eb8 <putchar>
	bgcolor(0);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f000 ff0d 	bl	8002888 <bgcolor>

	gotoxy(x+1,y+1);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3301      	adds	r3, #1
 8001a76:	4619      	mov	r1, r3
 8001a78:	4610      	mov	r0, r2
 8001a7a:	f000 ff2f 	bl	80028dc <gotoxy>
	printf("%c",219);
 8001a7e:	20db      	movs	r0, #219	; 0xdb
 8001a80:	f001 fa1a 	bl	8002eb8 <putchar>
	printf("%c",219);
 8001a84:	20db      	movs	r0, #219	; 0xdb
 8001a86:	f001 fa17 	bl	8002eb8 <putchar>
	printf("%c",220);
 8001a8a:	20dc      	movs	r0, #220	; 0xdc
 8001a8c:	f001 fa14 	bl	8002eb8 <putchar>

	fgcolor(9);
 8001a90:	2009      	movs	r0, #9
 8001a92:	f000 fedd 	bl	8002850 <fgcolor>
	gotoxy(x+1,y);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 ff1d 	bl	80028dc <gotoxy>
	printf("%c",191);
 8001aa2:	20bf      	movs	r0, #191	; 0xbf
 8001aa4:	f001 fa08 	bl	8002eb8 <putchar>
	printf("%c",191);
 8001aa8:	20bf      	movs	r0, #191	; 0xbf
 8001aaa:	f001 fa05 	bl	8002eb8 <putchar>

	fat(1);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f000 fb2a 	bl	8002108 <fat>
	fgcolor(9);
 8001ab4:	2009      	movs	r0, #9
 8001ab6:	f000 fecb 	bl	8002850 <fgcolor>
	bgcolor(7);
 8001aba:	2007      	movs	r0, #7
 8001abc:	f000 fee4 	bl	8002888 <bgcolor>
	gotoxy(x,y+2);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	68b8      	ldr	r0, [r7, #8]
 8001ac8:	f000 ff08 	bl	80028dc <gotoxy>
	printf("%c",62);
 8001acc:	203e      	movs	r0, #62	; 0x3e
 8001ace:	f001 f9f3 	bl	8002eb8 <putchar>
	bgcolor(0);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 fed8 	bl	8002888 <bgcolor>
	fgcolor(2);
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f000 feb9 	bl	8002850 <fgcolor>
	fat(0);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f000 fb12 	bl	8002108 <fat>
	}
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <goDuck1UP>:

void goDuck1UP(int x, int y, int *ud, int *rl,duck_t * D){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->ud >-20){
 8001afa:	4b7d      	ldr	r3, [pc, #500]	; (8001cf0 <goDuck1UP+0x204>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d034      	beq.n	8001b6e <goDuck1UP+0x82>
 8001b04:	4b7b      	ldr	r3, [pc, #492]	; (8001cf4 <goDuck1UP+0x208>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b25b      	sxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d12f      	bne.n	8001b6e <goDuck1UP+0x82>
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f993 3000 	ldrsb.w	r3, [r3]
 8001b14:	f113 0f13 	cmn.w	r3, #19
 8001b18:	db29      	blt.n	8001b6e <goDuck1UP+0x82>
	playerInSpaceR(1,x+*rl,y+*ud);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	18d1      	adds	r1, r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	4413      	add	r3, r2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f7ff fd2d 	bl	800158c <playerInSpaceR>
	playerDelete(1,x+*rl,y+*ud);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	18d1      	adds	r1, r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	4413      	add	r3, r2
 8001b42:	461a      	mov	r2, r3
 8001b44:	2001      	movs	r0, #1
 8001b46:	f000 faf9 	bl	800213c <playerDelete>
	(*ud)--;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	1e5a      	subs	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	601a      	str	r2, [r3, #0]
	playerInSpaceR(1,x+1+*rl,y+*ud);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	18d1      	adds	r1, r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4413      	add	r3, r2
 8001b66:	461a      	mov	r2, r3
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff fd0f 	bl	800158c <playerInSpaceR>
	}
	if (joy.left && !CJoy.left && D->rl >0){
 8001b6e:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <goDuck1UP+0x204>)
 8001b70:	789b      	ldrb	r3, [r3, #2]
 8001b72:	b25b      	sxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d033      	beq.n	8001be0 <goDuck1UP+0xf4>
 8001b78:	4b5e      	ldr	r3, [pc, #376]	; (8001cf4 <goDuck1UP+0x208>)
 8001b7a:	789b      	ldrb	r3, [r3, #2]
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d12e      	bne.n	8001be0 <goDuck1UP+0xf4>
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	dd29      	ble.n	8001be0 <goDuck1UP+0xf4>
	playerInSpaceL(1,x+*rl,y+*ud);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	18d1      	adds	r1, r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f7ff fd9e 	bl	80016e0 <playerInSpaceL>
	playerDelete(1,x+*rl,y+*ud);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	18d1      	adds	r1, r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f000 fac0 	bl	800213c <playerDelete>
	(*rl)-=5;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	1f5a      	subs	r2, r3, #5
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	601a      	str	r2, [r3, #0]
	playerInSpaceL(1,x+1+*rl,y+*ud);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	18d1      	adds	r1, r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f7ff fd80 	bl	80016e0 <playerInSpaceL>
	}
	if (joy.right && !CJoy.right && D->rl <65){
 8001be0:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <goDuck1UP+0x204>)
 8001be2:	78db      	ldrb	r3, [r3, #3]
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d033      	beq.n	8001c52 <goDuck1UP+0x166>
 8001bea:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <goDuck1UP+0x208>)
 8001bec:	78db      	ldrb	r3, [r3, #3]
 8001bee:	b25b      	sxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d12e      	bne.n	8001c52 <goDuck1UP+0x166>
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001bfa:	2b40      	cmp	r3, #64	; 0x40
 8001bfc:	dc29      	bgt.n	8001c52 <goDuck1UP+0x166>
	playerInSpaceR(1,x+*rl,y+*ud);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	18d1      	adds	r1, r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff fcbb 	bl	800158c <playerInSpaceR>
	playerDelete(1,x+*rl,y+*ud);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	18d1      	adds	r1, r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	4413      	add	r3, r2
 8001c26:	461a      	mov	r2, r3
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f000 fa87 	bl	800213c <playerDelete>
	(*rl)+=5;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	1d5a      	adds	r2, r3, #5
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	601a      	str	r2, [r3, #0]
	playerInSpaceR(1,x+1+*rl,y+*ud);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	18d1      	adds	r1, r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	4413      	add	r3, r2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7ff fc9d 	bl	800158c <playerInSpaceR>
	}
	if (joy.center && !CJoy.center && D->rl == 30){
 8001c52:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <goDuck1UP+0x204>)
 8001c54:	791b      	ldrb	r3, [r3, #4]
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d033      	beq.n	8001cc4 <goDuck1UP+0x1d8>
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <goDuck1UP+0x208>)
 8001c5e:	791b      	ldrb	r3, [r3, #4]
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d12e      	bne.n	8001cc4 <goDuck1UP+0x1d8>
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c6c:	2b1e      	cmp	r3, #30
 8001c6e:	d129      	bne.n	8001cc4 <goDuck1UP+0x1d8>
	playerInSpaceR(1,x+*rl,y+*ud);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	18d1      	adds	r1, r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4413      	add	r3, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	2001      	movs	r0, #1
 8001c84:	f7ff fc82 	bl	800158c <playerInSpaceR>
	playerDelete(1,x+*rl,y+*ud);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	18d1      	adds	r1, r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4413      	add	r3, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f000 fa4e 	bl	800213c <playerDelete>
	(*ud)+=4;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	1d1a      	adds	r2, r3, #4
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	601a      	str	r2, [r3, #0]
	playerInShipR(1,x+1+*rl,y+*ud);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	18d1      	adds	r1, r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4413      	add	r3, r2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff fb40 	bl	8001344 <playerInShipR>
	}
	D->ud = *ud;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b25a      	sxtb	r2, r3
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	3b16      	subs	r3, #22
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	b25a      	sxtb	r2, r3
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	705a      	strb	r2, [r3, #1]
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200000d0 	.word	0x200000d0
 8001cf4:	200000d8 	.word	0x200000d8

08001cf8 <goDuck1MID>:

void goDuck1MID(int x, int y, int *ud, int *rl,duck_t * D){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->rl == 30){
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <goDuck1MID+0x200>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b25b      	sxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d033      	beq.n	8001d78 <goDuck1MID+0x80>
 8001d10:	4b7a      	ldr	r3, [pc, #488]	; (8001efc <goDuck1MID+0x204>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d12e      	bne.n	8001d78 <goDuck1MID+0x80>
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d20:	2b1e      	cmp	r3, #30
 8001d22:	d129      	bne.n	8001d78 <goDuck1MID+0x80>
	playerInShipR(1,x+*rl,y+*ud);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	18d1      	adds	r1, r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4413      	add	r3, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	2001      	movs	r0, #1
 8001d38:	f7ff fb04 	bl	8001344 <playerInShipR>
	playerDelete(1,x+*rl,y+*ud);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	18d1      	adds	r1, r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f000 f9f4 	bl	800213c <playerDelete>
	(*ud)-= 4;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	1f1a      	subs	r2, r3, #4
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
	playerInSpaceR(1,x+1+*rl,y+*ud);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	18d1      	adds	r1, r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4413      	add	r3, r2
 8001d70:	461a      	mov	r2, r3
 8001d72:	2001      	movs	r0, #1
 8001d74:	f7ff fc0a 	bl	800158c <playerInSpaceR>
	}
	if (joy.down && !CJoy.down  && D->rl == 30){
 8001d78:	4b5f      	ldr	r3, [pc, #380]	; (8001ef8 <goDuck1MID+0x200>)
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d033      	beq.n	8001dea <goDuck1MID+0xf2>
 8001d82:	4b5e      	ldr	r3, [pc, #376]	; (8001efc <goDuck1MID+0x204>)
 8001d84:	785b      	ldrb	r3, [r3, #1]
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d12e      	bne.n	8001dea <goDuck1MID+0xf2>
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d92:	2b1e      	cmp	r3, #30
 8001d94:	d129      	bne.n	8001dea <goDuck1MID+0xf2>
	playerInShipR(1,x+*rl,y+*ud);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	18d1      	adds	r1, r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4413      	add	r3, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	2001      	movs	r0, #1
 8001daa:	f7ff facb 	bl	8001344 <playerInShipR>
	playerDelete(1,x+*rl,y+*ud);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	18d1      	adds	r1, r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f000 f9bb 	bl	800213c <playerDelete>
	(*ud)+= 4;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	1d1a      	adds	r2, r3, #4
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(1,x+1+*rl,y+*ud);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	18d1      	adds	r1, r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4413      	add	r3, r2
 8001de2:	461a      	mov	r2, r3
 8001de4:	2001      	movs	r0, #1
 8001de6:	f7ff fdd3 	bl	8001990 <playerInSpaceUSDR>
	}
	if (joy.left && !CJoy.left && D->rl >0){
 8001dea:	4b43      	ldr	r3, [pc, #268]	; (8001ef8 <goDuck1MID+0x200>)
 8001dec:	789b      	ldrb	r3, [r3, #2]
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d033      	beq.n	8001e5c <goDuck1MID+0x164>
 8001df4:	4b41      	ldr	r3, [pc, #260]	; (8001efc <goDuck1MID+0x204>)
 8001df6:	789b      	ldrb	r3, [r3, #2]
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d12e      	bne.n	8001e5c <goDuck1MID+0x164>
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	dd29      	ble.n	8001e5c <goDuck1MID+0x164>
	playerInShipL(1,x+*rl,y+*ud);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	18d1      	adds	r1, r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4413      	add	r3, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f7ff fb24 	bl	8001468 <playerInShipL>
	playerDelete(1,x+*rl,y+*ud);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	18d1      	adds	r1, r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4413      	add	r3, r2
 8001e30:	461a      	mov	r2, r3
 8001e32:	2001      	movs	r0, #1
 8001e34:	f000 f982 	bl	800213c <playerDelete>
	(*rl)-=5;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1f5a      	subs	r2, r3, #5
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	601a      	str	r2, [r3, #0]
	playerInShipL(1,x+1+*rl,y+*ud);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	18d1      	adds	r1, r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4413      	add	r3, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	2001      	movs	r0, #1
 8001e58:	f7ff fb06 	bl	8001468 <playerInShipL>
	}
	if (joy.right && !CJoy.right && D->rl <55){
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <goDuck1MID+0x200>)
 8001e5e:	78db      	ldrb	r3, [r3, #3]
 8001e60:	b25b      	sxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d033      	beq.n	8001ece <goDuck1MID+0x1d6>
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <goDuck1MID+0x204>)
 8001e68:	78db      	ldrb	r3, [r3, #3]
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d12e      	bne.n	8001ece <goDuck1MID+0x1d6>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e76:	2b36      	cmp	r3, #54	; 0x36
 8001e78:	dc29      	bgt.n	8001ece <goDuck1MID+0x1d6>
	playerInShipR(1,x+*rl,y+*ud);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	18d1      	adds	r1, r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4413      	add	r3, r2
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f7ff fa59 	bl	8001344 <playerInShipR>
	playerDelete(1,x+*rl,y+*ud);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	18d1      	adds	r1, r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f000 f949 	bl	800213c <playerDelete>
	(*rl)+=5;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	1d5a      	adds	r2, r3, #5
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	601a      	str	r2, [r3, #0]
	playerInShipR(1,x+1+*rl,y+*ud);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	18d1      	adds	r1, r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f7ff fa3b 	bl	8001344 <playerInShipR>
	}
	D->ud = *ud;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b25a      	sxtb	r2, r3
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	3b16      	subs	r3, #22
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	b25a      	sxtb	r2, r3
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	705a      	strb	r2, [r3, #1]
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200000d0 	.word	0x200000d0
 8001efc:	200000d8 	.word	0x200000d8

08001f00 <goDuck1USD>:

void goDuck1USD(int x, int y, int *ud, int *rl,duck_t * D){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]

	if (joy.up && !CJoy.up && D->ud <28){
 8001f0e:	4b7c      	ldr	r3, [pc, #496]	; (8002100 <goDuck1USD+0x200>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d033      	beq.n	8001f80 <goDuck1USD+0x80>
 8001f18:	4b7a      	ldr	r3, [pc, #488]	; (8002104 <goDuck1USD+0x204>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b25b      	sxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d12e      	bne.n	8001f80 <goDuck1USD+0x80>
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f993 3000 	ldrsb.w	r3, [r3]
 8001f28:	2b1b      	cmp	r3, #27
 8001f2a:	dc29      	bgt.n	8001f80 <goDuck1USD+0x80>
	playerInSpaceUSDR(1,x+*rl,y+*ud);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	18d1      	adds	r1, r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7ff fd26 	bl	8001990 <playerInSpaceUSDR>
	playerDelete(1,x+*rl,y+*ud);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	18d1      	adds	r1, r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4413      	add	r3, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	2001      	movs	r0, #1
 8001f58:	f000 f8f0 	bl	800213c <playerDelete>
	(*ud)++;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(1,x+1+*rl,y+*ud);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	18d1      	adds	r1, r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4413      	add	r3, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f7ff fd08 	bl	8001990 <playerInSpaceUSDR>
	}
	if (joy.right && !CJoy.right && D->rl >0){
 8001f80:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <goDuck1USD+0x200>)
 8001f82:	78db      	ldrb	r3, [r3, #3]
 8001f84:	b25b      	sxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d033      	beq.n	8001ff2 <goDuck1USD+0xf2>
 8001f8a:	4b5e      	ldr	r3, [pc, #376]	; (8002104 <goDuck1USD+0x204>)
 8001f8c:	78db      	ldrb	r3, [r3, #3]
 8001f8e:	b25b      	sxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d12e      	bne.n	8001ff2 <goDuck1USD+0xf2>
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	dd29      	ble.n	8001ff2 <goDuck1USD+0xf2>
	playerInSpaceUSDL(1,x+*rl,y+*ud);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	18d1      	adds	r1, r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4413      	add	r3, r2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff fc3f 	bl	8001834 <playerInSpaceUSDL>
	playerDelete(1,x+*rl,y+*ud);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	18d1      	adds	r1, r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f000 f8b7 	bl	800213c <playerDelete>
	(*rl)-=5;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	1f5a      	subs	r2, r3, #5
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDL(1,x+1+*rl,y+*ud);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	18d1      	adds	r1, r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4413      	add	r3, r2
 8001fea:	461a      	mov	r2, r3
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7ff fc21 	bl	8001834 <playerInSpaceUSDL>
	}
	if (joy.left && !CJoy.left && D->rl <65){
 8001ff2:	4b43      	ldr	r3, [pc, #268]	; (8002100 <goDuck1USD+0x200>)
 8001ff4:	789b      	ldrb	r3, [r3, #2]
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d033      	beq.n	8002064 <goDuck1USD+0x164>
 8001ffc:	4b41      	ldr	r3, [pc, #260]	; (8002104 <goDuck1USD+0x204>)
 8001ffe:	789b      	ldrb	r3, [r3, #2]
 8002000:	b25b      	sxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d12e      	bne.n	8002064 <goDuck1USD+0x164>
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	dc29      	bgt.n	8002064 <goDuck1USD+0x164>
	playerInSpaceUSDR(1,x+*rl,y+*ud);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	18d1      	adds	r1, r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4413      	add	r3, r2
 8002020:	461a      	mov	r2, r3
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff fcb4 	bl	8001990 <playerInSpaceUSDR>
	playerDelete(1,x+*rl,y+*ud);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	18d1      	adds	r1, r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4413      	add	r3, r2
 8002038:	461a      	mov	r2, r3
 800203a:	2001      	movs	r0, #1
 800203c:	f000 f87e 	bl	800213c <playerDelete>
	(*rl)+=5;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	1d5a      	adds	r2, r3, #5
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	601a      	str	r2, [r3, #0]
	playerInSpaceUSDR(1,x+1+*rl,y+*ud);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	18d1      	adds	r1, r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4413      	add	r3, r2
 800205c:	461a      	mov	r2, r3
 800205e:	2001      	movs	r0, #1
 8002060:	f7ff fc96 	bl	8001990 <playerInSpaceUSDR>
	}
	if (joy.center && !CJoy.center && D->rl == 30){
 8002064:	4b26      	ldr	r3, [pc, #152]	; (8002100 <goDuck1USD+0x200>)
 8002066:	791b      	ldrb	r3, [r3, #4]
 8002068:	b25b      	sxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d033      	beq.n	80020d6 <goDuck1USD+0x1d6>
 800206e:	4b25      	ldr	r3, [pc, #148]	; (8002104 <goDuck1USD+0x204>)
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	b25b      	sxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d12e      	bne.n	80020d6 <goDuck1USD+0x1d6>
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800207e:	2b1e      	cmp	r3, #30
 8002080:	d129      	bne.n	80020d6 <goDuck1USD+0x1d6>
	playerInSpaceUSDR(1,x+*rl,y+*ud);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	18d1      	adds	r1, r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4413      	add	r3, r2
 8002092:	461a      	mov	r2, r3
 8002094:	2001      	movs	r0, #1
 8002096:	f7ff fc7b 	bl	8001990 <playerInSpaceUSDR>
	playerDelete(1,x+*rl,y+*ud);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	18d1      	adds	r1, r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4413      	add	r3, r2
 80020aa:	461a      	mov	r2, r3
 80020ac:	2001      	movs	r0, #1
 80020ae:	f000 f845 	bl	800213c <playerDelete>
	(*ud)-=4;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1f1a      	subs	r2, r3, #4
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	601a      	str	r2, [r3, #0]
	playerInShipR(1,x+1+*rl,y+*ud);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	18d1      	adds	r1, r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4413      	add	r3, r2
 80020ce:	461a      	mov	r2, r3
 80020d0:	2001      	movs	r0, #1
 80020d2:	f7ff f937 	bl	8001344 <playerInShipR>
	}
	D->ud = *ud;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	b25a      	sxtb	r2, r3
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	701a      	strb	r2, [r3, #0]
	D->rl = x+1+*rl-23;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	3b16      	subs	r3, #22
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	b25a      	sxtb	r2, r3
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	705a      	strb	r2, [r3, #1]
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	200000d0 	.word	0x200000d0
 8002104:	200000d8 	.word	0x200000d8

08002108 <fat>:

void fat(int state) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	if (state) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <fat+0x1c>
		printf("%c[%d%c", ESC, 01, 'm');
 8002116:	236d      	movs	r3, #109	; 0x6d
 8002118:	2201      	movs	r2, #1
 800211a:	211b      	movs	r1, #27
 800211c:	4806      	ldr	r0, [pc, #24]	; (8002138 <fat+0x30>)
 800211e:	f000 feb3 	bl	8002e88 <iprintf>
	} else {
		printf("%c[%d%c", ESC, 22, 'm');
	}
}
 8002122:	e005      	b.n	8002130 <fat+0x28>
		printf("%c[%d%c", ESC, 22, 'm');
 8002124:	236d      	movs	r3, #109	; 0x6d
 8002126:	2216      	movs	r2, #22
 8002128:	211b      	movs	r1, #27
 800212a:	4803      	ldr	r0, [pc, #12]	; (8002138 <fat+0x30>)
 800212c:	f000 feac 	bl	8002e88 <iprintf>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	08003fb4 	.word	0x08003fb4

0800213c <playerDelete>:


void playerDelete(int p,int x, int y){
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]

	gotoxy(x,y);
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	68b8      	ldr	r0, [r7, #8]
 800214c:	f000 fbc6 	bl	80028dc <gotoxy>
	for (int i = 0; i < 5; i++){
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	e005      	b.n	8002162 <playerDelete+0x26>
		printf("%c",32);
 8002156:	2020      	movs	r0, #32
 8002158:	f000 feae 	bl	8002eb8 <putchar>
	for (int i = 0; i < 5; i++){
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	3301      	adds	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	2b04      	cmp	r3, #4
 8002166:	ddf6      	ble.n	8002156 <playerDelete+0x1a>
	}
	gotoxy(x,y+1);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3301      	adds	r3, #1
 800216c:	4619      	mov	r1, r3
 800216e:	68b8      	ldr	r0, [r7, #8]
 8002170:	f000 fbb4 	bl	80028dc <gotoxy>
	for (int i = 0; i < 5; i++){
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	e005      	b.n	8002186 <playerDelete+0x4a>
		printf("%c",32);
 800217a:	2020      	movs	r0, #32
 800217c:	f000 fe9c 	bl	8002eb8 <putchar>
	for (int i = 0; i < 5; i++){
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	3301      	adds	r3, #1
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b04      	cmp	r3, #4
 800218a:	ddf6      	ble.n	800217a <playerDelete+0x3e>
	}
	gotoxy(x,y+2);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3302      	adds	r3, #2
 8002190:	4619      	mov	r1, r3
 8002192:	68b8      	ldr	r0, [r7, #8]
 8002194:	f000 fba2 	bl	80028dc <gotoxy>
	for (int i = 0; i < 5; i++){
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e005      	b.n	80021aa <playerDelete+0x6e>
		printf("%c",32);
 800219e:	2020      	movs	r0, #32
 80021a0:	f000 fe8a 	bl	8002eb8 <putchar>
	for (int i = 0; i < 5; i++){
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3301      	adds	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	ddf6      	ble.n	800219e <playerDelete+0x62>
	}
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <canonFire>:

void canonFire(int SS){
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
	fat(1);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f7ff ffa0 	bl	8002108 <fat>
	for(int i = 0; i<88 ;i++){
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	e02c      	b.n	8002228 <canonFire+0x6e>
		bgcolor(2);
 80021ce:	2002      	movs	r0, #2
 80021d0:	f000 fb5a 	bl	8002888 <bgcolor>
	gotoxy(92+i,29+SS);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	331d      	adds	r3, #29
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f000 fb7b 	bl	80028dc <gotoxy>
	printf("%c",205);
 80021e6:	20cd      	movs	r0, #205	; 0xcd
 80021e8:	f000 fe66 	bl	8002eb8 <putchar>
	printf("%c",205);
 80021ec:	20cd      	movs	r0, #205	; 0xcd
 80021ee:	f000 fe63 	bl	8002eb8 <putchar>
	printf("%c",205);
 80021f2:	20cd      	movs	r0, #205	; 0xcd
 80021f4:	f000 fe60 	bl	8002eb8 <putchar>
	printf("%c",205);
 80021f8:	20cd      	movs	r0, #205	; 0xcd
 80021fa:	f000 fe5d 	bl	8002eb8 <putchar>
	printf("%c",205);
 80021fe:	20cd      	movs	r0, #205	; 0xcd
 8002200:	f000 fe5a 	bl	8002eb8 <putchar>
	bgcolor(0);
 8002204:	2000      	movs	r0, #0
 8002206:	f000 fb3f 	bl	8002888 <bgcolor>
	gotoxy(92+i-1,29+SS);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	331d      	adds	r3, #29
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f000 fb60 	bl	80028dc <gotoxy>
	printf("%c",32);
 800221c:	2020      	movs	r0, #32
 800221e:	f000 fe4b 	bl	8002eb8 <putchar>
	for(int i = 0; i<88 ;i++){
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3301      	adds	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b57      	cmp	r3, #87	; 0x57
 800222c:	ddcf      	ble.n	80021ce <canonFire+0x14>
}
	gotoxy(178,29+SS);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	331d      	adds	r3, #29
 8002232:	4619      	mov	r1, r3
 8002234:	20b2      	movs	r0, #178	; 0xb2
 8002236:	f000 fb51 	bl	80028dc <gotoxy>
	fgcolor(10);
 800223a:	200a      	movs	r0, #10
 800223c:	f000 fb08 	bl	8002850 <fgcolor>
	fat(0);
 8002240:	2000      	movs	r0, #0
 8002242:	f7ff ff61 	bl	8002108 <fat>
	for(int i = 0; i<6; i++){
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	e005      	b.n	8002258 <canonFire+0x9e>
	printf("%c",32);
 800224c:	2020      	movs	r0, #32
 800224e:	f000 fe33 	bl	8002eb8 <putchar>
	for(int i = 0; i<6; i++){
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3301      	adds	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b05      	cmp	r3, #5
 800225c:	ddf6      	ble.n	800224c <canonFire+0x92>
	}
}
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <duckExplotion>:
	blink(0);
	bgcolor(0);
	fgcolor(0);
	}

void duckExplotion(int x, int y, int *ud, int *rl){
 8002268:	b580      	push	{r7, lr}
 800226a:	b096      	sub	sp, #88	; 0x58
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]

//1
	fgcolor(15);
 8002276:	200f      	movs	r0, #15
 8002278:	f000 faea 	bl	8002850 <fgcolor>
	gotoxy(x+2+*rl,y+1+*ud);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1c9a      	adds	r2, r3, #2
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	18d0      	adds	r0, r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4413      	add	r3, r2
 8002290:	4619      	mov	r1, r3
 8002292:	f000 fb23 	bl	80028dc <gotoxy>
		printf("%c",219);
 8002296:	20db      	movs	r0, #219	; 0xdb
 8002298:	f000 fe0e 	bl	8002eb8 <putchar>
//2

	fgcolor(11);
 800229c:	200b      	movs	r0, #11
 800229e:	f000 fad7 	bl	8002850 <fgcolor>
	gotoxy(x+1+*rl,y+*ud);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	18d0      	adds	r0, r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4413      	add	r3, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	f000 fb11 	bl	80028dc <gotoxy>
	for (int i = 0; i < 3; i++){
 80022ba:	2300      	movs	r3, #0
 80022bc:	657b      	str	r3, [r7, #84]	; 0x54
 80022be:	e005      	b.n	80022cc <duckExplotion+0x64>
		printf("%c",219);
 80022c0:	20db      	movs	r0, #219	; 0xdb
 80022c2:	f000 fdf9 	bl	8002eb8 <putchar>
	for (int i = 0; i < 3; i++){
 80022c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c8:	3301      	adds	r3, #1
 80022ca:	657b      	str	r3, [r7, #84]	; 0x54
 80022cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	ddf6      	ble.n	80022c0 <duckExplotion+0x58>
	}
	gotoxy(x+1+*rl,y+1+*ud);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	18d0      	adds	r0, r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f000 faf8 	bl	80028dc <gotoxy>
	for (int i = 0; i < 3; i++){
 80022ec:	2300      	movs	r3, #0
 80022ee:	653b      	str	r3, [r7, #80]	; 0x50
 80022f0:	e005      	b.n	80022fe <duckExplotion+0x96>
		printf("%c",219);
 80022f2:	20db      	movs	r0, #219	; 0xdb
 80022f4:	f000 fde0 	bl	8002eb8 <putchar>
	for (int i = 0; i < 3; i++){
 80022f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fa:	3301      	adds	r3, #1
 80022fc:	653b      	str	r3, [r7, #80]	; 0x50
 80022fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002300:	2b02      	cmp	r3, #2
 8002302:	ddf6      	ble.n	80022f2 <duckExplotion+0x8a>
	}
	gotoxy(x+1+*rl,y+2+*ud);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	18d0      	adds	r0, r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1c9a      	adds	r2, r3, #2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f000 fadf 	bl	80028dc <gotoxy>
	for (int i = 0; i < 3; i++){
 800231e:	2300      	movs	r3, #0
 8002320:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002322:	e005      	b.n	8002330 <duckExplotion+0xc8>
		printf("%c",219);
 8002324:	20db      	movs	r0, #219	; 0xdb
 8002326:	f000 fdc7 	bl	8002eb8 <putchar>
	for (int i = 0; i < 3; i++){
 800232a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800232c:	3301      	adds	r3, #1
 800232e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002332:	2b02      	cmp	r3, #2
 8002334:	ddf6      	ble.n	8002324 <duckExplotion+0xbc>
	}



//3
	fgcolor(9);
 8002336:	2009      	movs	r0, #9
 8002338:	f000 fa8a 	bl	8002850 <fgcolor>
	gotoxy(x+1+*rl,y-1+*ud);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	18d0      	adds	r0, r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f000 fac3 	bl	80028dc <gotoxy>
	for (int i = 0; i < 3; i++){
 8002356:	2300      	movs	r3, #0
 8002358:	64bb      	str	r3, [r7, #72]	; 0x48
 800235a:	e005      	b.n	8002368 <duckExplotion+0x100>
	printf("%c",219);
 800235c:	20db      	movs	r0, #219	; 0xdb
 800235e:	f000 fdab 	bl	8002eb8 <putchar>
	for (int i = 0; i < 3; i++){
 8002362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002364:	3301      	adds	r3, #1
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
 8002368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236a:	2b02      	cmp	r3, #2
 800236c:	ddf6      	ble.n	800235c <duckExplotion+0xf4>
	}
	gotoxy(x+*rl,y+*ud);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	18d0      	adds	r0, r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4413      	add	r3, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f000 faac 	bl	80028dc <gotoxy>
	for (int i = 0; i < 5; i++){
 8002384:	2300      	movs	r3, #0
 8002386:	647b      	str	r3, [r7, #68]	; 0x44
 8002388:	e005      	b.n	8002396 <duckExplotion+0x12e>
		printf("%c",219);
 800238a:	20db      	movs	r0, #219	; 0xdb
 800238c:	f000 fd94 	bl	8002eb8 <putchar>
	for (int i = 0; i < 5; i++){
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	3301      	adds	r3, #1
 8002394:	647b      	str	r3, [r7, #68]	; 0x44
 8002396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002398:	2b04      	cmp	r3, #4
 800239a:	ddf6      	ble.n	800238a <duckExplotion+0x122>
	}
	gotoxy(x+*rl,y+1+*ud);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	18d0      	adds	r0, r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f000 fa94 	bl	80028dc <gotoxy>
	for (int i = 0; i < 5; i++){
 80023b4:	2300      	movs	r3, #0
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
 80023b8:	e005      	b.n	80023c6 <duckExplotion+0x15e>
		printf("%c",219);
 80023ba:	20db      	movs	r0, #219	; 0xdb
 80023bc:	f000 fd7c 	bl	8002eb8 <putchar>
	for (int i = 0; i < 5; i++){
 80023c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c2:	3301      	adds	r3, #1
 80023c4:	643b      	str	r3, [r7, #64]	; 0x40
 80023c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	ddf6      	ble.n	80023ba <duckExplotion+0x152>
	}
	gotoxy(x+*rl,y+2+*ud);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	18d0      	adds	r0, r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1c9a      	adds	r2, r3, #2
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f000 fa7c 	bl	80028dc <gotoxy>
	for (int i = 0; i < 5; i++){
 80023e4:	2300      	movs	r3, #0
 80023e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e8:	e005      	b.n	80023f6 <duckExplotion+0x18e>
		printf("%c",219);
 80023ea:	20db      	movs	r0, #219	; 0xdb
 80023ec:	f000 fd64 	bl	8002eb8 <putchar>
	for (int i = 0; i < 5; i++){
 80023f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f2:	3301      	adds	r3, #1
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	ddf6      	ble.n	80023ea <duckExplotion+0x182>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	18d0      	adds	r0, r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1cda      	adds	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4619      	mov	r1, r3
 8002412:	f000 fa63 	bl	80028dc <gotoxy>
	for (int i = 0; i < 3; i++){
 8002416:	2300      	movs	r3, #0
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
 800241a:	e005      	b.n	8002428 <duckExplotion+0x1c0>
	printf("%c",219);
 800241c:	20db      	movs	r0, #219	; 0xdb
 800241e:	f000 fd4b 	bl	8002eb8 <putchar>
	for (int i = 0; i < 3; i++){
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	3301      	adds	r3, #1
 8002426:	63bb      	str	r3, [r7, #56]	; 0x38
 8002428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242a:	2b02      	cmp	r3, #2
 800242c:	ddf6      	ble.n	800241c <duckExplotion+0x1b4>
	}


//4
	fgcolor(1);
 800242e:	2001      	movs	r0, #1
 8002430:	f000 fa0e 	bl	8002850 <fgcolor>
	gotoxy(x+1+*rl,y-1+*ud);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	18d0      	adds	r0, r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1e5a      	subs	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f000 fa47 	bl	80028dc <gotoxy>
	for (int i = 0; i < 3; i++){
 800244e:	2300      	movs	r3, #0
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
 8002452:	e005      	b.n	8002460 <duckExplotion+0x1f8>
	printf("%c",219);
 8002454:	20db      	movs	r0, #219	; 0xdb
 8002456:	f000 fd2f 	bl	8002eb8 <putchar>
	for (int i = 0; i < 3; i++){
 800245a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245c:	3301      	adds	r3, #1
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
 8002460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002462:	2b02      	cmp	r3, #2
 8002464:	ddf6      	ble.n	8002454 <duckExplotion+0x1ec>
	}
	gotoxy(x+*rl,y+*ud);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	18d0      	adds	r0, r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4413      	add	r3, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f000 fa30 	bl	80028dc <gotoxy>
	for (int i = 0; i < 5; i++){
 800247c:	2300      	movs	r3, #0
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
 8002480:	e005      	b.n	800248e <duckExplotion+0x226>
	printf("%c",219);
 8002482:	20db      	movs	r0, #219	; 0xdb
 8002484:	f000 fd18 	bl	8002eb8 <putchar>
	for (int i = 0; i < 5; i++){
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	3301      	adds	r3, #1
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	2b04      	cmp	r3, #4
 8002492:	ddf6      	ble.n	8002482 <duckExplotion+0x21a>
	}
	gotoxy(x-1+*rl,y+1+*ud);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	18d0      	adds	r0, r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f000 fa17 	bl	80028dc <gotoxy>
	for (int i = 0; i < 7; i++){
 80024ae:	2300      	movs	r3, #0
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b2:	e005      	b.n	80024c0 <duckExplotion+0x258>
	printf("%c",219);
 80024b4:	20db      	movs	r0, #219	; 0xdb
 80024b6:	f000 fcff 	bl	8002eb8 <putchar>
	for (int i = 0; i < 7; i++){
 80024ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024bc:	3301      	adds	r3, #1
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	ddf6      	ble.n	80024b4 <duckExplotion+0x24c>
	}
	gotoxy(x+*rl,y+2+*ud);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	18d0      	adds	r0, r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1c9a      	adds	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	f000 f9ff 	bl	80028dc <gotoxy>
	for (int i = 0; i < 5; i++){
 80024de:	2300      	movs	r3, #0
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e2:	e005      	b.n	80024f0 <duckExplotion+0x288>
	printf("%c",219);
 80024e4:	20db      	movs	r0, #219	; 0xdb
 80024e6:	f000 fce7 	bl	8002eb8 <putchar>
	for (int i = 0; i < 5; i++){
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	3301      	adds	r3, #1
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	ddf6      	ble.n	80024e4 <duckExplotion+0x27c>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	18d0      	adds	r0, r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	1cda      	adds	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4413      	add	r3, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f000 f9e6 	bl	80028dc <gotoxy>
	for (int i = 0; i < 3; i++){
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	e005      	b.n	8002522 <duckExplotion+0x2ba>
	printf("%c",219);
 8002516:	20db      	movs	r0, #219	; 0xdb
 8002518:	f000 fcce 	bl	8002eb8 <putchar>
	for (int i = 0; i < 3; i++){
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	3301      	adds	r3, #1
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	2b02      	cmp	r3, #2
 8002526:	ddf6      	ble.n	8002516 <duckExplotion+0x2ae>
	}



//DELETE
	gotoxy(x+1+*rl,y-1+*ud);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	18d0      	adds	r0, r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1e5a      	subs	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f000 f9cd 	bl	80028dc <gotoxy>
	for (int i = 0; i < 3; i++){
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	e005      	b.n	8002554 <duckExplotion+0x2ec>
	printf("%c",32);
 8002548:	2020      	movs	r0, #32
 800254a:	f000 fcb5 	bl	8002eb8 <putchar>
	for (int i = 0; i < 3; i++){
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	3301      	adds	r3, #1
 8002552:	623b      	str	r3, [r7, #32]
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	2b02      	cmp	r3, #2
 8002558:	ddf6      	ble.n	8002548 <duckExplotion+0x2e0>
	}
	gotoxy(x+*rl,y+*ud);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	18d0      	adds	r0, r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4413      	add	r3, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f000 f9b6 	bl	80028dc <gotoxy>
	for (int i = 0; i < 5; i++){
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	e005      	b.n	8002582 <duckExplotion+0x31a>
	printf("%c",32);
 8002576:	2020      	movs	r0, #32
 8002578:	f000 fc9e 	bl	8002eb8 <putchar>
	for (int i = 0; i < 5; i++){
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	3301      	adds	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	2b04      	cmp	r3, #4
 8002586:	ddf6      	ble.n	8002576 <duckExplotion+0x30e>
	}
	gotoxy(x-1+*rl,y+1+*ud);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e5a      	subs	r2, r3, #1
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	18d0      	adds	r0, r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4619      	mov	r1, r3
 800259e:	f000 f99d 	bl	80028dc <gotoxy>
	for (int i = 0; i < 7; i++){
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	e005      	b.n	80025b4 <duckExplotion+0x34c>
	printf("%c",32);
 80025a8:	2020      	movs	r0, #32
 80025aa:	f000 fc85 	bl	8002eb8 <putchar>
	for (int i = 0; i < 7; i++){
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	ddf6      	ble.n	80025a8 <duckExplotion+0x340>
	}
	gotoxy(x+*rl,y+2+*ud);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	18d0      	adds	r0, r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1c9a      	adds	r2, r3, #2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f000 f985 	bl	80028dc <gotoxy>
	for (int i = 0; i < 5; i++){
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e005      	b.n	80025e4 <duckExplotion+0x37c>
	printf("%c",32);
 80025d8:	2020      	movs	r0, #32
 80025da:	f000 fc6d 	bl	8002eb8 <putchar>
	for (int i = 0; i < 5; i++){
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3301      	adds	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	ddf6      	ble.n	80025d8 <duckExplotion+0x370>
	}
	gotoxy(x+1+*rl,y+3+*ud);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	18d0      	adds	r0, r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	1cda      	adds	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	f000 f96c 	bl	80028dc <gotoxy>
	for (int i = 0; i < 3; i++){
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e005      	b.n	8002616 <duckExplotion+0x3ae>
	printf("%c",32);
 800260a:	2020      	movs	r0, #32
 800260c:	f000 fc54 	bl	8002eb8 <putchar>
	for (int i = 0; i < 3; i++){
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	3301      	adds	r3, #1
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b02      	cmp	r3, #2
 800261a:	ddf6      	ble.n	800260a <duckExplotion+0x3a2>
	}
	fgcolor(0);
 800261c:	2000      	movs	r0, #0
 800261e:	f000 f917 	bl	8002850 <fgcolor>
	}
 8002622:	bf00      	nop
 8002624:	3758      	adds	r7, #88	; 0x58
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <intiJoystick>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi_S.h"
#include "joystick.h"

void intiJoystick(){
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <intiJoystick+0x120>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	4a45      	ldr	r2, [pc, #276]	; (800274c <intiJoystick+0x120>)
 8002636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <intiJoystick+0x120>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4a42      	ldr	r2, [pc, #264]	; (800274c <intiJoystick+0x120>)
 8002642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002646:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 8002648:	4b40      	ldr	r3, [pc, #256]	; (800274c <intiJoystick+0x120>)
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	4a3f      	ldr	r2, [pc, #252]	; (800274c <intiJoystick+0x120>)
 800264e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002652:	6153      	str	r3, [r2, #20]

	// Set pin PC0 to input
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8002654:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <intiJoystick+0x124>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a3d      	ldr	r2, [pc, #244]	; (8002750 <intiJoystick+0x124>)
 800265a:	f023 0303 	bic.w	r3, r3, #3
 800265e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (0 * 2));	// Set mode register
 8002660:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <intiJoystick+0x124>)
 8002662:	4a3b      	ldr	r2, [pc, #236]	; (8002750 <intiJoystick+0x124>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002668:	4b39      	ldr	r3, [pc, #228]	; (8002750 <intiJoystick+0x124>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a38      	ldr	r2, [pc, #224]	; (8002750 <intiJoystick+0x124>)
 800266e:	f023 0303 	bic.w	r3, r3, #3
 8002672:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (0 * 2));// Set push/pull register
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <intiJoystick+0x124>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a35      	ldr	r2, [pc, #212]	; (8002750 <intiJoystick+0x124>)
 800267a:	f043 0302 	orr.w	r3, r3, #2
 800267e:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PA4 to input
	GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8002680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800268a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x00000000 << (4 * 2)); // Set mode register
 8002690:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002694:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOA->PUPDR &= ~(0x00000003 << (4 * 2)); // Clear push/pull register
 800269c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80026a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026aa:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x00000002 << (4 * 2)); // Set push/pull register
 80026ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80026b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ba:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB5 to input
	GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <intiJoystick+0x128>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a24      	ldr	r2, [pc, #144]	; (8002754 <intiJoystick+0x128>)
 80026c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026c6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (5 * 2)); // Set mode register
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <intiJoystick+0x128>)
 80026ca:	4a22      	ldr	r2, [pc, #136]	; (8002754 <intiJoystick+0x128>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIOB->PUPDR &= ~(0x00000003 << (5 * 2)); // Clear push/pull register
 80026d0:	4b20      	ldr	r3, [pc, #128]	; (8002754 <intiJoystick+0x128>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <intiJoystick+0x128>)
 80026d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026da:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (5 * 2)); // Set push/pull register
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <intiJoystick+0x128>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <intiJoystick+0x128>)
 80026e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026e6:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PC1 to input
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <intiJoystick+0x124>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a18      	ldr	r2, [pc, #96]	; (8002750 <intiJoystick+0x124>)
 80026ee:	f023 030c 	bic.w	r3, r3, #12
 80026f2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (1 * 2)); // Set mode register
 80026f4:	4b16      	ldr	r3, [pc, #88]	; (8002750 <intiJoystick+0x124>)
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <intiJoystick+0x124>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); // Clear push/pull register
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <intiJoystick+0x124>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a13      	ldr	r2, [pc, #76]	; (8002750 <intiJoystick+0x124>)
 8002702:	f023 030c 	bic.w	r3, r3, #12
 8002706:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (1 * 2)); // Set push/pull register
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <intiJoystick+0x124>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a10      	ldr	r2, [pc, #64]	; (8002750 <intiJoystick+0x124>)
 800270e:	f043 0308 	orr.w	r3, r3, #8
 8002712:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB0 to input
	GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <intiJoystick+0x128>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <intiJoystick+0x128>)
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (0 * 2)); // Set mode register
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <intiJoystick+0x128>)
 8002722:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <intiJoystick+0x128>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <intiJoystick+0x128>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a09      	ldr	r2, [pc, #36]	; (8002754 <intiJoystick+0x128>)
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (0 * 2)); // Set push/pull register
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <intiJoystick+0x128>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a06      	ldr	r2, [pc, #24]	; (8002754 <intiJoystick+0x128>)
 800273a:	f043 0302 	orr.w	r3, r3, #2
 800273e:	60d3      	str	r3, [r2, #12]
	// 0x00 - No pull
	// 0x01 - Pull-up
	// 0x02 - Pull-down

}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	48000800 	.word	0x48000800
 8002754:	48000400 	.word	0x48000400

08002758 <readJoystick>:


int16_t readJoystick(){
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
	int32_t a = GPIOC->IDR & (0x0001 << 0); //Read from pin PCx - right
 800275e:	4b27      	ldr	r3, [pc, #156]	; (80027fc <readJoystick+0xa4>)
 8002760:	8a1b      	ldrh	r3, [r3, #16]
 8002762:	b29b      	uxth	r3, r3
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	607b      	str	r3, [r7, #4]
	int32_t b = GPIOA->IDR & (0x0001 << 4); //Read from pin PCx - up
 800276a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800276e:	8a1b      	ldrh	r3, [r3, #16]
 8002770:	b29b      	uxth	r3, r3
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	617b      	str	r3, [r7, #20]
	int32_t c = GPIOB->IDR & (0x0001 << 5); //Read from pin PCx - center
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <readJoystick+0xa8>)
 800277a:	8a1b      	ldrh	r3, [r3, #16]
 800277c:	b29b      	uxth	r3, r3
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	613b      	str	r3, [r7, #16]
	int32_t d = GPIOC->IDR & (0x0001 << 1); //Read from pin PCx - left
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <readJoystick+0xa4>)
 8002786:	8a1b      	ldrh	r3, [r3, #16]
 8002788:	b29b      	uxth	r3, r3
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	60fb      	str	r3, [r7, #12]
	int32_t e = GPIOB->IDR & (0x0001 << 0); //Read from pin PCx - down
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <readJoystick+0xa8>)
 8002792:	8a1b      	ldrh	r3, [r3, #16]
 8002794:	b29b      	uxth	r3, r3
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]

	if(b){b = 1;}
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <readJoystick+0x4e>
 80027a2:	2301      	movs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
	if(c){c = 1;}
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <readJoystick+0x58>
 80027ac:	2301      	movs	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
	if(d){d = 1;}
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <readJoystick+0x62>
 80027b6:	2301      	movs	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
	if(e){e = 1;}
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <readJoystick+0x6c>
 80027c0:	2301      	movs	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]

	joy.right 	= a;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	b25a      	sxtb	r2, r3
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <readJoystick+0xac>)
 80027ca:	70da      	strb	r2, [r3, #3]
	joy.up 		= b;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	b25a      	sxtb	r2, r3
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <readJoystick+0xac>)
 80027d2:	701a      	strb	r2, [r3, #0]
	joy.center	= c;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	b25a      	sxtb	r2, r3
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <readJoystick+0xac>)
 80027da:	711a      	strb	r2, [r3, #4]
	joy.left	= d;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	b25a      	sxtb	r2, r3
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <readJoystick+0xac>)
 80027e2:	709a      	strb	r2, [r3, #2]
	joy.down 	= e;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	b25a      	sxtb	r2, r3
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <readJoystick+0xac>)
 80027ea:	705a      	strb	r2, [r3, #1]
}
 80027ec:	bf00      	nop
 80027ee:	4618      	mov	r0, r3
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	48000800 	.word	0x48000800
 8002800:	48000400 	.word	0x48000400
 8002804:	200000d0 	.word	0x200000d0

08002808 <copyJoystick>:

void copyJoystick() {
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
	CJoy.up = joy.up;
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <copyJoystick+0x40>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b25a      	sxtb	r2, r3
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <copyJoystick+0x44>)
 8002814:	701a      	strb	r2, [r3, #0]
	CJoy.down = joy.down;
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <copyJoystick+0x40>)
 8002818:	785b      	ldrb	r3, [r3, #1]
 800281a:	b25a      	sxtb	r2, r3
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <copyJoystick+0x44>)
 800281e:	705a      	strb	r2, [r3, #1]
	CJoy.left = joy.left;
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <copyJoystick+0x40>)
 8002822:	789b      	ldrb	r3, [r3, #2]
 8002824:	b25a      	sxtb	r2, r3
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <copyJoystick+0x44>)
 8002828:	709a      	strb	r2, [r3, #2]
	CJoy.right = joy.right;
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <copyJoystick+0x40>)
 800282c:	78db      	ldrb	r3, [r3, #3]
 800282e:	b25a      	sxtb	r2, r3
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <copyJoystick+0x44>)
 8002832:	70da      	strb	r2, [r3, #3]
	CJoy.center = joy.center;
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <copyJoystick+0x40>)
 8002836:	791b      	ldrb	r3, [r3, #4]
 8002838:	b25a      	sxtb	r2, r3
 800283a:	4b04      	ldr	r3, [pc, #16]	; (800284c <copyJoystick+0x44>)
 800283c:	711a      	strb	r2, [r3, #4]
}
 800283e:	bf00      	nop
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	200000d0 	.word	0x200000d0
 800284c:	200000d8 	.word	0x200000d8

08002850 <fgcolor>:
#include "ansi_S.h"

void fgcolor(uint8_t foreground) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
	 4        Blue            12       Light Blue
	 5        Purple          13       Light Purple
	 6        Cyan            14       Light Cyan
	 7        Light Gray      15       White
	 */
	uint8_t type = 22;             // normal text
 800285a:	2316      	movs	r3, #22
 800285c:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	2b07      	cmp	r3, #7
 8002862:	d904      	bls.n	800286e <fgcolor+0x1e>
		type = 1;                // bold text
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	3b08      	subs	r3, #8
 800286c:	71fb      	strb	r3, [r7, #7]
	}
	printf("%c[%d;%dm", ESC, type, foreground + 30);
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	331e      	adds	r3, #30
 8002874:	211b      	movs	r1, #27
 8002876:	4803      	ldr	r0, [pc, #12]	; (8002884 <fgcolor+0x34>)
 8002878:	f000 fb06 	bl	8002e88 <iprintf>
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	08003fbc 	.word	0x08003fbc

08002888 <bgcolor>:

void bgcolor(uint8_t background) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
	 4        Blue
	 5        Purple
	 6        Cyan
	 7        Gray
	 */
	printf("%c[%dm", ESC, background + 40);
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	3328      	adds	r3, #40	; 0x28
 8002896:	461a      	mov	r2, r3
 8002898:	211b      	movs	r1, #27
 800289a:	4803      	ldr	r0, [pc, #12]	; (80028a8 <bgcolor+0x20>)
 800289c:	f000 faf4 	bl	8002e88 <iprintf>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	08003fc8 	.word	0x08003fc8

080028ac <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
}

void clrscr() {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 80028b0:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <clrscr+0x24>)
 80028b2:	211b      	movs	r1, #27
 80028b4:	4807      	ldr	r0, [pc, #28]	; (80028d4 <clrscr+0x28>)
 80028b6:	f000 fae7 	bl	8002e88 <iprintf>
	printf("%c[%s", ESC, "3J");
 80028ba:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <clrscr+0x2c>)
 80028bc:	211b      	movs	r1, #27
 80028be:	4805      	ldr	r0, [pc, #20]	; (80028d4 <clrscr+0x28>)
 80028c0:	f000 fae2 	bl	8002e88 <iprintf>
	gotoxy(1,1);
 80028c4:	2101      	movs	r1, #1
 80028c6:	2001      	movs	r0, #1
 80028c8:	f000 f808 	bl	80028dc <gotoxy>
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	08003fe8 	.word	0x08003fe8
 80028d4:	08003fec 	.word	0x08003fec
 80028d8:	08003ff4 	.word	0x08003ff4

080028dc <gotoxy>:

void clreol() {
	printf("%c[%s", ESC, "2k");
}

void gotoxy(int c, int r) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", ESC, r, c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	211b      	movs	r1, #27
 80028ec:	4803      	ldr	r0, [pc, #12]	; (80028fc <gotoxy+0x20>)
 80028ee:	f000 facb 	bl	8002e88 <iprintf>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	08003ffc 	.word	0x08003ffc

08002900 <main>:
#include "joystick.h"
//#include "timer.h"


int main(void)
{
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af02      	add	r7, sp, #8
	uart_init(250000);
 8002906:	48a3      	ldr	r0, [pc, #652]	; (8002b94 <main+0x294>)
 8002908:	f7fd ff8e 	bl	8000828 <uart_init>
	clrscr();
 800290c:	f7ff ffce 	bl	80028ac <clrscr>
	intiJoystick();
 8002910:	f7ff fe8c 	bl	800262c <intiJoystick>
	startWindow(1,1,184,58);
 8002914:	233a      	movs	r3, #58	; 0x3a
 8002916:	22b8      	movs	r2, #184	; 0xb8
 8002918:	2101      	movs	r1, #1
 800291a:	2001      	movs	r0, #1
 800291c:	f7fe f89e 	bl	8000a5c <startWindow>
//	initLed();
//	initTimer();
//	refreshRate = 5;
	duck_t duck1;
	spaceship_t SS;
	spaceship(2,27,91,31);
 8002920:	231f      	movs	r3, #31
 8002922:	225b      	movs	r2, #91	; 0x5b
 8002924:	211b      	movs	r1, #27
 8002926:	2002      	movs	r0, #2
 8002928:	f7fe f8ee 	bl	8000b08 <spaceship>
	playerInSpaceR(1,23,24);
 800292c:	2218      	movs	r2, #24
 800292e:	2117      	movs	r1, #23
 8002930:	2001      	movs	r0, #1
 8002932:	f7fe fe2b 	bl	800158c <playerInSpaceR>
	SS.ud = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	723b      	strb	r3, [r7, #8]
	int ud =0, lr =0, a = 0, b=0;
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	2300      	movs	r3, #0
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
	while(1){

		readJoystick();
 800294a:	f7ff ff05 	bl	8002758 <readJoystick>
		gotoxy(10,9);
 800294e:	2109      	movs	r1, #9
 8002950:	200a      	movs	r0, #10
 8002952:	f7ff ffc3 	bl	80028dc <gotoxy>
		printf("%d%d%d%d%d",joy.left,joy.right,joy.up,joy.down,joy.center);
 8002956:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <main+0x298>)
 8002958:	789b      	ldrb	r3, [r3, #2]
 800295a:	b25b      	sxtb	r3, r3
 800295c:	4619      	mov	r1, r3
 800295e:	4b8e      	ldr	r3, [pc, #568]	; (8002b98 <main+0x298>)
 8002960:	78db      	ldrb	r3, [r3, #3]
 8002962:	b25b      	sxtb	r3, r3
 8002964:	4618      	mov	r0, r3
 8002966:	4b8c      	ldr	r3, [pc, #560]	; (8002b98 <main+0x298>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	b25b      	sxtb	r3, r3
 800296c:	461c      	mov	r4, r3
 800296e:	4b8a      	ldr	r3, [pc, #552]	; (8002b98 <main+0x298>)
 8002970:	785b      	ldrb	r3, [r3, #1]
 8002972:	b25b      	sxtb	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	4b88      	ldr	r3, [pc, #544]	; (8002b98 <main+0x298>)
 8002978:	791b      	ldrb	r3, [r3, #4]
 800297a:	b25b      	sxtb	r3, r3
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	9200      	str	r2, [sp, #0]
 8002980:	4623      	mov	r3, r4
 8002982:	4602      	mov	r2, r0
 8002984:	4885      	ldr	r0, [pc, #532]	; (8002b9c <main+0x29c>)
 8002986:	f000 fa7f 	bl	8002e88 <iprintf>

		gotoxy(10,10);
 800298a:	210a      	movs	r1, #10
 800298c:	200a      	movs	r0, #10
 800298e:	f7ff ffa5 	bl	80028dc <gotoxy>
		printf("Duck rl = %d",joy.left);
 8002992:	4b81      	ldr	r3, [pc, #516]	; (8002b98 <main+0x298>)
 8002994:	789b      	ldrb	r3, [r3, #2]
 8002996:	b25b      	sxtb	r3, r3
 8002998:	4619      	mov	r1, r3
 800299a:	4881      	ldr	r0, [pc, #516]	; (8002ba0 <main+0x2a0>)
 800299c:	f000 fa74 	bl	8002e88 <iprintf>
		gotoxy(10,11);
 80029a0:	210b      	movs	r1, #11
 80029a2:	200a      	movs	r0, #10
 80029a4:	f7ff ff9a 	bl	80028dc <gotoxy>
		printf("U/D = %d",joy.right);
 80029a8:	4b7b      	ldr	r3, [pc, #492]	; (8002b98 <main+0x298>)
 80029aa:	78db      	ldrb	r3, [r3, #3]
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	4619      	mov	r1, r3
 80029b0:	487c      	ldr	r0, [pc, #496]	; (8002ba4 <main+0x2a4>)
 80029b2:	f000 fa69 	bl	8002e88 <iprintf>
		fire(2,27+SS.ud,91,31+SS.ud);
 80029b6:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80029ba:	f103 011b 	add.w	r1, r3, #27
 80029be:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80029c2:	331f      	adds	r3, #31
 80029c4:	225b      	movs	r2, #91	; 0x5b
 80029c6:	2002      	movs	r0, #2
 80029c8:	f7fe fa7a 	bl	8000ec0 <fire>


		if(duck1.ud == SS.ud) {
 80029cc:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80029d0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d109      	bne.n	80029ec <main+0xec>
		goDuck1UP(22,24,&ud,&lr,&duck1);
 80029d8:	4639      	mov	r1, r7
 80029da:	1d3a      	adds	r2, r7, #4
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	460b      	mov	r3, r1
 80029e4:	2118      	movs	r1, #24
 80029e6:	2016      	movs	r0, #22
 80029e8:	f7ff f880 	bl	8001aec <goDuck1UP>
		}

		if(duck1.ud == SS.ud + 4 || duck1.ud == SS.ud - 4){
 80029ec:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80029f0:	461a      	mov	r2, r3
 80029f2:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80029f6:	3304      	adds	r3, #4
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d007      	beq.n	8002a0c <main+0x10c>
 80029fc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002a00:	461a      	mov	r2, r3
 8002a02:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002a06:	3b04      	subs	r3, #4
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d11c      	bne.n	8002a46 <main+0x146>
		goDuck1MID(22,24,&ud,&lr,&duck1);
 8002a0c:	4639      	mov	r1, r7
 8002a0e:	1d3a      	adds	r2, r7, #4
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	460b      	mov	r3, r1
 8002a18:	2118      	movs	r1, #24
 8002a1a:	2016      	movs	r0, #22
 8002a1c:	f7ff f96c 	bl	8001cf8 <goDuck1MID>
		if(duck1.rl == 55 && joy.right && !CJoy.right){
 8002a20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002a24:	2b37      	cmp	r3, #55	; 0x37
 8002a26:	d10e      	bne.n	8002a46 <main+0x146>
 8002a28:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <main+0x298>)
 8002a2a:	78db      	ldrb	r3, [r3, #3]
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <main+0x146>
 8002a32:	4b5d      	ldr	r3, [pc, #372]	; (8002ba8 <main+0x2a8>)
 8002a34:	78db      	ldrb	r3, [r3, #3]
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d104      	bne.n	8002a46 <main+0x146>
			canonFire(SS.ud);
 8002a3c:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fbba 	bl	80021ba <canonFire>
		}
		}

		if(duck1.ud == SS.ud+8) {
 8002a46:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002a50:	3308      	adds	r3, #8
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d109      	bne.n	8002a6a <main+0x16a>
		goDuck1USD(22,24,&ud,&lr,&duck1);
 8002a56:	4639      	mov	r1, r7
 8002a58:	1d3a      	adds	r2, r7, #4
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	460b      	mov	r3, r1
 8002a62:	2118      	movs	r1, #24
 8002a64:	2016      	movs	r0, #22
 8002a66:	f7ff fa4b 	bl	8001f00 <goDuck1USD>
		}

		if(duck1.rl == 5 && joy.up && !CJoy.up && SS.ud == duck1.ud+1){
 8002a6a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d135      	bne.n	8002ade <main+0x1de>
 8002a72:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <main+0x298>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b25b      	sxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d030      	beq.n	8002ade <main+0x1de>
 8002a7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <main+0x2a8>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d12b      	bne.n	8002ade <main+0x1de>
 8002a86:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002a90:	3301      	adds	r3, #1
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d123      	bne.n	8002ade <main+0x1de>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8002a96:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002a9a:	f103 011b 	add.w	r1, r3, #27
 8002a9e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002aa2:	331f      	adds	r3, #31
 8002aa4:	225b      	movs	r2, #91	; 0x5b
 8002aa6:	2002      	movs	r0, #2
 8002aa8:	f7fe f95c 	bl	8000d64 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8002aac:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002ab0:	f103 011b 	add.w	r1, r3, #27
 8002ab4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002ab8:	331f      	adds	r3, #31
 8002aba:	225b      	movs	r2, #91	; 0x5b
 8002abc:	2002      	movs	r0, #2
 8002abe:	f7fe fbdf 	bl	8001280 <fireDelete>
		SS.ud = duck1.ud;
 8002ac2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002ac6:	723b      	strb	r3, [r7, #8]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 8002ac8:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002acc:	f103 011b 	add.w	r1, r3, #27
 8002ad0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002ad4:	331f      	adds	r3, #31
 8002ad6:	225b      	movs	r2, #91	; 0x5b
 8002ad8:	2002      	movs	r0, #2
 8002ada:	f7fe f815 	bl	8000b08 <spaceship>
		}

		if(duck1.rl == 5 && joy.up && !CJoy.up && SS.ud == duck1.ud-9){
 8002ade:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d139      	bne.n	8002b5a <main+0x25a>
 8002ae6:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <main+0x298>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d034      	beq.n	8002b5a <main+0x25a>
 8002af0:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <main+0x2a8>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d12f      	bne.n	8002b5a <main+0x25a>
 8002afa:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002afe:	461a      	mov	r2, r3
 8002b00:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002b04:	3b09      	subs	r3, #9
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d127      	bne.n	8002b5a <main+0x25a>
		spaceshipDelete(2,27+SS.ud,91,31+SS.ud);
 8002b0a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002b0e:	f103 011b 	add.w	r1, r3, #27
 8002b12:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002b16:	331f      	adds	r3, #31
 8002b18:	225b      	movs	r2, #91	; 0x5b
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	f7fe f922 	bl	8000d64 <spaceshipDelete>
		fireDelete(2,27+SS.ud,91,31+SS.ud);
 8002b20:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002b24:	f103 011b 	add.w	r1, r3, #27
 8002b28:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002b2c:	331f      	adds	r3, #31
 8002b2e:	225b      	movs	r2, #91	; 0x5b
 8002b30:	2002      	movs	r0, #2
 8002b32:	f7fe fba5 	bl	8001280 <fireDelete>
		SS.ud = duck1.ud-8;
 8002b36:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3b08      	subs	r3, #8
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	723b      	strb	r3, [r7, #8]
		spaceship(2,27+SS.ud,91,31+SS.ud);
 8002b44:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002b48:	f103 011b 	add.w	r1, r3, #27
 8002b4c:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002b50:	331f      	adds	r3, #31
 8002b52:	225b      	movs	r2, #91	; 0x5b
 8002b54:	2002      	movs	r0, #2
 8002b56:	f7fd ffd7 	bl	8000b08 <spaceship>
		}

		if(duck1.ud == SS.ud-1 || duck1.ud == SS.ud+9 || duck1.rl == 65) {
 8002b5a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d00b      	beq.n	8002b82 <main+0x282>
 8002b6a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002b74:	3309      	adds	r3, #9
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d003      	beq.n	8002b82 <main+0x282>
 8002b7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002b7e:	2b41      	cmp	r3, #65	; 0x41
 8002b80:	d105      	bne.n	8002b8e <main+0x28e>
			duckExplotion(22,24,&ud,&lr);
 8002b82:	463b      	mov	r3, r7
 8002b84:	1d3a      	adds	r2, r7, #4
 8002b86:	2118      	movs	r1, #24
 8002b88:	2016      	movs	r0, #22
 8002b8a:	f7ff fb6d 	bl	8002268 <duckExplotion>
//				a = 0;
//			}
//			collision(a,b,SS.ud);


		copyJoystick();
 8002b8e:	f7ff fe3b 	bl	8002808 <copyJoystick>
	while(1){
 8002b92:	e6da      	b.n	800294a <main+0x4a>
 8002b94:	0003d090 	.word	0x0003d090
 8002b98:	200000d0 	.word	0x200000d0
 8002b9c:	08004010 	.word	0x08004010
 8002ba0:	0800401c 	.word	0x0800401c
 8002ba4:	0800402c 	.word	0x0800402c
 8002ba8:	200000d8 	.word	0x200000d8

08002bac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e00a      	b.n	8002bd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bbe:	f3af 8000 	nop.w
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	60ba      	str	r2, [r7, #8]
 8002bca:	b2ca      	uxtb	r2, r1
 8002bcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	dbf0      	blt.n	8002bbe <_read+0x12>
	}

return len;
 8002bdc:	687b      	ldr	r3, [r7, #4]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
	return -1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c0e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <_isatty>:

int _isatty(int file)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
	return 1;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <_sbrk+0x50>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <_sbrk+0x16>
		heap_end = &end;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <_sbrk+0x50>)
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <_sbrk+0x54>)
 8002c64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <_sbrk+0x50>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <_sbrk+0x50>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4413      	add	r3, r2
 8002c74:	466a      	mov	r2, sp
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d907      	bls.n	8002c8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c7a:	f000 f8d3 	bl	8002e24 <__errno>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	220c      	movs	r2, #12
 8002c82:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	e006      	b.n	8002c98 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <_sbrk+0x50>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <_sbrk+0x50>)
 8002c94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	200000b0 	.word	0x200000b0
 8002ca4:	200000f0 	.word	0x200000f0

08002ca8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <SystemInit+0x84>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <SystemInit+0x84>)
 8002cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002cbc:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <SystemInit+0x88>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <SystemInit+0x88>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <SystemInit+0x88>)
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	4918      	ldr	r1, [pc, #96]	; (8002d30 <SystemInit+0x88>)
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <SystemInit+0x8c>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002cd4:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <SystemInit+0x88>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <SystemInit+0x88>)
 8002cda:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <SystemInit+0x88>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <SystemInit+0x88>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <SystemInit+0x88>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <SystemInit+0x88>)
 8002cf6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002cfa:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <SystemInit+0x88>)
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <SystemInit+0x88>)
 8002d02:	f023 030f 	bic.w	r3, r3, #15
 8002d06:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <SystemInit+0x88>)
 8002d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0c:	4908      	ldr	r1, [pc, #32]	; (8002d30 <SystemInit+0x88>)
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <SystemInit+0x90>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <SystemInit+0x88>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002d1a:	f000 f80f 	bl	8002d3c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d1e:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <SystemInit+0x84>)
 8002d20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d24:	609a      	str	r2, [r3, #8]
#endif  
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	e000ed00 	.word	0xe000ed00
 8002d30:	40021000 	.word	0x40021000
 8002d34:	f87fc00c 	.word	0xf87fc00c
 8002d38:	ff00fccc 	.word	0xff00fccc

08002d3c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8002d40:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <SetSysClock+0x8c>)
 8002d42:	2212      	movs	r2, #18
 8002d44:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002d46:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <SetSysClock+0x90>)
 8002d48:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <SetSysClock+0x90>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <SetSysClock+0x90>)
 8002d50:	4a1e      	ldr	r2, [pc, #120]	; (8002dcc <SetSysClock+0x90>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002d56:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <SetSysClock+0x90>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <SetSysClock+0x90>)
 8002d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d60:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <SetSysClock+0x90>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <SetSysClock+0x90>)
 8002d68:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d6c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <SetSysClock+0x90>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <SetSysClock+0x90>)
 8002d74:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8002d78:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002d7a:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <SetSysClock+0x90>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <SetSysClock+0x90>)
 8002d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d84:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002d86:	bf00      	nop
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <SetSysClock+0x90>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f9      	beq.n	8002d88 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002d94:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <SetSysClock+0x90>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a0c      	ldr	r2, [pc, #48]	; (8002dcc <SetSysClock+0x90>)
 8002d9a:	f023 0303 	bic.w	r3, r3, #3
 8002d9e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <SetSysClock+0x90>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <SetSysClock+0x90>)
 8002da6:	f043 0302 	orr.w	r3, r3, #2
 8002daa:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002dac:	bf00      	nop
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <SetSysClock+0x90>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d1f9      	bne.n	8002dae <SetSysClock+0x72>
  {
  }
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40022000 	.word	0x40022000
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dd0:	480d      	ldr	r0, [pc, #52]	; (8002e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dd4:	480d      	ldr	r0, [pc, #52]	; (8002e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8002dd6:	490e      	ldr	r1, [pc, #56]	; (8002e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dd8:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <LoopForever+0xe>)
  movs r3, #0
 8002dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ddc:	e002      	b.n	8002de4 <LoopCopyDataInit>

08002dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de2:	3304      	adds	r3, #4

08002de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de8:	d3f9      	bcc.n	8002dde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dea:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dec:	4c0b      	ldr	r4, [pc, #44]	; (8002e1c <LoopForever+0x16>)
  movs r3, #0
 8002dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df0:	e001      	b.n	8002df6 <LoopFillZerobss>

08002df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df4:	3204      	adds	r2, #4

08002df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df8:	d3fb      	bcc.n	8002df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002dfa:	f7ff ff55 	bl	8002ca8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002dfe:	f000 f817 	bl	8002e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e02:	f7ff fd7d 	bl	8002900 <main>

08002e06 <LoopForever>:

LoopForever:
    b LoopForever
 8002e06:	e7fe      	b.n	8002e06 <LoopForever>
  ldr   r0, =_estack
 8002e08:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e10:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002e14:	080040d8 	.word	0x080040d8
  ldr r2, =_sbss
 8002e18:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002e1c:	200000ec 	.word	0x200000ec

08002e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e20:	e7fe      	b.n	8002e20 <ADC1_2_IRQHandler>
	...

08002e24 <__errno>:
 8002e24:	4b01      	ldr	r3, [pc, #4]	; (8002e2c <__errno+0x8>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	2000002c 	.word	0x2000002c

08002e30 <__libc_init_array>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	4d0d      	ldr	r5, [pc, #52]	; (8002e68 <__libc_init_array+0x38>)
 8002e34:	4c0d      	ldr	r4, [pc, #52]	; (8002e6c <__libc_init_array+0x3c>)
 8002e36:	1b64      	subs	r4, r4, r5
 8002e38:	10a4      	asrs	r4, r4, #2
 8002e3a:	2600      	movs	r6, #0
 8002e3c:	42a6      	cmp	r6, r4
 8002e3e:	d109      	bne.n	8002e54 <__libc_init_array+0x24>
 8002e40:	4d0b      	ldr	r5, [pc, #44]	; (8002e70 <__libc_init_array+0x40>)
 8002e42:	4c0c      	ldr	r4, [pc, #48]	; (8002e74 <__libc_init_array+0x44>)
 8002e44:	f001 f898 	bl	8003f78 <_init>
 8002e48:	1b64      	subs	r4, r4, r5
 8002e4a:	10a4      	asrs	r4, r4, #2
 8002e4c:	2600      	movs	r6, #0
 8002e4e:	42a6      	cmp	r6, r4
 8002e50:	d105      	bne.n	8002e5e <__libc_init_array+0x2e>
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e58:	4798      	blx	r3
 8002e5a:	3601      	adds	r6, #1
 8002e5c:	e7ee      	b.n	8002e3c <__libc_init_array+0xc>
 8002e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e62:	4798      	blx	r3
 8002e64:	3601      	adds	r6, #1
 8002e66:	e7f2      	b.n	8002e4e <__libc_init_array+0x1e>
 8002e68:	080040d0 	.word	0x080040d0
 8002e6c:	080040d0 	.word	0x080040d0
 8002e70:	080040d0 	.word	0x080040d0
 8002e74:	080040d4 	.word	0x080040d4

08002e78 <memset>:
 8002e78:	4402      	add	r2, r0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d100      	bne.n	8002e82 <memset+0xa>
 8002e80:	4770      	bx	lr
 8002e82:	f803 1b01 	strb.w	r1, [r3], #1
 8002e86:	e7f9      	b.n	8002e7c <memset+0x4>

08002e88 <iprintf>:
 8002e88:	b40f      	push	{r0, r1, r2, r3}
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <iprintf+0x2c>)
 8002e8c:	b513      	push	{r0, r1, r4, lr}
 8002e8e:	681c      	ldr	r4, [r3, #0]
 8002e90:	b124      	cbz	r4, 8002e9c <iprintf+0x14>
 8002e92:	69a3      	ldr	r3, [r4, #24]
 8002e94:	b913      	cbnz	r3, 8002e9c <iprintf+0x14>
 8002e96:	4620      	mov	r0, r4
 8002e98:	f000 fa0c 	bl	80032b4 <__sinit>
 8002e9c:	ab05      	add	r3, sp, #20
 8002e9e:	9a04      	ldr	r2, [sp, #16]
 8002ea0:	68a1      	ldr	r1, [r4, #8]
 8002ea2:	9301      	str	r3, [sp, #4]
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f000 fbe5 	bl	8003674 <_vfiprintf_r>
 8002eaa:	b002      	add	sp, #8
 8002eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eb0:	b004      	add	sp, #16
 8002eb2:	4770      	bx	lr
 8002eb4:	2000002c 	.word	0x2000002c

08002eb8 <putchar>:
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <putchar+0x28>)
 8002eba:	b513      	push	{r0, r1, r4, lr}
 8002ebc:	681c      	ldr	r4, [r3, #0]
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	b134      	cbz	r4, 8002ed0 <putchar+0x18>
 8002ec2:	69a3      	ldr	r3, [r4, #24]
 8002ec4:	b923      	cbnz	r3, 8002ed0 <putchar+0x18>
 8002ec6:	9001      	str	r0, [sp, #4]
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 f9f3 	bl	80032b4 <__sinit>
 8002ece:	9901      	ldr	r1, [sp, #4]
 8002ed0:	68a2      	ldr	r2, [r4, #8]
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	b002      	add	sp, #8
 8002ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eda:	f000 be8f 	b.w	8003bfc <_putc_r>
 8002ede:	bf00      	nop
 8002ee0:	2000002c 	.word	0x2000002c

08002ee4 <setbuf>:
 8002ee4:	2900      	cmp	r1, #0
 8002ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eea:	bf0c      	ite	eq
 8002eec:	2202      	moveq	r2, #2
 8002eee:	2200      	movne	r2, #0
 8002ef0:	f000 b800 	b.w	8002ef4 <setvbuf>

08002ef4 <setvbuf>:
 8002ef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002ef8:	461d      	mov	r5, r3
 8002efa:	4b5d      	ldr	r3, [pc, #372]	; (8003070 <setvbuf+0x17c>)
 8002efc:	681f      	ldr	r7, [r3, #0]
 8002efe:	4604      	mov	r4, r0
 8002f00:	460e      	mov	r6, r1
 8002f02:	4690      	mov	r8, r2
 8002f04:	b127      	cbz	r7, 8002f10 <setvbuf+0x1c>
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	b913      	cbnz	r3, 8002f10 <setvbuf+0x1c>
 8002f0a:	4638      	mov	r0, r7
 8002f0c:	f000 f9d2 	bl	80032b4 <__sinit>
 8002f10:	4b58      	ldr	r3, [pc, #352]	; (8003074 <setvbuf+0x180>)
 8002f12:	429c      	cmp	r4, r3
 8002f14:	d167      	bne.n	8002fe6 <setvbuf+0xf2>
 8002f16:	687c      	ldr	r4, [r7, #4]
 8002f18:	f1b8 0f02 	cmp.w	r8, #2
 8002f1c:	d006      	beq.n	8002f2c <setvbuf+0x38>
 8002f1e:	f1b8 0f01 	cmp.w	r8, #1
 8002f22:	f200 809f 	bhi.w	8003064 <setvbuf+0x170>
 8002f26:	2d00      	cmp	r5, #0
 8002f28:	f2c0 809c 	blt.w	8003064 <setvbuf+0x170>
 8002f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f2e:	07db      	lsls	r3, r3, #31
 8002f30:	d405      	bmi.n	8002f3e <setvbuf+0x4a>
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	0598      	lsls	r0, r3, #22
 8002f36:	d402      	bmi.n	8002f3e <setvbuf+0x4a>
 8002f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f3a:	f000 fa59 	bl	80033f0 <__retarget_lock_acquire_recursive>
 8002f3e:	4621      	mov	r1, r4
 8002f40:	4638      	mov	r0, r7
 8002f42:	f000 f923 	bl	800318c <_fflush_r>
 8002f46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f48:	b141      	cbz	r1, 8002f5c <setvbuf+0x68>
 8002f4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f4e:	4299      	cmp	r1, r3
 8002f50:	d002      	beq.n	8002f58 <setvbuf+0x64>
 8002f52:	4638      	mov	r0, r7
 8002f54:	f000 faba 	bl	80034cc <_free_r>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	6363      	str	r3, [r4, #52]	; 0x34
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61a3      	str	r3, [r4, #24]
 8002f60:	6063      	str	r3, [r4, #4]
 8002f62:	89a3      	ldrh	r3, [r4, #12]
 8002f64:	0619      	lsls	r1, r3, #24
 8002f66:	d503      	bpl.n	8002f70 <setvbuf+0x7c>
 8002f68:	6921      	ldr	r1, [r4, #16]
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	f000 faae 	bl	80034cc <_free_r>
 8002f70:	89a3      	ldrh	r3, [r4, #12]
 8002f72:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	f1b8 0f02 	cmp.w	r8, #2
 8002f7e:	81a3      	strh	r3, [r4, #12]
 8002f80:	d06c      	beq.n	800305c <setvbuf+0x168>
 8002f82:	ab01      	add	r3, sp, #4
 8002f84:	466a      	mov	r2, sp
 8002f86:	4621      	mov	r1, r4
 8002f88:	4638      	mov	r0, r7
 8002f8a:	f000 fa33 	bl	80033f4 <__swhatbuf_r>
 8002f8e:	89a3      	ldrh	r3, [r4, #12]
 8002f90:	4318      	orrs	r0, r3
 8002f92:	81a0      	strh	r0, [r4, #12]
 8002f94:	2d00      	cmp	r5, #0
 8002f96:	d130      	bne.n	8002ffa <setvbuf+0x106>
 8002f98:	9d00      	ldr	r5, [sp, #0]
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	f000 fa8e 	bl	80034bc <malloc>
 8002fa0:	4606      	mov	r6, r0
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d155      	bne.n	8003052 <setvbuf+0x15e>
 8002fa6:	f8dd 9000 	ldr.w	r9, [sp]
 8002faa:	45a9      	cmp	r9, r5
 8002fac:	d14a      	bne.n	8003044 <setvbuf+0x150>
 8002fae:	f04f 35ff 	mov.w	r5, #4294967295
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60a2      	str	r2, [r4, #8]
 8002fb6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002fba:	6022      	str	r2, [r4, #0]
 8002fbc:	6122      	str	r2, [r4, #16]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fc4:	6162      	str	r2, [r4, #20]
 8002fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	07d2      	lsls	r2, r2, #31
 8002fce:	81a3      	strh	r3, [r4, #12]
 8002fd0:	d405      	bmi.n	8002fde <setvbuf+0xea>
 8002fd2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002fd6:	d102      	bne.n	8002fde <setvbuf+0xea>
 8002fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fda:	f000 fa0a 	bl	80033f2 <__retarget_lock_release_recursive>
 8002fde:	4628      	mov	r0, r5
 8002fe0:	b003      	add	sp, #12
 8002fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fe6:	4b24      	ldr	r3, [pc, #144]	; (8003078 <setvbuf+0x184>)
 8002fe8:	429c      	cmp	r4, r3
 8002fea:	d101      	bne.n	8002ff0 <setvbuf+0xfc>
 8002fec:	68bc      	ldr	r4, [r7, #8]
 8002fee:	e793      	b.n	8002f18 <setvbuf+0x24>
 8002ff0:	4b22      	ldr	r3, [pc, #136]	; (800307c <setvbuf+0x188>)
 8002ff2:	429c      	cmp	r4, r3
 8002ff4:	bf08      	it	eq
 8002ff6:	68fc      	ldreq	r4, [r7, #12]
 8002ff8:	e78e      	b.n	8002f18 <setvbuf+0x24>
 8002ffa:	2e00      	cmp	r6, #0
 8002ffc:	d0cd      	beq.n	8002f9a <setvbuf+0xa6>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	b913      	cbnz	r3, 8003008 <setvbuf+0x114>
 8003002:	4638      	mov	r0, r7
 8003004:	f000 f956 	bl	80032b4 <__sinit>
 8003008:	f1b8 0f01 	cmp.w	r8, #1
 800300c:	bf08      	it	eq
 800300e:	89a3      	ldrheq	r3, [r4, #12]
 8003010:	6026      	str	r6, [r4, #0]
 8003012:	bf04      	itt	eq
 8003014:	f043 0301 	orreq.w	r3, r3, #1
 8003018:	81a3      	strheq	r3, [r4, #12]
 800301a:	89a2      	ldrh	r2, [r4, #12]
 800301c:	f012 0308 	ands.w	r3, r2, #8
 8003020:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003024:	d01c      	beq.n	8003060 <setvbuf+0x16c>
 8003026:	07d3      	lsls	r3, r2, #31
 8003028:	bf41      	itttt	mi
 800302a:	2300      	movmi	r3, #0
 800302c:	426d      	negmi	r5, r5
 800302e:	60a3      	strmi	r3, [r4, #8]
 8003030:	61a5      	strmi	r5, [r4, #24]
 8003032:	bf58      	it	pl
 8003034:	60a5      	strpl	r5, [r4, #8]
 8003036:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003038:	f015 0501 	ands.w	r5, r5, #1
 800303c:	d115      	bne.n	800306a <setvbuf+0x176>
 800303e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003042:	e7c8      	b.n	8002fd6 <setvbuf+0xe2>
 8003044:	4648      	mov	r0, r9
 8003046:	f000 fa39 	bl	80034bc <malloc>
 800304a:	4606      	mov	r6, r0
 800304c:	2800      	cmp	r0, #0
 800304e:	d0ae      	beq.n	8002fae <setvbuf+0xba>
 8003050:	464d      	mov	r5, r9
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003058:	81a3      	strh	r3, [r4, #12]
 800305a:	e7d0      	b.n	8002ffe <setvbuf+0x10a>
 800305c:	2500      	movs	r5, #0
 800305e:	e7a8      	b.n	8002fb2 <setvbuf+0xbe>
 8003060:	60a3      	str	r3, [r4, #8]
 8003062:	e7e8      	b.n	8003036 <setvbuf+0x142>
 8003064:	f04f 35ff 	mov.w	r5, #4294967295
 8003068:	e7b9      	b.n	8002fde <setvbuf+0xea>
 800306a:	2500      	movs	r5, #0
 800306c:	e7b7      	b.n	8002fde <setvbuf+0xea>
 800306e:	bf00      	nop
 8003070:	2000002c 	.word	0x2000002c
 8003074:	0800405c 	.word	0x0800405c
 8003078:	0800407c 	.word	0x0800407c
 800307c:	0800403c 	.word	0x0800403c

08003080 <__sflush_r>:
 8003080:	898a      	ldrh	r2, [r1, #12]
 8003082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003086:	4605      	mov	r5, r0
 8003088:	0710      	lsls	r0, r2, #28
 800308a:	460c      	mov	r4, r1
 800308c:	d458      	bmi.n	8003140 <__sflush_r+0xc0>
 800308e:	684b      	ldr	r3, [r1, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	dc05      	bgt.n	80030a0 <__sflush_r+0x20>
 8003094:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	dc02      	bgt.n	80030a0 <__sflush_r+0x20>
 800309a:	2000      	movs	r0, #0
 800309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030a2:	2e00      	cmp	r6, #0
 80030a4:	d0f9      	beq.n	800309a <__sflush_r+0x1a>
 80030a6:	2300      	movs	r3, #0
 80030a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030ac:	682f      	ldr	r7, [r5, #0]
 80030ae:	602b      	str	r3, [r5, #0]
 80030b0:	d032      	beq.n	8003118 <__sflush_r+0x98>
 80030b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	075a      	lsls	r2, r3, #29
 80030b8:	d505      	bpl.n	80030c6 <__sflush_r+0x46>
 80030ba:	6863      	ldr	r3, [r4, #4]
 80030bc:	1ac0      	subs	r0, r0, r3
 80030be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030c0:	b10b      	cbz	r3, 80030c6 <__sflush_r+0x46>
 80030c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030c4:	1ac0      	subs	r0, r0, r3
 80030c6:	2300      	movs	r3, #0
 80030c8:	4602      	mov	r2, r0
 80030ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030cc:	6a21      	ldr	r1, [r4, #32]
 80030ce:	4628      	mov	r0, r5
 80030d0:	47b0      	blx	r6
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	89a3      	ldrh	r3, [r4, #12]
 80030d6:	d106      	bne.n	80030e6 <__sflush_r+0x66>
 80030d8:	6829      	ldr	r1, [r5, #0]
 80030da:	291d      	cmp	r1, #29
 80030dc:	d82c      	bhi.n	8003138 <__sflush_r+0xb8>
 80030de:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <__sflush_r+0x108>)
 80030e0:	40ca      	lsrs	r2, r1
 80030e2:	07d6      	lsls	r6, r2, #31
 80030e4:	d528      	bpl.n	8003138 <__sflush_r+0xb8>
 80030e6:	2200      	movs	r2, #0
 80030e8:	6062      	str	r2, [r4, #4]
 80030ea:	04d9      	lsls	r1, r3, #19
 80030ec:	6922      	ldr	r2, [r4, #16]
 80030ee:	6022      	str	r2, [r4, #0]
 80030f0:	d504      	bpl.n	80030fc <__sflush_r+0x7c>
 80030f2:	1c42      	adds	r2, r0, #1
 80030f4:	d101      	bne.n	80030fa <__sflush_r+0x7a>
 80030f6:	682b      	ldr	r3, [r5, #0]
 80030f8:	b903      	cbnz	r3, 80030fc <__sflush_r+0x7c>
 80030fa:	6560      	str	r0, [r4, #84]	; 0x54
 80030fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030fe:	602f      	str	r7, [r5, #0]
 8003100:	2900      	cmp	r1, #0
 8003102:	d0ca      	beq.n	800309a <__sflush_r+0x1a>
 8003104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003108:	4299      	cmp	r1, r3
 800310a:	d002      	beq.n	8003112 <__sflush_r+0x92>
 800310c:	4628      	mov	r0, r5
 800310e:	f000 f9dd 	bl	80034cc <_free_r>
 8003112:	2000      	movs	r0, #0
 8003114:	6360      	str	r0, [r4, #52]	; 0x34
 8003116:	e7c1      	b.n	800309c <__sflush_r+0x1c>
 8003118:	6a21      	ldr	r1, [r4, #32]
 800311a:	2301      	movs	r3, #1
 800311c:	4628      	mov	r0, r5
 800311e:	47b0      	blx	r6
 8003120:	1c41      	adds	r1, r0, #1
 8003122:	d1c7      	bne.n	80030b4 <__sflush_r+0x34>
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0c4      	beq.n	80030b4 <__sflush_r+0x34>
 800312a:	2b1d      	cmp	r3, #29
 800312c:	d001      	beq.n	8003132 <__sflush_r+0xb2>
 800312e:	2b16      	cmp	r3, #22
 8003130:	d101      	bne.n	8003136 <__sflush_r+0xb6>
 8003132:	602f      	str	r7, [r5, #0]
 8003134:	e7b1      	b.n	800309a <__sflush_r+0x1a>
 8003136:	89a3      	ldrh	r3, [r4, #12]
 8003138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313c:	81a3      	strh	r3, [r4, #12]
 800313e:	e7ad      	b.n	800309c <__sflush_r+0x1c>
 8003140:	690f      	ldr	r7, [r1, #16]
 8003142:	2f00      	cmp	r7, #0
 8003144:	d0a9      	beq.n	800309a <__sflush_r+0x1a>
 8003146:	0793      	lsls	r3, r2, #30
 8003148:	680e      	ldr	r6, [r1, #0]
 800314a:	bf08      	it	eq
 800314c:	694b      	ldreq	r3, [r1, #20]
 800314e:	600f      	str	r7, [r1, #0]
 8003150:	bf18      	it	ne
 8003152:	2300      	movne	r3, #0
 8003154:	eba6 0807 	sub.w	r8, r6, r7
 8003158:	608b      	str	r3, [r1, #8]
 800315a:	f1b8 0f00 	cmp.w	r8, #0
 800315e:	dd9c      	ble.n	800309a <__sflush_r+0x1a>
 8003160:	6a21      	ldr	r1, [r4, #32]
 8003162:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003164:	4643      	mov	r3, r8
 8003166:	463a      	mov	r2, r7
 8003168:	4628      	mov	r0, r5
 800316a:	47b0      	blx	r6
 800316c:	2800      	cmp	r0, #0
 800316e:	dc06      	bgt.n	800317e <__sflush_r+0xfe>
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003176:	81a3      	strh	r3, [r4, #12]
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	e78e      	b.n	800309c <__sflush_r+0x1c>
 800317e:	4407      	add	r7, r0
 8003180:	eba8 0800 	sub.w	r8, r8, r0
 8003184:	e7e9      	b.n	800315a <__sflush_r+0xda>
 8003186:	bf00      	nop
 8003188:	20400001 	.word	0x20400001

0800318c <_fflush_r>:
 800318c:	b538      	push	{r3, r4, r5, lr}
 800318e:	690b      	ldr	r3, [r1, #16]
 8003190:	4605      	mov	r5, r0
 8003192:	460c      	mov	r4, r1
 8003194:	b913      	cbnz	r3, 800319c <_fflush_r+0x10>
 8003196:	2500      	movs	r5, #0
 8003198:	4628      	mov	r0, r5
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	b118      	cbz	r0, 80031a6 <_fflush_r+0x1a>
 800319e:	6983      	ldr	r3, [r0, #24]
 80031a0:	b90b      	cbnz	r3, 80031a6 <_fflush_r+0x1a>
 80031a2:	f000 f887 	bl	80032b4 <__sinit>
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <_fflush_r+0x6c>)
 80031a8:	429c      	cmp	r4, r3
 80031aa:	d11b      	bne.n	80031e4 <_fflush_r+0x58>
 80031ac:	686c      	ldr	r4, [r5, #4]
 80031ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0ef      	beq.n	8003196 <_fflush_r+0xa>
 80031b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031b8:	07d0      	lsls	r0, r2, #31
 80031ba:	d404      	bmi.n	80031c6 <_fflush_r+0x3a>
 80031bc:	0599      	lsls	r1, r3, #22
 80031be:	d402      	bmi.n	80031c6 <_fflush_r+0x3a>
 80031c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031c2:	f000 f915 	bl	80033f0 <__retarget_lock_acquire_recursive>
 80031c6:	4628      	mov	r0, r5
 80031c8:	4621      	mov	r1, r4
 80031ca:	f7ff ff59 	bl	8003080 <__sflush_r>
 80031ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031d0:	07da      	lsls	r2, r3, #31
 80031d2:	4605      	mov	r5, r0
 80031d4:	d4e0      	bmi.n	8003198 <_fflush_r+0xc>
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	059b      	lsls	r3, r3, #22
 80031da:	d4dd      	bmi.n	8003198 <_fflush_r+0xc>
 80031dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031de:	f000 f908 	bl	80033f2 <__retarget_lock_release_recursive>
 80031e2:	e7d9      	b.n	8003198 <_fflush_r+0xc>
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <_fflush_r+0x70>)
 80031e6:	429c      	cmp	r4, r3
 80031e8:	d101      	bne.n	80031ee <_fflush_r+0x62>
 80031ea:	68ac      	ldr	r4, [r5, #8]
 80031ec:	e7df      	b.n	80031ae <_fflush_r+0x22>
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <_fflush_r+0x74>)
 80031f0:	429c      	cmp	r4, r3
 80031f2:	bf08      	it	eq
 80031f4:	68ec      	ldreq	r4, [r5, #12]
 80031f6:	e7da      	b.n	80031ae <_fflush_r+0x22>
 80031f8:	0800405c 	.word	0x0800405c
 80031fc:	0800407c 	.word	0x0800407c
 8003200:	0800403c 	.word	0x0800403c

08003204 <std>:
 8003204:	2300      	movs	r3, #0
 8003206:	b510      	push	{r4, lr}
 8003208:	4604      	mov	r4, r0
 800320a:	e9c0 3300 	strd	r3, r3, [r0]
 800320e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003212:	6083      	str	r3, [r0, #8]
 8003214:	8181      	strh	r1, [r0, #12]
 8003216:	6643      	str	r3, [r0, #100]	; 0x64
 8003218:	81c2      	strh	r2, [r0, #14]
 800321a:	6183      	str	r3, [r0, #24]
 800321c:	4619      	mov	r1, r3
 800321e:	2208      	movs	r2, #8
 8003220:	305c      	adds	r0, #92	; 0x5c
 8003222:	f7ff fe29 	bl	8002e78 <memset>
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <std+0x38>)
 8003228:	6263      	str	r3, [r4, #36]	; 0x24
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <std+0x3c>)
 800322c:	62a3      	str	r3, [r4, #40]	; 0x28
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <std+0x40>)
 8003230:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <std+0x44>)
 8003234:	6224      	str	r4, [r4, #32]
 8003236:	6323      	str	r3, [r4, #48]	; 0x30
 8003238:	bd10      	pop	{r4, pc}
 800323a:	bf00      	nop
 800323c:	08003cad 	.word	0x08003cad
 8003240:	08003ccf 	.word	0x08003ccf
 8003244:	08003d07 	.word	0x08003d07
 8003248:	08003d2b 	.word	0x08003d2b

0800324c <_cleanup_r>:
 800324c:	4901      	ldr	r1, [pc, #4]	; (8003254 <_cleanup_r+0x8>)
 800324e:	f000 b8af 	b.w	80033b0 <_fwalk_reent>
 8003252:	bf00      	nop
 8003254:	0800318d 	.word	0x0800318d

08003258 <__sfmoreglue>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	1e4a      	subs	r2, r1, #1
 800325c:	2568      	movs	r5, #104	; 0x68
 800325e:	4355      	muls	r5, r2
 8003260:	460e      	mov	r6, r1
 8003262:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003266:	f000 f981 	bl	800356c <_malloc_r>
 800326a:	4604      	mov	r4, r0
 800326c:	b140      	cbz	r0, 8003280 <__sfmoreglue+0x28>
 800326e:	2100      	movs	r1, #0
 8003270:	e9c0 1600 	strd	r1, r6, [r0]
 8003274:	300c      	adds	r0, #12
 8003276:	60a0      	str	r0, [r4, #8]
 8003278:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800327c:	f7ff fdfc 	bl	8002e78 <memset>
 8003280:	4620      	mov	r0, r4
 8003282:	bd70      	pop	{r4, r5, r6, pc}

08003284 <__sfp_lock_acquire>:
 8003284:	4801      	ldr	r0, [pc, #4]	; (800328c <__sfp_lock_acquire+0x8>)
 8003286:	f000 b8b3 	b.w	80033f0 <__retarget_lock_acquire_recursive>
 800328a:	bf00      	nop
 800328c:	200000e5 	.word	0x200000e5

08003290 <__sfp_lock_release>:
 8003290:	4801      	ldr	r0, [pc, #4]	; (8003298 <__sfp_lock_release+0x8>)
 8003292:	f000 b8ae 	b.w	80033f2 <__retarget_lock_release_recursive>
 8003296:	bf00      	nop
 8003298:	200000e5 	.word	0x200000e5

0800329c <__sinit_lock_acquire>:
 800329c:	4801      	ldr	r0, [pc, #4]	; (80032a4 <__sinit_lock_acquire+0x8>)
 800329e:	f000 b8a7 	b.w	80033f0 <__retarget_lock_acquire_recursive>
 80032a2:	bf00      	nop
 80032a4:	200000e0 	.word	0x200000e0

080032a8 <__sinit_lock_release>:
 80032a8:	4801      	ldr	r0, [pc, #4]	; (80032b0 <__sinit_lock_release+0x8>)
 80032aa:	f000 b8a2 	b.w	80033f2 <__retarget_lock_release_recursive>
 80032ae:	bf00      	nop
 80032b0:	200000e0 	.word	0x200000e0

080032b4 <__sinit>:
 80032b4:	b510      	push	{r4, lr}
 80032b6:	4604      	mov	r4, r0
 80032b8:	f7ff fff0 	bl	800329c <__sinit_lock_acquire>
 80032bc:	69a3      	ldr	r3, [r4, #24]
 80032be:	b11b      	cbz	r3, 80032c8 <__sinit+0x14>
 80032c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032c4:	f7ff bff0 	b.w	80032a8 <__sinit_lock_release>
 80032c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80032cc:	6523      	str	r3, [r4, #80]	; 0x50
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <__sinit+0x68>)
 80032d0:	4a13      	ldr	r2, [pc, #76]	; (8003320 <__sinit+0x6c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80032d6:	42a3      	cmp	r3, r4
 80032d8:	bf04      	itt	eq
 80032da:	2301      	moveq	r3, #1
 80032dc:	61a3      	streq	r3, [r4, #24]
 80032de:	4620      	mov	r0, r4
 80032e0:	f000 f820 	bl	8003324 <__sfp>
 80032e4:	6060      	str	r0, [r4, #4]
 80032e6:	4620      	mov	r0, r4
 80032e8:	f000 f81c 	bl	8003324 <__sfp>
 80032ec:	60a0      	str	r0, [r4, #8]
 80032ee:	4620      	mov	r0, r4
 80032f0:	f000 f818 	bl	8003324 <__sfp>
 80032f4:	2200      	movs	r2, #0
 80032f6:	60e0      	str	r0, [r4, #12]
 80032f8:	2104      	movs	r1, #4
 80032fa:	6860      	ldr	r0, [r4, #4]
 80032fc:	f7ff ff82 	bl	8003204 <std>
 8003300:	68a0      	ldr	r0, [r4, #8]
 8003302:	2201      	movs	r2, #1
 8003304:	2109      	movs	r1, #9
 8003306:	f7ff ff7d 	bl	8003204 <std>
 800330a:	68e0      	ldr	r0, [r4, #12]
 800330c:	2202      	movs	r2, #2
 800330e:	2112      	movs	r1, #18
 8003310:	f7ff ff78 	bl	8003204 <std>
 8003314:	2301      	movs	r3, #1
 8003316:	61a3      	str	r3, [r4, #24]
 8003318:	e7d2      	b.n	80032c0 <__sinit+0xc>
 800331a:	bf00      	nop
 800331c:	08004038 	.word	0x08004038
 8003320:	0800324d 	.word	0x0800324d

08003324 <__sfp>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	4607      	mov	r7, r0
 8003328:	f7ff ffac 	bl	8003284 <__sfp_lock_acquire>
 800332c:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <__sfp+0x84>)
 800332e:	681e      	ldr	r6, [r3, #0]
 8003330:	69b3      	ldr	r3, [r6, #24]
 8003332:	b913      	cbnz	r3, 800333a <__sfp+0x16>
 8003334:	4630      	mov	r0, r6
 8003336:	f7ff ffbd 	bl	80032b4 <__sinit>
 800333a:	3648      	adds	r6, #72	; 0x48
 800333c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003340:	3b01      	subs	r3, #1
 8003342:	d503      	bpl.n	800334c <__sfp+0x28>
 8003344:	6833      	ldr	r3, [r6, #0]
 8003346:	b30b      	cbz	r3, 800338c <__sfp+0x68>
 8003348:	6836      	ldr	r6, [r6, #0]
 800334a:	e7f7      	b.n	800333c <__sfp+0x18>
 800334c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003350:	b9d5      	cbnz	r5, 8003388 <__sfp+0x64>
 8003352:	4b16      	ldr	r3, [pc, #88]	; (80033ac <__sfp+0x88>)
 8003354:	60e3      	str	r3, [r4, #12]
 8003356:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800335a:	6665      	str	r5, [r4, #100]	; 0x64
 800335c:	f000 f847 	bl	80033ee <__retarget_lock_init_recursive>
 8003360:	f7ff ff96 	bl	8003290 <__sfp_lock_release>
 8003364:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003368:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800336c:	6025      	str	r5, [r4, #0]
 800336e:	61a5      	str	r5, [r4, #24]
 8003370:	2208      	movs	r2, #8
 8003372:	4629      	mov	r1, r5
 8003374:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003378:	f7ff fd7e 	bl	8002e78 <memset>
 800337c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003380:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003384:	4620      	mov	r0, r4
 8003386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003388:	3468      	adds	r4, #104	; 0x68
 800338a:	e7d9      	b.n	8003340 <__sfp+0x1c>
 800338c:	2104      	movs	r1, #4
 800338e:	4638      	mov	r0, r7
 8003390:	f7ff ff62 	bl	8003258 <__sfmoreglue>
 8003394:	4604      	mov	r4, r0
 8003396:	6030      	str	r0, [r6, #0]
 8003398:	2800      	cmp	r0, #0
 800339a:	d1d5      	bne.n	8003348 <__sfp+0x24>
 800339c:	f7ff ff78 	bl	8003290 <__sfp_lock_release>
 80033a0:	230c      	movs	r3, #12
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	e7ee      	b.n	8003384 <__sfp+0x60>
 80033a6:	bf00      	nop
 80033a8:	08004038 	.word	0x08004038
 80033ac:	ffff0001 	.word	0xffff0001

080033b0 <_fwalk_reent>:
 80033b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033b4:	4606      	mov	r6, r0
 80033b6:	4688      	mov	r8, r1
 80033b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033bc:	2700      	movs	r7, #0
 80033be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033c2:	f1b9 0901 	subs.w	r9, r9, #1
 80033c6:	d505      	bpl.n	80033d4 <_fwalk_reent+0x24>
 80033c8:	6824      	ldr	r4, [r4, #0]
 80033ca:	2c00      	cmp	r4, #0
 80033cc:	d1f7      	bne.n	80033be <_fwalk_reent+0xe>
 80033ce:	4638      	mov	r0, r7
 80033d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033d4:	89ab      	ldrh	r3, [r5, #12]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d907      	bls.n	80033ea <_fwalk_reent+0x3a>
 80033da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033de:	3301      	adds	r3, #1
 80033e0:	d003      	beq.n	80033ea <_fwalk_reent+0x3a>
 80033e2:	4629      	mov	r1, r5
 80033e4:	4630      	mov	r0, r6
 80033e6:	47c0      	blx	r8
 80033e8:	4307      	orrs	r7, r0
 80033ea:	3568      	adds	r5, #104	; 0x68
 80033ec:	e7e9      	b.n	80033c2 <_fwalk_reent+0x12>

080033ee <__retarget_lock_init_recursive>:
 80033ee:	4770      	bx	lr

080033f0 <__retarget_lock_acquire_recursive>:
 80033f0:	4770      	bx	lr

080033f2 <__retarget_lock_release_recursive>:
 80033f2:	4770      	bx	lr

080033f4 <__swhatbuf_r>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	460e      	mov	r6, r1
 80033f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033fc:	2900      	cmp	r1, #0
 80033fe:	b096      	sub	sp, #88	; 0x58
 8003400:	4614      	mov	r4, r2
 8003402:	461d      	mov	r5, r3
 8003404:	da07      	bge.n	8003416 <__swhatbuf_r+0x22>
 8003406:	2300      	movs	r3, #0
 8003408:	602b      	str	r3, [r5, #0]
 800340a:	89b3      	ldrh	r3, [r6, #12]
 800340c:	061a      	lsls	r2, r3, #24
 800340e:	d410      	bmi.n	8003432 <__swhatbuf_r+0x3e>
 8003410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003414:	e00e      	b.n	8003434 <__swhatbuf_r+0x40>
 8003416:	466a      	mov	r2, sp
 8003418:	f000 fd5c 	bl	8003ed4 <_fstat_r>
 800341c:	2800      	cmp	r0, #0
 800341e:	dbf2      	blt.n	8003406 <__swhatbuf_r+0x12>
 8003420:	9a01      	ldr	r2, [sp, #4]
 8003422:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003426:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800342a:	425a      	negs	r2, r3
 800342c:	415a      	adcs	r2, r3
 800342e:	602a      	str	r2, [r5, #0]
 8003430:	e7ee      	b.n	8003410 <__swhatbuf_r+0x1c>
 8003432:	2340      	movs	r3, #64	; 0x40
 8003434:	2000      	movs	r0, #0
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	b016      	add	sp, #88	; 0x58
 800343a:	bd70      	pop	{r4, r5, r6, pc}

0800343c <__smakebuf_r>:
 800343c:	898b      	ldrh	r3, [r1, #12]
 800343e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003440:	079d      	lsls	r5, r3, #30
 8003442:	4606      	mov	r6, r0
 8003444:	460c      	mov	r4, r1
 8003446:	d507      	bpl.n	8003458 <__smakebuf_r+0x1c>
 8003448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	6123      	str	r3, [r4, #16]
 8003450:	2301      	movs	r3, #1
 8003452:	6163      	str	r3, [r4, #20]
 8003454:	b002      	add	sp, #8
 8003456:	bd70      	pop	{r4, r5, r6, pc}
 8003458:	ab01      	add	r3, sp, #4
 800345a:	466a      	mov	r2, sp
 800345c:	f7ff ffca 	bl	80033f4 <__swhatbuf_r>
 8003460:	9900      	ldr	r1, [sp, #0]
 8003462:	4605      	mov	r5, r0
 8003464:	4630      	mov	r0, r6
 8003466:	f000 f881 	bl	800356c <_malloc_r>
 800346a:	b948      	cbnz	r0, 8003480 <__smakebuf_r+0x44>
 800346c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003470:	059a      	lsls	r2, r3, #22
 8003472:	d4ef      	bmi.n	8003454 <__smakebuf_r+0x18>
 8003474:	f023 0303 	bic.w	r3, r3, #3
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	e7e3      	b.n	8003448 <__smakebuf_r+0xc>
 8003480:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <__smakebuf_r+0x7c>)
 8003482:	62b3      	str	r3, [r6, #40]	; 0x28
 8003484:	89a3      	ldrh	r3, [r4, #12]
 8003486:	6020      	str	r0, [r4, #0]
 8003488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348c:	81a3      	strh	r3, [r4, #12]
 800348e:	9b00      	ldr	r3, [sp, #0]
 8003490:	6163      	str	r3, [r4, #20]
 8003492:	9b01      	ldr	r3, [sp, #4]
 8003494:	6120      	str	r0, [r4, #16]
 8003496:	b15b      	cbz	r3, 80034b0 <__smakebuf_r+0x74>
 8003498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800349c:	4630      	mov	r0, r6
 800349e:	f000 fd2b 	bl	8003ef8 <_isatty_r>
 80034a2:	b128      	cbz	r0, 80034b0 <__smakebuf_r+0x74>
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	81a3      	strh	r3, [r4, #12]
 80034b0:	89a0      	ldrh	r0, [r4, #12]
 80034b2:	4305      	orrs	r5, r0
 80034b4:	81a5      	strh	r5, [r4, #12]
 80034b6:	e7cd      	b.n	8003454 <__smakebuf_r+0x18>
 80034b8:	0800324d 	.word	0x0800324d

080034bc <malloc>:
 80034bc:	4b02      	ldr	r3, [pc, #8]	; (80034c8 <malloc+0xc>)
 80034be:	4601      	mov	r1, r0
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	f000 b853 	b.w	800356c <_malloc_r>
 80034c6:	bf00      	nop
 80034c8:	2000002c 	.word	0x2000002c

080034cc <_free_r>:
 80034cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034ce:	2900      	cmp	r1, #0
 80034d0:	d048      	beq.n	8003564 <_free_r+0x98>
 80034d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034d6:	9001      	str	r0, [sp, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f1a1 0404 	sub.w	r4, r1, #4
 80034de:	bfb8      	it	lt
 80034e0:	18e4      	addlt	r4, r4, r3
 80034e2:	f000 fd2b 	bl	8003f3c <__malloc_lock>
 80034e6:	4a20      	ldr	r2, [pc, #128]	; (8003568 <_free_r+0x9c>)
 80034e8:	9801      	ldr	r0, [sp, #4]
 80034ea:	6813      	ldr	r3, [r2, #0]
 80034ec:	4615      	mov	r5, r2
 80034ee:	b933      	cbnz	r3, 80034fe <_free_r+0x32>
 80034f0:	6063      	str	r3, [r4, #4]
 80034f2:	6014      	str	r4, [r2, #0]
 80034f4:	b003      	add	sp, #12
 80034f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034fa:	f000 bd25 	b.w	8003f48 <__malloc_unlock>
 80034fe:	42a3      	cmp	r3, r4
 8003500:	d90b      	bls.n	800351a <_free_r+0x4e>
 8003502:	6821      	ldr	r1, [r4, #0]
 8003504:	1862      	adds	r2, r4, r1
 8003506:	4293      	cmp	r3, r2
 8003508:	bf04      	itt	eq
 800350a:	681a      	ldreq	r2, [r3, #0]
 800350c:	685b      	ldreq	r3, [r3, #4]
 800350e:	6063      	str	r3, [r4, #4]
 8003510:	bf04      	itt	eq
 8003512:	1852      	addeq	r2, r2, r1
 8003514:	6022      	streq	r2, [r4, #0]
 8003516:	602c      	str	r4, [r5, #0]
 8003518:	e7ec      	b.n	80034f4 <_free_r+0x28>
 800351a:	461a      	mov	r2, r3
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	b10b      	cbz	r3, 8003524 <_free_r+0x58>
 8003520:	42a3      	cmp	r3, r4
 8003522:	d9fa      	bls.n	800351a <_free_r+0x4e>
 8003524:	6811      	ldr	r1, [r2, #0]
 8003526:	1855      	adds	r5, r2, r1
 8003528:	42a5      	cmp	r5, r4
 800352a:	d10b      	bne.n	8003544 <_free_r+0x78>
 800352c:	6824      	ldr	r4, [r4, #0]
 800352e:	4421      	add	r1, r4
 8003530:	1854      	adds	r4, r2, r1
 8003532:	42a3      	cmp	r3, r4
 8003534:	6011      	str	r1, [r2, #0]
 8003536:	d1dd      	bne.n	80034f4 <_free_r+0x28>
 8003538:	681c      	ldr	r4, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	6053      	str	r3, [r2, #4]
 800353e:	4421      	add	r1, r4
 8003540:	6011      	str	r1, [r2, #0]
 8003542:	e7d7      	b.n	80034f4 <_free_r+0x28>
 8003544:	d902      	bls.n	800354c <_free_r+0x80>
 8003546:	230c      	movs	r3, #12
 8003548:	6003      	str	r3, [r0, #0]
 800354a:	e7d3      	b.n	80034f4 <_free_r+0x28>
 800354c:	6825      	ldr	r5, [r4, #0]
 800354e:	1961      	adds	r1, r4, r5
 8003550:	428b      	cmp	r3, r1
 8003552:	bf04      	itt	eq
 8003554:	6819      	ldreq	r1, [r3, #0]
 8003556:	685b      	ldreq	r3, [r3, #4]
 8003558:	6063      	str	r3, [r4, #4]
 800355a:	bf04      	itt	eq
 800355c:	1949      	addeq	r1, r1, r5
 800355e:	6021      	streq	r1, [r4, #0]
 8003560:	6054      	str	r4, [r2, #4]
 8003562:	e7c7      	b.n	80034f4 <_free_r+0x28>
 8003564:	b003      	add	sp, #12
 8003566:	bd30      	pop	{r4, r5, pc}
 8003568:	200000b4 	.word	0x200000b4

0800356c <_malloc_r>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	1ccd      	adds	r5, r1, #3
 8003570:	f025 0503 	bic.w	r5, r5, #3
 8003574:	3508      	adds	r5, #8
 8003576:	2d0c      	cmp	r5, #12
 8003578:	bf38      	it	cc
 800357a:	250c      	movcc	r5, #12
 800357c:	2d00      	cmp	r5, #0
 800357e:	4606      	mov	r6, r0
 8003580:	db01      	blt.n	8003586 <_malloc_r+0x1a>
 8003582:	42a9      	cmp	r1, r5
 8003584:	d903      	bls.n	800358e <_malloc_r+0x22>
 8003586:	230c      	movs	r3, #12
 8003588:	6033      	str	r3, [r6, #0]
 800358a:	2000      	movs	r0, #0
 800358c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800358e:	f000 fcd5 	bl	8003f3c <__malloc_lock>
 8003592:	4921      	ldr	r1, [pc, #132]	; (8003618 <_malloc_r+0xac>)
 8003594:	680a      	ldr	r2, [r1, #0]
 8003596:	4614      	mov	r4, r2
 8003598:	b99c      	cbnz	r4, 80035c2 <_malloc_r+0x56>
 800359a:	4f20      	ldr	r7, [pc, #128]	; (800361c <_malloc_r+0xb0>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b923      	cbnz	r3, 80035aa <_malloc_r+0x3e>
 80035a0:	4621      	mov	r1, r4
 80035a2:	4630      	mov	r0, r6
 80035a4:	f000 fb72 	bl	8003c8c <_sbrk_r>
 80035a8:	6038      	str	r0, [r7, #0]
 80035aa:	4629      	mov	r1, r5
 80035ac:	4630      	mov	r0, r6
 80035ae:	f000 fb6d 	bl	8003c8c <_sbrk_r>
 80035b2:	1c43      	adds	r3, r0, #1
 80035b4:	d123      	bne.n	80035fe <_malloc_r+0x92>
 80035b6:	230c      	movs	r3, #12
 80035b8:	6033      	str	r3, [r6, #0]
 80035ba:	4630      	mov	r0, r6
 80035bc:	f000 fcc4 	bl	8003f48 <__malloc_unlock>
 80035c0:	e7e3      	b.n	800358a <_malloc_r+0x1e>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	1b5b      	subs	r3, r3, r5
 80035c6:	d417      	bmi.n	80035f8 <_malloc_r+0x8c>
 80035c8:	2b0b      	cmp	r3, #11
 80035ca:	d903      	bls.n	80035d4 <_malloc_r+0x68>
 80035cc:	6023      	str	r3, [r4, #0]
 80035ce:	441c      	add	r4, r3
 80035d0:	6025      	str	r5, [r4, #0]
 80035d2:	e004      	b.n	80035de <_malloc_r+0x72>
 80035d4:	6863      	ldr	r3, [r4, #4]
 80035d6:	42a2      	cmp	r2, r4
 80035d8:	bf0c      	ite	eq
 80035da:	600b      	streq	r3, [r1, #0]
 80035dc:	6053      	strne	r3, [r2, #4]
 80035de:	4630      	mov	r0, r6
 80035e0:	f000 fcb2 	bl	8003f48 <__malloc_unlock>
 80035e4:	f104 000b 	add.w	r0, r4, #11
 80035e8:	1d23      	adds	r3, r4, #4
 80035ea:	f020 0007 	bic.w	r0, r0, #7
 80035ee:	1ac2      	subs	r2, r0, r3
 80035f0:	d0cc      	beq.n	800358c <_malloc_r+0x20>
 80035f2:	1a1b      	subs	r3, r3, r0
 80035f4:	50a3      	str	r3, [r4, r2]
 80035f6:	e7c9      	b.n	800358c <_malloc_r+0x20>
 80035f8:	4622      	mov	r2, r4
 80035fa:	6864      	ldr	r4, [r4, #4]
 80035fc:	e7cc      	b.n	8003598 <_malloc_r+0x2c>
 80035fe:	1cc4      	adds	r4, r0, #3
 8003600:	f024 0403 	bic.w	r4, r4, #3
 8003604:	42a0      	cmp	r0, r4
 8003606:	d0e3      	beq.n	80035d0 <_malloc_r+0x64>
 8003608:	1a21      	subs	r1, r4, r0
 800360a:	4630      	mov	r0, r6
 800360c:	f000 fb3e 	bl	8003c8c <_sbrk_r>
 8003610:	3001      	adds	r0, #1
 8003612:	d1dd      	bne.n	80035d0 <_malloc_r+0x64>
 8003614:	e7cf      	b.n	80035b6 <_malloc_r+0x4a>
 8003616:	bf00      	nop
 8003618:	200000b4 	.word	0x200000b4
 800361c:	200000b8 	.word	0x200000b8

08003620 <__sfputc_r>:
 8003620:	6893      	ldr	r3, [r2, #8]
 8003622:	3b01      	subs	r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	b410      	push	{r4}
 8003628:	6093      	str	r3, [r2, #8]
 800362a:	da08      	bge.n	800363e <__sfputc_r+0x1e>
 800362c:	6994      	ldr	r4, [r2, #24]
 800362e:	42a3      	cmp	r3, r4
 8003630:	db01      	blt.n	8003636 <__sfputc_r+0x16>
 8003632:	290a      	cmp	r1, #10
 8003634:	d103      	bne.n	800363e <__sfputc_r+0x1e>
 8003636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800363a:	f000 bb7b 	b.w	8003d34 <__swbuf_r>
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	1c58      	adds	r0, r3, #1
 8003642:	6010      	str	r0, [r2, #0]
 8003644:	7019      	strb	r1, [r3, #0]
 8003646:	4608      	mov	r0, r1
 8003648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800364c:	4770      	bx	lr

0800364e <__sfputs_r>:
 800364e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003650:	4606      	mov	r6, r0
 8003652:	460f      	mov	r7, r1
 8003654:	4614      	mov	r4, r2
 8003656:	18d5      	adds	r5, r2, r3
 8003658:	42ac      	cmp	r4, r5
 800365a:	d101      	bne.n	8003660 <__sfputs_r+0x12>
 800365c:	2000      	movs	r0, #0
 800365e:	e007      	b.n	8003670 <__sfputs_r+0x22>
 8003660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003664:	463a      	mov	r2, r7
 8003666:	4630      	mov	r0, r6
 8003668:	f7ff ffda 	bl	8003620 <__sfputc_r>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d1f3      	bne.n	8003658 <__sfputs_r+0xa>
 8003670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003674 <_vfiprintf_r>:
 8003674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003678:	460d      	mov	r5, r1
 800367a:	b09d      	sub	sp, #116	; 0x74
 800367c:	4614      	mov	r4, r2
 800367e:	4698      	mov	r8, r3
 8003680:	4606      	mov	r6, r0
 8003682:	b118      	cbz	r0, 800368c <_vfiprintf_r+0x18>
 8003684:	6983      	ldr	r3, [r0, #24]
 8003686:	b90b      	cbnz	r3, 800368c <_vfiprintf_r+0x18>
 8003688:	f7ff fe14 	bl	80032b4 <__sinit>
 800368c:	4b89      	ldr	r3, [pc, #548]	; (80038b4 <_vfiprintf_r+0x240>)
 800368e:	429d      	cmp	r5, r3
 8003690:	d11b      	bne.n	80036ca <_vfiprintf_r+0x56>
 8003692:	6875      	ldr	r5, [r6, #4]
 8003694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003696:	07d9      	lsls	r1, r3, #31
 8003698:	d405      	bmi.n	80036a6 <_vfiprintf_r+0x32>
 800369a:	89ab      	ldrh	r3, [r5, #12]
 800369c:	059a      	lsls	r2, r3, #22
 800369e:	d402      	bmi.n	80036a6 <_vfiprintf_r+0x32>
 80036a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036a2:	f7ff fea5 	bl	80033f0 <__retarget_lock_acquire_recursive>
 80036a6:	89ab      	ldrh	r3, [r5, #12]
 80036a8:	071b      	lsls	r3, r3, #28
 80036aa:	d501      	bpl.n	80036b0 <_vfiprintf_r+0x3c>
 80036ac:	692b      	ldr	r3, [r5, #16]
 80036ae:	b9eb      	cbnz	r3, 80036ec <_vfiprintf_r+0x78>
 80036b0:	4629      	mov	r1, r5
 80036b2:	4630      	mov	r0, r6
 80036b4:	f000 fb90 	bl	8003dd8 <__swsetup_r>
 80036b8:	b1c0      	cbz	r0, 80036ec <_vfiprintf_r+0x78>
 80036ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036bc:	07dc      	lsls	r4, r3, #31
 80036be:	d50e      	bpl.n	80036de <_vfiprintf_r+0x6a>
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	b01d      	add	sp, #116	; 0x74
 80036c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ca:	4b7b      	ldr	r3, [pc, #492]	; (80038b8 <_vfiprintf_r+0x244>)
 80036cc:	429d      	cmp	r5, r3
 80036ce:	d101      	bne.n	80036d4 <_vfiprintf_r+0x60>
 80036d0:	68b5      	ldr	r5, [r6, #8]
 80036d2:	e7df      	b.n	8003694 <_vfiprintf_r+0x20>
 80036d4:	4b79      	ldr	r3, [pc, #484]	; (80038bc <_vfiprintf_r+0x248>)
 80036d6:	429d      	cmp	r5, r3
 80036d8:	bf08      	it	eq
 80036da:	68f5      	ldreq	r5, [r6, #12]
 80036dc:	e7da      	b.n	8003694 <_vfiprintf_r+0x20>
 80036de:	89ab      	ldrh	r3, [r5, #12]
 80036e0:	0598      	lsls	r0, r3, #22
 80036e2:	d4ed      	bmi.n	80036c0 <_vfiprintf_r+0x4c>
 80036e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036e6:	f7ff fe84 	bl	80033f2 <__retarget_lock_release_recursive>
 80036ea:	e7e9      	b.n	80036c0 <_vfiprintf_r+0x4c>
 80036ec:	2300      	movs	r3, #0
 80036ee:	9309      	str	r3, [sp, #36]	; 0x24
 80036f0:	2320      	movs	r3, #32
 80036f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80036fa:	2330      	movs	r3, #48	; 0x30
 80036fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80038c0 <_vfiprintf_r+0x24c>
 8003700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003704:	f04f 0901 	mov.w	r9, #1
 8003708:	4623      	mov	r3, r4
 800370a:	469a      	mov	sl, r3
 800370c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003710:	b10a      	cbz	r2, 8003716 <_vfiprintf_r+0xa2>
 8003712:	2a25      	cmp	r2, #37	; 0x25
 8003714:	d1f9      	bne.n	800370a <_vfiprintf_r+0x96>
 8003716:	ebba 0b04 	subs.w	fp, sl, r4
 800371a:	d00b      	beq.n	8003734 <_vfiprintf_r+0xc0>
 800371c:	465b      	mov	r3, fp
 800371e:	4622      	mov	r2, r4
 8003720:	4629      	mov	r1, r5
 8003722:	4630      	mov	r0, r6
 8003724:	f7ff ff93 	bl	800364e <__sfputs_r>
 8003728:	3001      	adds	r0, #1
 800372a:	f000 80aa 	beq.w	8003882 <_vfiprintf_r+0x20e>
 800372e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003730:	445a      	add	r2, fp
 8003732:	9209      	str	r2, [sp, #36]	; 0x24
 8003734:	f89a 3000 	ldrb.w	r3, [sl]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a2 	beq.w	8003882 <_vfiprintf_r+0x20e>
 800373e:	2300      	movs	r3, #0
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003748:	f10a 0a01 	add.w	sl, sl, #1
 800374c:	9304      	str	r3, [sp, #16]
 800374e:	9307      	str	r3, [sp, #28]
 8003750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003754:	931a      	str	r3, [sp, #104]	; 0x68
 8003756:	4654      	mov	r4, sl
 8003758:	2205      	movs	r2, #5
 800375a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800375e:	4858      	ldr	r0, [pc, #352]	; (80038c0 <_vfiprintf_r+0x24c>)
 8003760:	f7fc fd36 	bl	80001d0 <memchr>
 8003764:	9a04      	ldr	r2, [sp, #16]
 8003766:	b9d8      	cbnz	r0, 80037a0 <_vfiprintf_r+0x12c>
 8003768:	06d1      	lsls	r1, r2, #27
 800376a:	bf44      	itt	mi
 800376c:	2320      	movmi	r3, #32
 800376e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003772:	0713      	lsls	r3, r2, #28
 8003774:	bf44      	itt	mi
 8003776:	232b      	movmi	r3, #43	; 0x2b
 8003778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800377c:	f89a 3000 	ldrb.w	r3, [sl]
 8003780:	2b2a      	cmp	r3, #42	; 0x2a
 8003782:	d015      	beq.n	80037b0 <_vfiprintf_r+0x13c>
 8003784:	9a07      	ldr	r2, [sp, #28]
 8003786:	4654      	mov	r4, sl
 8003788:	2000      	movs	r0, #0
 800378a:	f04f 0c0a 	mov.w	ip, #10
 800378e:	4621      	mov	r1, r4
 8003790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003794:	3b30      	subs	r3, #48	; 0x30
 8003796:	2b09      	cmp	r3, #9
 8003798:	d94e      	bls.n	8003838 <_vfiprintf_r+0x1c4>
 800379a:	b1b0      	cbz	r0, 80037ca <_vfiprintf_r+0x156>
 800379c:	9207      	str	r2, [sp, #28]
 800379e:	e014      	b.n	80037ca <_vfiprintf_r+0x156>
 80037a0:	eba0 0308 	sub.w	r3, r0, r8
 80037a4:	fa09 f303 	lsl.w	r3, r9, r3
 80037a8:	4313      	orrs	r3, r2
 80037aa:	9304      	str	r3, [sp, #16]
 80037ac:	46a2      	mov	sl, r4
 80037ae:	e7d2      	b.n	8003756 <_vfiprintf_r+0xe2>
 80037b0:	9b03      	ldr	r3, [sp, #12]
 80037b2:	1d19      	adds	r1, r3, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	9103      	str	r1, [sp, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bfbb      	ittet	lt
 80037bc:	425b      	neglt	r3, r3
 80037be:	f042 0202 	orrlt.w	r2, r2, #2
 80037c2:	9307      	strge	r3, [sp, #28]
 80037c4:	9307      	strlt	r3, [sp, #28]
 80037c6:	bfb8      	it	lt
 80037c8:	9204      	strlt	r2, [sp, #16]
 80037ca:	7823      	ldrb	r3, [r4, #0]
 80037cc:	2b2e      	cmp	r3, #46	; 0x2e
 80037ce:	d10c      	bne.n	80037ea <_vfiprintf_r+0x176>
 80037d0:	7863      	ldrb	r3, [r4, #1]
 80037d2:	2b2a      	cmp	r3, #42	; 0x2a
 80037d4:	d135      	bne.n	8003842 <_vfiprintf_r+0x1ce>
 80037d6:	9b03      	ldr	r3, [sp, #12]
 80037d8:	1d1a      	adds	r2, r3, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	9203      	str	r2, [sp, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bfb8      	it	lt
 80037e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80037e6:	3402      	adds	r4, #2
 80037e8:	9305      	str	r3, [sp, #20]
 80037ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80038d0 <_vfiprintf_r+0x25c>
 80037ee:	7821      	ldrb	r1, [r4, #0]
 80037f0:	2203      	movs	r2, #3
 80037f2:	4650      	mov	r0, sl
 80037f4:	f7fc fcec 	bl	80001d0 <memchr>
 80037f8:	b140      	cbz	r0, 800380c <_vfiprintf_r+0x198>
 80037fa:	2340      	movs	r3, #64	; 0x40
 80037fc:	eba0 000a 	sub.w	r0, r0, sl
 8003800:	fa03 f000 	lsl.w	r0, r3, r0
 8003804:	9b04      	ldr	r3, [sp, #16]
 8003806:	4303      	orrs	r3, r0
 8003808:	3401      	adds	r4, #1
 800380a:	9304      	str	r3, [sp, #16]
 800380c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003810:	482c      	ldr	r0, [pc, #176]	; (80038c4 <_vfiprintf_r+0x250>)
 8003812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003816:	2206      	movs	r2, #6
 8003818:	f7fc fcda 	bl	80001d0 <memchr>
 800381c:	2800      	cmp	r0, #0
 800381e:	d03f      	beq.n	80038a0 <_vfiprintf_r+0x22c>
 8003820:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <_vfiprintf_r+0x254>)
 8003822:	bb1b      	cbnz	r3, 800386c <_vfiprintf_r+0x1f8>
 8003824:	9b03      	ldr	r3, [sp, #12]
 8003826:	3307      	adds	r3, #7
 8003828:	f023 0307 	bic.w	r3, r3, #7
 800382c:	3308      	adds	r3, #8
 800382e:	9303      	str	r3, [sp, #12]
 8003830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003832:	443b      	add	r3, r7
 8003834:	9309      	str	r3, [sp, #36]	; 0x24
 8003836:	e767      	b.n	8003708 <_vfiprintf_r+0x94>
 8003838:	fb0c 3202 	mla	r2, ip, r2, r3
 800383c:	460c      	mov	r4, r1
 800383e:	2001      	movs	r0, #1
 8003840:	e7a5      	b.n	800378e <_vfiprintf_r+0x11a>
 8003842:	2300      	movs	r3, #0
 8003844:	3401      	adds	r4, #1
 8003846:	9305      	str	r3, [sp, #20]
 8003848:	4619      	mov	r1, r3
 800384a:	f04f 0c0a 	mov.w	ip, #10
 800384e:	4620      	mov	r0, r4
 8003850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003854:	3a30      	subs	r2, #48	; 0x30
 8003856:	2a09      	cmp	r2, #9
 8003858:	d903      	bls.n	8003862 <_vfiprintf_r+0x1ee>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0c5      	beq.n	80037ea <_vfiprintf_r+0x176>
 800385e:	9105      	str	r1, [sp, #20]
 8003860:	e7c3      	b.n	80037ea <_vfiprintf_r+0x176>
 8003862:	fb0c 2101 	mla	r1, ip, r1, r2
 8003866:	4604      	mov	r4, r0
 8003868:	2301      	movs	r3, #1
 800386a:	e7f0      	b.n	800384e <_vfiprintf_r+0x1da>
 800386c:	ab03      	add	r3, sp, #12
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	462a      	mov	r2, r5
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <_vfiprintf_r+0x258>)
 8003874:	a904      	add	r1, sp, #16
 8003876:	4630      	mov	r0, r6
 8003878:	f3af 8000 	nop.w
 800387c:	4607      	mov	r7, r0
 800387e:	1c78      	adds	r0, r7, #1
 8003880:	d1d6      	bne.n	8003830 <_vfiprintf_r+0x1bc>
 8003882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003884:	07d9      	lsls	r1, r3, #31
 8003886:	d405      	bmi.n	8003894 <_vfiprintf_r+0x220>
 8003888:	89ab      	ldrh	r3, [r5, #12]
 800388a:	059a      	lsls	r2, r3, #22
 800388c:	d402      	bmi.n	8003894 <_vfiprintf_r+0x220>
 800388e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003890:	f7ff fdaf 	bl	80033f2 <__retarget_lock_release_recursive>
 8003894:	89ab      	ldrh	r3, [r5, #12]
 8003896:	065b      	lsls	r3, r3, #25
 8003898:	f53f af12 	bmi.w	80036c0 <_vfiprintf_r+0x4c>
 800389c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800389e:	e711      	b.n	80036c4 <_vfiprintf_r+0x50>
 80038a0:	ab03      	add	r3, sp, #12
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	462a      	mov	r2, r5
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <_vfiprintf_r+0x258>)
 80038a8:	a904      	add	r1, sp, #16
 80038aa:	4630      	mov	r0, r6
 80038ac:	f000 f880 	bl	80039b0 <_printf_i>
 80038b0:	e7e4      	b.n	800387c <_vfiprintf_r+0x208>
 80038b2:	bf00      	nop
 80038b4:	0800405c 	.word	0x0800405c
 80038b8:	0800407c 	.word	0x0800407c
 80038bc:	0800403c 	.word	0x0800403c
 80038c0:	0800409c 	.word	0x0800409c
 80038c4:	080040a6 	.word	0x080040a6
 80038c8:	00000000 	.word	0x00000000
 80038cc:	0800364f 	.word	0x0800364f
 80038d0:	080040a2 	.word	0x080040a2

080038d4 <_printf_common>:
 80038d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d8:	4616      	mov	r6, r2
 80038da:	4699      	mov	r9, r3
 80038dc:	688a      	ldr	r2, [r1, #8]
 80038de:	690b      	ldr	r3, [r1, #16]
 80038e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bfb8      	it	lt
 80038e8:	4613      	movlt	r3, r2
 80038ea:	6033      	str	r3, [r6, #0]
 80038ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038f0:	4607      	mov	r7, r0
 80038f2:	460c      	mov	r4, r1
 80038f4:	b10a      	cbz	r2, 80038fa <_printf_common+0x26>
 80038f6:	3301      	adds	r3, #1
 80038f8:	6033      	str	r3, [r6, #0]
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	0699      	lsls	r1, r3, #26
 80038fe:	bf42      	ittt	mi
 8003900:	6833      	ldrmi	r3, [r6, #0]
 8003902:	3302      	addmi	r3, #2
 8003904:	6033      	strmi	r3, [r6, #0]
 8003906:	6825      	ldr	r5, [r4, #0]
 8003908:	f015 0506 	ands.w	r5, r5, #6
 800390c:	d106      	bne.n	800391c <_printf_common+0x48>
 800390e:	f104 0a19 	add.w	sl, r4, #25
 8003912:	68e3      	ldr	r3, [r4, #12]
 8003914:	6832      	ldr	r2, [r6, #0]
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	42ab      	cmp	r3, r5
 800391a:	dc26      	bgt.n	800396a <_printf_common+0x96>
 800391c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003920:	1e13      	subs	r3, r2, #0
 8003922:	6822      	ldr	r2, [r4, #0]
 8003924:	bf18      	it	ne
 8003926:	2301      	movne	r3, #1
 8003928:	0692      	lsls	r2, r2, #26
 800392a:	d42b      	bmi.n	8003984 <_printf_common+0xb0>
 800392c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003930:	4649      	mov	r1, r9
 8003932:	4638      	mov	r0, r7
 8003934:	47c0      	blx	r8
 8003936:	3001      	adds	r0, #1
 8003938:	d01e      	beq.n	8003978 <_printf_common+0xa4>
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	68e5      	ldr	r5, [r4, #12]
 800393e:	6832      	ldr	r2, [r6, #0]
 8003940:	f003 0306 	and.w	r3, r3, #6
 8003944:	2b04      	cmp	r3, #4
 8003946:	bf08      	it	eq
 8003948:	1aad      	subeq	r5, r5, r2
 800394a:	68a3      	ldr	r3, [r4, #8]
 800394c:	6922      	ldr	r2, [r4, #16]
 800394e:	bf0c      	ite	eq
 8003950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003954:	2500      	movne	r5, #0
 8003956:	4293      	cmp	r3, r2
 8003958:	bfc4      	itt	gt
 800395a:	1a9b      	subgt	r3, r3, r2
 800395c:	18ed      	addgt	r5, r5, r3
 800395e:	2600      	movs	r6, #0
 8003960:	341a      	adds	r4, #26
 8003962:	42b5      	cmp	r5, r6
 8003964:	d11a      	bne.n	800399c <_printf_common+0xc8>
 8003966:	2000      	movs	r0, #0
 8003968:	e008      	b.n	800397c <_printf_common+0xa8>
 800396a:	2301      	movs	r3, #1
 800396c:	4652      	mov	r2, sl
 800396e:	4649      	mov	r1, r9
 8003970:	4638      	mov	r0, r7
 8003972:	47c0      	blx	r8
 8003974:	3001      	adds	r0, #1
 8003976:	d103      	bne.n	8003980 <_printf_common+0xac>
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003980:	3501      	adds	r5, #1
 8003982:	e7c6      	b.n	8003912 <_printf_common+0x3e>
 8003984:	18e1      	adds	r1, r4, r3
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	2030      	movs	r0, #48	; 0x30
 800398a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800398e:	4422      	add	r2, r4
 8003990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003998:	3302      	adds	r3, #2
 800399a:	e7c7      	b.n	800392c <_printf_common+0x58>
 800399c:	2301      	movs	r3, #1
 800399e:	4622      	mov	r2, r4
 80039a0:	4649      	mov	r1, r9
 80039a2:	4638      	mov	r0, r7
 80039a4:	47c0      	blx	r8
 80039a6:	3001      	adds	r0, #1
 80039a8:	d0e6      	beq.n	8003978 <_printf_common+0xa4>
 80039aa:	3601      	adds	r6, #1
 80039ac:	e7d9      	b.n	8003962 <_printf_common+0x8e>
	...

080039b0 <_printf_i>:
 80039b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039b4:	460c      	mov	r4, r1
 80039b6:	4691      	mov	r9, r2
 80039b8:	7e27      	ldrb	r7, [r4, #24]
 80039ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039bc:	2f78      	cmp	r7, #120	; 0x78
 80039be:	4680      	mov	r8, r0
 80039c0:	469a      	mov	sl, r3
 80039c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039c6:	d807      	bhi.n	80039d8 <_printf_i+0x28>
 80039c8:	2f62      	cmp	r7, #98	; 0x62
 80039ca:	d80a      	bhi.n	80039e2 <_printf_i+0x32>
 80039cc:	2f00      	cmp	r7, #0
 80039ce:	f000 80d8 	beq.w	8003b82 <_printf_i+0x1d2>
 80039d2:	2f58      	cmp	r7, #88	; 0x58
 80039d4:	f000 80a3 	beq.w	8003b1e <_printf_i+0x16e>
 80039d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039e0:	e03a      	b.n	8003a58 <_printf_i+0xa8>
 80039e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039e6:	2b15      	cmp	r3, #21
 80039e8:	d8f6      	bhi.n	80039d8 <_printf_i+0x28>
 80039ea:	a001      	add	r0, pc, #4	; (adr r0, 80039f0 <_printf_i+0x40>)
 80039ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80039f0:	08003a49 	.word	0x08003a49
 80039f4:	08003a5d 	.word	0x08003a5d
 80039f8:	080039d9 	.word	0x080039d9
 80039fc:	080039d9 	.word	0x080039d9
 8003a00:	080039d9 	.word	0x080039d9
 8003a04:	080039d9 	.word	0x080039d9
 8003a08:	08003a5d 	.word	0x08003a5d
 8003a0c:	080039d9 	.word	0x080039d9
 8003a10:	080039d9 	.word	0x080039d9
 8003a14:	080039d9 	.word	0x080039d9
 8003a18:	080039d9 	.word	0x080039d9
 8003a1c:	08003b69 	.word	0x08003b69
 8003a20:	08003a8d 	.word	0x08003a8d
 8003a24:	08003b4b 	.word	0x08003b4b
 8003a28:	080039d9 	.word	0x080039d9
 8003a2c:	080039d9 	.word	0x080039d9
 8003a30:	08003b8b 	.word	0x08003b8b
 8003a34:	080039d9 	.word	0x080039d9
 8003a38:	08003a8d 	.word	0x08003a8d
 8003a3c:	080039d9 	.word	0x080039d9
 8003a40:	080039d9 	.word	0x080039d9
 8003a44:	08003b53 	.word	0x08003b53
 8003a48:	680b      	ldr	r3, [r1, #0]
 8003a4a:	1d1a      	adds	r2, r3, #4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	600a      	str	r2, [r1, #0]
 8003a50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0a3      	b.n	8003ba4 <_printf_i+0x1f4>
 8003a5c:	6825      	ldr	r5, [r4, #0]
 8003a5e:	6808      	ldr	r0, [r1, #0]
 8003a60:	062e      	lsls	r6, r5, #24
 8003a62:	f100 0304 	add.w	r3, r0, #4
 8003a66:	d50a      	bpl.n	8003a7e <_printf_i+0xce>
 8003a68:	6805      	ldr	r5, [r0, #0]
 8003a6a:	600b      	str	r3, [r1, #0]
 8003a6c:	2d00      	cmp	r5, #0
 8003a6e:	da03      	bge.n	8003a78 <_printf_i+0xc8>
 8003a70:	232d      	movs	r3, #45	; 0x2d
 8003a72:	426d      	negs	r5, r5
 8003a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a78:	485e      	ldr	r0, [pc, #376]	; (8003bf4 <_printf_i+0x244>)
 8003a7a:	230a      	movs	r3, #10
 8003a7c:	e019      	b.n	8003ab2 <_printf_i+0x102>
 8003a7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a82:	6805      	ldr	r5, [r0, #0]
 8003a84:	600b      	str	r3, [r1, #0]
 8003a86:	bf18      	it	ne
 8003a88:	b22d      	sxthne	r5, r5
 8003a8a:	e7ef      	b.n	8003a6c <_printf_i+0xbc>
 8003a8c:	680b      	ldr	r3, [r1, #0]
 8003a8e:	6825      	ldr	r5, [r4, #0]
 8003a90:	1d18      	adds	r0, r3, #4
 8003a92:	6008      	str	r0, [r1, #0]
 8003a94:	0628      	lsls	r0, r5, #24
 8003a96:	d501      	bpl.n	8003a9c <_printf_i+0xec>
 8003a98:	681d      	ldr	r5, [r3, #0]
 8003a9a:	e002      	b.n	8003aa2 <_printf_i+0xf2>
 8003a9c:	0669      	lsls	r1, r5, #25
 8003a9e:	d5fb      	bpl.n	8003a98 <_printf_i+0xe8>
 8003aa0:	881d      	ldrh	r5, [r3, #0]
 8003aa2:	4854      	ldr	r0, [pc, #336]	; (8003bf4 <_printf_i+0x244>)
 8003aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2308      	moveq	r3, #8
 8003aaa:	230a      	movne	r3, #10
 8003aac:	2100      	movs	r1, #0
 8003aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ab2:	6866      	ldr	r6, [r4, #4]
 8003ab4:	60a6      	str	r6, [r4, #8]
 8003ab6:	2e00      	cmp	r6, #0
 8003ab8:	bfa2      	ittt	ge
 8003aba:	6821      	ldrge	r1, [r4, #0]
 8003abc:	f021 0104 	bicge.w	r1, r1, #4
 8003ac0:	6021      	strge	r1, [r4, #0]
 8003ac2:	b90d      	cbnz	r5, 8003ac8 <_printf_i+0x118>
 8003ac4:	2e00      	cmp	r6, #0
 8003ac6:	d04d      	beq.n	8003b64 <_printf_i+0x1b4>
 8003ac8:	4616      	mov	r6, r2
 8003aca:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ace:	fb03 5711 	mls	r7, r3, r1, r5
 8003ad2:	5dc7      	ldrb	r7, [r0, r7]
 8003ad4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ad8:	462f      	mov	r7, r5
 8003ada:	42bb      	cmp	r3, r7
 8003adc:	460d      	mov	r5, r1
 8003ade:	d9f4      	bls.n	8003aca <_printf_i+0x11a>
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d10b      	bne.n	8003afc <_printf_i+0x14c>
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	07df      	lsls	r7, r3, #31
 8003ae8:	d508      	bpl.n	8003afc <_printf_i+0x14c>
 8003aea:	6923      	ldr	r3, [r4, #16]
 8003aec:	6861      	ldr	r1, [r4, #4]
 8003aee:	4299      	cmp	r1, r3
 8003af0:	bfde      	ittt	le
 8003af2:	2330      	movle	r3, #48	; 0x30
 8003af4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003af8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003afc:	1b92      	subs	r2, r2, r6
 8003afe:	6122      	str	r2, [r4, #16]
 8003b00:	f8cd a000 	str.w	sl, [sp]
 8003b04:	464b      	mov	r3, r9
 8003b06:	aa03      	add	r2, sp, #12
 8003b08:	4621      	mov	r1, r4
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	f7ff fee2 	bl	80038d4 <_printf_common>
 8003b10:	3001      	adds	r0, #1
 8003b12:	d14c      	bne.n	8003bae <_printf_i+0x1fe>
 8003b14:	f04f 30ff 	mov.w	r0, #4294967295
 8003b18:	b004      	add	sp, #16
 8003b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b1e:	4835      	ldr	r0, [pc, #212]	; (8003bf4 <_printf_i+0x244>)
 8003b20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	680e      	ldr	r6, [r1, #0]
 8003b28:	061f      	lsls	r7, r3, #24
 8003b2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b2e:	600e      	str	r6, [r1, #0]
 8003b30:	d514      	bpl.n	8003b5c <_printf_i+0x1ac>
 8003b32:	07d9      	lsls	r1, r3, #31
 8003b34:	bf44      	itt	mi
 8003b36:	f043 0320 	orrmi.w	r3, r3, #32
 8003b3a:	6023      	strmi	r3, [r4, #0]
 8003b3c:	b91d      	cbnz	r5, 8003b46 <_printf_i+0x196>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	f023 0320 	bic.w	r3, r3, #32
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	2310      	movs	r3, #16
 8003b48:	e7b0      	b.n	8003aac <_printf_i+0xfc>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	f043 0320 	orr.w	r3, r3, #32
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	2378      	movs	r3, #120	; 0x78
 8003b54:	4828      	ldr	r0, [pc, #160]	; (8003bf8 <_printf_i+0x248>)
 8003b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b5a:	e7e3      	b.n	8003b24 <_printf_i+0x174>
 8003b5c:	065e      	lsls	r6, r3, #25
 8003b5e:	bf48      	it	mi
 8003b60:	b2ad      	uxthmi	r5, r5
 8003b62:	e7e6      	b.n	8003b32 <_printf_i+0x182>
 8003b64:	4616      	mov	r6, r2
 8003b66:	e7bb      	b.n	8003ae0 <_printf_i+0x130>
 8003b68:	680b      	ldr	r3, [r1, #0]
 8003b6a:	6826      	ldr	r6, [r4, #0]
 8003b6c:	6960      	ldr	r0, [r4, #20]
 8003b6e:	1d1d      	adds	r5, r3, #4
 8003b70:	600d      	str	r5, [r1, #0]
 8003b72:	0635      	lsls	r5, r6, #24
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	d501      	bpl.n	8003b7c <_printf_i+0x1cc>
 8003b78:	6018      	str	r0, [r3, #0]
 8003b7a:	e002      	b.n	8003b82 <_printf_i+0x1d2>
 8003b7c:	0671      	lsls	r1, r6, #25
 8003b7e:	d5fb      	bpl.n	8003b78 <_printf_i+0x1c8>
 8003b80:	8018      	strh	r0, [r3, #0]
 8003b82:	2300      	movs	r3, #0
 8003b84:	6123      	str	r3, [r4, #16]
 8003b86:	4616      	mov	r6, r2
 8003b88:	e7ba      	b.n	8003b00 <_printf_i+0x150>
 8003b8a:	680b      	ldr	r3, [r1, #0]
 8003b8c:	1d1a      	adds	r2, r3, #4
 8003b8e:	600a      	str	r2, [r1, #0]
 8003b90:	681e      	ldr	r6, [r3, #0]
 8003b92:	6862      	ldr	r2, [r4, #4]
 8003b94:	2100      	movs	r1, #0
 8003b96:	4630      	mov	r0, r6
 8003b98:	f7fc fb1a 	bl	80001d0 <memchr>
 8003b9c:	b108      	cbz	r0, 8003ba2 <_printf_i+0x1f2>
 8003b9e:	1b80      	subs	r0, r0, r6
 8003ba0:	6060      	str	r0, [r4, #4]
 8003ba2:	6863      	ldr	r3, [r4, #4]
 8003ba4:	6123      	str	r3, [r4, #16]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bac:	e7a8      	b.n	8003b00 <_printf_i+0x150>
 8003bae:	6923      	ldr	r3, [r4, #16]
 8003bb0:	4632      	mov	r2, r6
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	4640      	mov	r0, r8
 8003bb6:	47d0      	blx	sl
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d0ab      	beq.n	8003b14 <_printf_i+0x164>
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	079b      	lsls	r3, r3, #30
 8003bc0:	d413      	bmi.n	8003bea <_printf_i+0x23a>
 8003bc2:	68e0      	ldr	r0, [r4, #12]
 8003bc4:	9b03      	ldr	r3, [sp, #12]
 8003bc6:	4298      	cmp	r0, r3
 8003bc8:	bfb8      	it	lt
 8003bca:	4618      	movlt	r0, r3
 8003bcc:	e7a4      	b.n	8003b18 <_printf_i+0x168>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	4632      	mov	r2, r6
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	47d0      	blx	sl
 8003bd8:	3001      	adds	r0, #1
 8003bda:	d09b      	beq.n	8003b14 <_printf_i+0x164>
 8003bdc:	3501      	adds	r5, #1
 8003bde:	68e3      	ldr	r3, [r4, #12]
 8003be0:	9903      	ldr	r1, [sp, #12]
 8003be2:	1a5b      	subs	r3, r3, r1
 8003be4:	42ab      	cmp	r3, r5
 8003be6:	dcf2      	bgt.n	8003bce <_printf_i+0x21e>
 8003be8:	e7eb      	b.n	8003bc2 <_printf_i+0x212>
 8003bea:	2500      	movs	r5, #0
 8003bec:	f104 0619 	add.w	r6, r4, #25
 8003bf0:	e7f5      	b.n	8003bde <_printf_i+0x22e>
 8003bf2:	bf00      	nop
 8003bf4:	080040ad 	.word	0x080040ad
 8003bf8:	080040be 	.word	0x080040be

08003bfc <_putc_r>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	460d      	mov	r5, r1
 8003c00:	4614      	mov	r4, r2
 8003c02:	4606      	mov	r6, r0
 8003c04:	b118      	cbz	r0, 8003c0e <_putc_r+0x12>
 8003c06:	6983      	ldr	r3, [r0, #24]
 8003c08:	b90b      	cbnz	r3, 8003c0e <_putc_r+0x12>
 8003c0a:	f7ff fb53 	bl	80032b4 <__sinit>
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <_putc_r+0x84>)
 8003c10:	429c      	cmp	r4, r3
 8003c12:	d124      	bne.n	8003c5e <_putc_r+0x62>
 8003c14:	6874      	ldr	r4, [r6, #4]
 8003c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c18:	07d8      	lsls	r0, r3, #31
 8003c1a:	d405      	bmi.n	8003c28 <_putc_r+0x2c>
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	0599      	lsls	r1, r3, #22
 8003c20:	d402      	bmi.n	8003c28 <_putc_r+0x2c>
 8003c22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c24:	f7ff fbe4 	bl	80033f0 <__retarget_lock_acquire_recursive>
 8003c28:	68a3      	ldr	r3, [r4, #8]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	60a3      	str	r3, [r4, #8]
 8003c30:	da05      	bge.n	8003c3e <_putc_r+0x42>
 8003c32:	69a2      	ldr	r2, [r4, #24]
 8003c34:	4293      	cmp	r3, r2
 8003c36:	db1c      	blt.n	8003c72 <_putc_r+0x76>
 8003c38:	b2eb      	uxtb	r3, r5
 8003c3a:	2b0a      	cmp	r3, #10
 8003c3c:	d019      	beq.n	8003c72 <_putc_r+0x76>
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	6022      	str	r2, [r4, #0]
 8003c44:	701d      	strb	r5, [r3, #0]
 8003c46:	b2ed      	uxtb	r5, r5
 8003c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c4a:	07da      	lsls	r2, r3, #31
 8003c4c:	d405      	bmi.n	8003c5a <_putc_r+0x5e>
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	059b      	lsls	r3, r3, #22
 8003c52:	d402      	bmi.n	8003c5a <_putc_r+0x5e>
 8003c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c56:	f7ff fbcc 	bl	80033f2 <__retarget_lock_release_recursive>
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <_putc_r+0x88>)
 8003c60:	429c      	cmp	r4, r3
 8003c62:	d101      	bne.n	8003c68 <_putc_r+0x6c>
 8003c64:	68b4      	ldr	r4, [r6, #8]
 8003c66:	e7d6      	b.n	8003c16 <_putc_r+0x1a>
 8003c68:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <_putc_r+0x8c>)
 8003c6a:	429c      	cmp	r4, r3
 8003c6c:	bf08      	it	eq
 8003c6e:	68f4      	ldreq	r4, [r6, #12]
 8003c70:	e7d1      	b.n	8003c16 <_putc_r+0x1a>
 8003c72:	4629      	mov	r1, r5
 8003c74:	4622      	mov	r2, r4
 8003c76:	4630      	mov	r0, r6
 8003c78:	f000 f85c 	bl	8003d34 <__swbuf_r>
 8003c7c:	4605      	mov	r5, r0
 8003c7e:	e7e3      	b.n	8003c48 <_putc_r+0x4c>
 8003c80:	0800405c 	.word	0x0800405c
 8003c84:	0800407c 	.word	0x0800407c
 8003c88:	0800403c 	.word	0x0800403c

08003c8c <_sbrk_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4d06      	ldr	r5, [pc, #24]	; (8003ca8 <_sbrk_r+0x1c>)
 8003c90:	2300      	movs	r3, #0
 8003c92:	4604      	mov	r4, r0
 8003c94:	4608      	mov	r0, r1
 8003c96:	602b      	str	r3, [r5, #0]
 8003c98:	f7fe ffda 	bl	8002c50 <_sbrk>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d102      	bne.n	8003ca6 <_sbrk_r+0x1a>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	b103      	cbz	r3, 8003ca6 <_sbrk_r+0x1a>
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	200000e8 	.word	0x200000e8

08003cac <__sread>:
 8003cac:	b510      	push	{r4, lr}
 8003cae:	460c      	mov	r4, r1
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	f000 f94e 	bl	8003f54 <_read_r>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	bfab      	itete	ge
 8003cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc0:	181b      	addge	r3, r3, r0
 8003cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cc6:	bfac      	ite	ge
 8003cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cca:	81a3      	strhlt	r3, [r4, #12]
 8003ccc:	bd10      	pop	{r4, pc}

08003cce <__swrite>:
 8003cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd2:	461f      	mov	r7, r3
 8003cd4:	898b      	ldrh	r3, [r1, #12]
 8003cd6:	05db      	lsls	r3, r3, #23
 8003cd8:	4605      	mov	r5, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	4616      	mov	r6, r2
 8003cde:	d505      	bpl.n	8003cec <__swrite+0x1e>
 8003ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f000 f916 	bl	8003f18 <_lseek_r>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf6:	81a3      	strh	r3, [r4, #12]
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d02:	f7fc bd6b 	b.w	80007dc <_write_r>

08003d06 <__sseek>:
 8003d06:	b510      	push	{r4, lr}
 8003d08:	460c      	mov	r4, r1
 8003d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0e:	f000 f903 	bl	8003f18 <_lseek_r>
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	bf15      	itete	ne
 8003d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d22:	81a3      	strheq	r3, [r4, #12]
 8003d24:	bf18      	it	ne
 8003d26:	81a3      	strhne	r3, [r4, #12]
 8003d28:	bd10      	pop	{r4, pc}

08003d2a <__sclose>:
 8003d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d2e:	f000 b8c1 	b.w	8003eb4 <_close_r>
	...

08003d34 <__swbuf_r>:
 8003d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d36:	460e      	mov	r6, r1
 8003d38:	4614      	mov	r4, r2
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	b118      	cbz	r0, 8003d46 <__swbuf_r+0x12>
 8003d3e:	6983      	ldr	r3, [r0, #24]
 8003d40:	b90b      	cbnz	r3, 8003d46 <__swbuf_r+0x12>
 8003d42:	f7ff fab7 	bl	80032b4 <__sinit>
 8003d46:	4b21      	ldr	r3, [pc, #132]	; (8003dcc <__swbuf_r+0x98>)
 8003d48:	429c      	cmp	r4, r3
 8003d4a:	d12b      	bne.n	8003da4 <__swbuf_r+0x70>
 8003d4c:	686c      	ldr	r4, [r5, #4]
 8003d4e:	69a3      	ldr	r3, [r4, #24]
 8003d50:	60a3      	str	r3, [r4, #8]
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	071a      	lsls	r2, r3, #28
 8003d56:	d52f      	bpl.n	8003db8 <__swbuf_r+0x84>
 8003d58:	6923      	ldr	r3, [r4, #16]
 8003d5a:	b36b      	cbz	r3, 8003db8 <__swbuf_r+0x84>
 8003d5c:	6923      	ldr	r3, [r4, #16]
 8003d5e:	6820      	ldr	r0, [r4, #0]
 8003d60:	1ac0      	subs	r0, r0, r3
 8003d62:	6963      	ldr	r3, [r4, #20]
 8003d64:	b2f6      	uxtb	r6, r6
 8003d66:	4283      	cmp	r3, r0
 8003d68:	4637      	mov	r7, r6
 8003d6a:	dc04      	bgt.n	8003d76 <__swbuf_r+0x42>
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	4628      	mov	r0, r5
 8003d70:	f7ff fa0c 	bl	800318c <_fflush_r>
 8003d74:	bb30      	cbnz	r0, 8003dc4 <__swbuf_r+0x90>
 8003d76:	68a3      	ldr	r3, [r4, #8]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	60a3      	str	r3, [r4, #8]
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	6022      	str	r2, [r4, #0]
 8003d82:	701e      	strb	r6, [r3, #0]
 8003d84:	6963      	ldr	r3, [r4, #20]
 8003d86:	3001      	adds	r0, #1
 8003d88:	4283      	cmp	r3, r0
 8003d8a:	d004      	beq.n	8003d96 <__swbuf_r+0x62>
 8003d8c:	89a3      	ldrh	r3, [r4, #12]
 8003d8e:	07db      	lsls	r3, r3, #31
 8003d90:	d506      	bpl.n	8003da0 <__swbuf_r+0x6c>
 8003d92:	2e0a      	cmp	r6, #10
 8003d94:	d104      	bne.n	8003da0 <__swbuf_r+0x6c>
 8003d96:	4621      	mov	r1, r4
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f7ff f9f7 	bl	800318c <_fflush_r>
 8003d9e:	b988      	cbnz	r0, 8003dc4 <__swbuf_r+0x90>
 8003da0:	4638      	mov	r0, r7
 8003da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <__swbuf_r+0x9c>)
 8003da6:	429c      	cmp	r4, r3
 8003da8:	d101      	bne.n	8003dae <__swbuf_r+0x7a>
 8003daa:	68ac      	ldr	r4, [r5, #8]
 8003dac:	e7cf      	b.n	8003d4e <__swbuf_r+0x1a>
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <__swbuf_r+0xa0>)
 8003db0:	429c      	cmp	r4, r3
 8003db2:	bf08      	it	eq
 8003db4:	68ec      	ldreq	r4, [r5, #12]
 8003db6:	e7ca      	b.n	8003d4e <__swbuf_r+0x1a>
 8003db8:	4621      	mov	r1, r4
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 f80c 	bl	8003dd8 <__swsetup_r>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d0cb      	beq.n	8003d5c <__swbuf_r+0x28>
 8003dc4:	f04f 37ff 	mov.w	r7, #4294967295
 8003dc8:	e7ea      	b.n	8003da0 <__swbuf_r+0x6c>
 8003dca:	bf00      	nop
 8003dcc:	0800405c 	.word	0x0800405c
 8003dd0:	0800407c 	.word	0x0800407c
 8003dd4:	0800403c 	.word	0x0800403c

08003dd8 <__swsetup_r>:
 8003dd8:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <__swsetup_r+0xcc>)
 8003dda:	b570      	push	{r4, r5, r6, lr}
 8003ddc:	681d      	ldr	r5, [r3, #0]
 8003dde:	4606      	mov	r6, r0
 8003de0:	460c      	mov	r4, r1
 8003de2:	b125      	cbz	r5, 8003dee <__swsetup_r+0x16>
 8003de4:	69ab      	ldr	r3, [r5, #24]
 8003de6:	b913      	cbnz	r3, 8003dee <__swsetup_r+0x16>
 8003de8:	4628      	mov	r0, r5
 8003dea:	f7ff fa63 	bl	80032b4 <__sinit>
 8003dee:	4b2e      	ldr	r3, [pc, #184]	; (8003ea8 <__swsetup_r+0xd0>)
 8003df0:	429c      	cmp	r4, r3
 8003df2:	d10f      	bne.n	8003e14 <__swsetup_r+0x3c>
 8003df4:	686c      	ldr	r4, [r5, #4]
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dfc:	0719      	lsls	r1, r3, #28
 8003dfe:	d42c      	bmi.n	8003e5a <__swsetup_r+0x82>
 8003e00:	06dd      	lsls	r5, r3, #27
 8003e02:	d411      	bmi.n	8003e28 <__swsetup_r+0x50>
 8003e04:	2309      	movs	r3, #9
 8003e06:	6033      	str	r3, [r6, #0]
 8003e08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e0c:	81a3      	strh	r3, [r4, #12]
 8003e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e12:	e03e      	b.n	8003e92 <__swsetup_r+0xba>
 8003e14:	4b25      	ldr	r3, [pc, #148]	; (8003eac <__swsetup_r+0xd4>)
 8003e16:	429c      	cmp	r4, r3
 8003e18:	d101      	bne.n	8003e1e <__swsetup_r+0x46>
 8003e1a:	68ac      	ldr	r4, [r5, #8]
 8003e1c:	e7eb      	b.n	8003df6 <__swsetup_r+0x1e>
 8003e1e:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <__swsetup_r+0xd8>)
 8003e20:	429c      	cmp	r4, r3
 8003e22:	bf08      	it	eq
 8003e24:	68ec      	ldreq	r4, [r5, #12]
 8003e26:	e7e6      	b.n	8003df6 <__swsetup_r+0x1e>
 8003e28:	0758      	lsls	r0, r3, #29
 8003e2a:	d512      	bpl.n	8003e52 <__swsetup_r+0x7a>
 8003e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e2e:	b141      	cbz	r1, 8003e42 <__swsetup_r+0x6a>
 8003e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e34:	4299      	cmp	r1, r3
 8003e36:	d002      	beq.n	8003e3e <__swsetup_r+0x66>
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f7ff fb47 	bl	80034cc <_free_r>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	6363      	str	r3, [r4, #52]	; 0x34
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e48:	81a3      	strh	r3, [r4, #12]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	6063      	str	r3, [r4, #4]
 8003e4e:	6923      	ldr	r3, [r4, #16]
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	f043 0308 	orr.w	r3, r3, #8
 8003e58:	81a3      	strh	r3, [r4, #12]
 8003e5a:	6923      	ldr	r3, [r4, #16]
 8003e5c:	b94b      	cbnz	r3, 8003e72 <__swsetup_r+0x9a>
 8003e5e:	89a3      	ldrh	r3, [r4, #12]
 8003e60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e68:	d003      	beq.n	8003e72 <__swsetup_r+0x9a>
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7ff fae5 	bl	800343c <__smakebuf_r>
 8003e72:	89a0      	ldrh	r0, [r4, #12]
 8003e74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e78:	f010 0301 	ands.w	r3, r0, #1
 8003e7c:	d00a      	beq.n	8003e94 <__swsetup_r+0xbc>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60a3      	str	r3, [r4, #8]
 8003e82:	6963      	ldr	r3, [r4, #20]
 8003e84:	425b      	negs	r3, r3
 8003e86:	61a3      	str	r3, [r4, #24]
 8003e88:	6923      	ldr	r3, [r4, #16]
 8003e8a:	b943      	cbnz	r3, 8003e9e <__swsetup_r+0xc6>
 8003e8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e90:	d1ba      	bne.n	8003e08 <__swsetup_r+0x30>
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
 8003e94:	0781      	lsls	r1, r0, #30
 8003e96:	bf58      	it	pl
 8003e98:	6963      	ldrpl	r3, [r4, #20]
 8003e9a:	60a3      	str	r3, [r4, #8]
 8003e9c:	e7f4      	b.n	8003e88 <__swsetup_r+0xb0>
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	e7f7      	b.n	8003e92 <__swsetup_r+0xba>
 8003ea2:	bf00      	nop
 8003ea4:	2000002c 	.word	0x2000002c
 8003ea8:	0800405c 	.word	0x0800405c
 8003eac:	0800407c 	.word	0x0800407c
 8003eb0:	0800403c 	.word	0x0800403c

08003eb4 <_close_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4d06      	ldr	r5, [pc, #24]	; (8003ed0 <_close_r+0x1c>)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	f7fe fe91 	bl	8002be6 <_close>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_close_r+0x1a>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_close_r+0x1a>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	200000e8 	.word	0x200000e8

08003ed4 <_fstat_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4d07      	ldr	r5, [pc, #28]	; (8003ef4 <_fstat_r+0x20>)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	4604      	mov	r4, r0
 8003edc:	4608      	mov	r0, r1
 8003ede:	4611      	mov	r1, r2
 8003ee0:	602b      	str	r3, [r5, #0]
 8003ee2:	f7fe fe8c 	bl	8002bfe <_fstat>
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	d102      	bne.n	8003ef0 <_fstat_r+0x1c>
 8003eea:	682b      	ldr	r3, [r5, #0]
 8003eec:	b103      	cbz	r3, 8003ef0 <_fstat_r+0x1c>
 8003eee:	6023      	str	r3, [r4, #0]
 8003ef0:	bd38      	pop	{r3, r4, r5, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200000e8 	.word	0x200000e8

08003ef8 <_isatty_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4d06      	ldr	r5, [pc, #24]	; (8003f14 <_isatty_r+0x1c>)
 8003efc:	2300      	movs	r3, #0
 8003efe:	4604      	mov	r4, r0
 8003f00:	4608      	mov	r0, r1
 8003f02:	602b      	str	r3, [r5, #0]
 8003f04:	f7fe fe8b 	bl	8002c1e <_isatty>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_isatty_r+0x1a>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_isatty_r+0x1a>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	200000e8 	.word	0x200000e8

08003f18 <_lseek_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4d07      	ldr	r5, [pc, #28]	; (8003f38 <_lseek_r+0x20>)
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	4608      	mov	r0, r1
 8003f20:	4611      	mov	r1, r2
 8003f22:	2200      	movs	r2, #0
 8003f24:	602a      	str	r2, [r5, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	f7fe fe84 	bl	8002c34 <_lseek>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	d102      	bne.n	8003f36 <_lseek_r+0x1e>
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	b103      	cbz	r3, 8003f36 <_lseek_r+0x1e>
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	200000e8 	.word	0x200000e8

08003f3c <__malloc_lock>:
 8003f3c:	4801      	ldr	r0, [pc, #4]	; (8003f44 <__malloc_lock+0x8>)
 8003f3e:	f7ff ba57 	b.w	80033f0 <__retarget_lock_acquire_recursive>
 8003f42:	bf00      	nop
 8003f44:	200000e1 	.word	0x200000e1

08003f48 <__malloc_unlock>:
 8003f48:	4801      	ldr	r0, [pc, #4]	; (8003f50 <__malloc_unlock+0x8>)
 8003f4a:	f7ff ba52 	b.w	80033f2 <__retarget_lock_release_recursive>
 8003f4e:	bf00      	nop
 8003f50:	200000e1 	.word	0x200000e1

08003f54 <_read_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4d07      	ldr	r5, [pc, #28]	; (8003f74 <_read_r+0x20>)
 8003f58:	4604      	mov	r4, r0
 8003f5a:	4608      	mov	r0, r1
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	2200      	movs	r2, #0
 8003f60:	602a      	str	r2, [r5, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f7fe fe22 	bl	8002bac <_read>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_read_r+0x1e>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_read_r+0x1e>
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	200000e8 	.word	0x200000e8

08003f78 <_init>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	bf00      	nop
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr

08003f84 <_fini>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	bf00      	nop
 8003f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8a:	bc08      	pop	{r3}
 8003f8c:	469e      	mov	lr, r3
 8003f8e:	4770      	bx	lr
